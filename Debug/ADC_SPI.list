
ADC_SPI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009e58  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ac  0800a0f8  0800a0f8  0000b0f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800a1a4  0800a1a4  0000b1a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800a1ac  0800a1ac  0000b1ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800a1b0  0800a1b0  0000b1b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         0000006c  24000000  0800a1b4  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000003e4  2400006c  0800a220  0000c06c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24000450  0800a220  0000c450  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000c06c  2**0
                  CONTENTS, READONLY
 10 .debug_info   000149ec  00000000  00000000  0000c09a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002b53  00000000  00000000  00020a86  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000dd8  00000000  00000000  000235e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000a8e  00000000  00000000  000243b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00038907  00000000  00000000  00024e46  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00016f32  00000000  00000000  0005d74d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0015ff9d  00000000  00000000  0007467f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001d461c  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00003f88  00000000  00000000  001d4660  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000063  00000000  00000000  001d85e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	2400006c 	.word	0x2400006c
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800a0e0 	.word	0x0800a0e0

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000070 	.word	0x24000070
 80002dc:	0800a0e0 	.word	0x0800a0e0

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b988 	b.w	80006b8 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	468e      	mov	lr, r1
 80003c8:	4604      	mov	r4, r0
 80003ca:	4688      	mov	r8, r1
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d14a      	bne.n	8000466 <__udivmoddi4+0xa6>
 80003d0:	428a      	cmp	r2, r1
 80003d2:	4617      	mov	r7, r2
 80003d4:	d962      	bls.n	800049c <__udivmoddi4+0xdc>
 80003d6:	fab2 f682 	clz	r6, r2
 80003da:	b14e      	cbz	r6, 80003f0 <__udivmoddi4+0x30>
 80003dc:	f1c6 0320 	rsb	r3, r6, #32
 80003e0:	fa01 f806 	lsl.w	r8, r1, r6
 80003e4:	fa20 f303 	lsr.w	r3, r0, r3
 80003e8:	40b7      	lsls	r7, r6
 80003ea:	ea43 0808 	orr.w	r8, r3, r8
 80003ee:	40b4      	lsls	r4, r6
 80003f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003f4:	fa1f fc87 	uxth.w	ip, r7
 80003f8:	fbb8 f1fe 	udiv	r1, r8, lr
 80003fc:	0c23      	lsrs	r3, r4, #16
 80003fe:	fb0e 8811 	mls	r8, lr, r1, r8
 8000402:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000406:	fb01 f20c 	mul.w	r2, r1, ip
 800040a:	429a      	cmp	r2, r3
 800040c:	d909      	bls.n	8000422 <__udivmoddi4+0x62>
 800040e:	18fb      	adds	r3, r7, r3
 8000410:	f101 30ff 	add.w	r0, r1, #4294967295
 8000414:	f080 80ea 	bcs.w	80005ec <__udivmoddi4+0x22c>
 8000418:	429a      	cmp	r2, r3
 800041a:	f240 80e7 	bls.w	80005ec <__udivmoddi4+0x22c>
 800041e:	3902      	subs	r1, #2
 8000420:	443b      	add	r3, r7
 8000422:	1a9a      	subs	r2, r3, r2
 8000424:	b2a3      	uxth	r3, r4
 8000426:	fbb2 f0fe 	udiv	r0, r2, lr
 800042a:	fb0e 2210 	mls	r2, lr, r0, r2
 800042e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000432:	fb00 fc0c 	mul.w	ip, r0, ip
 8000436:	459c      	cmp	ip, r3
 8000438:	d909      	bls.n	800044e <__udivmoddi4+0x8e>
 800043a:	18fb      	adds	r3, r7, r3
 800043c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000440:	f080 80d6 	bcs.w	80005f0 <__udivmoddi4+0x230>
 8000444:	459c      	cmp	ip, r3
 8000446:	f240 80d3 	bls.w	80005f0 <__udivmoddi4+0x230>
 800044a:	443b      	add	r3, r7
 800044c:	3802      	subs	r0, #2
 800044e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000452:	eba3 030c 	sub.w	r3, r3, ip
 8000456:	2100      	movs	r1, #0
 8000458:	b11d      	cbz	r5, 8000462 <__udivmoddi4+0xa2>
 800045a:	40f3      	lsrs	r3, r6
 800045c:	2200      	movs	r2, #0
 800045e:	e9c5 3200 	strd	r3, r2, [r5]
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	428b      	cmp	r3, r1
 8000468:	d905      	bls.n	8000476 <__udivmoddi4+0xb6>
 800046a:	b10d      	cbz	r5, 8000470 <__udivmoddi4+0xb0>
 800046c:	e9c5 0100 	strd	r0, r1, [r5]
 8000470:	2100      	movs	r1, #0
 8000472:	4608      	mov	r0, r1
 8000474:	e7f5      	b.n	8000462 <__udivmoddi4+0xa2>
 8000476:	fab3 f183 	clz	r1, r3
 800047a:	2900      	cmp	r1, #0
 800047c:	d146      	bne.n	800050c <__udivmoddi4+0x14c>
 800047e:	4573      	cmp	r3, lr
 8000480:	d302      	bcc.n	8000488 <__udivmoddi4+0xc8>
 8000482:	4282      	cmp	r2, r0
 8000484:	f200 8105 	bhi.w	8000692 <__udivmoddi4+0x2d2>
 8000488:	1a84      	subs	r4, r0, r2
 800048a:	eb6e 0203 	sbc.w	r2, lr, r3
 800048e:	2001      	movs	r0, #1
 8000490:	4690      	mov	r8, r2
 8000492:	2d00      	cmp	r5, #0
 8000494:	d0e5      	beq.n	8000462 <__udivmoddi4+0xa2>
 8000496:	e9c5 4800 	strd	r4, r8, [r5]
 800049a:	e7e2      	b.n	8000462 <__udivmoddi4+0xa2>
 800049c:	2a00      	cmp	r2, #0
 800049e:	f000 8090 	beq.w	80005c2 <__udivmoddi4+0x202>
 80004a2:	fab2 f682 	clz	r6, r2
 80004a6:	2e00      	cmp	r6, #0
 80004a8:	f040 80a4 	bne.w	80005f4 <__udivmoddi4+0x234>
 80004ac:	1a8a      	subs	r2, r1, r2
 80004ae:	0c03      	lsrs	r3, r0, #16
 80004b0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004b4:	b280      	uxth	r0, r0
 80004b6:	b2bc      	uxth	r4, r7
 80004b8:	2101      	movs	r1, #1
 80004ba:	fbb2 fcfe 	udiv	ip, r2, lr
 80004be:	fb0e 221c 	mls	r2, lr, ip, r2
 80004c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80004c6:	fb04 f20c 	mul.w	r2, r4, ip
 80004ca:	429a      	cmp	r2, r3
 80004cc:	d907      	bls.n	80004de <__udivmoddi4+0x11e>
 80004ce:	18fb      	adds	r3, r7, r3
 80004d0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80004d4:	d202      	bcs.n	80004dc <__udivmoddi4+0x11c>
 80004d6:	429a      	cmp	r2, r3
 80004d8:	f200 80e0 	bhi.w	800069c <__udivmoddi4+0x2dc>
 80004dc:	46c4      	mov	ip, r8
 80004de:	1a9b      	subs	r3, r3, r2
 80004e0:	fbb3 f2fe 	udiv	r2, r3, lr
 80004e4:	fb0e 3312 	mls	r3, lr, r2, r3
 80004e8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80004ec:	fb02 f404 	mul.w	r4, r2, r4
 80004f0:	429c      	cmp	r4, r3
 80004f2:	d907      	bls.n	8000504 <__udivmoddi4+0x144>
 80004f4:	18fb      	adds	r3, r7, r3
 80004f6:	f102 30ff 	add.w	r0, r2, #4294967295
 80004fa:	d202      	bcs.n	8000502 <__udivmoddi4+0x142>
 80004fc:	429c      	cmp	r4, r3
 80004fe:	f200 80ca 	bhi.w	8000696 <__udivmoddi4+0x2d6>
 8000502:	4602      	mov	r2, r0
 8000504:	1b1b      	subs	r3, r3, r4
 8000506:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800050a:	e7a5      	b.n	8000458 <__udivmoddi4+0x98>
 800050c:	f1c1 0620 	rsb	r6, r1, #32
 8000510:	408b      	lsls	r3, r1
 8000512:	fa22 f706 	lsr.w	r7, r2, r6
 8000516:	431f      	orrs	r7, r3
 8000518:	fa0e f401 	lsl.w	r4, lr, r1
 800051c:	fa20 f306 	lsr.w	r3, r0, r6
 8000520:	fa2e fe06 	lsr.w	lr, lr, r6
 8000524:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000528:	4323      	orrs	r3, r4
 800052a:	fa00 f801 	lsl.w	r8, r0, r1
 800052e:	fa1f fc87 	uxth.w	ip, r7
 8000532:	fbbe f0f9 	udiv	r0, lr, r9
 8000536:	0c1c      	lsrs	r4, r3, #16
 8000538:	fb09 ee10 	mls	lr, r9, r0, lr
 800053c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000540:	fb00 fe0c 	mul.w	lr, r0, ip
 8000544:	45a6      	cmp	lr, r4
 8000546:	fa02 f201 	lsl.w	r2, r2, r1
 800054a:	d909      	bls.n	8000560 <__udivmoddi4+0x1a0>
 800054c:	193c      	adds	r4, r7, r4
 800054e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000552:	f080 809c 	bcs.w	800068e <__udivmoddi4+0x2ce>
 8000556:	45a6      	cmp	lr, r4
 8000558:	f240 8099 	bls.w	800068e <__udivmoddi4+0x2ce>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	eba4 040e 	sub.w	r4, r4, lr
 8000564:	fa1f fe83 	uxth.w	lr, r3
 8000568:	fbb4 f3f9 	udiv	r3, r4, r9
 800056c:	fb09 4413 	mls	r4, r9, r3, r4
 8000570:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000574:	fb03 fc0c 	mul.w	ip, r3, ip
 8000578:	45a4      	cmp	ip, r4
 800057a:	d908      	bls.n	800058e <__udivmoddi4+0x1ce>
 800057c:	193c      	adds	r4, r7, r4
 800057e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000582:	f080 8082 	bcs.w	800068a <__udivmoddi4+0x2ca>
 8000586:	45a4      	cmp	ip, r4
 8000588:	d97f      	bls.n	800068a <__udivmoddi4+0x2ca>
 800058a:	3b02      	subs	r3, #2
 800058c:	443c      	add	r4, r7
 800058e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000592:	eba4 040c 	sub.w	r4, r4, ip
 8000596:	fba0 ec02 	umull	lr, ip, r0, r2
 800059a:	4564      	cmp	r4, ip
 800059c:	4673      	mov	r3, lr
 800059e:	46e1      	mov	r9, ip
 80005a0:	d362      	bcc.n	8000668 <__udivmoddi4+0x2a8>
 80005a2:	d05f      	beq.n	8000664 <__udivmoddi4+0x2a4>
 80005a4:	b15d      	cbz	r5, 80005be <__udivmoddi4+0x1fe>
 80005a6:	ebb8 0203 	subs.w	r2, r8, r3
 80005aa:	eb64 0409 	sbc.w	r4, r4, r9
 80005ae:	fa04 f606 	lsl.w	r6, r4, r6
 80005b2:	fa22 f301 	lsr.w	r3, r2, r1
 80005b6:	431e      	orrs	r6, r3
 80005b8:	40cc      	lsrs	r4, r1
 80005ba:	e9c5 6400 	strd	r6, r4, [r5]
 80005be:	2100      	movs	r1, #0
 80005c0:	e74f      	b.n	8000462 <__udivmoddi4+0xa2>
 80005c2:	fbb1 fcf2 	udiv	ip, r1, r2
 80005c6:	0c01      	lsrs	r1, r0, #16
 80005c8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80005cc:	b280      	uxth	r0, r0
 80005ce:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80005d2:	463b      	mov	r3, r7
 80005d4:	4638      	mov	r0, r7
 80005d6:	463c      	mov	r4, r7
 80005d8:	46b8      	mov	r8, r7
 80005da:	46be      	mov	lr, r7
 80005dc:	2620      	movs	r6, #32
 80005de:	fbb1 f1f7 	udiv	r1, r1, r7
 80005e2:	eba2 0208 	sub.w	r2, r2, r8
 80005e6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80005ea:	e766      	b.n	80004ba <__udivmoddi4+0xfa>
 80005ec:	4601      	mov	r1, r0
 80005ee:	e718      	b.n	8000422 <__udivmoddi4+0x62>
 80005f0:	4610      	mov	r0, r2
 80005f2:	e72c      	b.n	800044e <__udivmoddi4+0x8e>
 80005f4:	f1c6 0220 	rsb	r2, r6, #32
 80005f8:	fa2e f302 	lsr.w	r3, lr, r2
 80005fc:	40b7      	lsls	r7, r6
 80005fe:	40b1      	lsls	r1, r6
 8000600:	fa20 f202 	lsr.w	r2, r0, r2
 8000604:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000608:	430a      	orrs	r2, r1
 800060a:	fbb3 f8fe 	udiv	r8, r3, lr
 800060e:	b2bc      	uxth	r4, r7
 8000610:	fb0e 3318 	mls	r3, lr, r8, r3
 8000614:	0c11      	lsrs	r1, r2, #16
 8000616:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800061a:	fb08 f904 	mul.w	r9, r8, r4
 800061e:	40b0      	lsls	r0, r6
 8000620:	4589      	cmp	r9, r1
 8000622:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000626:	b280      	uxth	r0, r0
 8000628:	d93e      	bls.n	80006a8 <__udivmoddi4+0x2e8>
 800062a:	1879      	adds	r1, r7, r1
 800062c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000630:	d201      	bcs.n	8000636 <__udivmoddi4+0x276>
 8000632:	4589      	cmp	r9, r1
 8000634:	d81f      	bhi.n	8000676 <__udivmoddi4+0x2b6>
 8000636:	eba1 0109 	sub.w	r1, r1, r9
 800063a:	fbb1 f9fe 	udiv	r9, r1, lr
 800063e:	fb09 f804 	mul.w	r8, r9, r4
 8000642:	fb0e 1119 	mls	r1, lr, r9, r1
 8000646:	b292      	uxth	r2, r2
 8000648:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800064c:	4542      	cmp	r2, r8
 800064e:	d229      	bcs.n	80006a4 <__udivmoddi4+0x2e4>
 8000650:	18ba      	adds	r2, r7, r2
 8000652:	f109 31ff 	add.w	r1, r9, #4294967295
 8000656:	d2c4      	bcs.n	80005e2 <__udivmoddi4+0x222>
 8000658:	4542      	cmp	r2, r8
 800065a:	d2c2      	bcs.n	80005e2 <__udivmoddi4+0x222>
 800065c:	f1a9 0102 	sub.w	r1, r9, #2
 8000660:	443a      	add	r2, r7
 8000662:	e7be      	b.n	80005e2 <__udivmoddi4+0x222>
 8000664:	45f0      	cmp	r8, lr
 8000666:	d29d      	bcs.n	80005a4 <__udivmoddi4+0x1e4>
 8000668:	ebbe 0302 	subs.w	r3, lr, r2
 800066c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000670:	3801      	subs	r0, #1
 8000672:	46e1      	mov	r9, ip
 8000674:	e796      	b.n	80005a4 <__udivmoddi4+0x1e4>
 8000676:	eba7 0909 	sub.w	r9, r7, r9
 800067a:	4449      	add	r1, r9
 800067c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000680:	fbb1 f9fe 	udiv	r9, r1, lr
 8000684:	fb09 f804 	mul.w	r8, r9, r4
 8000688:	e7db      	b.n	8000642 <__udivmoddi4+0x282>
 800068a:	4673      	mov	r3, lr
 800068c:	e77f      	b.n	800058e <__udivmoddi4+0x1ce>
 800068e:	4650      	mov	r0, sl
 8000690:	e766      	b.n	8000560 <__udivmoddi4+0x1a0>
 8000692:	4608      	mov	r0, r1
 8000694:	e6fd      	b.n	8000492 <__udivmoddi4+0xd2>
 8000696:	443b      	add	r3, r7
 8000698:	3a02      	subs	r2, #2
 800069a:	e733      	b.n	8000504 <__udivmoddi4+0x144>
 800069c:	f1ac 0c02 	sub.w	ip, ip, #2
 80006a0:	443b      	add	r3, r7
 80006a2:	e71c      	b.n	80004de <__udivmoddi4+0x11e>
 80006a4:	4649      	mov	r1, r9
 80006a6:	e79c      	b.n	80005e2 <__udivmoddi4+0x222>
 80006a8:	eba1 0109 	sub.w	r1, r1, r9
 80006ac:	46c4      	mov	ip, r8
 80006ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80006b2:	fb09 f804 	mul.w	r8, r9, r4
 80006b6:	e7c4      	b.n	8000642 <__udivmoddi4+0x282>

080006b8 <__aeabi_idiv0>:
 80006b8:	4770      	bx	lr
 80006ba:	bf00      	nop

080006bc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b082      	sub	sp, #8
 80006c0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80006c2:	4b11      	ldr	r3, [pc, #68]	@ (8000708 <MX_DMA_Init+0x4c>)
 80006c4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80006c8:	4a0f      	ldr	r2, [pc, #60]	@ (8000708 <MX_DMA_Init+0x4c>)
 80006ca:	f043 0301 	orr.w	r3, r3, #1
 80006ce:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80006d2:	4b0d      	ldr	r3, [pc, #52]	@ (8000708 <MX_DMA_Init+0x4c>)
 80006d4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80006d8:	f003 0301 	and.w	r3, r3, #1
 80006dc:	607b      	str	r3, [r7, #4]
 80006de:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80006e0:	2200      	movs	r2, #0
 80006e2:	2100      	movs	r1, #0
 80006e4:	200b      	movs	r0, #11
 80006e6:	f000 ffe2 	bl	80016ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80006ea:	200b      	movs	r0, #11
 80006ec:	f000 fff9 	bl	80016e2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 80006f0:	2200      	movs	r2, #0
 80006f2:	2100      	movs	r1, #0
 80006f4:	200c      	movs	r0, #12
 80006f6:	f000 ffda 	bl	80016ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80006fa:	200c      	movs	r0, #12
 80006fc:	f000 fff1 	bl	80016e2 <HAL_NVIC_EnableIRQ>

}
 8000700:	bf00      	nop
 8000702:	3708      	adds	r7, #8
 8000704:	46bd      	mov	sp, r7
 8000706:	bd80      	pop	{r7, pc}
 8000708:	58024400 	.word	0x58024400

0800070c <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b08e      	sub	sp, #56	@ 0x38
 8000710:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000712:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000716:	2200      	movs	r2, #0
 8000718:	601a      	str	r2, [r3, #0]
 800071a:	605a      	str	r2, [r3, #4]
 800071c:	609a      	str	r2, [r3, #8]
 800071e:	60da      	str	r2, [r3, #12]
 8000720:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000722:	4b85      	ldr	r3, [pc, #532]	@ (8000938 <MX_GPIO_Init+0x22c>)
 8000724:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000728:	4a83      	ldr	r2, [pc, #524]	@ (8000938 <MX_GPIO_Init+0x22c>)
 800072a:	f043 0310 	orr.w	r3, r3, #16
 800072e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000732:	4b81      	ldr	r3, [pc, #516]	@ (8000938 <MX_GPIO_Init+0x22c>)
 8000734:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000738:	f003 0310 	and.w	r3, r3, #16
 800073c:	623b      	str	r3, [r7, #32]
 800073e:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000740:	4b7d      	ldr	r3, [pc, #500]	@ (8000938 <MX_GPIO_Init+0x22c>)
 8000742:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000746:	4a7c      	ldr	r2, [pc, #496]	@ (8000938 <MX_GPIO_Init+0x22c>)
 8000748:	f043 0304 	orr.w	r3, r3, #4
 800074c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000750:	4b79      	ldr	r3, [pc, #484]	@ (8000938 <MX_GPIO_Init+0x22c>)
 8000752:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000756:	f003 0304 	and.w	r3, r3, #4
 800075a:	61fb      	str	r3, [r7, #28]
 800075c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800075e:	4b76      	ldr	r3, [pc, #472]	@ (8000938 <MX_GPIO_Init+0x22c>)
 8000760:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000764:	4a74      	ldr	r2, [pc, #464]	@ (8000938 <MX_GPIO_Init+0x22c>)
 8000766:	f043 0320 	orr.w	r3, r3, #32
 800076a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800076e:	4b72      	ldr	r3, [pc, #456]	@ (8000938 <MX_GPIO_Init+0x22c>)
 8000770:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000774:	f003 0320 	and.w	r3, r3, #32
 8000778:	61bb      	str	r3, [r7, #24]
 800077a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800077c:	4b6e      	ldr	r3, [pc, #440]	@ (8000938 <MX_GPIO_Init+0x22c>)
 800077e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000782:	4a6d      	ldr	r2, [pc, #436]	@ (8000938 <MX_GPIO_Init+0x22c>)
 8000784:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000788:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800078c:	4b6a      	ldr	r3, [pc, #424]	@ (8000938 <MX_GPIO_Init+0x22c>)
 800078e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000792:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000796:	617b      	str	r3, [r7, #20]
 8000798:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800079a:	4b67      	ldr	r3, [pc, #412]	@ (8000938 <MX_GPIO_Init+0x22c>)
 800079c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007a0:	4a65      	ldr	r2, [pc, #404]	@ (8000938 <MX_GPIO_Init+0x22c>)
 80007a2:	f043 0301 	orr.w	r3, r3, #1
 80007a6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80007aa:	4b63      	ldr	r3, [pc, #396]	@ (8000938 <MX_GPIO_Init+0x22c>)
 80007ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007b0:	f003 0301 	and.w	r3, r3, #1
 80007b4:	613b      	str	r3, [r7, #16]
 80007b6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007b8:	4b5f      	ldr	r3, [pc, #380]	@ (8000938 <MX_GPIO_Init+0x22c>)
 80007ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007be:	4a5e      	ldr	r2, [pc, #376]	@ (8000938 <MX_GPIO_Init+0x22c>)
 80007c0:	f043 0302 	orr.w	r3, r3, #2
 80007c4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80007c8:	4b5b      	ldr	r3, [pc, #364]	@ (8000938 <MX_GPIO_Init+0x22c>)
 80007ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007ce:	f003 0302 	and.w	r3, r3, #2
 80007d2:	60fb      	str	r3, [r7, #12]
 80007d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80007d6:	4b58      	ldr	r3, [pc, #352]	@ (8000938 <MX_GPIO_Init+0x22c>)
 80007d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007dc:	4a56      	ldr	r2, [pc, #344]	@ (8000938 <MX_GPIO_Init+0x22c>)
 80007de:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80007e2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80007e6:	4b54      	ldr	r3, [pc, #336]	@ (8000938 <MX_GPIO_Init+0x22c>)
 80007e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80007f0:	60bb      	str	r3, [r7, #8]
 80007f2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007f4:	4b50      	ldr	r3, [pc, #320]	@ (8000938 <MX_GPIO_Init+0x22c>)
 80007f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007fa:	4a4f      	ldr	r2, [pc, #316]	@ (8000938 <MX_GPIO_Init+0x22c>)
 80007fc:	f043 0308 	orr.w	r3, r3, #8
 8000800:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000804:	4b4c      	ldr	r3, [pc, #304]	@ (8000938 <MX_GPIO_Init+0x22c>)
 8000806:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800080a:	f003 0308 	and.w	r3, r3, #8
 800080e:	607b      	str	r3, [r7, #4]
 8000810:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(btn_GPIO_Port, btn_Pin, GPIO_PIN_RESET);
 8000812:	2200      	movs	r2, #0
 8000814:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000818:	4848      	ldr	r0, [pc, #288]	@ (800093c <MX_GPIO_Init+0x230>)
 800081a:	f003 fbcb 	bl	8003fb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ADC_CS_GPIO_Port, ADC_CS_Pin, GPIO_PIN_RESET);
 800081e:	2200      	movs	r2, #0
 8000820:	2110      	movs	r1, #16
 8000822:	4847      	ldr	r0, [pc, #284]	@ (8000940 <MX_GPIO_Init+0x234>)
 8000824:	f003 fbc6 	bl	8003fb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 PE4 PE5
                           PE6 PE7 PE8 PE9
                           PE10 PE11 PE12 PE13
                           PE14 PE15 PE0 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 8000828:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800082c:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800082e:	2303      	movs	r3, #3
 8000830:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000832:	2300      	movs	r3, #0
 8000834:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000836:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800083a:	4619      	mov	r1, r3
 800083c:	4841      	ldr	r0, [pc, #260]	@ (8000944 <MX_GPIO_Init+0x238>)
 800083e:	f003 fa09 	bl	8003c54 <HAL_GPIO_Init>

  /*Configure GPIO pin : btn_Pin */
  GPIO_InitStruct.Pin = btn_Pin;
 8000842:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000846:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000848:	2301      	movs	r3, #1
 800084a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800084c:	2300      	movs	r3, #0
 800084e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000850:	2300      	movs	r3, #0
 8000852:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(btn_GPIO_Port, &GPIO_InitStruct);
 8000854:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000858:	4619      	mov	r1, r3
 800085a:	4838      	ldr	r0, [pc, #224]	@ (800093c <MX_GPIO_Init+0x230>)
 800085c:	f003 f9fa 	bl	8003c54 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC14 PC15 PC0 PC1
                           PC2 PC3 PC4 PC5
                           PC6 PC7 PC8 PC9
                           PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
 8000860:	f64d 73ff 	movw	r3, #57343	@ 0xdfff
 8000864:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000866:	2303      	movs	r3, #3
 8000868:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086a:	2300      	movs	r3, #0
 800086c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800086e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000872:	4619      	mov	r1, r3
 8000874:	4831      	ldr	r0, [pc, #196]	@ (800093c <MX_GPIO_Init+0x230>)
 8000876:	f003 f9ed 	bl	8003c54 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF1 PF2 PF3
                           PF4 PF5 PF6 PF7
                           PF8 PF9 PF10 PF11
                           PF12 PF13 PF14 PF15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800087a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800087e:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000880:	2303      	movs	r3, #3
 8000882:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000884:	2300      	movs	r3, #0
 8000886:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000888:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800088c:	4619      	mov	r1, r3
 800088e:	482e      	ldr	r0, [pc, #184]	@ (8000948 <MX_GPIO_Init+0x23c>)
 8000890:	f003 f9e0 	bl	8003c54 <HAL_GPIO_Init>

  /*Configure GPIO pins : PH0 PH1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000894:	2303      	movs	r3, #3
 8000896:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000898:	2303      	movs	r3, #3
 800089a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089c:	2300      	movs	r3, #0
 800089e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80008a0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008a4:	4619      	mov	r1, r3
 80008a6:	4829      	ldr	r0, [pc, #164]	@ (800094c <MX_GPIO_Init+0x240>)
 80008a8:	f003 f9d4 	bl	8003c54 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3
                           PA7 PA8 PA9 PA10
                           PA11 PA12 PA13 PA14
                           PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80008ac:	f64f 738f 	movw	r3, #65423	@ 0xff8f
 80008b0:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80008b2:	2303      	movs	r3, #3
 80008b4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b6:	2300      	movs	r3, #0
 80008b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008ba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008be:	4619      	mov	r1, r3
 80008c0:	481f      	ldr	r0, [pc, #124]	@ (8000940 <MX_GPIO_Init+0x234>)
 80008c2:	f003 f9c7 	bl	8003c54 <HAL_GPIO_Init>

  /*Configure GPIO pin : ADC_CS_Pin */
  GPIO_InitStruct.Pin = ADC_CS_Pin;
 80008c6:	2310      	movs	r3, #16
 80008c8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ca:	2301      	movs	r3, #1
 80008cc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ce:	2300      	movs	r3, #0
 80008d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d2:	2300      	movs	r3, #0
 80008d4:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(ADC_CS_GPIO_Port, &GPIO_InitStruct);
 80008d6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008da:	4619      	mov	r1, r3
 80008dc:	4818      	ldr	r0, [pc, #96]	@ (8000940 <MX_GPIO_Init+0x234>)
 80008de:	f003 f9b9 	bl	8003c54 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB11 PB12 PB13 PB14
                           PB15 PB3 PB4 PB5
                           PB6 PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 80008e2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80008e6:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80008e8:	2303      	movs	r3, #3
 80008ea:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ec:	2300      	movs	r3, #0
 80008ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008f0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008f4:	4619      	mov	r1, r3
 80008f6:	4816      	ldr	r0, [pc, #88]	@ (8000950 <MX_GPIO_Init+0x244>)
 80008f8:	f003 f9ac 	bl	8003c54 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG0 PG1 PG2 PG3
                           PG4 PG5 PG6 PG7
                           PG8 PG9 PG10 PG11
                           PG12 PG13 PG14 PG15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80008fc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000900:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000902:	2303      	movs	r3, #3
 8000904:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000906:	2300      	movs	r3, #0
 8000908:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800090a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800090e:	4619      	mov	r1, r3
 8000910:	4810      	ldr	r0, [pc, #64]	@ (8000954 <MX_GPIO_Init+0x248>)
 8000912:	f003 f99f 	bl	8003c54 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD10 PD11 PD12 PD13
                           PD14 PD15 PD0 PD1
                           PD2 PD3 PD4 PD5
                           PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 8000916:	f64f 43ff 	movw	r3, #64767	@ 0xfcff
 800091a:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
                          |GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800091c:	2303      	movs	r3, #3
 800091e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000920:	2300      	movs	r3, #0
 8000922:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000924:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000928:	4619      	mov	r1, r3
 800092a:	480b      	ldr	r0, [pc, #44]	@ (8000958 <MX_GPIO_Init+0x24c>)
 800092c:	f003 f992 	bl	8003c54 <HAL_GPIO_Init>

}
 8000930:	bf00      	nop
 8000932:	3738      	adds	r7, #56	@ 0x38
 8000934:	46bd      	mov	sp, r7
 8000936:	bd80      	pop	{r7, pc}
 8000938:	58024400 	.word	0x58024400
 800093c:	58020800 	.word	0x58020800
 8000940:	58020000 	.word	0x58020000
 8000944:	58021000 	.word	0x58021000
 8000948:	58021400 	.word	0x58021400
 800094c:	58021c00 	.word	0x58021c00
 8000950:	58020400 	.word	0x58020400
 8000954:	58021800 	.word	0x58021800
 8000958:	58020c00 	.word	0x58020c00

0800095c <ADC_SPI_Init>:
  * Esta função deve ser adaptada de acordo com o datasheet do seu ADC.
  * @param  None
  * @retval None
  */
void ADC_SPI_Init(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	af00      	add	r7, sp, #0
    // ou calibração. Use a comunicação SPI aqui para enviar esses comandos.
    // Lembre-se de controlar o pino CS (Chip Select) do seu ADC.

    // Exemplo de sequência (substitua pelos comandos reais do seu ADC!):
    // Desativa o CS (Chip Select) antes de começar (geralmente alto por padrão)
    HAL_GPIO_WritePin(ADC_CS_GPIO_Port, ADC_CS_Pin, GPIO_PIN_SET);
 8000960:	2201      	movs	r2, #1
 8000962:	2110      	movs	r1, #16
 8000964:	480a      	ldr	r0, [pc, #40]	@ (8000990 <ADC_SPI_Init+0x34>)
 8000966:	f003 fb25 	bl	8003fb4 <HAL_GPIO_WritePin>
    HAL_Delay(10); // Pequeno atraso
 800096a:	200a      	movs	r0, #10
 800096c:	f000 fd94 	bl	8001498 <HAL_Delay>

    // Ativa CS (nível baixo)
    HAL_GPIO_WritePin(ADC_CS_GPIO_Port, ADC_CS_Pin, GPIO_PIN_RESET);
 8000970:	2200      	movs	r2, #0
 8000972:	2110      	movs	r1, #16
 8000974:	4806      	ldr	r0, [pc, #24]	@ (8000990 <ADC_SPI_Init+0x34>)
 8000976:	f003 fb1d 	bl	8003fb4 <HAL_GPIO_WritePin>
    // Enviar comando de reset ou configuração (ex: para ADS1256, AD7124, etc.)
    // uint8_t reset_cmd = 0x06; // Exemplo de um comando de reset
    // HAL_SPI_Transmit(&hspi1, &reset_cmd, 1, HAL_MAX_DELAY);
    // Desativa CS
    HAL_GPIO_WritePin(ADC_CS_GPIO_Port, ADC_CS_Pin, GPIO_PIN_SET);
 800097a:	2201      	movs	r2, #1
 800097c:	2110      	movs	r1, #16
 800097e:	4804      	ldr	r0, [pc, #16]	@ (8000990 <ADC_SPI_Init+0x34>)
 8000980:	f003 fb18 	bl	8003fb4 <HAL_GPIO_WritePin>
    HAL_Delay(100); // Atraso após inicialização
 8000984:	2064      	movs	r0, #100	@ 0x64
 8000986:	f000 fd87 	bl	8001498 <HAL_Delay>

    // Você pode precisar de mais comandos aqui para configurar ganho, taxa de amostragem, etc.
    // Consulte o datasheet do seu ADC!
}
 800098a:	bf00      	nop
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	58020000 	.word	0x58020000

08000994 <ADC_SPI_ReadValue>:
  * Esta função deve ser adaptada de acordo com o datasheet do seu ADC.
  * @param  None
  * @retval Valor lido do ADC (uint32_t para acomodar até 32 bits).
  */
uint32_t ADC_SPI_ReadValue(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b086      	sub	sp, #24
 8000998:	af02      	add	r7, sp, #8
    // --- EXEMPLO GENÉRICO: ADAPTE PARA O SEU ADC SPI ESPECÍFICO ---
    uint8_t tx_dummy_byte = 0x00; // Byte dummy para iniciar a comunicação se necessário
 800099a:	2300      	movs	r3, #0
 800099c:	72fb      	strb	r3, [r7, #11]
    uint8_t rx_data[4];           // Buffer para receber dados (até 4 bytes para 32-bit ADC)
    uint32_t value = 0;
 800099e:	2300      	movs	r3, #0
 80009a0:	60fb      	str	r3, [r7, #12]

    // 1. Ativar o Chip Select (CS) - Nível baixo
    HAL_GPIO_WritePin(ADC_CS_GPIO_Port, ADC_CS_Pin, GPIO_PIN_RESET);
 80009a2:	2200      	movs	r2, #0
 80009a4:	2110      	movs	r1, #16
 80009a6:	480f      	ldr	r0, [pc, #60]	@ (80009e4 <ADC_SPI_ReadValue+0x50>)
 80009a8:	f003 fb04 	bl	8003fb4 <HAL_GPIO_WritePin>
    // 3. Receber os dados do ADC
    // Adapte o número de bytes a serem recebidos (ex: 3 para 24-bit, 2 para 16-bit).
    // Dependendo do seu ADC, você pode precisar de HAL_SPI_Receive ou HAL_SPI_TransmitReceive.
    // HAL_SPI_Receive(&hspi1, rx_data, 3, HAL_MAX_DELAY); // Exemplo para 3 bytes (24-bit ADC)
    // Ou, se o ADC precisa que você envie "dummy bytes" para clockar os dados:
    HAL_SPI_TransmitReceive(&hspi1, &tx_dummy_byte, rx_data, 3, HAL_MAX_DELAY); // 3 bytes de dados
 80009ac:	1d3a      	adds	r2, r7, #4
 80009ae:	f107 010b 	add.w	r1, r7, #11
 80009b2:	f04f 33ff 	mov.w	r3, #4294967295
 80009b6:	9300      	str	r3, [sp, #0]
 80009b8:	2303      	movs	r3, #3
 80009ba:	480b      	ldr	r0, [pc, #44]	@ (80009e8 <ADC_SPI_ReadValue+0x54>)
 80009bc:	f006 fa84 	bl	8006ec8 <HAL_SPI_TransmitReceive>

    // 4. Desativar o Chip Select (CS) - Nível alto
    HAL_GPIO_WritePin(ADC_CS_GPIO_Port, ADC_CS_Pin, GPIO_PIN_SET);
 80009c0:	2201      	movs	r2, #1
 80009c2:	2110      	movs	r1, #16
 80009c4:	4807      	ldr	r0, [pc, #28]	@ (80009e4 <ADC_SPI_ReadValue+0x50>)
 80009c6:	f003 faf5 	bl	8003fb4 <HAL_GPIO_WritePin>

    // 5. Reconstruir o valor lido a partir dos bytes recebidos
    // ESTA PARTE É CRÍTICA E DEPENDE DA ORDEM DE BYTES DO SEU ADC (MSB primeiro, LSB primeiro)
    // Exemplo para um ADC de 24 bits que envia MSB primeiro (Byte0, Byte1, Byte2):
    value = ( (uint32_t)rx_data[0] << 16 ) | ( (uint32_t)rx_data[1] << 8 ) | ( (uint32_t)rx_data[2] );
 80009ca:	793b      	ldrb	r3, [r7, #4]
 80009cc:	041a      	lsls	r2, r3, #16
 80009ce:	797b      	ldrb	r3, [r7, #5]
 80009d0:	021b      	lsls	r3, r3, #8
 80009d2:	4313      	orrs	r3, r2
 80009d4:	79ba      	ldrb	r2, [r7, #6]
 80009d6:	4313      	orrs	r3, r2
 80009d8:	60fb      	str	r3, [r7, #12]
    // Se for 16 bits:
    // value = ( (uint32_t)rx_data[0] << 8 ) | rx_data[1];

    return value;
 80009da:	68fb      	ldr	r3, [r7, #12]
}
 80009dc:	4618      	mov	r0, r3
 80009de:	3710      	adds	r7, #16
 80009e0:	46bd      	mov	sp, r7
 80009e2:	bd80      	pop	{r7, pc}
 80009e4:	58020000 	.word	0x58020000
 80009e8:	240000f0 	.word	0x240000f0

080009ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80009f0:	f000 f8c2 	bl	8000b78 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009f4:	f000 fcbe 	bl	8001374 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009f8:	f000 f842 	bl	8000a80 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009fc:	f7ff fe86 	bl	800070c <MX_GPIO_Init>
  MX_DMA_Init();
 8000a00:	f7ff fe5c 	bl	80006bc <MX_DMA_Init>
  MX_USART3_UART_Init();
 8000a04:	f000 fb52 	bl	80010ac <MX_USART3_UART_Init>
  MX_SPI1_Init();
 8000a08:	f000 f8e8 	bl	8000bdc <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  // Chame a função de inicialização do seu ADC SPI externo (se necessário)
  // Esta função pode enviar comandos de configuração para o ADC
  ADC_SPI_Init();
 8000a0c:	f7ff ffa6 	bl	800095c <ADC_SPI_Init>

  // Teste inicial da comunicação serial
  printf(msg, sizeof(msg), "Iniciando leitura ADC SPI...\r\n");
 8000a10:	4a16      	ldr	r2, [pc, #88]	@ (8000a6c <main+0x80>)
 8000a12:	2164      	movs	r1, #100	@ 0x64
 8000a14:	4816      	ldr	r0, [pc, #88]	@ (8000a70 <main+0x84>)
 8000a16:	f008 fcf7 	bl	8009408 <iprintf>
  HAL_UART_Transmit(&huart3, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8000a1a:	4815      	ldr	r0, [pc, #84]	@ (8000a70 <main+0x84>)
 8000a1c:	f7ff fc60 	bl	80002e0 <strlen>
 8000a20:	4603      	mov	r3, r0
 8000a22:	b29a      	uxth	r2, r3
 8000a24:	f04f 33ff 	mov.w	r3, #4294967295
 8000a28:	4911      	ldr	r1, [pc, #68]	@ (8000a70 <main+0x84>)
 8000a2a:	4812      	ldr	r0, [pc, #72]	@ (8000a74 <main+0x88>)
 8000a2c:	f006 febf 	bl	80077ae <HAL_UART_Transmit>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    // 1. Leia o valor bruto do ADC SPI
    adc_raw_value = ADC_SPI_ReadValue();
 8000a30:	f7ff ffb0 	bl	8000994 <ADC_SPI_ReadValue>
 8000a34:	4603      	mov	r3, r0
 8000a36:	4a10      	ldr	r2, [pc, #64]	@ (8000a78 <main+0x8c>)
 8000a38:	6013      	str	r3, [r2, #0]

    // 2. Converta o valor lido para uma string para envio serial
    // Use %lu para unsigned long int (adequado para uint32_t)
    printf(msg, sizeof(msg), "Valor ADC SPI: %lu\r\n", adc_raw_value);
 8000a3a:	4b0f      	ldr	r3, [pc, #60]	@ (8000a78 <main+0x8c>)
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	4a0f      	ldr	r2, [pc, #60]	@ (8000a7c <main+0x90>)
 8000a40:	2164      	movs	r1, #100	@ 0x64
 8000a42:	480b      	ldr	r0, [pc, #44]	@ (8000a70 <main+0x84>)
 8000a44:	f008 fce0 	bl	8009408 <iprintf>

    // 3. Envie a string pelo terminal serial
    HAL_UART_Transmit(&huart3, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8000a48:	4809      	ldr	r0, [pc, #36]	@ (8000a70 <main+0x84>)
 8000a4a:	f7ff fc49 	bl	80002e0 <strlen>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	b29a      	uxth	r2, r3
 8000a52:	f04f 33ff 	mov.w	r3, #4294967295
 8000a56:	4906      	ldr	r1, [pc, #24]	@ (8000a70 <main+0x84>)
 8000a58:	4806      	ldr	r0, [pc, #24]	@ (8000a74 <main+0x88>)
 8000a5a:	f006 fea8 	bl	80077ae <HAL_UART_Transmit>

    // 4. Pequeno atraso para não sobrecarregar o terminal serial e permitir estabilização
    HAL_Delay(500); // Atraso de 500ms entre as leituras
 8000a5e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000a62:	f000 fd19 	bl	8001498 <HAL_Delay>
    adc_raw_value = ADC_SPI_ReadValue();
 8000a66:	bf00      	nop
 8000a68:	e7e2      	b.n	8000a30 <main+0x44>
 8000a6a:	bf00      	nop
 8000a6c:	0800a0f8 	.word	0x0800a0f8
 8000a70:	2400008c 	.word	0x2400008c
 8000a74:	2400017c 	.word	0x2400017c
 8000a78:	24000088 	.word	0x24000088
 8000a7c:	0800a118 	.word	0x0800a118

08000a80 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b09c      	sub	sp, #112	@ 0x70
 8000a84:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a86:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a8a:	224c      	movs	r2, #76	@ 0x4c
 8000a8c:	2100      	movs	r1, #0
 8000a8e:	4618      	mov	r0, r3
 8000a90:	f008 fd0f 	bl	80094b2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a94:	1d3b      	adds	r3, r7, #4
 8000a96:	2220      	movs	r2, #32
 8000a98:	2100      	movs	r1, #0
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	f008 fd09 	bl	80094b2 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000aa0:	2002      	movs	r0, #2
 8000aa2:	f003 faa1 	bl	8003fe8 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	603b      	str	r3, [r7, #0]
 8000aaa:	4b31      	ldr	r3, [pc, #196]	@ (8000b70 <SystemClock_Config+0xf0>)
 8000aac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000aae:	4a30      	ldr	r2, [pc, #192]	@ (8000b70 <SystemClock_Config+0xf0>)
 8000ab0:	f023 0301 	bic.w	r3, r3, #1
 8000ab4:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000ab6:	4b2e      	ldr	r3, [pc, #184]	@ (8000b70 <SystemClock_Config+0xf0>)
 8000ab8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000aba:	f003 0301 	and.w	r3, r3, #1
 8000abe:	603b      	str	r3, [r7, #0]
 8000ac0:	4b2c      	ldr	r3, [pc, #176]	@ (8000b74 <SystemClock_Config+0xf4>)
 8000ac2:	699b      	ldr	r3, [r3, #24]
 8000ac4:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000ac8:	4a2a      	ldr	r2, [pc, #168]	@ (8000b74 <SystemClock_Config+0xf4>)
 8000aca:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ace:	6193      	str	r3, [r2, #24]
 8000ad0:	4b28      	ldr	r3, [pc, #160]	@ (8000b74 <SystemClock_Config+0xf4>)
 8000ad2:	699b      	ldr	r3, [r3, #24]
 8000ad4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000ad8:	603b      	str	r3, [r7, #0]
 8000ada:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000adc:	bf00      	nop
 8000ade:	4b25      	ldr	r3, [pc, #148]	@ (8000b74 <SystemClock_Config+0xf4>)
 8000ae0:	699b      	ldr	r3, [r3, #24]
 8000ae2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000ae6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000aea:	d1f8      	bne.n	8000ade <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000aec:	2302      	movs	r3, #2
 8000aee:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000af0:	2301      	movs	r3, #1
 8000af2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000af4:	2340      	movs	r3, #64	@ 0x40
 8000af6:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000af8:	2302      	movs	r3, #2
 8000afa:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000afc:	2300      	movs	r3, #0
 8000afe:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000b00:	2304      	movs	r3, #4
 8000b02:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000b04:	230a      	movs	r3, #10
 8000b06:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000b08:	2302      	movs	r3, #2
 8000b0a:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000b0c:	2302      	movs	r3, #2
 8000b0e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000b10:	2302      	movs	r3, #2
 8000b12:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000b14:	230c      	movs	r3, #12
 8000b16:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 8000b18:	2302      	movs	r3, #2
 8000b1a:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b20:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b24:	4618      	mov	r0, r3
 8000b26:	f003 fa99 	bl	800405c <HAL_RCC_OscConfig>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d001      	beq.n	8000b34 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000b30:	f000 f84e 	bl	8000bd0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b34:	233f      	movs	r3, #63	@ 0x3f
 8000b36:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000b40:	2300      	movs	r3, #0
 8000b42:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000b44:	2300      	movs	r3, #0
 8000b46:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000b48:	2340      	movs	r3, #64	@ 0x40
 8000b4a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000b50:	2300      	movs	r3, #0
 8000b52:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000b54:	1d3b      	adds	r3, r7, #4
 8000b56:	2101      	movs	r1, #1
 8000b58:	4618      	mov	r0, r3
 8000b5a:	f003 fed9 	bl	8004910 <HAL_RCC_ClockConfig>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d001      	beq.n	8000b68 <SystemClock_Config+0xe8>
  {
    Error_Handler();
 8000b64:	f000 f834 	bl	8000bd0 <Error_Handler>
  }
}
 8000b68:	bf00      	nop
 8000b6a:	3770      	adds	r7, #112	@ 0x70
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	bd80      	pop	{r7, pc}
 8000b70:	58000400 	.word	0x58000400
 8000b74:	58024800 	.word	0x58024800

08000b78 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b084      	sub	sp, #16
 8000b7c:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000b7e:	463b      	mov	r3, r7
 8000b80:	2200      	movs	r2, #0
 8000b82:	601a      	str	r2, [r3, #0]
 8000b84:	605a      	str	r2, [r3, #4]
 8000b86:	609a      	str	r2, [r3, #8]
 8000b88:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000b8a:	f000 fdc5 	bl	8001718 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000b8e:	2301      	movs	r3, #1
 8000b90:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000b92:	2300      	movs	r3, #0
 8000b94:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000b96:	2300      	movs	r3, #0
 8000b98:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000b9a:	231f      	movs	r3, #31
 8000b9c:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000b9e:	2387      	movs	r3, #135	@ 0x87
 8000ba0:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000baa:	2301      	movs	r3, #1
 8000bac:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000bae:	2301      	movs	r3, #1
 8000bb0:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000bba:	463b      	mov	r3, r7
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	f000 fde3 	bl	8001788 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000bc2:	2004      	movs	r0, #4
 8000bc4:	f000 fdc0 	bl	8001748 <HAL_MPU_Enable>

}
 8000bc8:	bf00      	nop
 8000bca:	3710      	adds	r7, #16
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	bd80      	pop	{r7, pc}

08000bd0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bd4:	b672      	cpsid	i
}
 8000bd6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bd8:	bf00      	nop
 8000bda:	e7fd      	b.n	8000bd8 <Error_Handler+0x8>

08000bdc <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000be0:	4b28      	ldr	r3, [pc, #160]	@ (8000c84 <MX_SPI1_Init+0xa8>)
 8000be2:	4a29      	ldr	r2, [pc, #164]	@ (8000c88 <MX_SPI1_Init+0xac>)
 8000be4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000be6:	4b27      	ldr	r3, [pc, #156]	@ (8000c84 <MX_SPI1_Init+0xa8>)
 8000be8:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000bec:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8000bee:	4b25      	ldr	r3, [pc, #148]	@ (8000c84 <MX_SPI1_Init+0xa8>)
 8000bf0:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000bf4:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000bf6:	4b23      	ldr	r3, [pc, #140]	@ (8000c84 <MX_SPI1_Init+0xa8>)
 8000bf8:	2207      	movs	r2, #7
 8000bfa:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000bfc:	4b21      	ldr	r3, [pc, #132]	@ (8000c84 <MX_SPI1_Init+0xa8>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c02:	4b20      	ldr	r3, [pc, #128]	@ (8000c84 <MX_SPI1_Init+0xa8>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000c08:	4b1e      	ldr	r3, [pc, #120]	@ (8000c84 <MX_SPI1_Init+0xa8>)
 8000c0a:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8000c0e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000c10:	4b1c      	ldr	r3, [pc, #112]	@ (8000c84 <MX_SPI1_Init+0xa8>)
 8000c12:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000c16:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c18:	4b1a      	ldr	r3, [pc, #104]	@ (8000c84 <MX_SPI1_Init+0xa8>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c1e:	4b19      	ldr	r3, [pc, #100]	@ (8000c84 <MX_SPI1_Init+0xa8>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c24:	4b17      	ldr	r3, [pc, #92]	@ (8000c84 <MX_SPI1_Init+0xa8>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8000c2a:	4b16      	ldr	r3, [pc, #88]	@ (8000c84 <MX_SPI1_Init+0xa8>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000c30:	4b14      	ldr	r3, [pc, #80]	@ (8000c84 <MX_SPI1_Init+0xa8>)
 8000c32:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000c36:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000c38:	4b12      	ldr	r3, [pc, #72]	@ (8000c84 <MX_SPI1_Init+0xa8>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000c3e:	4b11      	ldr	r3, [pc, #68]	@ (8000c84 <MX_SPI1_Init+0xa8>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000c44:	4b0f      	ldr	r3, [pc, #60]	@ (8000c84 <MX_SPI1_Init+0xa8>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000c4a:	4b0e      	ldr	r3, [pc, #56]	@ (8000c84 <MX_SPI1_Init+0xa8>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000c50:	4b0c      	ldr	r3, [pc, #48]	@ (8000c84 <MX_SPI1_Init+0xa8>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000c56:	4b0b      	ldr	r3, [pc, #44]	@ (8000c84 <MX_SPI1_Init+0xa8>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000c5c:	4b09      	ldr	r3, [pc, #36]	@ (8000c84 <MX_SPI1_Init+0xa8>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000c62:	4b08      	ldr	r3, [pc, #32]	@ (8000c84 <MX_SPI1_Init+0xa8>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000c68:	4b06      	ldr	r3, [pc, #24]	@ (8000c84 <MX_SPI1_Init+0xa8>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000c6e:	4805      	ldr	r0, [pc, #20]	@ (8000c84 <MX_SPI1_Init+0xa8>)
 8000c70:	f006 f806 	bl	8006c80 <HAL_SPI_Init>
 8000c74:	4603      	mov	r3, r0
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d001      	beq.n	8000c7e <MX_SPI1_Init+0xa2>
  {
    Error_Handler();
 8000c7a:	f7ff ffa9 	bl	8000bd0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000c7e:	bf00      	nop
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	240000f0 	.word	0x240000f0
 8000c88:	40013000 	.word	0x40013000

08000c8c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b0ba      	sub	sp, #232	@ 0xe8
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c94:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000c98:	2200      	movs	r2, #0
 8000c9a:	601a      	str	r2, [r3, #0]
 8000c9c:	605a      	str	r2, [r3, #4]
 8000c9e:	609a      	str	r2, [r3, #8]
 8000ca0:	60da      	str	r2, [r3, #12]
 8000ca2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ca4:	f107 0310 	add.w	r3, r7, #16
 8000ca8:	22c0      	movs	r2, #192	@ 0xc0
 8000caa:	2100      	movs	r1, #0
 8000cac:	4618      	mov	r0, r3
 8000cae:	f008 fc00 	bl	80094b2 <memset>
  if(spiHandle->Instance==SPI1)
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	4a26      	ldr	r2, [pc, #152]	@ (8000d50 <HAL_SPI_MspInit+0xc4>)
 8000cb8:	4293      	cmp	r3, r2
 8000cba:	d144      	bne.n	8000d46 <HAL_SPI_MspInit+0xba>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8000cbc:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000cc0:	f04f 0300 	mov.w	r3, #0
 8000cc4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	673b      	str	r3, [r7, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ccc:	f107 0310 	add.w	r3, r7, #16
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	f004 f9a9 	bl	8005028 <HAL_RCCEx_PeriphCLKConfig>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d001      	beq.n	8000ce0 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 8000cdc:	f7ff ff78 	bl	8000bd0 <Error_Handler>
    }

    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000ce0:	4b1c      	ldr	r3, [pc, #112]	@ (8000d54 <HAL_SPI_MspInit+0xc8>)
 8000ce2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000ce6:	4a1b      	ldr	r2, [pc, #108]	@ (8000d54 <HAL_SPI_MspInit+0xc8>)
 8000ce8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000cec:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8000cf0:	4b18      	ldr	r3, [pc, #96]	@ (8000d54 <HAL_SPI_MspInit+0xc8>)
 8000cf2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000cf6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000cfa:	60fb      	str	r3, [r7, #12]
 8000cfc:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cfe:	4b15      	ldr	r3, [pc, #84]	@ (8000d54 <HAL_SPI_MspInit+0xc8>)
 8000d00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d04:	4a13      	ldr	r2, [pc, #76]	@ (8000d54 <HAL_SPI_MspInit+0xc8>)
 8000d06:	f043 0301 	orr.w	r3, r3, #1
 8000d0a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d0e:	4b11      	ldr	r3, [pc, #68]	@ (8000d54 <HAL_SPI_MspInit+0xc8>)
 8000d10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d14:	f003 0301 	and.w	r3, r3, #1
 8000d18:	60bb      	str	r3, [r7, #8]
 8000d1a:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8000d1c:	2360      	movs	r3, #96	@ 0x60
 8000d1e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d22:	2302      	movs	r3, #2
 8000d24:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000d34:	2305      	movs	r3, #5
 8000d36:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d3a:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000d3e:	4619      	mov	r1, r3
 8000d40:	4805      	ldr	r0, [pc, #20]	@ (8000d58 <HAL_SPI_MspInit+0xcc>)
 8000d42:	f002 ff87 	bl	8003c54 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000d46:	bf00      	nop
 8000d48:	37e8      	adds	r7, #232	@ 0xe8
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd80      	pop	{r7, pc}
 8000d4e:	bf00      	nop
 8000d50:	40013000 	.word	0x40013000
 8000d54:	58024400 	.word	0x58024400
 8000d58:	58020000 	.word	0x58020000

08000d5c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	b083      	sub	sp, #12
 8000d60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d62:	4b0a      	ldr	r3, [pc, #40]	@ (8000d8c <HAL_MspInit+0x30>)
 8000d64:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000d68:	4a08      	ldr	r2, [pc, #32]	@ (8000d8c <HAL_MspInit+0x30>)
 8000d6a:	f043 0302 	orr.w	r3, r3, #2
 8000d6e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000d72:	4b06      	ldr	r3, [pc, #24]	@ (8000d8c <HAL_MspInit+0x30>)
 8000d74:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000d78:	f003 0302 	and.w	r3, r3, #2
 8000d7c:	607b      	str	r3, [r7, #4]
 8000d7e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d80:	bf00      	nop
 8000d82:	370c      	adds	r7, #12
 8000d84:	46bd      	mov	sp, r7
 8000d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8a:	4770      	bx	lr
 8000d8c:	58024400 	.word	0x58024400

08000d90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d90:	b480      	push	{r7}
 8000d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d94:	bf00      	nop
 8000d96:	e7fd      	b.n	8000d94 <NMI_Handler+0x4>

08000d98 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d9c:	bf00      	nop
 8000d9e:	e7fd      	b.n	8000d9c <HardFault_Handler+0x4>

08000da0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000da0:	b480      	push	{r7}
 8000da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000da4:	bf00      	nop
 8000da6:	e7fd      	b.n	8000da4 <MemManage_Handler+0x4>

08000da8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000da8:	b480      	push	{r7}
 8000daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dac:	bf00      	nop
 8000dae:	e7fd      	b.n	8000dac <BusFault_Handler+0x4>

08000db0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000db0:	b480      	push	{r7}
 8000db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000db4:	bf00      	nop
 8000db6:	e7fd      	b.n	8000db4 <UsageFault_Handler+0x4>

08000db8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000db8:	b480      	push	{r7}
 8000dba:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000dbc:	bf00      	nop
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc4:	4770      	bx	lr

08000dc6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000dc6:	b480      	push	{r7}
 8000dc8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dca:	bf00      	nop
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd2:	4770      	bx	lr

08000dd4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dd8:	bf00      	nop
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de0:	4770      	bx	lr

08000de2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000de2:	b580      	push	{r7, lr}
 8000de4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000de6:	f000 fb37 	bl	8001458 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000dea:	bf00      	nop
 8000dec:	bd80      	pop	{r7, pc}
	...

08000df0 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8000df4:	4802      	ldr	r0, [pc, #8]	@ (8000e00 <DMA1_Stream0_IRQHandler+0x10>)
 8000df6:	f001 fdc7 	bl	8002988 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8000dfa:	bf00      	nop
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	bf00      	nop
 8000e00:	24000210 	.word	0x24000210

08000e04 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8000e08:	4802      	ldr	r0, [pc, #8]	@ (8000e14 <DMA1_Stream1_IRQHandler+0x10>)
 8000e0a:	f001 fdbd 	bl	8002988 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8000e0e:	bf00      	nop
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	bf00      	nop
 8000e14:	24000288 	.word	0x24000288

08000e18 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000e1c:	4802      	ldr	r0, [pc, #8]	@ (8000e28 <USART3_IRQHandler+0x10>)
 8000e1e:	f006 fd55 	bl	80078cc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000e22:	bf00      	nop
 8000e24:	bd80      	pop	{r7, pc}
 8000e26:	bf00      	nop
 8000e28:	2400017c 	.word	0x2400017c

08000e2c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b086      	sub	sp, #24
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	60f8      	str	r0, [r7, #12]
 8000e34:	60b9      	str	r1, [r7, #8]
 8000e36:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e38:	2300      	movs	r3, #0
 8000e3a:	617b      	str	r3, [r7, #20]
 8000e3c:	e00a      	b.n	8000e54 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000e3e:	f3af 8000 	nop.w
 8000e42:	4601      	mov	r1, r0
 8000e44:	68bb      	ldr	r3, [r7, #8]
 8000e46:	1c5a      	adds	r2, r3, #1
 8000e48:	60ba      	str	r2, [r7, #8]
 8000e4a:	b2ca      	uxtb	r2, r1
 8000e4c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e4e:	697b      	ldr	r3, [r7, #20]
 8000e50:	3301      	adds	r3, #1
 8000e52:	617b      	str	r3, [r7, #20]
 8000e54:	697a      	ldr	r2, [r7, #20]
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	429a      	cmp	r2, r3
 8000e5a:	dbf0      	blt.n	8000e3e <_read+0x12>
  }

  return len;
 8000e5c:	687b      	ldr	r3, [r7, #4]
}
 8000e5e:	4618      	mov	r0, r3
 8000e60:	3718      	adds	r7, #24
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bd80      	pop	{r7, pc}

08000e66 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000e66:	b480      	push	{r7}
 8000e68:	b083      	sub	sp, #12
 8000e6a:	af00      	add	r7, sp, #0
 8000e6c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000e6e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e72:	4618      	mov	r0, r3
 8000e74:	370c      	adds	r7, #12
 8000e76:	46bd      	mov	sp, r7
 8000e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7c:	4770      	bx	lr

08000e7e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000e7e:	b480      	push	{r7}
 8000e80:	b083      	sub	sp, #12
 8000e82:	af00      	add	r7, sp, #0
 8000e84:	6078      	str	r0, [r7, #4]
 8000e86:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000e88:	683b      	ldr	r3, [r7, #0]
 8000e8a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000e8e:	605a      	str	r2, [r3, #4]
  return 0;
 8000e90:	2300      	movs	r3, #0
}
 8000e92:	4618      	mov	r0, r3
 8000e94:	370c      	adds	r7, #12
 8000e96:	46bd      	mov	sp, r7
 8000e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9c:	4770      	bx	lr

08000e9e <_isatty>:

int _isatty(int file)
{
 8000e9e:	b480      	push	{r7}
 8000ea0:	b083      	sub	sp, #12
 8000ea2:	af00      	add	r7, sp, #0
 8000ea4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000ea6:	2301      	movs	r3, #1
}
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	370c      	adds	r7, #12
 8000eac:	46bd      	mov	sp, r7
 8000eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb2:	4770      	bx	lr

08000eb4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	b085      	sub	sp, #20
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	60f8      	str	r0, [r7, #12]
 8000ebc:	60b9      	str	r1, [r7, #8]
 8000ebe:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000ec0:	2300      	movs	r3, #0
}
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	3714      	adds	r7, #20
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ecc:	4770      	bx	lr
	...

08000ed0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b086      	sub	sp, #24
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ed8:	4a14      	ldr	r2, [pc, #80]	@ (8000f2c <_sbrk+0x5c>)
 8000eda:	4b15      	ldr	r3, [pc, #84]	@ (8000f30 <_sbrk+0x60>)
 8000edc:	1ad3      	subs	r3, r2, r3
 8000ede:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ee0:	697b      	ldr	r3, [r7, #20]
 8000ee2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ee4:	4b13      	ldr	r3, [pc, #76]	@ (8000f34 <_sbrk+0x64>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d102      	bne.n	8000ef2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000eec:	4b11      	ldr	r3, [pc, #68]	@ (8000f34 <_sbrk+0x64>)
 8000eee:	4a12      	ldr	r2, [pc, #72]	@ (8000f38 <_sbrk+0x68>)
 8000ef0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ef2:	4b10      	ldr	r3, [pc, #64]	@ (8000f34 <_sbrk+0x64>)
 8000ef4:	681a      	ldr	r2, [r3, #0]
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	4413      	add	r3, r2
 8000efa:	693a      	ldr	r2, [r7, #16]
 8000efc:	429a      	cmp	r2, r3
 8000efe:	d207      	bcs.n	8000f10 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f00:	f008 fb26 	bl	8009550 <__errno>
 8000f04:	4603      	mov	r3, r0
 8000f06:	220c      	movs	r2, #12
 8000f08:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f0a:	f04f 33ff 	mov.w	r3, #4294967295
 8000f0e:	e009      	b.n	8000f24 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f10:	4b08      	ldr	r3, [pc, #32]	@ (8000f34 <_sbrk+0x64>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f16:	4b07      	ldr	r3, [pc, #28]	@ (8000f34 <_sbrk+0x64>)
 8000f18:	681a      	ldr	r2, [r3, #0]
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	4413      	add	r3, r2
 8000f1e:	4a05      	ldr	r2, [pc, #20]	@ (8000f34 <_sbrk+0x64>)
 8000f20:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f22:	68fb      	ldr	r3, [r7, #12]
}
 8000f24:	4618      	mov	r0, r3
 8000f26:	3718      	adds	r7, #24
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bd80      	pop	{r7, pc}
 8000f2c:	24080000 	.word	0x24080000
 8000f30:	00000400 	.word	0x00000400
 8000f34:	24000178 	.word	0x24000178
 8000f38:	24000450 	.word	0x24000450

08000f3c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000f40:	4b43      	ldr	r3, [pc, #268]	@ (8001050 <SystemInit+0x114>)
 8000f42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000f46:	4a42      	ldr	r2, [pc, #264]	@ (8001050 <SystemInit+0x114>)
 8000f48:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000f4c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000f50:	4b40      	ldr	r3, [pc, #256]	@ (8001054 <SystemInit+0x118>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	f003 030f 	and.w	r3, r3, #15
 8000f58:	2b06      	cmp	r3, #6
 8000f5a:	d807      	bhi.n	8000f6c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000f5c:	4b3d      	ldr	r3, [pc, #244]	@ (8001054 <SystemInit+0x118>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	f023 030f 	bic.w	r3, r3, #15
 8000f64:	4a3b      	ldr	r2, [pc, #236]	@ (8001054 <SystemInit+0x118>)
 8000f66:	f043 0307 	orr.w	r3, r3, #7
 8000f6a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000f6c:	4b3a      	ldr	r3, [pc, #232]	@ (8001058 <SystemInit+0x11c>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	4a39      	ldr	r2, [pc, #228]	@ (8001058 <SystemInit+0x11c>)
 8000f72:	f043 0301 	orr.w	r3, r3, #1
 8000f76:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000f78:	4b37      	ldr	r3, [pc, #220]	@ (8001058 <SystemInit+0x11c>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000f7e:	4b36      	ldr	r3, [pc, #216]	@ (8001058 <SystemInit+0x11c>)
 8000f80:	681a      	ldr	r2, [r3, #0]
 8000f82:	4935      	ldr	r1, [pc, #212]	@ (8001058 <SystemInit+0x11c>)
 8000f84:	4b35      	ldr	r3, [pc, #212]	@ (800105c <SystemInit+0x120>)
 8000f86:	4013      	ands	r3, r2
 8000f88:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000f8a:	4b32      	ldr	r3, [pc, #200]	@ (8001054 <SystemInit+0x118>)
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	f003 0308 	and.w	r3, r3, #8
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d007      	beq.n	8000fa6 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000f96:	4b2f      	ldr	r3, [pc, #188]	@ (8001054 <SystemInit+0x118>)
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	f023 030f 	bic.w	r3, r3, #15
 8000f9e:	4a2d      	ldr	r2, [pc, #180]	@ (8001054 <SystemInit+0x118>)
 8000fa0:	f043 0307 	orr.w	r3, r3, #7
 8000fa4:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000fa6:	4b2c      	ldr	r3, [pc, #176]	@ (8001058 <SystemInit+0x11c>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000fac:	4b2a      	ldr	r3, [pc, #168]	@ (8001058 <SystemInit+0x11c>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000fb2:	4b29      	ldr	r3, [pc, #164]	@ (8001058 <SystemInit+0x11c>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000fb8:	4b27      	ldr	r3, [pc, #156]	@ (8001058 <SystemInit+0x11c>)
 8000fba:	4a29      	ldr	r2, [pc, #164]	@ (8001060 <SystemInit+0x124>)
 8000fbc:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000fbe:	4b26      	ldr	r3, [pc, #152]	@ (8001058 <SystemInit+0x11c>)
 8000fc0:	4a28      	ldr	r2, [pc, #160]	@ (8001064 <SystemInit+0x128>)
 8000fc2:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000fc4:	4b24      	ldr	r3, [pc, #144]	@ (8001058 <SystemInit+0x11c>)
 8000fc6:	4a28      	ldr	r2, [pc, #160]	@ (8001068 <SystemInit+0x12c>)
 8000fc8:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000fca:	4b23      	ldr	r3, [pc, #140]	@ (8001058 <SystemInit+0x11c>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000fd0:	4b21      	ldr	r3, [pc, #132]	@ (8001058 <SystemInit+0x11c>)
 8000fd2:	4a25      	ldr	r2, [pc, #148]	@ (8001068 <SystemInit+0x12c>)
 8000fd4:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000fd6:	4b20      	ldr	r3, [pc, #128]	@ (8001058 <SystemInit+0x11c>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000fdc:	4b1e      	ldr	r3, [pc, #120]	@ (8001058 <SystemInit+0x11c>)
 8000fde:	4a22      	ldr	r2, [pc, #136]	@ (8001068 <SystemInit+0x12c>)
 8000fe0:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000fe2:	4b1d      	ldr	r3, [pc, #116]	@ (8001058 <SystemInit+0x11c>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000fe8:	4b1b      	ldr	r3, [pc, #108]	@ (8001058 <SystemInit+0x11c>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	4a1a      	ldr	r2, [pc, #104]	@ (8001058 <SystemInit+0x11c>)
 8000fee:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000ff2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000ff4:	4b18      	ldr	r3, [pc, #96]	@ (8001058 <SystemInit+0x11c>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000ffa:	4b1c      	ldr	r3, [pc, #112]	@ (800106c <SystemInit+0x130>)
 8000ffc:	681a      	ldr	r2, [r3, #0]
 8000ffe:	4b1c      	ldr	r3, [pc, #112]	@ (8001070 <SystemInit+0x134>)
 8001000:	4013      	ands	r3, r2
 8001002:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001006:	d202      	bcs.n	800100e <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001008:	4b1a      	ldr	r3, [pc, #104]	@ (8001074 <SystemInit+0x138>)
 800100a:	2201      	movs	r2, #1
 800100c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 800100e:	4b12      	ldr	r3, [pc, #72]	@ (8001058 <SystemInit+0x11c>)
 8001010:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001014:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001018:	2b00      	cmp	r3, #0
 800101a:	d113      	bne.n	8001044 <SystemInit+0x108>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 800101c:	4b0e      	ldr	r3, [pc, #56]	@ (8001058 <SystemInit+0x11c>)
 800101e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001022:	4a0d      	ldr	r2, [pc, #52]	@ (8001058 <SystemInit+0x11c>)
 8001024:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001028:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800102c:	4b12      	ldr	r3, [pc, #72]	@ (8001078 <SystemInit+0x13c>)
 800102e:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8001032:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8001034:	4b08      	ldr	r3, [pc, #32]	@ (8001058 <SystemInit+0x11c>)
 8001036:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800103a:	4a07      	ldr	r2, [pc, #28]	@ (8001058 <SystemInit+0x11c>)
 800103c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001040:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001044:	bf00      	nop
 8001046:	46bd      	mov	sp, r7
 8001048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104c:	4770      	bx	lr
 800104e:	bf00      	nop
 8001050:	e000ed00 	.word	0xe000ed00
 8001054:	52002000 	.word	0x52002000
 8001058:	58024400 	.word	0x58024400
 800105c:	eaf6ed7f 	.word	0xeaf6ed7f
 8001060:	02020200 	.word	0x02020200
 8001064:	01ff0000 	.word	0x01ff0000
 8001068:	01010280 	.word	0x01010280
 800106c:	5c001000 	.word	0x5c001000
 8001070:	ffff0000 	.word	0xffff0000
 8001074:	51008108 	.word	0x51008108
 8001078:	52004000 	.word	0x52004000

0800107c <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 800107c:	b480      	push	{r7}
 800107e:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 8001080:	4b09      	ldr	r3, [pc, #36]	@ (80010a8 <ExitRun0Mode+0x2c>)
 8001082:	68db      	ldr	r3, [r3, #12]
 8001084:	4a08      	ldr	r2, [pc, #32]	@ (80010a8 <ExitRun0Mode+0x2c>)
 8001086:	f043 0302 	orr.w	r3, r3, #2
 800108a:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 800108c:	bf00      	nop
 800108e:	4b06      	ldr	r3, [pc, #24]	@ (80010a8 <ExitRun0Mode+0x2c>)
 8001090:	685b      	ldr	r3, [r3, #4]
 8001092:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001096:	2b00      	cmp	r3, #0
 8001098:	d0f9      	beq.n	800108e <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 800109a:	bf00      	nop
 800109c:	bf00      	nop
 800109e:	46bd      	mov	sp, r7
 80010a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a4:	4770      	bx	lr
 80010a6:	bf00      	nop
 80010a8:	58024800 	.word	0x58024800

080010ac <MX_USART3_UART_Init>:
DMA_HandleTypeDef hdma_usart3_tx;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80010b0:	4b22      	ldr	r3, [pc, #136]	@ (800113c <MX_USART3_UART_Init+0x90>)
 80010b2:	4a23      	ldr	r2, [pc, #140]	@ (8001140 <MX_USART3_UART_Init+0x94>)
 80010b4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80010b6:	4b21      	ldr	r3, [pc, #132]	@ (800113c <MX_USART3_UART_Init+0x90>)
 80010b8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80010bc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80010be:	4b1f      	ldr	r3, [pc, #124]	@ (800113c <MX_USART3_UART_Init+0x90>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80010c4:	4b1d      	ldr	r3, [pc, #116]	@ (800113c <MX_USART3_UART_Init+0x90>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80010ca:	4b1c      	ldr	r3, [pc, #112]	@ (800113c <MX_USART3_UART_Init+0x90>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80010d0:	4b1a      	ldr	r3, [pc, #104]	@ (800113c <MX_USART3_UART_Init+0x90>)
 80010d2:	220c      	movs	r2, #12
 80010d4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010d6:	4b19      	ldr	r3, [pc, #100]	@ (800113c <MX_USART3_UART_Init+0x90>)
 80010d8:	2200      	movs	r2, #0
 80010da:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80010dc:	4b17      	ldr	r3, [pc, #92]	@ (800113c <MX_USART3_UART_Init+0x90>)
 80010de:	2200      	movs	r2, #0
 80010e0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80010e2:	4b16      	ldr	r3, [pc, #88]	@ (800113c <MX_USART3_UART_Init+0x90>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80010e8:	4b14      	ldr	r3, [pc, #80]	@ (800113c <MX_USART3_UART_Init+0x90>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80010ee:	4b13      	ldr	r3, [pc, #76]	@ (800113c <MX_USART3_UART_Init+0x90>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80010f4:	4811      	ldr	r0, [pc, #68]	@ (800113c <MX_USART3_UART_Init+0x90>)
 80010f6:	f006 fb0a 	bl	800770e <HAL_UART_Init>
 80010fa:	4603      	mov	r3, r0
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d001      	beq.n	8001104 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001100:	f7ff fd66 	bl	8000bd0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001104:	2100      	movs	r1, #0
 8001106:	480d      	ldr	r0, [pc, #52]	@ (800113c <MX_USART3_UART_Init+0x90>)
 8001108:	f007 fff2 	bl	80090f0 <HAL_UARTEx_SetTxFifoThreshold>
 800110c:	4603      	mov	r3, r0
 800110e:	2b00      	cmp	r3, #0
 8001110:	d001      	beq.n	8001116 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001112:	f7ff fd5d 	bl	8000bd0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001116:	2100      	movs	r1, #0
 8001118:	4808      	ldr	r0, [pc, #32]	@ (800113c <MX_USART3_UART_Init+0x90>)
 800111a:	f008 f827 	bl	800916c <HAL_UARTEx_SetRxFifoThreshold>
 800111e:	4603      	mov	r3, r0
 8001120:	2b00      	cmp	r3, #0
 8001122:	d001      	beq.n	8001128 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001124:	f7ff fd54 	bl	8000bd0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001128:	4804      	ldr	r0, [pc, #16]	@ (800113c <MX_USART3_UART_Init+0x90>)
 800112a:	f007 ffa8 	bl	800907e <HAL_UARTEx_DisableFifoMode>
 800112e:	4603      	mov	r3, r0
 8001130:	2b00      	cmp	r3, #0
 8001132:	d001      	beq.n	8001138 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001134:	f7ff fd4c 	bl	8000bd0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001138:	bf00      	nop
 800113a:	bd80      	pop	{r7, pc}
 800113c:	2400017c 	.word	0x2400017c
 8001140:	40004800 	.word	0x40004800

08001144 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b0ba      	sub	sp, #232	@ 0xe8
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800114c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001150:	2200      	movs	r2, #0
 8001152:	601a      	str	r2, [r3, #0]
 8001154:	605a      	str	r2, [r3, #4]
 8001156:	609a      	str	r2, [r3, #8]
 8001158:	60da      	str	r2, [r3, #12]
 800115a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800115c:	f107 0310 	add.w	r3, r7, #16
 8001160:	22c0      	movs	r2, #192	@ 0xc0
 8001162:	2100      	movs	r1, #0
 8001164:	4618      	mov	r0, r3
 8001166:	f008 f9a4 	bl	80094b2 <memset>
  if(uartHandle->Instance==USART3)
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	4a59      	ldr	r2, [pc, #356]	@ (80012d4 <HAL_UART_MspInit+0x190>)
 8001170:	4293      	cmp	r3, r2
 8001172:	f040 80aa 	bne.w	80012ca <HAL_UART_MspInit+0x186>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001176:	f04f 0202 	mov.w	r2, #2
 800117a:	f04f 0300 	mov.w	r3, #0
 800117e:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001182:	2300      	movs	r3, #0
 8001184:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001188:	f107 0310 	add.w	r3, r7, #16
 800118c:	4618      	mov	r0, r3
 800118e:	f003 ff4b 	bl	8005028 <HAL_RCCEx_PeriphCLKConfig>
 8001192:	4603      	mov	r3, r0
 8001194:	2b00      	cmp	r3, #0
 8001196:	d001      	beq.n	800119c <HAL_UART_MspInit+0x58>
    {
      Error_Handler();
 8001198:	f7ff fd1a 	bl	8000bd0 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800119c:	4b4e      	ldr	r3, [pc, #312]	@ (80012d8 <HAL_UART_MspInit+0x194>)
 800119e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80011a2:	4a4d      	ldr	r2, [pc, #308]	@ (80012d8 <HAL_UART_MspInit+0x194>)
 80011a4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80011a8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80011ac:	4b4a      	ldr	r3, [pc, #296]	@ (80012d8 <HAL_UART_MspInit+0x194>)
 80011ae:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80011b2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80011b6:	60fb      	str	r3, [r7, #12]
 80011b8:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80011ba:	4b47      	ldr	r3, [pc, #284]	@ (80012d8 <HAL_UART_MspInit+0x194>)
 80011bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011c0:	4a45      	ldr	r2, [pc, #276]	@ (80012d8 <HAL_UART_MspInit+0x194>)
 80011c2:	f043 0308 	orr.w	r3, r3, #8
 80011c6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80011ca:	4b43      	ldr	r3, [pc, #268]	@ (80012d8 <HAL_UART_MspInit+0x194>)
 80011cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011d0:	f003 0308 	and.w	r3, r3, #8
 80011d4:	60bb      	str	r3, [r7, #8]
 80011d6:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80011d8:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80011dc:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011e0:	2302      	movs	r3, #2
 80011e2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e6:	2300      	movs	r3, #0
 80011e8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ec:	2300      	movs	r3, #0
 80011ee:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80011f2:	2307      	movs	r3, #7
 80011f4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011f8:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80011fc:	4619      	mov	r1, r3
 80011fe:	4837      	ldr	r0, [pc, #220]	@ (80012dc <HAL_UART_MspInit+0x198>)
 8001200:	f002 fd28 	bl	8003c54 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream0;
 8001204:	4b36      	ldr	r3, [pc, #216]	@ (80012e0 <HAL_UART_MspInit+0x19c>)
 8001206:	4a37      	ldr	r2, [pc, #220]	@ (80012e4 <HAL_UART_MspInit+0x1a0>)
 8001208:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 800120a:	4b35      	ldr	r3, [pc, #212]	@ (80012e0 <HAL_UART_MspInit+0x19c>)
 800120c:	222d      	movs	r2, #45	@ 0x2d
 800120e:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001210:	4b33      	ldr	r3, [pc, #204]	@ (80012e0 <HAL_UART_MspInit+0x19c>)
 8001212:	2200      	movs	r2, #0
 8001214:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001216:	4b32      	ldr	r3, [pc, #200]	@ (80012e0 <HAL_UART_MspInit+0x19c>)
 8001218:	2200      	movs	r2, #0
 800121a:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 800121c:	4b30      	ldr	r3, [pc, #192]	@ (80012e0 <HAL_UART_MspInit+0x19c>)
 800121e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001222:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001224:	4b2e      	ldr	r3, [pc, #184]	@ (80012e0 <HAL_UART_MspInit+0x19c>)
 8001226:	2200      	movs	r2, #0
 8001228:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800122a:	4b2d      	ldr	r3, [pc, #180]	@ (80012e0 <HAL_UART_MspInit+0x19c>)
 800122c:	2200      	movs	r2, #0
 800122e:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8001230:	4b2b      	ldr	r3, [pc, #172]	@ (80012e0 <HAL_UART_MspInit+0x19c>)
 8001232:	2200      	movs	r2, #0
 8001234:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001236:	4b2a      	ldr	r3, [pc, #168]	@ (80012e0 <HAL_UART_MspInit+0x19c>)
 8001238:	2200      	movs	r2, #0
 800123a:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800123c:	4b28      	ldr	r3, [pc, #160]	@ (80012e0 <HAL_UART_MspInit+0x19c>)
 800123e:	2200      	movs	r2, #0
 8001240:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8001242:	4827      	ldr	r0, [pc, #156]	@ (80012e0 <HAL_UART_MspInit+0x19c>)
 8001244:	f000 fae0 	bl	8001808 <HAL_DMA_Init>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	d001      	beq.n	8001252 <HAL_UART_MspInit+0x10e>
    {
      Error_Handler();
 800124e:	f7ff fcbf 	bl	8000bd0 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	4a22      	ldr	r2, [pc, #136]	@ (80012e0 <HAL_UART_MspInit+0x19c>)
 8001256:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 800125a:	4a21      	ldr	r2, [pc, #132]	@ (80012e0 <HAL_UART_MspInit+0x19c>)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream1;
 8001260:	4b21      	ldr	r3, [pc, #132]	@ (80012e8 <HAL_UART_MspInit+0x1a4>)
 8001262:	4a22      	ldr	r2, [pc, #136]	@ (80012ec <HAL_UART_MspInit+0x1a8>)
 8001264:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 8001266:	4b20      	ldr	r3, [pc, #128]	@ (80012e8 <HAL_UART_MspInit+0x1a4>)
 8001268:	222e      	movs	r2, #46	@ 0x2e
 800126a:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800126c:	4b1e      	ldr	r3, [pc, #120]	@ (80012e8 <HAL_UART_MspInit+0x1a4>)
 800126e:	2240      	movs	r2, #64	@ 0x40
 8001270:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001272:	4b1d      	ldr	r3, [pc, #116]	@ (80012e8 <HAL_UART_MspInit+0x1a4>)
 8001274:	2200      	movs	r2, #0
 8001276:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001278:	4b1b      	ldr	r3, [pc, #108]	@ (80012e8 <HAL_UART_MspInit+0x1a4>)
 800127a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800127e:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001280:	4b19      	ldr	r3, [pc, #100]	@ (80012e8 <HAL_UART_MspInit+0x1a4>)
 8001282:	2200      	movs	r2, #0
 8001284:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001286:	4b18      	ldr	r3, [pc, #96]	@ (80012e8 <HAL_UART_MspInit+0x1a4>)
 8001288:	2200      	movs	r2, #0
 800128a:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 800128c:	4b16      	ldr	r3, [pc, #88]	@ (80012e8 <HAL_UART_MspInit+0x1a4>)
 800128e:	2200      	movs	r2, #0
 8001290:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001292:	4b15      	ldr	r3, [pc, #84]	@ (80012e8 <HAL_UART_MspInit+0x1a4>)
 8001294:	2200      	movs	r2, #0
 8001296:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001298:	4b13      	ldr	r3, [pc, #76]	@ (80012e8 <HAL_UART_MspInit+0x1a4>)
 800129a:	2200      	movs	r2, #0
 800129c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 800129e:	4812      	ldr	r0, [pc, #72]	@ (80012e8 <HAL_UART_MspInit+0x1a4>)
 80012a0:	f000 fab2 	bl	8001808 <HAL_DMA_Init>
 80012a4:	4603      	mov	r3, r0
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d001      	beq.n	80012ae <HAL_UART_MspInit+0x16a>
    {
      Error_Handler();
 80012aa:	f7ff fc91 	bl	8000bd0 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	4a0d      	ldr	r2, [pc, #52]	@ (80012e8 <HAL_UART_MspInit+0x1a4>)
 80012b2:	67da      	str	r2, [r3, #124]	@ 0x7c
 80012b4:	4a0c      	ldr	r2, [pc, #48]	@ (80012e8 <HAL_UART_MspInit+0x1a4>)
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80012ba:	2200      	movs	r2, #0
 80012bc:	2100      	movs	r1, #0
 80012be:	2027      	movs	r0, #39	@ 0x27
 80012c0:	f000 f9f5 	bl	80016ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80012c4:	2027      	movs	r0, #39	@ 0x27
 80012c6:	f000 fa0c 	bl	80016e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80012ca:	bf00      	nop
 80012cc:	37e8      	adds	r7, #232	@ 0xe8
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	40004800 	.word	0x40004800
 80012d8:	58024400 	.word	0x58024400
 80012dc:	58020c00 	.word	0x58020c00
 80012e0:	24000210 	.word	0x24000210
 80012e4:	40020010 	.word	0x40020010
 80012e8:	24000288 	.word	0x24000288
 80012ec:	40020028 	.word	0x40020028

080012f0 <_write>:
  }
}

/* USER CODE BEGIN 1 */
int _write(int file, char *ptr, int len)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b084      	sub	sp, #16
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	60f8      	str	r0, [r7, #12]
 80012f8:	60b9      	str	r1, [r7, #8]
 80012fa:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&huart3, (uint8_t *) ptr, len, 1000);
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	b29a      	uxth	r2, r3
 8001300:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001304:	68b9      	ldr	r1, [r7, #8]
 8001306:	4804      	ldr	r0, [pc, #16]	@ (8001318 <_write+0x28>)
 8001308:	f006 fa51 	bl	80077ae <HAL_UART_Transmit>
  return len;
 800130c:	687b      	ldr	r3, [r7, #4]
}
 800130e:	4618      	mov	r0, r3
 8001310:	3710      	adds	r7, #16
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	2400017c 	.word	0x2400017c

0800131c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800131c:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8001358 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8001320:	f7ff feac 	bl	800107c <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001324:	f7ff fe0a 	bl	8000f3c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001328:	480c      	ldr	r0, [pc, #48]	@ (800135c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800132a:	490d      	ldr	r1, [pc, #52]	@ (8001360 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800132c:	4a0d      	ldr	r2, [pc, #52]	@ (8001364 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800132e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001330:	e002      	b.n	8001338 <LoopCopyDataInit>

08001332 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001332:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001334:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001336:	3304      	adds	r3, #4

08001338 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001338:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800133a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800133c:	d3f9      	bcc.n	8001332 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800133e:	4a0a      	ldr	r2, [pc, #40]	@ (8001368 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001340:	4c0a      	ldr	r4, [pc, #40]	@ (800136c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001342:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001344:	e001      	b.n	800134a <LoopFillZerobss>

08001346 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001346:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001348:	3204      	adds	r2, #4

0800134a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800134a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800134c:	d3fb      	bcc.n	8001346 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800134e:	f008 f905 	bl	800955c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001352:	f7ff fb4b 	bl	80009ec <main>
  bx  lr
 8001356:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001358:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 800135c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001360:	2400006c 	.word	0x2400006c
  ldr r2, =_sidata
 8001364:	0800a1b4 	.word	0x0800a1b4
  ldr r2, =_sbss
 8001368:	2400006c 	.word	0x2400006c
  ldr r4, =_ebss
 800136c:	24000450 	.word	0x24000450

08001370 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001370:	e7fe      	b.n	8001370 <ADC3_IRQHandler>
	...

08001374 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b082      	sub	sp, #8
 8001378:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800137a:	2003      	movs	r0, #3
 800137c:	f000 f98c 	bl	8001698 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001380:	f003 fc7c 	bl	8004c7c <HAL_RCC_GetSysClockFreq>
 8001384:	4602      	mov	r2, r0
 8001386:	4b15      	ldr	r3, [pc, #84]	@ (80013dc <HAL_Init+0x68>)
 8001388:	699b      	ldr	r3, [r3, #24]
 800138a:	0a1b      	lsrs	r3, r3, #8
 800138c:	f003 030f 	and.w	r3, r3, #15
 8001390:	4913      	ldr	r1, [pc, #76]	@ (80013e0 <HAL_Init+0x6c>)
 8001392:	5ccb      	ldrb	r3, [r1, r3]
 8001394:	f003 031f 	and.w	r3, r3, #31
 8001398:	fa22 f303 	lsr.w	r3, r2, r3
 800139c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800139e:	4b0f      	ldr	r3, [pc, #60]	@ (80013dc <HAL_Init+0x68>)
 80013a0:	699b      	ldr	r3, [r3, #24]
 80013a2:	f003 030f 	and.w	r3, r3, #15
 80013a6:	4a0e      	ldr	r2, [pc, #56]	@ (80013e0 <HAL_Init+0x6c>)
 80013a8:	5cd3      	ldrb	r3, [r2, r3]
 80013aa:	f003 031f 	and.w	r3, r3, #31
 80013ae:	687a      	ldr	r2, [r7, #4]
 80013b0:	fa22 f303 	lsr.w	r3, r2, r3
 80013b4:	4a0b      	ldr	r2, [pc, #44]	@ (80013e4 <HAL_Init+0x70>)
 80013b6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80013b8:	4a0b      	ldr	r2, [pc, #44]	@ (80013e8 <HAL_Init+0x74>)
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80013be:	200f      	movs	r0, #15
 80013c0:	f000 f814 	bl	80013ec <HAL_InitTick>
 80013c4:	4603      	mov	r3, r0
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d001      	beq.n	80013ce <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80013ca:	2301      	movs	r3, #1
 80013cc:	e002      	b.n	80013d4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80013ce:	f7ff fcc5 	bl	8000d5c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013d2:	2300      	movs	r3, #0
}
 80013d4:	4618      	mov	r0, r3
 80013d6:	3708      	adds	r7, #8
 80013d8:	46bd      	mov	sp, r7
 80013da:	bd80      	pop	{r7, pc}
 80013dc:	58024400 	.word	0x58024400
 80013e0:	0800a130 	.word	0x0800a130
 80013e4:	24000004 	.word	0x24000004
 80013e8:	24000000 	.word	0x24000000

080013ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b082      	sub	sp, #8
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80013f4:	4b15      	ldr	r3, [pc, #84]	@ (800144c <HAL_InitTick+0x60>)
 80013f6:	781b      	ldrb	r3, [r3, #0]
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d101      	bne.n	8001400 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80013fc:	2301      	movs	r3, #1
 80013fe:	e021      	b.n	8001444 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001400:	4b13      	ldr	r3, [pc, #76]	@ (8001450 <HAL_InitTick+0x64>)
 8001402:	681a      	ldr	r2, [r3, #0]
 8001404:	4b11      	ldr	r3, [pc, #68]	@ (800144c <HAL_InitTick+0x60>)
 8001406:	781b      	ldrb	r3, [r3, #0]
 8001408:	4619      	mov	r1, r3
 800140a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800140e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001412:	fbb2 f3f3 	udiv	r3, r2, r3
 8001416:	4618      	mov	r0, r3
 8001418:	f000 f971 	bl	80016fe <HAL_SYSTICK_Config>
 800141c:	4603      	mov	r3, r0
 800141e:	2b00      	cmp	r3, #0
 8001420:	d001      	beq.n	8001426 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001422:	2301      	movs	r3, #1
 8001424:	e00e      	b.n	8001444 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	2b0f      	cmp	r3, #15
 800142a:	d80a      	bhi.n	8001442 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800142c:	2200      	movs	r2, #0
 800142e:	6879      	ldr	r1, [r7, #4]
 8001430:	f04f 30ff 	mov.w	r0, #4294967295
 8001434:	f000 f93b 	bl	80016ae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001438:	4a06      	ldr	r2, [pc, #24]	@ (8001454 <HAL_InitTick+0x68>)
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800143e:	2300      	movs	r3, #0
 8001440:	e000      	b.n	8001444 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001442:	2301      	movs	r3, #1
}
 8001444:	4618      	mov	r0, r3
 8001446:	3708      	adds	r7, #8
 8001448:	46bd      	mov	sp, r7
 800144a:	bd80      	pop	{r7, pc}
 800144c:	2400000c 	.word	0x2400000c
 8001450:	24000000 	.word	0x24000000
 8001454:	24000008 	.word	0x24000008

08001458 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001458:	b480      	push	{r7}
 800145a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800145c:	4b06      	ldr	r3, [pc, #24]	@ (8001478 <HAL_IncTick+0x20>)
 800145e:	781b      	ldrb	r3, [r3, #0]
 8001460:	461a      	mov	r2, r3
 8001462:	4b06      	ldr	r3, [pc, #24]	@ (800147c <HAL_IncTick+0x24>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	4413      	add	r3, r2
 8001468:	4a04      	ldr	r2, [pc, #16]	@ (800147c <HAL_IncTick+0x24>)
 800146a:	6013      	str	r3, [r2, #0]
}
 800146c:	bf00      	nop
 800146e:	46bd      	mov	sp, r7
 8001470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001474:	4770      	bx	lr
 8001476:	bf00      	nop
 8001478:	2400000c 	.word	0x2400000c
 800147c:	24000300 	.word	0x24000300

08001480 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001480:	b480      	push	{r7}
 8001482:	af00      	add	r7, sp, #0
  return uwTick;
 8001484:	4b03      	ldr	r3, [pc, #12]	@ (8001494 <HAL_GetTick+0x14>)
 8001486:	681b      	ldr	r3, [r3, #0]
}
 8001488:	4618      	mov	r0, r3
 800148a:	46bd      	mov	sp, r7
 800148c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001490:	4770      	bx	lr
 8001492:	bf00      	nop
 8001494:	24000300 	.word	0x24000300

08001498 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b084      	sub	sp, #16
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80014a0:	f7ff ffee 	bl	8001480 <HAL_GetTick>
 80014a4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014b0:	d005      	beq.n	80014be <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80014b2:	4b0a      	ldr	r3, [pc, #40]	@ (80014dc <HAL_Delay+0x44>)
 80014b4:	781b      	ldrb	r3, [r3, #0]
 80014b6:	461a      	mov	r2, r3
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	4413      	add	r3, r2
 80014bc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80014be:	bf00      	nop
 80014c0:	f7ff ffde 	bl	8001480 <HAL_GetTick>
 80014c4:	4602      	mov	r2, r0
 80014c6:	68bb      	ldr	r3, [r7, #8]
 80014c8:	1ad3      	subs	r3, r2, r3
 80014ca:	68fa      	ldr	r2, [r7, #12]
 80014cc:	429a      	cmp	r2, r3
 80014ce:	d8f7      	bhi.n	80014c0 <HAL_Delay+0x28>
  {
  }
}
 80014d0:	bf00      	nop
 80014d2:	bf00      	nop
 80014d4:	3710      	adds	r7, #16
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}
 80014da:	bf00      	nop
 80014dc:	2400000c 	.word	0x2400000c

080014e0 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80014e0:	b480      	push	{r7}
 80014e2:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80014e4:	4b03      	ldr	r3, [pc, #12]	@ (80014f4 <HAL_GetREVID+0x14>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	0c1b      	lsrs	r3, r3, #16
}
 80014ea:	4618      	mov	r0, r3
 80014ec:	46bd      	mov	sp, r7
 80014ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f2:	4770      	bx	lr
 80014f4:	5c001000 	.word	0x5c001000

080014f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014f8:	b480      	push	{r7}
 80014fa:	b085      	sub	sp, #20
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	f003 0307 	and.w	r3, r3, #7
 8001506:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001508:	4b0b      	ldr	r3, [pc, #44]	@ (8001538 <__NVIC_SetPriorityGrouping+0x40>)
 800150a:	68db      	ldr	r3, [r3, #12]
 800150c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800150e:	68ba      	ldr	r2, [r7, #8]
 8001510:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001514:	4013      	ands	r3, r2
 8001516:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800151c:	68bb      	ldr	r3, [r7, #8]
 800151e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001520:	4b06      	ldr	r3, [pc, #24]	@ (800153c <__NVIC_SetPriorityGrouping+0x44>)
 8001522:	4313      	orrs	r3, r2
 8001524:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001526:	4a04      	ldr	r2, [pc, #16]	@ (8001538 <__NVIC_SetPriorityGrouping+0x40>)
 8001528:	68bb      	ldr	r3, [r7, #8]
 800152a:	60d3      	str	r3, [r2, #12]
}
 800152c:	bf00      	nop
 800152e:	3714      	adds	r7, #20
 8001530:	46bd      	mov	sp, r7
 8001532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001536:	4770      	bx	lr
 8001538:	e000ed00 	.word	0xe000ed00
 800153c:	05fa0000 	.word	0x05fa0000

08001540 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001540:	b480      	push	{r7}
 8001542:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001544:	4b04      	ldr	r3, [pc, #16]	@ (8001558 <__NVIC_GetPriorityGrouping+0x18>)
 8001546:	68db      	ldr	r3, [r3, #12]
 8001548:	0a1b      	lsrs	r3, r3, #8
 800154a:	f003 0307 	and.w	r3, r3, #7
}
 800154e:	4618      	mov	r0, r3
 8001550:	46bd      	mov	sp, r7
 8001552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001556:	4770      	bx	lr
 8001558:	e000ed00 	.word	0xe000ed00

0800155c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800155c:	b480      	push	{r7}
 800155e:	b083      	sub	sp, #12
 8001560:	af00      	add	r7, sp, #0
 8001562:	4603      	mov	r3, r0
 8001564:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001566:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800156a:	2b00      	cmp	r3, #0
 800156c:	db0b      	blt.n	8001586 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800156e:	88fb      	ldrh	r3, [r7, #6]
 8001570:	f003 021f 	and.w	r2, r3, #31
 8001574:	4907      	ldr	r1, [pc, #28]	@ (8001594 <__NVIC_EnableIRQ+0x38>)
 8001576:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800157a:	095b      	lsrs	r3, r3, #5
 800157c:	2001      	movs	r0, #1
 800157e:	fa00 f202 	lsl.w	r2, r0, r2
 8001582:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001586:	bf00      	nop
 8001588:	370c      	adds	r7, #12
 800158a:	46bd      	mov	sp, r7
 800158c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001590:	4770      	bx	lr
 8001592:	bf00      	nop
 8001594:	e000e100 	.word	0xe000e100

08001598 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001598:	b480      	push	{r7}
 800159a:	b083      	sub	sp, #12
 800159c:	af00      	add	r7, sp, #0
 800159e:	4603      	mov	r3, r0
 80015a0:	6039      	str	r1, [r7, #0]
 80015a2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80015a4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	db0a      	blt.n	80015c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	b2da      	uxtb	r2, r3
 80015b0:	490c      	ldr	r1, [pc, #48]	@ (80015e4 <__NVIC_SetPriority+0x4c>)
 80015b2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80015b6:	0112      	lsls	r2, r2, #4
 80015b8:	b2d2      	uxtb	r2, r2
 80015ba:	440b      	add	r3, r1
 80015bc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015c0:	e00a      	b.n	80015d8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015c2:	683b      	ldr	r3, [r7, #0]
 80015c4:	b2da      	uxtb	r2, r3
 80015c6:	4908      	ldr	r1, [pc, #32]	@ (80015e8 <__NVIC_SetPriority+0x50>)
 80015c8:	88fb      	ldrh	r3, [r7, #6]
 80015ca:	f003 030f 	and.w	r3, r3, #15
 80015ce:	3b04      	subs	r3, #4
 80015d0:	0112      	lsls	r2, r2, #4
 80015d2:	b2d2      	uxtb	r2, r2
 80015d4:	440b      	add	r3, r1
 80015d6:	761a      	strb	r2, [r3, #24]
}
 80015d8:	bf00      	nop
 80015da:	370c      	adds	r7, #12
 80015dc:	46bd      	mov	sp, r7
 80015de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e2:	4770      	bx	lr
 80015e4:	e000e100 	.word	0xe000e100
 80015e8:	e000ed00 	.word	0xe000ed00

080015ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015ec:	b480      	push	{r7}
 80015ee:	b089      	sub	sp, #36	@ 0x24
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	60f8      	str	r0, [r7, #12]
 80015f4:	60b9      	str	r1, [r7, #8]
 80015f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	f003 0307 	and.w	r3, r3, #7
 80015fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001600:	69fb      	ldr	r3, [r7, #28]
 8001602:	f1c3 0307 	rsb	r3, r3, #7
 8001606:	2b04      	cmp	r3, #4
 8001608:	bf28      	it	cs
 800160a:	2304      	movcs	r3, #4
 800160c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800160e:	69fb      	ldr	r3, [r7, #28]
 8001610:	3304      	adds	r3, #4
 8001612:	2b06      	cmp	r3, #6
 8001614:	d902      	bls.n	800161c <NVIC_EncodePriority+0x30>
 8001616:	69fb      	ldr	r3, [r7, #28]
 8001618:	3b03      	subs	r3, #3
 800161a:	e000      	b.n	800161e <NVIC_EncodePriority+0x32>
 800161c:	2300      	movs	r3, #0
 800161e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001620:	f04f 32ff 	mov.w	r2, #4294967295
 8001624:	69bb      	ldr	r3, [r7, #24]
 8001626:	fa02 f303 	lsl.w	r3, r2, r3
 800162a:	43da      	mvns	r2, r3
 800162c:	68bb      	ldr	r3, [r7, #8]
 800162e:	401a      	ands	r2, r3
 8001630:	697b      	ldr	r3, [r7, #20]
 8001632:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001634:	f04f 31ff 	mov.w	r1, #4294967295
 8001638:	697b      	ldr	r3, [r7, #20]
 800163a:	fa01 f303 	lsl.w	r3, r1, r3
 800163e:	43d9      	mvns	r1, r3
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001644:	4313      	orrs	r3, r2
         );
}
 8001646:	4618      	mov	r0, r3
 8001648:	3724      	adds	r7, #36	@ 0x24
 800164a:	46bd      	mov	sp, r7
 800164c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001650:	4770      	bx	lr
	...

08001654 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b082      	sub	sp, #8
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	3b01      	subs	r3, #1
 8001660:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001664:	d301      	bcc.n	800166a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001666:	2301      	movs	r3, #1
 8001668:	e00f      	b.n	800168a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800166a:	4a0a      	ldr	r2, [pc, #40]	@ (8001694 <SysTick_Config+0x40>)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	3b01      	subs	r3, #1
 8001670:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001672:	210f      	movs	r1, #15
 8001674:	f04f 30ff 	mov.w	r0, #4294967295
 8001678:	f7ff ff8e 	bl	8001598 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800167c:	4b05      	ldr	r3, [pc, #20]	@ (8001694 <SysTick_Config+0x40>)
 800167e:	2200      	movs	r2, #0
 8001680:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001682:	4b04      	ldr	r3, [pc, #16]	@ (8001694 <SysTick_Config+0x40>)
 8001684:	2207      	movs	r2, #7
 8001686:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001688:	2300      	movs	r3, #0
}
 800168a:	4618      	mov	r0, r3
 800168c:	3708      	adds	r7, #8
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}
 8001692:	bf00      	nop
 8001694:	e000e010 	.word	0xe000e010

08001698 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b082      	sub	sp, #8
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016a0:	6878      	ldr	r0, [r7, #4]
 80016a2:	f7ff ff29 	bl	80014f8 <__NVIC_SetPriorityGrouping>
}
 80016a6:	bf00      	nop
 80016a8:	3708      	adds	r7, #8
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}

080016ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016ae:	b580      	push	{r7, lr}
 80016b0:	b086      	sub	sp, #24
 80016b2:	af00      	add	r7, sp, #0
 80016b4:	4603      	mov	r3, r0
 80016b6:	60b9      	str	r1, [r7, #8]
 80016b8:	607a      	str	r2, [r7, #4]
 80016ba:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80016bc:	f7ff ff40 	bl	8001540 <__NVIC_GetPriorityGrouping>
 80016c0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016c2:	687a      	ldr	r2, [r7, #4]
 80016c4:	68b9      	ldr	r1, [r7, #8]
 80016c6:	6978      	ldr	r0, [r7, #20]
 80016c8:	f7ff ff90 	bl	80015ec <NVIC_EncodePriority>
 80016cc:	4602      	mov	r2, r0
 80016ce:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80016d2:	4611      	mov	r1, r2
 80016d4:	4618      	mov	r0, r3
 80016d6:	f7ff ff5f 	bl	8001598 <__NVIC_SetPriority>
}
 80016da:	bf00      	nop
 80016dc:	3718      	adds	r7, #24
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}

080016e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016e2:	b580      	push	{r7, lr}
 80016e4:	b082      	sub	sp, #8
 80016e6:	af00      	add	r7, sp, #0
 80016e8:	4603      	mov	r3, r0
 80016ea:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016ec:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80016f0:	4618      	mov	r0, r3
 80016f2:	f7ff ff33 	bl	800155c <__NVIC_EnableIRQ>
}
 80016f6:	bf00      	nop
 80016f8:	3708      	adds	r7, #8
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}

080016fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016fe:	b580      	push	{r7, lr}
 8001700:	b082      	sub	sp, #8
 8001702:	af00      	add	r7, sp, #0
 8001704:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001706:	6878      	ldr	r0, [r7, #4]
 8001708:	f7ff ffa4 	bl	8001654 <SysTick_Config>
 800170c:	4603      	mov	r3, r0
}
 800170e:	4618      	mov	r0, r3
 8001710:	3708      	adds	r7, #8
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}
	...

08001718 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001718:	b480      	push	{r7}
 800171a:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 800171c:	f3bf 8f5f 	dmb	sy
}
 8001720:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001722:	4b07      	ldr	r3, [pc, #28]	@ (8001740 <HAL_MPU_Disable+0x28>)
 8001724:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001726:	4a06      	ldr	r2, [pc, #24]	@ (8001740 <HAL_MPU_Disable+0x28>)
 8001728:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800172c:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800172e:	4b05      	ldr	r3, [pc, #20]	@ (8001744 <HAL_MPU_Disable+0x2c>)
 8001730:	2200      	movs	r2, #0
 8001732:	605a      	str	r2, [r3, #4]
}
 8001734:	bf00      	nop
 8001736:	46bd      	mov	sp, r7
 8001738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173c:	4770      	bx	lr
 800173e:	bf00      	nop
 8001740:	e000ed00 	.word	0xe000ed00
 8001744:	e000ed90 	.word	0xe000ed90

08001748 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001748:	b480      	push	{r7}
 800174a:	b083      	sub	sp, #12
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001750:	4a0b      	ldr	r2, [pc, #44]	@ (8001780 <HAL_MPU_Enable+0x38>)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	f043 0301 	orr.w	r3, r3, #1
 8001758:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800175a:	4b0a      	ldr	r3, [pc, #40]	@ (8001784 <HAL_MPU_Enable+0x3c>)
 800175c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800175e:	4a09      	ldr	r2, [pc, #36]	@ (8001784 <HAL_MPU_Enable+0x3c>)
 8001760:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001764:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8001766:	f3bf 8f4f 	dsb	sy
}
 800176a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800176c:	f3bf 8f6f 	isb	sy
}
 8001770:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001772:	bf00      	nop
 8001774:	370c      	adds	r7, #12
 8001776:	46bd      	mov	sp, r7
 8001778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177c:	4770      	bx	lr
 800177e:	bf00      	nop
 8001780:	e000ed90 	.word	0xe000ed90
 8001784:	e000ed00 	.word	0xe000ed00

08001788 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 8001788:	b480      	push	{r7}
 800178a:	b083      	sub	sp, #12
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	785a      	ldrb	r2, [r3, #1]
 8001794:	4b1b      	ldr	r3, [pc, #108]	@ (8001804 <HAL_MPU_ConfigRegion+0x7c>)
 8001796:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8001798:	4b1a      	ldr	r3, [pc, #104]	@ (8001804 <HAL_MPU_ConfigRegion+0x7c>)
 800179a:	691b      	ldr	r3, [r3, #16]
 800179c:	4a19      	ldr	r2, [pc, #100]	@ (8001804 <HAL_MPU_ConfigRegion+0x7c>)
 800179e:	f023 0301 	bic.w	r3, r3, #1
 80017a2:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 80017a4:	4a17      	ldr	r2, [pc, #92]	@ (8001804 <HAL_MPU_ConfigRegion+0x7c>)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	685b      	ldr	r3, [r3, #4]
 80017aa:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	7b1b      	ldrb	r3, [r3, #12]
 80017b0:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	7adb      	ldrb	r3, [r3, #11]
 80017b6:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80017b8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	7a9b      	ldrb	r3, [r3, #10]
 80017be:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80017c0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	7b5b      	ldrb	r3, [r3, #13]
 80017c6:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80017c8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	7b9b      	ldrb	r3, [r3, #14]
 80017ce:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80017d0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	7bdb      	ldrb	r3, [r3, #15]
 80017d6:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80017d8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	7a5b      	ldrb	r3, [r3, #9]
 80017de:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80017e0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	7a1b      	ldrb	r3, [r3, #8]
 80017e6:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80017e8:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80017ea:	687a      	ldr	r2, [r7, #4]
 80017ec:	7812      	ldrb	r2, [r2, #0]
 80017ee:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80017f0:	4a04      	ldr	r2, [pc, #16]	@ (8001804 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80017f2:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80017f4:	6113      	str	r3, [r2, #16]
}
 80017f6:	bf00      	nop
 80017f8:	370c      	adds	r7, #12
 80017fa:	46bd      	mov	sp, r7
 80017fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001800:	4770      	bx	lr
 8001802:	bf00      	nop
 8001804:	e000ed90 	.word	0xe000ed90

08001808 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b086      	sub	sp, #24
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8001810:	f7ff fe36 	bl	8001480 <HAL_GetTick>
 8001814:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	2b00      	cmp	r3, #0
 800181a:	d101      	bne.n	8001820 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 800181c:	2301      	movs	r3, #1
 800181e:	e316      	b.n	8001e4e <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	4a66      	ldr	r2, [pc, #408]	@ (80019c0 <HAL_DMA_Init+0x1b8>)
 8001826:	4293      	cmp	r3, r2
 8001828:	d04a      	beq.n	80018c0 <HAL_DMA_Init+0xb8>
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	4a65      	ldr	r2, [pc, #404]	@ (80019c4 <HAL_DMA_Init+0x1bc>)
 8001830:	4293      	cmp	r3, r2
 8001832:	d045      	beq.n	80018c0 <HAL_DMA_Init+0xb8>
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	4a63      	ldr	r2, [pc, #396]	@ (80019c8 <HAL_DMA_Init+0x1c0>)
 800183a:	4293      	cmp	r3, r2
 800183c:	d040      	beq.n	80018c0 <HAL_DMA_Init+0xb8>
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	4a62      	ldr	r2, [pc, #392]	@ (80019cc <HAL_DMA_Init+0x1c4>)
 8001844:	4293      	cmp	r3, r2
 8001846:	d03b      	beq.n	80018c0 <HAL_DMA_Init+0xb8>
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	4a60      	ldr	r2, [pc, #384]	@ (80019d0 <HAL_DMA_Init+0x1c8>)
 800184e:	4293      	cmp	r3, r2
 8001850:	d036      	beq.n	80018c0 <HAL_DMA_Init+0xb8>
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	4a5f      	ldr	r2, [pc, #380]	@ (80019d4 <HAL_DMA_Init+0x1cc>)
 8001858:	4293      	cmp	r3, r2
 800185a:	d031      	beq.n	80018c0 <HAL_DMA_Init+0xb8>
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	4a5d      	ldr	r2, [pc, #372]	@ (80019d8 <HAL_DMA_Init+0x1d0>)
 8001862:	4293      	cmp	r3, r2
 8001864:	d02c      	beq.n	80018c0 <HAL_DMA_Init+0xb8>
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	4a5c      	ldr	r2, [pc, #368]	@ (80019dc <HAL_DMA_Init+0x1d4>)
 800186c:	4293      	cmp	r3, r2
 800186e:	d027      	beq.n	80018c0 <HAL_DMA_Init+0xb8>
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	4a5a      	ldr	r2, [pc, #360]	@ (80019e0 <HAL_DMA_Init+0x1d8>)
 8001876:	4293      	cmp	r3, r2
 8001878:	d022      	beq.n	80018c0 <HAL_DMA_Init+0xb8>
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	4a59      	ldr	r2, [pc, #356]	@ (80019e4 <HAL_DMA_Init+0x1dc>)
 8001880:	4293      	cmp	r3, r2
 8001882:	d01d      	beq.n	80018c0 <HAL_DMA_Init+0xb8>
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	4a57      	ldr	r2, [pc, #348]	@ (80019e8 <HAL_DMA_Init+0x1e0>)
 800188a:	4293      	cmp	r3, r2
 800188c:	d018      	beq.n	80018c0 <HAL_DMA_Init+0xb8>
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	4a56      	ldr	r2, [pc, #344]	@ (80019ec <HAL_DMA_Init+0x1e4>)
 8001894:	4293      	cmp	r3, r2
 8001896:	d013      	beq.n	80018c0 <HAL_DMA_Init+0xb8>
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	4a54      	ldr	r2, [pc, #336]	@ (80019f0 <HAL_DMA_Init+0x1e8>)
 800189e:	4293      	cmp	r3, r2
 80018a0:	d00e      	beq.n	80018c0 <HAL_DMA_Init+0xb8>
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	4a53      	ldr	r2, [pc, #332]	@ (80019f4 <HAL_DMA_Init+0x1ec>)
 80018a8:	4293      	cmp	r3, r2
 80018aa:	d009      	beq.n	80018c0 <HAL_DMA_Init+0xb8>
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	4a51      	ldr	r2, [pc, #324]	@ (80019f8 <HAL_DMA_Init+0x1f0>)
 80018b2:	4293      	cmp	r3, r2
 80018b4:	d004      	beq.n	80018c0 <HAL_DMA_Init+0xb8>
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	4a50      	ldr	r2, [pc, #320]	@ (80019fc <HAL_DMA_Init+0x1f4>)
 80018bc:	4293      	cmp	r3, r2
 80018be:	d101      	bne.n	80018c4 <HAL_DMA_Init+0xbc>
 80018c0:	2301      	movs	r3, #1
 80018c2:	e000      	b.n	80018c6 <HAL_DMA_Init+0xbe>
 80018c4:	2300      	movs	r3, #0
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	f000 813b 	beq.w	8001b42 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	2202      	movs	r2, #2
 80018d0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	2200      	movs	r2, #0
 80018d8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	4a37      	ldr	r2, [pc, #220]	@ (80019c0 <HAL_DMA_Init+0x1b8>)
 80018e2:	4293      	cmp	r3, r2
 80018e4:	d04a      	beq.n	800197c <HAL_DMA_Init+0x174>
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	4a36      	ldr	r2, [pc, #216]	@ (80019c4 <HAL_DMA_Init+0x1bc>)
 80018ec:	4293      	cmp	r3, r2
 80018ee:	d045      	beq.n	800197c <HAL_DMA_Init+0x174>
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	4a34      	ldr	r2, [pc, #208]	@ (80019c8 <HAL_DMA_Init+0x1c0>)
 80018f6:	4293      	cmp	r3, r2
 80018f8:	d040      	beq.n	800197c <HAL_DMA_Init+0x174>
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	4a33      	ldr	r2, [pc, #204]	@ (80019cc <HAL_DMA_Init+0x1c4>)
 8001900:	4293      	cmp	r3, r2
 8001902:	d03b      	beq.n	800197c <HAL_DMA_Init+0x174>
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	4a31      	ldr	r2, [pc, #196]	@ (80019d0 <HAL_DMA_Init+0x1c8>)
 800190a:	4293      	cmp	r3, r2
 800190c:	d036      	beq.n	800197c <HAL_DMA_Init+0x174>
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	4a30      	ldr	r2, [pc, #192]	@ (80019d4 <HAL_DMA_Init+0x1cc>)
 8001914:	4293      	cmp	r3, r2
 8001916:	d031      	beq.n	800197c <HAL_DMA_Init+0x174>
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	4a2e      	ldr	r2, [pc, #184]	@ (80019d8 <HAL_DMA_Init+0x1d0>)
 800191e:	4293      	cmp	r3, r2
 8001920:	d02c      	beq.n	800197c <HAL_DMA_Init+0x174>
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	4a2d      	ldr	r2, [pc, #180]	@ (80019dc <HAL_DMA_Init+0x1d4>)
 8001928:	4293      	cmp	r3, r2
 800192a:	d027      	beq.n	800197c <HAL_DMA_Init+0x174>
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	4a2b      	ldr	r2, [pc, #172]	@ (80019e0 <HAL_DMA_Init+0x1d8>)
 8001932:	4293      	cmp	r3, r2
 8001934:	d022      	beq.n	800197c <HAL_DMA_Init+0x174>
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	4a2a      	ldr	r2, [pc, #168]	@ (80019e4 <HAL_DMA_Init+0x1dc>)
 800193c:	4293      	cmp	r3, r2
 800193e:	d01d      	beq.n	800197c <HAL_DMA_Init+0x174>
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	4a28      	ldr	r2, [pc, #160]	@ (80019e8 <HAL_DMA_Init+0x1e0>)
 8001946:	4293      	cmp	r3, r2
 8001948:	d018      	beq.n	800197c <HAL_DMA_Init+0x174>
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	4a27      	ldr	r2, [pc, #156]	@ (80019ec <HAL_DMA_Init+0x1e4>)
 8001950:	4293      	cmp	r3, r2
 8001952:	d013      	beq.n	800197c <HAL_DMA_Init+0x174>
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	4a25      	ldr	r2, [pc, #148]	@ (80019f0 <HAL_DMA_Init+0x1e8>)
 800195a:	4293      	cmp	r3, r2
 800195c:	d00e      	beq.n	800197c <HAL_DMA_Init+0x174>
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	4a24      	ldr	r2, [pc, #144]	@ (80019f4 <HAL_DMA_Init+0x1ec>)
 8001964:	4293      	cmp	r3, r2
 8001966:	d009      	beq.n	800197c <HAL_DMA_Init+0x174>
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	4a22      	ldr	r2, [pc, #136]	@ (80019f8 <HAL_DMA_Init+0x1f0>)
 800196e:	4293      	cmp	r3, r2
 8001970:	d004      	beq.n	800197c <HAL_DMA_Init+0x174>
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	4a21      	ldr	r2, [pc, #132]	@ (80019fc <HAL_DMA_Init+0x1f4>)
 8001978:	4293      	cmp	r3, r2
 800197a:	d108      	bne.n	800198e <HAL_DMA_Init+0x186>
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	681a      	ldr	r2, [r3, #0]
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f022 0201 	bic.w	r2, r2, #1
 800198a:	601a      	str	r2, [r3, #0]
 800198c:	e007      	b.n	800199e <HAL_DMA_Init+0x196>
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	681a      	ldr	r2, [r3, #0]
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f022 0201 	bic.w	r2, r2, #1
 800199c:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800199e:	e02f      	b.n	8001a00 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80019a0:	f7ff fd6e 	bl	8001480 <HAL_GetTick>
 80019a4:	4602      	mov	r2, r0
 80019a6:	693b      	ldr	r3, [r7, #16]
 80019a8:	1ad3      	subs	r3, r2, r3
 80019aa:	2b05      	cmp	r3, #5
 80019ac:	d928      	bls.n	8001a00 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	2220      	movs	r2, #32
 80019b2:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	2203      	movs	r2, #3
 80019b8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 80019bc:	2301      	movs	r3, #1
 80019be:	e246      	b.n	8001e4e <HAL_DMA_Init+0x646>
 80019c0:	40020010 	.word	0x40020010
 80019c4:	40020028 	.word	0x40020028
 80019c8:	40020040 	.word	0x40020040
 80019cc:	40020058 	.word	0x40020058
 80019d0:	40020070 	.word	0x40020070
 80019d4:	40020088 	.word	0x40020088
 80019d8:	400200a0 	.word	0x400200a0
 80019dc:	400200b8 	.word	0x400200b8
 80019e0:	40020410 	.word	0x40020410
 80019e4:	40020428 	.word	0x40020428
 80019e8:	40020440 	.word	0x40020440
 80019ec:	40020458 	.word	0x40020458
 80019f0:	40020470 	.word	0x40020470
 80019f4:	40020488 	.word	0x40020488
 80019f8:	400204a0 	.word	0x400204a0
 80019fc:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f003 0301 	and.w	r3, r3, #1
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d1c8      	bne.n	80019a0 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001a16:	697a      	ldr	r2, [r7, #20]
 8001a18:	4b83      	ldr	r3, [pc, #524]	@ (8001c28 <HAL_DMA_Init+0x420>)
 8001a1a:	4013      	ands	r3, r2
 8001a1c:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8001a26:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	691b      	ldr	r3, [r3, #16]
 8001a2c:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a32:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	699b      	ldr	r3, [r3, #24]
 8001a38:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a3e:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	6a1b      	ldr	r3, [r3, #32]
 8001a44:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8001a46:	697a      	ldr	r2, [r7, #20]
 8001a48:	4313      	orrs	r3, r2
 8001a4a:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a50:	2b04      	cmp	r3, #4
 8001a52:	d107      	bne.n	8001a64 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a5c:	4313      	orrs	r3, r2
 8001a5e:	697a      	ldr	r2, [r7, #20]
 8001a60:	4313      	orrs	r3, r2
 8001a62:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8001a64:	4b71      	ldr	r3, [pc, #452]	@ (8001c2c <HAL_DMA_Init+0x424>)
 8001a66:	681a      	ldr	r2, [r3, #0]
 8001a68:	4b71      	ldr	r3, [pc, #452]	@ (8001c30 <HAL_DMA_Init+0x428>)
 8001a6a:	4013      	ands	r3, r2
 8001a6c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001a70:	d328      	bcc.n	8001ac4 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	685b      	ldr	r3, [r3, #4]
 8001a76:	2b28      	cmp	r3, #40	@ 0x28
 8001a78:	d903      	bls.n	8001a82 <HAL_DMA_Init+0x27a>
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	685b      	ldr	r3, [r3, #4]
 8001a7e:	2b2e      	cmp	r3, #46	@ 0x2e
 8001a80:	d917      	bls.n	8001ab2 <HAL_DMA_Init+0x2aa>
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	685b      	ldr	r3, [r3, #4]
 8001a86:	2b3e      	cmp	r3, #62	@ 0x3e
 8001a88:	d903      	bls.n	8001a92 <HAL_DMA_Init+0x28a>
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	685b      	ldr	r3, [r3, #4]
 8001a8e:	2b42      	cmp	r3, #66	@ 0x42
 8001a90:	d90f      	bls.n	8001ab2 <HAL_DMA_Init+0x2aa>
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	685b      	ldr	r3, [r3, #4]
 8001a96:	2b46      	cmp	r3, #70	@ 0x46
 8001a98:	d903      	bls.n	8001aa2 <HAL_DMA_Init+0x29a>
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	685b      	ldr	r3, [r3, #4]
 8001a9e:	2b48      	cmp	r3, #72	@ 0x48
 8001aa0:	d907      	bls.n	8001ab2 <HAL_DMA_Init+0x2aa>
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	685b      	ldr	r3, [r3, #4]
 8001aa6:	2b4e      	cmp	r3, #78	@ 0x4e
 8001aa8:	d905      	bls.n	8001ab6 <HAL_DMA_Init+0x2ae>
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	2b52      	cmp	r3, #82	@ 0x52
 8001ab0:	d801      	bhi.n	8001ab6 <HAL_DMA_Init+0x2ae>
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	e000      	b.n	8001ab8 <HAL_DMA_Init+0x2b0>
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d003      	beq.n	8001ac4 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8001abc:	697b      	ldr	r3, [r7, #20]
 8001abe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001ac2:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	697a      	ldr	r2, [r7, #20]
 8001aca:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	695b      	ldr	r3, [r3, #20]
 8001ad2:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001ad4:	697b      	ldr	r3, [r7, #20]
 8001ad6:	f023 0307 	bic.w	r3, r3, #7
 8001ada:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ae0:	697a      	ldr	r2, [r7, #20]
 8001ae2:	4313      	orrs	r3, r2
 8001ae4:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001aea:	2b04      	cmp	r3, #4
 8001aec:	d117      	bne.n	8001b1e <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001af2:	697a      	ldr	r2, [r7, #20]
 8001af4:	4313      	orrs	r3, r2
 8001af6:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d00e      	beq.n	8001b1e <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001b00:	6878      	ldr	r0, [r7, #4]
 8001b02:	f001 ff1d 	bl	8003940 <DMA_CheckFifoParam>
 8001b06:	4603      	mov	r3, r0
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d008      	beq.n	8001b1e <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	2240      	movs	r2, #64	@ 0x40
 8001b10:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	2201      	movs	r2, #1
 8001b16:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	e197      	b.n	8001e4e <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	697a      	ldr	r2, [r7, #20]
 8001b24:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001b26:	6878      	ldr	r0, [r7, #4]
 8001b28:	f001 fe58 	bl	80037dc <DMA_CalcBaseAndBitshift>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b34:	f003 031f 	and.w	r3, r3, #31
 8001b38:	223f      	movs	r2, #63	@ 0x3f
 8001b3a:	409a      	lsls	r2, r3
 8001b3c:	68bb      	ldr	r3, [r7, #8]
 8001b3e:	609a      	str	r2, [r3, #8]
 8001b40:	e0cd      	b.n	8001cde <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	4a3b      	ldr	r2, [pc, #236]	@ (8001c34 <HAL_DMA_Init+0x42c>)
 8001b48:	4293      	cmp	r3, r2
 8001b4a:	d022      	beq.n	8001b92 <HAL_DMA_Init+0x38a>
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	4a39      	ldr	r2, [pc, #228]	@ (8001c38 <HAL_DMA_Init+0x430>)
 8001b52:	4293      	cmp	r3, r2
 8001b54:	d01d      	beq.n	8001b92 <HAL_DMA_Init+0x38a>
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	4a38      	ldr	r2, [pc, #224]	@ (8001c3c <HAL_DMA_Init+0x434>)
 8001b5c:	4293      	cmp	r3, r2
 8001b5e:	d018      	beq.n	8001b92 <HAL_DMA_Init+0x38a>
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	4a36      	ldr	r2, [pc, #216]	@ (8001c40 <HAL_DMA_Init+0x438>)
 8001b66:	4293      	cmp	r3, r2
 8001b68:	d013      	beq.n	8001b92 <HAL_DMA_Init+0x38a>
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	4a35      	ldr	r2, [pc, #212]	@ (8001c44 <HAL_DMA_Init+0x43c>)
 8001b70:	4293      	cmp	r3, r2
 8001b72:	d00e      	beq.n	8001b92 <HAL_DMA_Init+0x38a>
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4a33      	ldr	r2, [pc, #204]	@ (8001c48 <HAL_DMA_Init+0x440>)
 8001b7a:	4293      	cmp	r3, r2
 8001b7c:	d009      	beq.n	8001b92 <HAL_DMA_Init+0x38a>
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	4a32      	ldr	r2, [pc, #200]	@ (8001c4c <HAL_DMA_Init+0x444>)
 8001b84:	4293      	cmp	r3, r2
 8001b86:	d004      	beq.n	8001b92 <HAL_DMA_Init+0x38a>
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4a30      	ldr	r2, [pc, #192]	@ (8001c50 <HAL_DMA_Init+0x448>)
 8001b8e:	4293      	cmp	r3, r2
 8001b90:	d101      	bne.n	8001b96 <HAL_DMA_Init+0x38e>
 8001b92:	2301      	movs	r3, #1
 8001b94:	e000      	b.n	8001b98 <HAL_DMA_Init+0x390>
 8001b96:	2300      	movs	r3, #0
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	f000 8097 	beq.w	8001ccc <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	4a24      	ldr	r2, [pc, #144]	@ (8001c34 <HAL_DMA_Init+0x42c>)
 8001ba4:	4293      	cmp	r3, r2
 8001ba6:	d021      	beq.n	8001bec <HAL_DMA_Init+0x3e4>
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	4a22      	ldr	r2, [pc, #136]	@ (8001c38 <HAL_DMA_Init+0x430>)
 8001bae:	4293      	cmp	r3, r2
 8001bb0:	d01c      	beq.n	8001bec <HAL_DMA_Init+0x3e4>
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	4a21      	ldr	r2, [pc, #132]	@ (8001c3c <HAL_DMA_Init+0x434>)
 8001bb8:	4293      	cmp	r3, r2
 8001bba:	d017      	beq.n	8001bec <HAL_DMA_Init+0x3e4>
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	4a1f      	ldr	r2, [pc, #124]	@ (8001c40 <HAL_DMA_Init+0x438>)
 8001bc2:	4293      	cmp	r3, r2
 8001bc4:	d012      	beq.n	8001bec <HAL_DMA_Init+0x3e4>
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	4a1e      	ldr	r2, [pc, #120]	@ (8001c44 <HAL_DMA_Init+0x43c>)
 8001bcc:	4293      	cmp	r3, r2
 8001bce:	d00d      	beq.n	8001bec <HAL_DMA_Init+0x3e4>
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	4a1c      	ldr	r2, [pc, #112]	@ (8001c48 <HAL_DMA_Init+0x440>)
 8001bd6:	4293      	cmp	r3, r2
 8001bd8:	d008      	beq.n	8001bec <HAL_DMA_Init+0x3e4>
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	4a1b      	ldr	r2, [pc, #108]	@ (8001c4c <HAL_DMA_Init+0x444>)
 8001be0:	4293      	cmp	r3, r2
 8001be2:	d003      	beq.n	8001bec <HAL_DMA_Init+0x3e4>
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	4a19      	ldr	r2, [pc, #100]	@ (8001c50 <HAL_DMA_Init+0x448>)
 8001bea:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	2202      	movs	r2, #2
 8001bf0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8001c04:	697a      	ldr	r2, [r7, #20]
 8001c06:	4b13      	ldr	r3, [pc, #76]	@ (8001c54 <HAL_DMA_Init+0x44c>)
 8001c08:	4013      	ands	r3, r2
 8001c0a:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	689b      	ldr	r3, [r3, #8]
 8001c10:	2b40      	cmp	r3, #64	@ 0x40
 8001c12:	d021      	beq.n	8001c58 <HAL_DMA_Init+0x450>
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	689b      	ldr	r3, [r3, #8]
 8001c18:	2b80      	cmp	r3, #128	@ 0x80
 8001c1a:	d102      	bne.n	8001c22 <HAL_DMA_Init+0x41a>
 8001c1c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001c20:	e01b      	b.n	8001c5a <HAL_DMA_Init+0x452>
 8001c22:	2300      	movs	r3, #0
 8001c24:	e019      	b.n	8001c5a <HAL_DMA_Init+0x452>
 8001c26:	bf00      	nop
 8001c28:	fe10803f 	.word	0xfe10803f
 8001c2c:	5c001000 	.word	0x5c001000
 8001c30:	ffff0000 	.word	0xffff0000
 8001c34:	58025408 	.word	0x58025408
 8001c38:	5802541c 	.word	0x5802541c
 8001c3c:	58025430 	.word	0x58025430
 8001c40:	58025444 	.word	0x58025444
 8001c44:	58025458 	.word	0x58025458
 8001c48:	5802546c 	.word	0x5802546c
 8001c4c:	58025480 	.word	0x58025480
 8001c50:	58025494 	.word	0x58025494
 8001c54:	fffe000f 	.word	0xfffe000f
 8001c58:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001c5a:	687a      	ldr	r2, [r7, #4]
 8001c5c:	68d2      	ldr	r2, [r2, #12]
 8001c5e:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001c60:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	691b      	ldr	r3, [r3, #16]
 8001c66:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001c68:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	695b      	ldr	r3, [r3, #20]
 8001c6e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001c70:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	699b      	ldr	r3, [r3, #24]
 8001c76:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001c78:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	69db      	ldr	r3, [r3, #28]
 8001c7e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001c80:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	6a1b      	ldr	r3, [r3, #32]
 8001c86:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001c88:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001c8a:	697a      	ldr	r2, [r7, #20]
 8001c8c:	4313      	orrs	r3, r2
 8001c8e:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	697a      	ldr	r2, [r7, #20]
 8001c96:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	461a      	mov	r2, r3
 8001c9e:	4b6e      	ldr	r3, [pc, #440]	@ (8001e58 <HAL_DMA_Init+0x650>)
 8001ca0:	4413      	add	r3, r2
 8001ca2:	4a6e      	ldr	r2, [pc, #440]	@ (8001e5c <HAL_DMA_Init+0x654>)
 8001ca4:	fba2 2303 	umull	r2, r3, r2, r3
 8001ca8:	091b      	lsrs	r3, r3, #4
 8001caa:	009a      	lsls	r2, r3, #2
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001cb0:	6878      	ldr	r0, [r7, #4]
 8001cb2:	f001 fd93 	bl	80037dc <DMA_CalcBaseAndBitshift>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001cbe:	f003 031f 	and.w	r3, r3, #31
 8001cc2:	2201      	movs	r2, #1
 8001cc4:	409a      	lsls	r2, r3
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	605a      	str	r2, [r3, #4]
 8001cca:	e008      	b.n	8001cde <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	2240      	movs	r2, #64	@ 0x40
 8001cd0:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	2203      	movs	r2, #3
 8001cd6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8001cda:	2301      	movs	r3, #1
 8001cdc:	e0b7      	b.n	8001e4e <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	4a5f      	ldr	r2, [pc, #380]	@ (8001e60 <HAL_DMA_Init+0x658>)
 8001ce4:	4293      	cmp	r3, r2
 8001ce6:	d072      	beq.n	8001dce <HAL_DMA_Init+0x5c6>
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	4a5d      	ldr	r2, [pc, #372]	@ (8001e64 <HAL_DMA_Init+0x65c>)
 8001cee:	4293      	cmp	r3, r2
 8001cf0:	d06d      	beq.n	8001dce <HAL_DMA_Init+0x5c6>
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	4a5c      	ldr	r2, [pc, #368]	@ (8001e68 <HAL_DMA_Init+0x660>)
 8001cf8:	4293      	cmp	r3, r2
 8001cfa:	d068      	beq.n	8001dce <HAL_DMA_Init+0x5c6>
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4a5a      	ldr	r2, [pc, #360]	@ (8001e6c <HAL_DMA_Init+0x664>)
 8001d02:	4293      	cmp	r3, r2
 8001d04:	d063      	beq.n	8001dce <HAL_DMA_Init+0x5c6>
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	4a59      	ldr	r2, [pc, #356]	@ (8001e70 <HAL_DMA_Init+0x668>)
 8001d0c:	4293      	cmp	r3, r2
 8001d0e:	d05e      	beq.n	8001dce <HAL_DMA_Init+0x5c6>
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	4a57      	ldr	r2, [pc, #348]	@ (8001e74 <HAL_DMA_Init+0x66c>)
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d059      	beq.n	8001dce <HAL_DMA_Init+0x5c6>
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	4a56      	ldr	r2, [pc, #344]	@ (8001e78 <HAL_DMA_Init+0x670>)
 8001d20:	4293      	cmp	r3, r2
 8001d22:	d054      	beq.n	8001dce <HAL_DMA_Init+0x5c6>
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	4a54      	ldr	r2, [pc, #336]	@ (8001e7c <HAL_DMA_Init+0x674>)
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	d04f      	beq.n	8001dce <HAL_DMA_Init+0x5c6>
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	4a53      	ldr	r2, [pc, #332]	@ (8001e80 <HAL_DMA_Init+0x678>)
 8001d34:	4293      	cmp	r3, r2
 8001d36:	d04a      	beq.n	8001dce <HAL_DMA_Init+0x5c6>
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	4a51      	ldr	r2, [pc, #324]	@ (8001e84 <HAL_DMA_Init+0x67c>)
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d045      	beq.n	8001dce <HAL_DMA_Init+0x5c6>
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	4a50      	ldr	r2, [pc, #320]	@ (8001e88 <HAL_DMA_Init+0x680>)
 8001d48:	4293      	cmp	r3, r2
 8001d4a:	d040      	beq.n	8001dce <HAL_DMA_Init+0x5c6>
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4a4e      	ldr	r2, [pc, #312]	@ (8001e8c <HAL_DMA_Init+0x684>)
 8001d52:	4293      	cmp	r3, r2
 8001d54:	d03b      	beq.n	8001dce <HAL_DMA_Init+0x5c6>
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	4a4d      	ldr	r2, [pc, #308]	@ (8001e90 <HAL_DMA_Init+0x688>)
 8001d5c:	4293      	cmp	r3, r2
 8001d5e:	d036      	beq.n	8001dce <HAL_DMA_Init+0x5c6>
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	4a4b      	ldr	r2, [pc, #300]	@ (8001e94 <HAL_DMA_Init+0x68c>)
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d031      	beq.n	8001dce <HAL_DMA_Init+0x5c6>
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	4a4a      	ldr	r2, [pc, #296]	@ (8001e98 <HAL_DMA_Init+0x690>)
 8001d70:	4293      	cmp	r3, r2
 8001d72:	d02c      	beq.n	8001dce <HAL_DMA_Init+0x5c6>
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	4a48      	ldr	r2, [pc, #288]	@ (8001e9c <HAL_DMA_Init+0x694>)
 8001d7a:	4293      	cmp	r3, r2
 8001d7c:	d027      	beq.n	8001dce <HAL_DMA_Init+0x5c6>
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	4a47      	ldr	r2, [pc, #284]	@ (8001ea0 <HAL_DMA_Init+0x698>)
 8001d84:	4293      	cmp	r3, r2
 8001d86:	d022      	beq.n	8001dce <HAL_DMA_Init+0x5c6>
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	4a45      	ldr	r2, [pc, #276]	@ (8001ea4 <HAL_DMA_Init+0x69c>)
 8001d8e:	4293      	cmp	r3, r2
 8001d90:	d01d      	beq.n	8001dce <HAL_DMA_Init+0x5c6>
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	4a44      	ldr	r2, [pc, #272]	@ (8001ea8 <HAL_DMA_Init+0x6a0>)
 8001d98:	4293      	cmp	r3, r2
 8001d9a:	d018      	beq.n	8001dce <HAL_DMA_Init+0x5c6>
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	4a42      	ldr	r2, [pc, #264]	@ (8001eac <HAL_DMA_Init+0x6a4>)
 8001da2:	4293      	cmp	r3, r2
 8001da4:	d013      	beq.n	8001dce <HAL_DMA_Init+0x5c6>
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	4a41      	ldr	r2, [pc, #260]	@ (8001eb0 <HAL_DMA_Init+0x6a8>)
 8001dac:	4293      	cmp	r3, r2
 8001dae:	d00e      	beq.n	8001dce <HAL_DMA_Init+0x5c6>
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	4a3f      	ldr	r2, [pc, #252]	@ (8001eb4 <HAL_DMA_Init+0x6ac>)
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d009      	beq.n	8001dce <HAL_DMA_Init+0x5c6>
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	4a3e      	ldr	r2, [pc, #248]	@ (8001eb8 <HAL_DMA_Init+0x6b0>)
 8001dc0:	4293      	cmp	r3, r2
 8001dc2:	d004      	beq.n	8001dce <HAL_DMA_Init+0x5c6>
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	4a3c      	ldr	r2, [pc, #240]	@ (8001ebc <HAL_DMA_Init+0x6b4>)
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d101      	bne.n	8001dd2 <HAL_DMA_Init+0x5ca>
 8001dce:	2301      	movs	r3, #1
 8001dd0:	e000      	b.n	8001dd4 <HAL_DMA_Init+0x5cc>
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d032      	beq.n	8001e3e <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001dd8:	6878      	ldr	r0, [r7, #4]
 8001dda:	f001 fe2d 	bl	8003a38 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	689b      	ldr	r3, [r3, #8]
 8001de2:	2b80      	cmp	r3, #128	@ 0x80
 8001de4:	d102      	bne.n	8001dec <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	2200      	movs	r2, #0
 8001dea:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	685a      	ldr	r2, [r3, #4]
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001df4:	b2d2      	uxtb	r2, r2
 8001df6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001dfc:	687a      	ldr	r2, [r7, #4]
 8001dfe:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8001e00:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	685b      	ldr	r3, [r3, #4]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d010      	beq.n	8001e2c <HAL_DMA_Init+0x624>
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	685b      	ldr	r3, [r3, #4]
 8001e0e:	2b08      	cmp	r3, #8
 8001e10:	d80c      	bhi.n	8001e2c <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001e12:	6878      	ldr	r0, [r7, #4]
 8001e14:	f001 feaa 	bl	8003b6c <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e24:	687a      	ldr	r2, [r7, #4]
 8001e26:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8001e28:	605a      	str	r2, [r3, #4]
 8001e2a:	e008      	b.n	8001e3e <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	2200      	movs	r2, #0
 8001e30:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	2200      	movs	r2, #0
 8001e36:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	2200      	movs	r2, #0
 8001e42:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	2201      	movs	r2, #1
 8001e48:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001e4c:	2300      	movs	r3, #0
}
 8001e4e:	4618      	mov	r0, r3
 8001e50:	3718      	adds	r7, #24
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bd80      	pop	{r7, pc}
 8001e56:	bf00      	nop
 8001e58:	a7fdabf8 	.word	0xa7fdabf8
 8001e5c:	cccccccd 	.word	0xcccccccd
 8001e60:	40020010 	.word	0x40020010
 8001e64:	40020028 	.word	0x40020028
 8001e68:	40020040 	.word	0x40020040
 8001e6c:	40020058 	.word	0x40020058
 8001e70:	40020070 	.word	0x40020070
 8001e74:	40020088 	.word	0x40020088
 8001e78:	400200a0 	.word	0x400200a0
 8001e7c:	400200b8 	.word	0x400200b8
 8001e80:	40020410 	.word	0x40020410
 8001e84:	40020428 	.word	0x40020428
 8001e88:	40020440 	.word	0x40020440
 8001e8c:	40020458 	.word	0x40020458
 8001e90:	40020470 	.word	0x40020470
 8001e94:	40020488 	.word	0x40020488
 8001e98:	400204a0 	.word	0x400204a0
 8001e9c:	400204b8 	.word	0x400204b8
 8001ea0:	58025408 	.word	0x58025408
 8001ea4:	5802541c 	.word	0x5802541c
 8001ea8:	58025430 	.word	0x58025430
 8001eac:	58025444 	.word	0x58025444
 8001eb0:	58025458 	.word	0x58025458
 8001eb4:	5802546c 	.word	0x5802546c
 8001eb8:	58025480 	.word	0x58025480
 8001ebc:	58025494 	.word	0x58025494

08001ec0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b086      	sub	sp, #24
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8001ec8:	f7ff fada 	bl	8001480 <HAL_GetTick>
 8001ecc:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d101      	bne.n	8001ed8 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8001ed4:	2301      	movs	r3, #1
 8001ed6:	e2dc      	b.n	8002492 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001ede:	b2db      	uxtb	r3, r3
 8001ee0:	2b02      	cmp	r3, #2
 8001ee2:	d008      	beq.n	8001ef6 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	2280      	movs	r2, #128	@ 0x80
 8001ee8:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	2200      	movs	r2, #0
 8001eee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	e2cd      	b.n	8002492 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	4a76      	ldr	r2, [pc, #472]	@ (80020d4 <HAL_DMA_Abort+0x214>)
 8001efc:	4293      	cmp	r3, r2
 8001efe:	d04a      	beq.n	8001f96 <HAL_DMA_Abort+0xd6>
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	4a74      	ldr	r2, [pc, #464]	@ (80020d8 <HAL_DMA_Abort+0x218>)
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d045      	beq.n	8001f96 <HAL_DMA_Abort+0xd6>
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	4a73      	ldr	r2, [pc, #460]	@ (80020dc <HAL_DMA_Abort+0x21c>)
 8001f10:	4293      	cmp	r3, r2
 8001f12:	d040      	beq.n	8001f96 <HAL_DMA_Abort+0xd6>
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	4a71      	ldr	r2, [pc, #452]	@ (80020e0 <HAL_DMA_Abort+0x220>)
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d03b      	beq.n	8001f96 <HAL_DMA_Abort+0xd6>
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	4a70      	ldr	r2, [pc, #448]	@ (80020e4 <HAL_DMA_Abort+0x224>)
 8001f24:	4293      	cmp	r3, r2
 8001f26:	d036      	beq.n	8001f96 <HAL_DMA_Abort+0xd6>
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4a6e      	ldr	r2, [pc, #440]	@ (80020e8 <HAL_DMA_Abort+0x228>)
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d031      	beq.n	8001f96 <HAL_DMA_Abort+0xd6>
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	4a6d      	ldr	r2, [pc, #436]	@ (80020ec <HAL_DMA_Abort+0x22c>)
 8001f38:	4293      	cmp	r3, r2
 8001f3a:	d02c      	beq.n	8001f96 <HAL_DMA_Abort+0xd6>
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4a6b      	ldr	r2, [pc, #428]	@ (80020f0 <HAL_DMA_Abort+0x230>)
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d027      	beq.n	8001f96 <HAL_DMA_Abort+0xd6>
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	4a6a      	ldr	r2, [pc, #424]	@ (80020f4 <HAL_DMA_Abort+0x234>)
 8001f4c:	4293      	cmp	r3, r2
 8001f4e:	d022      	beq.n	8001f96 <HAL_DMA_Abort+0xd6>
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4a68      	ldr	r2, [pc, #416]	@ (80020f8 <HAL_DMA_Abort+0x238>)
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d01d      	beq.n	8001f96 <HAL_DMA_Abort+0xd6>
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	4a67      	ldr	r2, [pc, #412]	@ (80020fc <HAL_DMA_Abort+0x23c>)
 8001f60:	4293      	cmp	r3, r2
 8001f62:	d018      	beq.n	8001f96 <HAL_DMA_Abort+0xd6>
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	4a65      	ldr	r2, [pc, #404]	@ (8002100 <HAL_DMA_Abort+0x240>)
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d013      	beq.n	8001f96 <HAL_DMA_Abort+0xd6>
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	4a64      	ldr	r2, [pc, #400]	@ (8002104 <HAL_DMA_Abort+0x244>)
 8001f74:	4293      	cmp	r3, r2
 8001f76:	d00e      	beq.n	8001f96 <HAL_DMA_Abort+0xd6>
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4a62      	ldr	r2, [pc, #392]	@ (8002108 <HAL_DMA_Abort+0x248>)
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d009      	beq.n	8001f96 <HAL_DMA_Abort+0xd6>
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	4a61      	ldr	r2, [pc, #388]	@ (800210c <HAL_DMA_Abort+0x24c>)
 8001f88:	4293      	cmp	r3, r2
 8001f8a:	d004      	beq.n	8001f96 <HAL_DMA_Abort+0xd6>
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	4a5f      	ldr	r2, [pc, #380]	@ (8002110 <HAL_DMA_Abort+0x250>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d101      	bne.n	8001f9a <HAL_DMA_Abort+0xda>
 8001f96:	2301      	movs	r3, #1
 8001f98:	e000      	b.n	8001f9c <HAL_DMA_Abort+0xdc>
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d013      	beq.n	8001fc8 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	681a      	ldr	r2, [r3, #0]
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f022 021e 	bic.w	r2, r2, #30
 8001fae:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	695a      	ldr	r2, [r3, #20]
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001fbe:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	617b      	str	r3, [r7, #20]
 8001fc6:	e00a      	b.n	8001fde <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	681a      	ldr	r2, [r3, #0]
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f022 020e 	bic.w	r2, r2, #14
 8001fd6:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	4a3c      	ldr	r2, [pc, #240]	@ (80020d4 <HAL_DMA_Abort+0x214>)
 8001fe4:	4293      	cmp	r3, r2
 8001fe6:	d072      	beq.n	80020ce <HAL_DMA_Abort+0x20e>
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	4a3a      	ldr	r2, [pc, #232]	@ (80020d8 <HAL_DMA_Abort+0x218>)
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	d06d      	beq.n	80020ce <HAL_DMA_Abort+0x20e>
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	4a39      	ldr	r2, [pc, #228]	@ (80020dc <HAL_DMA_Abort+0x21c>)
 8001ff8:	4293      	cmp	r3, r2
 8001ffa:	d068      	beq.n	80020ce <HAL_DMA_Abort+0x20e>
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	4a37      	ldr	r2, [pc, #220]	@ (80020e0 <HAL_DMA_Abort+0x220>)
 8002002:	4293      	cmp	r3, r2
 8002004:	d063      	beq.n	80020ce <HAL_DMA_Abort+0x20e>
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	4a36      	ldr	r2, [pc, #216]	@ (80020e4 <HAL_DMA_Abort+0x224>)
 800200c:	4293      	cmp	r3, r2
 800200e:	d05e      	beq.n	80020ce <HAL_DMA_Abort+0x20e>
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	4a34      	ldr	r2, [pc, #208]	@ (80020e8 <HAL_DMA_Abort+0x228>)
 8002016:	4293      	cmp	r3, r2
 8002018:	d059      	beq.n	80020ce <HAL_DMA_Abort+0x20e>
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	4a33      	ldr	r2, [pc, #204]	@ (80020ec <HAL_DMA_Abort+0x22c>)
 8002020:	4293      	cmp	r3, r2
 8002022:	d054      	beq.n	80020ce <HAL_DMA_Abort+0x20e>
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	4a31      	ldr	r2, [pc, #196]	@ (80020f0 <HAL_DMA_Abort+0x230>)
 800202a:	4293      	cmp	r3, r2
 800202c:	d04f      	beq.n	80020ce <HAL_DMA_Abort+0x20e>
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	4a30      	ldr	r2, [pc, #192]	@ (80020f4 <HAL_DMA_Abort+0x234>)
 8002034:	4293      	cmp	r3, r2
 8002036:	d04a      	beq.n	80020ce <HAL_DMA_Abort+0x20e>
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	4a2e      	ldr	r2, [pc, #184]	@ (80020f8 <HAL_DMA_Abort+0x238>)
 800203e:	4293      	cmp	r3, r2
 8002040:	d045      	beq.n	80020ce <HAL_DMA_Abort+0x20e>
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	4a2d      	ldr	r2, [pc, #180]	@ (80020fc <HAL_DMA_Abort+0x23c>)
 8002048:	4293      	cmp	r3, r2
 800204a:	d040      	beq.n	80020ce <HAL_DMA_Abort+0x20e>
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	4a2b      	ldr	r2, [pc, #172]	@ (8002100 <HAL_DMA_Abort+0x240>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d03b      	beq.n	80020ce <HAL_DMA_Abort+0x20e>
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	4a2a      	ldr	r2, [pc, #168]	@ (8002104 <HAL_DMA_Abort+0x244>)
 800205c:	4293      	cmp	r3, r2
 800205e:	d036      	beq.n	80020ce <HAL_DMA_Abort+0x20e>
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	4a28      	ldr	r2, [pc, #160]	@ (8002108 <HAL_DMA_Abort+0x248>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d031      	beq.n	80020ce <HAL_DMA_Abort+0x20e>
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	4a27      	ldr	r2, [pc, #156]	@ (800210c <HAL_DMA_Abort+0x24c>)
 8002070:	4293      	cmp	r3, r2
 8002072:	d02c      	beq.n	80020ce <HAL_DMA_Abort+0x20e>
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	4a25      	ldr	r2, [pc, #148]	@ (8002110 <HAL_DMA_Abort+0x250>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d027      	beq.n	80020ce <HAL_DMA_Abort+0x20e>
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	4a24      	ldr	r2, [pc, #144]	@ (8002114 <HAL_DMA_Abort+0x254>)
 8002084:	4293      	cmp	r3, r2
 8002086:	d022      	beq.n	80020ce <HAL_DMA_Abort+0x20e>
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	4a22      	ldr	r2, [pc, #136]	@ (8002118 <HAL_DMA_Abort+0x258>)
 800208e:	4293      	cmp	r3, r2
 8002090:	d01d      	beq.n	80020ce <HAL_DMA_Abort+0x20e>
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	4a21      	ldr	r2, [pc, #132]	@ (800211c <HAL_DMA_Abort+0x25c>)
 8002098:	4293      	cmp	r3, r2
 800209a:	d018      	beq.n	80020ce <HAL_DMA_Abort+0x20e>
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	4a1f      	ldr	r2, [pc, #124]	@ (8002120 <HAL_DMA_Abort+0x260>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d013      	beq.n	80020ce <HAL_DMA_Abort+0x20e>
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	4a1e      	ldr	r2, [pc, #120]	@ (8002124 <HAL_DMA_Abort+0x264>)
 80020ac:	4293      	cmp	r3, r2
 80020ae:	d00e      	beq.n	80020ce <HAL_DMA_Abort+0x20e>
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	4a1c      	ldr	r2, [pc, #112]	@ (8002128 <HAL_DMA_Abort+0x268>)
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d009      	beq.n	80020ce <HAL_DMA_Abort+0x20e>
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	4a1b      	ldr	r2, [pc, #108]	@ (800212c <HAL_DMA_Abort+0x26c>)
 80020c0:	4293      	cmp	r3, r2
 80020c2:	d004      	beq.n	80020ce <HAL_DMA_Abort+0x20e>
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	4a19      	ldr	r2, [pc, #100]	@ (8002130 <HAL_DMA_Abort+0x270>)
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d132      	bne.n	8002134 <HAL_DMA_Abort+0x274>
 80020ce:	2301      	movs	r3, #1
 80020d0:	e031      	b.n	8002136 <HAL_DMA_Abort+0x276>
 80020d2:	bf00      	nop
 80020d4:	40020010 	.word	0x40020010
 80020d8:	40020028 	.word	0x40020028
 80020dc:	40020040 	.word	0x40020040
 80020e0:	40020058 	.word	0x40020058
 80020e4:	40020070 	.word	0x40020070
 80020e8:	40020088 	.word	0x40020088
 80020ec:	400200a0 	.word	0x400200a0
 80020f0:	400200b8 	.word	0x400200b8
 80020f4:	40020410 	.word	0x40020410
 80020f8:	40020428 	.word	0x40020428
 80020fc:	40020440 	.word	0x40020440
 8002100:	40020458 	.word	0x40020458
 8002104:	40020470 	.word	0x40020470
 8002108:	40020488 	.word	0x40020488
 800210c:	400204a0 	.word	0x400204a0
 8002110:	400204b8 	.word	0x400204b8
 8002114:	58025408 	.word	0x58025408
 8002118:	5802541c 	.word	0x5802541c
 800211c:	58025430 	.word	0x58025430
 8002120:	58025444 	.word	0x58025444
 8002124:	58025458 	.word	0x58025458
 8002128:	5802546c 	.word	0x5802546c
 800212c:	58025480 	.word	0x58025480
 8002130:	58025494 	.word	0x58025494
 8002134:	2300      	movs	r3, #0
 8002136:	2b00      	cmp	r3, #0
 8002138:	d007      	beq.n	800214a <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800213e:	681a      	ldr	r2, [r3, #0]
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002144:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002148:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	4a6d      	ldr	r2, [pc, #436]	@ (8002304 <HAL_DMA_Abort+0x444>)
 8002150:	4293      	cmp	r3, r2
 8002152:	d04a      	beq.n	80021ea <HAL_DMA_Abort+0x32a>
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	4a6b      	ldr	r2, [pc, #428]	@ (8002308 <HAL_DMA_Abort+0x448>)
 800215a:	4293      	cmp	r3, r2
 800215c:	d045      	beq.n	80021ea <HAL_DMA_Abort+0x32a>
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	4a6a      	ldr	r2, [pc, #424]	@ (800230c <HAL_DMA_Abort+0x44c>)
 8002164:	4293      	cmp	r3, r2
 8002166:	d040      	beq.n	80021ea <HAL_DMA_Abort+0x32a>
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	4a68      	ldr	r2, [pc, #416]	@ (8002310 <HAL_DMA_Abort+0x450>)
 800216e:	4293      	cmp	r3, r2
 8002170:	d03b      	beq.n	80021ea <HAL_DMA_Abort+0x32a>
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	4a67      	ldr	r2, [pc, #412]	@ (8002314 <HAL_DMA_Abort+0x454>)
 8002178:	4293      	cmp	r3, r2
 800217a:	d036      	beq.n	80021ea <HAL_DMA_Abort+0x32a>
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	4a65      	ldr	r2, [pc, #404]	@ (8002318 <HAL_DMA_Abort+0x458>)
 8002182:	4293      	cmp	r3, r2
 8002184:	d031      	beq.n	80021ea <HAL_DMA_Abort+0x32a>
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	4a64      	ldr	r2, [pc, #400]	@ (800231c <HAL_DMA_Abort+0x45c>)
 800218c:	4293      	cmp	r3, r2
 800218e:	d02c      	beq.n	80021ea <HAL_DMA_Abort+0x32a>
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	4a62      	ldr	r2, [pc, #392]	@ (8002320 <HAL_DMA_Abort+0x460>)
 8002196:	4293      	cmp	r3, r2
 8002198:	d027      	beq.n	80021ea <HAL_DMA_Abort+0x32a>
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	4a61      	ldr	r2, [pc, #388]	@ (8002324 <HAL_DMA_Abort+0x464>)
 80021a0:	4293      	cmp	r3, r2
 80021a2:	d022      	beq.n	80021ea <HAL_DMA_Abort+0x32a>
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4a5f      	ldr	r2, [pc, #380]	@ (8002328 <HAL_DMA_Abort+0x468>)
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d01d      	beq.n	80021ea <HAL_DMA_Abort+0x32a>
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	4a5e      	ldr	r2, [pc, #376]	@ (800232c <HAL_DMA_Abort+0x46c>)
 80021b4:	4293      	cmp	r3, r2
 80021b6:	d018      	beq.n	80021ea <HAL_DMA_Abort+0x32a>
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	4a5c      	ldr	r2, [pc, #368]	@ (8002330 <HAL_DMA_Abort+0x470>)
 80021be:	4293      	cmp	r3, r2
 80021c0:	d013      	beq.n	80021ea <HAL_DMA_Abort+0x32a>
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	4a5b      	ldr	r2, [pc, #364]	@ (8002334 <HAL_DMA_Abort+0x474>)
 80021c8:	4293      	cmp	r3, r2
 80021ca:	d00e      	beq.n	80021ea <HAL_DMA_Abort+0x32a>
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4a59      	ldr	r2, [pc, #356]	@ (8002338 <HAL_DMA_Abort+0x478>)
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d009      	beq.n	80021ea <HAL_DMA_Abort+0x32a>
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	4a58      	ldr	r2, [pc, #352]	@ (800233c <HAL_DMA_Abort+0x47c>)
 80021dc:	4293      	cmp	r3, r2
 80021de:	d004      	beq.n	80021ea <HAL_DMA_Abort+0x32a>
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	4a56      	ldr	r2, [pc, #344]	@ (8002340 <HAL_DMA_Abort+0x480>)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d108      	bne.n	80021fc <HAL_DMA_Abort+0x33c>
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	681a      	ldr	r2, [r3, #0]
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f022 0201 	bic.w	r2, r2, #1
 80021f8:	601a      	str	r2, [r3, #0]
 80021fa:	e007      	b.n	800220c <HAL_DMA_Abort+0x34c>
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	681a      	ldr	r2, [r3, #0]
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f022 0201 	bic.w	r2, r2, #1
 800220a:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800220c:	e013      	b.n	8002236 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800220e:	f7ff f937 	bl	8001480 <HAL_GetTick>
 8002212:	4602      	mov	r2, r0
 8002214:	693b      	ldr	r3, [r7, #16]
 8002216:	1ad3      	subs	r3, r2, r3
 8002218:	2b05      	cmp	r3, #5
 800221a:	d90c      	bls.n	8002236 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2220      	movs	r2, #32
 8002220:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	2203      	movs	r2, #3
 8002226:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	2200      	movs	r2, #0
 800222e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8002232:	2301      	movs	r3, #1
 8002234:	e12d      	b.n	8002492 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002236:	697b      	ldr	r3, [r7, #20]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f003 0301 	and.w	r3, r3, #1
 800223e:	2b00      	cmp	r3, #0
 8002240:	d1e5      	bne.n	800220e <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	4a2f      	ldr	r2, [pc, #188]	@ (8002304 <HAL_DMA_Abort+0x444>)
 8002248:	4293      	cmp	r3, r2
 800224a:	d04a      	beq.n	80022e2 <HAL_DMA_Abort+0x422>
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	4a2d      	ldr	r2, [pc, #180]	@ (8002308 <HAL_DMA_Abort+0x448>)
 8002252:	4293      	cmp	r3, r2
 8002254:	d045      	beq.n	80022e2 <HAL_DMA_Abort+0x422>
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	4a2c      	ldr	r2, [pc, #176]	@ (800230c <HAL_DMA_Abort+0x44c>)
 800225c:	4293      	cmp	r3, r2
 800225e:	d040      	beq.n	80022e2 <HAL_DMA_Abort+0x422>
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4a2a      	ldr	r2, [pc, #168]	@ (8002310 <HAL_DMA_Abort+0x450>)
 8002266:	4293      	cmp	r3, r2
 8002268:	d03b      	beq.n	80022e2 <HAL_DMA_Abort+0x422>
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	4a29      	ldr	r2, [pc, #164]	@ (8002314 <HAL_DMA_Abort+0x454>)
 8002270:	4293      	cmp	r3, r2
 8002272:	d036      	beq.n	80022e2 <HAL_DMA_Abort+0x422>
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	4a27      	ldr	r2, [pc, #156]	@ (8002318 <HAL_DMA_Abort+0x458>)
 800227a:	4293      	cmp	r3, r2
 800227c:	d031      	beq.n	80022e2 <HAL_DMA_Abort+0x422>
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	4a26      	ldr	r2, [pc, #152]	@ (800231c <HAL_DMA_Abort+0x45c>)
 8002284:	4293      	cmp	r3, r2
 8002286:	d02c      	beq.n	80022e2 <HAL_DMA_Abort+0x422>
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	4a24      	ldr	r2, [pc, #144]	@ (8002320 <HAL_DMA_Abort+0x460>)
 800228e:	4293      	cmp	r3, r2
 8002290:	d027      	beq.n	80022e2 <HAL_DMA_Abort+0x422>
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	4a23      	ldr	r2, [pc, #140]	@ (8002324 <HAL_DMA_Abort+0x464>)
 8002298:	4293      	cmp	r3, r2
 800229a:	d022      	beq.n	80022e2 <HAL_DMA_Abort+0x422>
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	4a21      	ldr	r2, [pc, #132]	@ (8002328 <HAL_DMA_Abort+0x468>)
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d01d      	beq.n	80022e2 <HAL_DMA_Abort+0x422>
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	4a20      	ldr	r2, [pc, #128]	@ (800232c <HAL_DMA_Abort+0x46c>)
 80022ac:	4293      	cmp	r3, r2
 80022ae:	d018      	beq.n	80022e2 <HAL_DMA_Abort+0x422>
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	4a1e      	ldr	r2, [pc, #120]	@ (8002330 <HAL_DMA_Abort+0x470>)
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d013      	beq.n	80022e2 <HAL_DMA_Abort+0x422>
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	4a1d      	ldr	r2, [pc, #116]	@ (8002334 <HAL_DMA_Abort+0x474>)
 80022c0:	4293      	cmp	r3, r2
 80022c2:	d00e      	beq.n	80022e2 <HAL_DMA_Abort+0x422>
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	4a1b      	ldr	r2, [pc, #108]	@ (8002338 <HAL_DMA_Abort+0x478>)
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d009      	beq.n	80022e2 <HAL_DMA_Abort+0x422>
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	4a1a      	ldr	r2, [pc, #104]	@ (800233c <HAL_DMA_Abort+0x47c>)
 80022d4:	4293      	cmp	r3, r2
 80022d6:	d004      	beq.n	80022e2 <HAL_DMA_Abort+0x422>
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	4a18      	ldr	r2, [pc, #96]	@ (8002340 <HAL_DMA_Abort+0x480>)
 80022de:	4293      	cmp	r3, r2
 80022e0:	d101      	bne.n	80022e6 <HAL_DMA_Abort+0x426>
 80022e2:	2301      	movs	r3, #1
 80022e4:	e000      	b.n	80022e8 <HAL_DMA_Abort+0x428>
 80022e6:	2300      	movs	r3, #0
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d02b      	beq.n	8002344 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022f0:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022f6:	f003 031f 	and.w	r3, r3, #31
 80022fa:	223f      	movs	r2, #63	@ 0x3f
 80022fc:	409a      	lsls	r2, r3
 80022fe:	68bb      	ldr	r3, [r7, #8]
 8002300:	609a      	str	r2, [r3, #8]
 8002302:	e02a      	b.n	800235a <HAL_DMA_Abort+0x49a>
 8002304:	40020010 	.word	0x40020010
 8002308:	40020028 	.word	0x40020028
 800230c:	40020040 	.word	0x40020040
 8002310:	40020058 	.word	0x40020058
 8002314:	40020070 	.word	0x40020070
 8002318:	40020088 	.word	0x40020088
 800231c:	400200a0 	.word	0x400200a0
 8002320:	400200b8 	.word	0x400200b8
 8002324:	40020410 	.word	0x40020410
 8002328:	40020428 	.word	0x40020428
 800232c:	40020440 	.word	0x40020440
 8002330:	40020458 	.word	0x40020458
 8002334:	40020470 	.word	0x40020470
 8002338:	40020488 	.word	0x40020488
 800233c:	400204a0 	.word	0x400204a0
 8002340:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002348:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800234e:	f003 031f 	and.w	r3, r3, #31
 8002352:	2201      	movs	r2, #1
 8002354:	409a      	lsls	r2, r3
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	4a4f      	ldr	r2, [pc, #316]	@ (800249c <HAL_DMA_Abort+0x5dc>)
 8002360:	4293      	cmp	r3, r2
 8002362:	d072      	beq.n	800244a <HAL_DMA_Abort+0x58a>
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	4a4d      	ldr	r2, [pc, #308]	@ (80024a0 <HAL_DMA_Abort+0x5e0>)
 800236a:	4293      	cmp	r3, r2
 800236c:	d06d      	beq.n	800244a <HAL_DMA_Abort+0x58a>
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	4a4c      	ldr	r2, [pc, #304]	@ (80024a4 <HAL_DMA_Abort+0x5e4>)
 8002374:	4293      	cmp	r3, r2
 8002376:	d068      	beq.n	800244a <HAL_DMA_Abort+0x58a>
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	4a4a      	ldr	r2, [pc, #296]	@ (80024a8 <HAL_DMA_Abort+0x5e8>)
 800237e:	4293      	cmp	r3, r2
 8002380:	d063      	beq.n	800244a <HAL_DMA_Abort+0x58a>
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	4a49      	ldr	r2, [pc, #292]	@ (80024ac <HAL_DMA_Abort+0x5ec>)
 8002388:	4293      	cmp	r3, r2
 800238a:	d05e      	beq.n	800244a <HAL_DMA_Abort+0x58a>
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	4a47      	ldr	r2, [pc, #284]	@ (80024b0 <HAL_DMA_Abort+0x5f0>)
 8002392:	4293      	cmp	r3, r2
 8002394:	d059      	beq.n	800244a <HAL_DMA_Abort+0x58a>
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	4a46      	ldr	r2, [pc, #280]	@ (80024b4 <HAL_DMA_Abort+0x5f4>)
 800239c:	4293      	cmp	r3, r2
 800239e:	d054      	beq.n	800244a <HAL_DMA_Abort+0x58a>
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4a44      	ldr	r2, [pc, #272]	@ (80024b8 <HAL_DMA_Abort+0x5f8>)
 80023a6:	4293      	cmp	r3, r2
 80023a8:	d04f      	beq.n	800244a <HAL_DMA_Abort+0x58a>
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	4a43      	ldr	r2, [pc, #268]	@ (80024bc <HAL_DMA_Abort+0x5fc>)
 80023b0:	4293      	cmp	r3, r2
 80023b2:	d04a      	beq.n	800244a <HAL_DMA_Abort+0x58a>
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	4a41      	ldr	r2, [pc, #260]	@ (80024c0 <HAL_DMA_Abort+0x600>)
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d045      	beq.n	800244a <HAL_DMA_Abort+0x58a>
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	4a40      	ldr	r2, [pc, #256]	@ (80024c4 <HAL_DMA_Abort+0x604>)
 80023c4:	4293      	cmp	r3, r2
 80023c6:	d040      	beq.n	800244a <HAL_DMA_Abort+0x58a>
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	4a3e      	ldr	r2, [pc, #248]	@ (80024c8 <HAL_DMA_Abort+0x608>)
 80023ce:	4293      	cmp	r3, r2
 80023d0:	d03b      	beq.n	800244a <HAL_DMA_Abort+0x58a>
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	4a3d      	ldr	r2, [pc, #244]	@ (80024cc <HAL_DMA_Abort+0x60c>)
 80023d8:	4293      	cmp	r3, r2
 80023da:	d036      	beq.n	800244a <HAL_DMA_Abort+0x58a>
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	4a3b      	ldr	r2, [pc, #236]	@ (80024d0 <HAL_DMA_Abort+0x610>)
 80023e2:	4293      	cmp	r3, r2
 80023e4:	d031      	beq.n	800244a <HAL_DMA_Abort+0x58a>
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	4a3a      	ldr	r2, [pc, #232]	@ (80024d4 <HAL_DMA_Abort+0x614>)
 80023ec:	4293      	cmp	r3, r2
 80023ee:	d02c      	beq.n	800244a <HAL_DMA_Abort+0x58a>
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	4a38      	ldr	r2, [pc, #224]	@ (80024d8 <HAL_DMA_Abort+0x618>)
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d027      	beq.n	800244a <HAL_DMA_Abort+0x58a>
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	4a37      	ldr	r2, [pc, #220]	@ (80024dc <HAL_DMA_Abort+0x61c>)
 8002400:	4293      	cmp	r3, r2
 8002402:	d022      	beq.n	800244a <HAL_DMA_Abort+0x58a>
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4a35      	ldr	r2, [pc, #212]	@ (80024e0 <HAL_DMA_Abort+0x620>)
 800240a:	4293      	cmp	r3, r2
 800240c:	d01d      	beq.n	800244a <HAL_DMA_Abort+0x58a>
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	4a34      	ldr	r2, [pc, #208]	@ (80024e4 <HAL_DMA_Abort+0x624>)
 8002414:	4293      	cmp	r3, r2
 8002416:	d018      	beq.n	800244a <HAL_DMA_Abort+0x58a>
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	4a32      	ldr	r2, [pc, #200]	@ (80024e8 <HAL_DMA_Abort+0x628>)
 800241e:	4293      	cmp	r3, r2
 8002420:	d013      	beq.n	800244a <HAL_DMA_Abort+0x58a>
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	4a31      	ldr	r2, [pc, #196]	@ (80024ec <HAL_DMA_Abort+0x62c>)
 8002428:	4293      	cmp	r3, r2
 800242a:	d00e      	beq.n	800244a <HAL_DMA_Abort+0x58a>
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	4a2f      	ldr	r2, [pc, #188]	@ (80024f0 <HAL_DMA_Abort+0x630>)
 8002432:	4293      	cmp	r3, r2
 8002434:	d009      	beq.n	800244a <HAL_DMA_Abort+0x58a>
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	4a2e      	ldr	r2, [pc, #184]	@ (80024f4 <HAL_DMA_Abort+0x634>)
 800243c:	4293      	cmp	r3, r2
 800243e:	d004      	beq.n	800244a <HAL_DMA_Abort+0x58a>
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4a2c      	ldr	r2, [pc, #176]	@ (80024f8 <HAL_DMA_Abort+0x638>)
 8002446:	4293      	cmp	r3, r2
 8002448:	d101      	bne.n	800244e <HAL_DMA_Abort+0x58e>
 800244a:	2301      	movs	r3, #1
 800244c:	e000      	b.n	8002450 <HAL_DMA_Abort+0x590>
 800244e:	2300      	movs	r3, #0
 8002450:	2b00      	cmp	r3, #0
 8002452:	d015      	beq.n	8002480 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002458:	687a      	ldr	r2, [r7, #4]
 800245a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800245c:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002462:	2b00      	cmp	r3, #0
 8002464:	d00c      	beq.n	8002480 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800246a:	681a      	ldr	r2, [r3, #0]
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002470:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002474:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800247a:	687a      	ldr	r2, [r7, #4]
 800247c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800247e:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	2201      	movs	r2, #1
 8002484:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2200      	movs	r2, #0
 800248c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8002490:	2300      	movs	r3, #0
}
 8002492:	4618      	mov	r0, r3
 8002494:	3718      	adds	r7, #24
 8002496:	46bd      	mov	sp, r7
 8002498:	bd80      	pop	{r7, pc}
 800249a:	bf00      	nop
 800249c:	40020010 	.word	0x40020010
 80024a0:	40020028 	.word	0x40020028
 80024a4:	40020040 	.word	0x40020040
 80024a8:	40020058 	.word	0x40020058
 80024ac:	40020070 	.word	0x40020070
 80024b0:	40020088 	.word	0x40020088
 80024b4:	400200a0 	.word	0x400200a0
 80024b8:	400200b8 	.word	0x400200b8
 80024bc:	40020410 	.word	0x40020410
 80024c0:	40020428 	.word	0x40020428
 80024c4:	40020440 	.word	0x40020440
 80024c8:	40020458 	.word	0x40020458
 80024cc:	40020470 	.word	0x40020470
 80024d0:	40020488 	.word	0x40020488
 80024d4:	400204a0 	.word	0x400204a0
 80024d8:	400204b8 	.word	0x400204b8
 80024dc:	58025408 	.word	0x58025408
 80024e0:	5802541c 	.word	0x5802541c
 80024e4:	58025430 	.word	0x58025430
 80024e8:	58025444 	.word	0x58025444
 80024ec:	58025458 	.word	0x58025458
 80024f0:	5802546c 	.word	0x5802546c
 80024f4:	58025480 	.word	0x58025480
 80024f8:	58025494 	.word	0x58025494

080024fc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b084      	sub	sp, #16
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2b00      	cmp	r3, #0
 8002508:	d101      	bne.n	800250e <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800250a:	2301      	movs	r3, #1
 800250c:	e237      	b.n	800297e <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002514:	b2db      	uxtb	r3, r3
 8002516:	2b02      	cmp	r3, #2
 8002518:	d004      	beq.n	8002524 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	2280      	movs	r2, #128	@ 0x80
 800251e:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002520:	2301      	movs	r3, #1
 8002522:	e22c      	b.n	800297e <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	4a5c      	ldr	r2, [pc, #368]	@ (800269c <HAL_DMA_Abort_IT+0x1a0>)
 800252a:	4293      	cmp	r3, r2
 800252c:	d04a      	beq.n	80025c4 <HAL_DMA_Abort_IT+0xc8>
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	4a5b      	ldr	r2, [pc, #364]	@ (80026a0 <HAL_DMA_Abort_IT+0x1a4>)
 8002534:	4293      	cmp	r3, r2
 8002536:	d045      	beq.n	80025c4 <HAL_DMA_Abort_IT+0xc8>
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4a59      	ldr	r2, [pc, #356]	@ (80026a4 <HAL_DMA_Abort_IT+0x1a8>)
 800253e:	4293      	cmp	r3, r2
 8002540:	d040      	beq.n	80025c4 <HAL_DMA_Abort_IT+0xc8>
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	4a58      	ldr	r2, [pc, #352]	@ (80026a8 <HAL_DMA_Abort_IT+0x1ac>)
 8002548:	4293      	cmp	r3, r2
 800254a:	d03b      	beq.n	80025c4 <HAL_DMA_Abort_IT+0xc8>
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	4a56      	ldr	r2, [pc, #344]	@ (80026ac <HAL_DMA_Abort_IT+0x1b0>)
 8002552:	4293      	cmp	r3, r2
 8002554:	d036      	beq.n	80025c4 <HAL_DMA_Abort_IT+0xc8>
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	4a55      	ldr	r2, [pc, #340]	@ (80026b0 <HAL_DMA_Abort_IT+0x1b4>)
 800255c:	4293      	cmp	r3, r2
 800255e:	d031      	beq.n	80025c4 <HAL_DMA_Abort_IT+0xc8>
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	4a53      	ldr	r2, [pc, #332]	@ (80026b4 <HAL_DMA_Abort_IT+0x1b8>)
 8002566:	4293      	cmp	r3, r2
 8002568:	d02c      	beq.n	80025c4 <HAL_DMA_Abort_IT+0xc8>
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	4a52      	ldr	r2, [pc, #328]	@ (80026b8 <HAL_DMA_Abort_IT+0x1bc>)
 8002570:	4293      	cmp	r3, r2
 8002572:	d027      	beq.n	80025c4 <HAL_DMA_Abort_IT+0xc8>
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	4a50      	ldr	r2, [pc, #320]	@ (80026bc <HAL_DMA_Abort_IT+0x1c0>)
 800257a:	4293      	cmp	r3, r2
 800257c:	d022      	beq.n	80025c4 <HAL_DMA_Abort_IT+0xc8>
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	4a4f      	ldr	r2, [pc, #316]	@ (80026c0 <HAL_DMA_Abort_IT+0x1c4>)
 8002584:	4293      	cmp	r3, r2
 8002586:	d01d      	beq.n	80025c4 <HAL_DMA_Abort_IT+0xc8>
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	4a4d      	ldr	r2, [pc, #308]	@ (80026c4 <HAL_DMA_Abort_IT+0x1c8>)
 800258e:	4293      	cmp	r3, r2
 8002590:	d018      	beq.n	80025c4 <HAL_DMA_Abort_IT+0xc8>
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	4a4c      	ldr	r2, [pc, #304]	@ (80026c8 <HAL_DMA_Abort_IT+0x1cc>)
 8002598:	4293      	cmp	r3, r2
 800259a:	d013      	beq.n	80025c4 <HAL_DMA_Abort_IT+0xc8>
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	4a4a      	ldr	r2, [pc, #296]	@ (80026cc <HAL_DMA_Abort_IT+0x1d0>)
 80025a2:	4293      	cmp	r3, r2
 80025a4:	d00e      	beq.n	80025c4 <HAL_DMA_Abort_IT+0xc8>
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	4a49      	ldr	r2, [pc, #292]	@ (80026d0 <HAL_DMA_Abort_IT+0x1d4>)
 80025ac:	4293      	cmp	r3, r2
 80025ae:	d009      	beq.n	80025c4 <HAL_DMA_Abort_IT+0xc8>
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	4a47      	ldr	r2, [pc, #284]	@ (80026d4 <HAL_DMA_Abort_IT+0x1d8>)
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d004      	beq.n	80025c4 <HAL_DMA_Abort_IT+0xc8>
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	4a46      	ldr	r2, [pc, #280]	@ (80026d8 <HAL_DMA_Abort_IT+0x1dc>)
 80025c0:	4293      	cmp	r3, r2
 80025c2:	d101      	bne.n	80025c8 <HAL_DMA_Abort_IT+0xcc>
 80025c4:	2301      	movs	r3, #1
 80025c6:	e000      	b.n	80025ca <HAL_DMA_Abort_IT+0xce>
 80025c8:	2300      	movs	r3, #0
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	f000 8086 	beq.w	80026dc <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2204      	movs	r2, #4
 80025d4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	4a2f      	ldr	r2, [pc, #188]	@ (800269c <HAL_DMA_Abort_IT+0x1a0>)
 80025de:	4293      	cmp	r3, r2
 80025e0:	d04a      	beq.n	8002678 <HAL_DMA_Abort_IT+0x17c>
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	4a2e      	ldr	r2, [pc, #184]	@ (80026a0 <HAL_DMA_Abort_IT+0x1a4>)
 80025e8:	4293      	cmp	r3, r2
 80025ea:	d045      	beq.n	8002678 <HAL_DMA_Abort_IT+0x17c>
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	4a2c      	ldr	r2, [pc, #176]	@ (80026a4 <HAL_DMA_Abort_IT+0x1a8>)
 80025f2:	4293      	cmp	r3, r2
 80025f4:	d040      	beq.n	8002678 <HAL_DMA_Abort_IT+0x17c>
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	4a2b      	ldr	r2, [pc, #172]	@ (80026a8 <HAL_DMA_Abort_IT+0x1ac>)
 80025fc:	4293      	cmp	r3, r2
 80025fe:	d03b      	beq.n	8002678 <HAL_DMA_Abort_IT+0x17c>
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	4a29      	ldr	r2, [pc, #164]	@ (80026ac <HAL_DMA_Abort_IT+0x1b0>)
 8002606:	4293      	cmp	r3, r2
 8002608:	d036      	beq.n	8002678 <HAL_DMA_Abort_IT+0x17c>
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	4a28      	ldr	r2, [pc, #160]	@ (80026b0 <HAL_DMA_Abort_IT+0x1b4>)
 8002610:	4293      	cmp	r3, r2
 8002612:	d031      	beq.n	8002678 <HAL_DMA_Abort_IT+0x17c>
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4a26      	ldr	r2, [pc, #152]	@ (80026b4 <HAL_DMA_Abort_IT+0x1b8>)
 800261a:	4293      	cmp	r3, r2
 800261c:	d02c      	beq.n	8002678 <HAL_DMA_Abort_IT+0x17c>
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	4a25      	ldr	r2, [pc, #148]	@ (80026b8 <HAL_DMA_Abort_IT+0x1bc>)
 8002624:	4293      	cmp	r3, r2
 8002626:	d027      	beq.n	8002678 <HAL_DMA_Abort_IT+0x17c>
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	4a23      	ldr	r2, [pc, #140]	@ (80026bc <HAL_DMA_Abort_IT+0x1c0>)
 800262e:	4293      	cmp	r3, r2
 8002630:	d022      	beq.n	8002678 <HAL_DMA_Abort_IT+0x17c>
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	4a22      	ldr	r2, [pc, #136]	@ (80026c0 <HAL_DMA_Abort_IT+0x1c4>)
 8002638:	4293      	cmp	r3, r2
 800263a:	d01d      	beq.n	8002678 <HAL_DMA_Abort_IT+0x17c>
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	4a20      	ldr	r2, [pc, #128]	@ (80026c4 <HAL_DMA_Abort_IT+0x1c8>)
 8002642:	4293      	cmp	r3, r2
 8002644:	d018      	beq.n	8002678 <HAL_DMA_Abort_IT+0x17c>
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	4a1f      	ldr	r2, [pc, #124]	@ (80026c8 <HAL_DMA_Abort_IT+0x1cc>)
 800264c:	4293      	cmp	r3, r2
 800264e:	d013      	beq.n	8002678 <HAL_DMA_Abort_IT+0x17c>
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	4a1d      	ldr	r2, [pc, #116]	@ (80026cc <HAL_DMA_Abort_IT+0x1d0>)
 8002656:	4293      	cmp	r3, r2
 8002658:	d00e      	beq.n	8002678 <HAL_DMA_Abort_IT+0x17c>
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	4a1c      	ldr	r2, [pc, #112]	@ (80026d0 <HAL_DMA_Abort_IT+0x1d4>)
 8002660:	4293      	cmp	r3, r2
 8002662:	d009      	beq.n	8002678 <HAL_DMA_Abort_IT+0x17c>
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4a1a      	ldr	r2, [pc, #104]	@ (80026d4 <HAL_DMA_Abort_IT+0x1d8>)
 800266a:	4293      	cmp	r3, r2
 800266c:	d004      	beq.n	8002678 <HAL_DMA_Abort_IT+0x17c>
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	4a19      	ldr	r2, [pc, #100]	@ (80026d8 <HAL_DMA_Abort_IT+0x1dc>)
 8002674:	4293      	cmp	r3, r2
 8002676:	d108      	bne.n	800268a <HAL_DMA_Abort_IT+0x18e>
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	681a      	ldr	r2, [r3, #0]
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f022 0201 	bic.w	r2, r2, #1
 8002686:	601a      	str	r2, [r3, #0]
 8002688:	e178      	b.n	800297c <HAL_DMA_Abort_IT+0x480>
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	681a      	ldr	r2, [r3, #0]
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f022 0201 	bic.w	r2, r2, #1
 8002698:	601a      	str	r2, [r3, #0]
 800269a:	e16f      	b.n	800297c <HAL_DMA_Abort_IT+0x480>
 800269c:	40020010 	.word	0x40020010
 80026a0:	40020028 	.word	0x40020028
 80026a4:	40020040 	.word	0x40020040
 80026a8:	40020058 	.word	0x40020058
 80026ac:	40020070 	.word	0x40020070
 80026b0:	40020088 	.word	0x40020088
 80026b4:	400200a0 	.word	0x400200a0
 80026b8:	400200b8 	.word	0x400200b8
 80026bc:	40020410 	.word	0x40020410
 80026c0:	40020428 	.word	0x40020428
 80026c4:	40020440 	.word	0x40020440
 80026c8:	40020458 	.word	0x40020458
 80026cc:	40020470 	.word	0x40020470
 80026d0:	40020488 	.word	0x40020488
 80026d4:	400204a0 	.word	0x400204a0
 80026d8:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	681a      	ldr	r2, [r3, #0]
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f022 020e 	bic.w	r2, r2, #14
 80026ea:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	4a6c      	ldr	r2, [pc, #432]	@ (80028a4 <HAL_DMA_Abort_IT+0x3a8>)
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d04a      	beq.n	800278c <HAL_DMA_Abort_IT+0x290>
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	4a6b      	ldr	r2, [pc, #428]	@ (80028a8 <HAL_DMA_Abort_IT+0x3ac>)
 80026fc:	4293      	cmp	r3, r2
 80026fe:	d045      	beq.n	800278c <HAL_DMA_Abort_IT+0x290>
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	4a69      	ldr	r2, [pc, #420]	@ (80028ac <HAL_DMA_Abort_IT+0x3b0>)
 8002706:	4293      	cmp	r3, r2
 8002708:	d040      	beq.n	800278c <HAL_DMA_Abort_IT+0x290>
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	4a68      	ldr	r2, [pc, #416]	@ (80028b0 <HAL_DMA_Abort_IT+0x3b4>)
 8002710:	4293      	cmp	r3, r2
 8002712:	d03b      	beq.n	800278c <HAL_DMA_Abort_IT+0x290>
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	4a66      	ldr	r2, [pc, #408]	@ (80028b4 <HAL_DMA_Abort_IT+0x3b8>)
 800271a:	4293      	cmp	r3, r2
 800271c:	d036      	beq.n	800278c <HAL_DMA_Abort_IT+0x290>
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	4a65      	ldr	r2, [pc, #404]	@ (80028b8 <HAL_DMA_Abort_IT+0x3bc>)
 8002724:	4293      	cmp	r3, r2
 8002726:	d031      	beq.n	800278c <HAL_DMA_Abort_IT+0x290>
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	4a63      	ldr	r2, [pc, #396]	@ (80028bc <HAL_DMA_Abort_IT+0x3c0>)
 800272e:	4293      	cmp	r3, r2
 8002730:	d02c      	beq.n	800278c <HAL_DMA_Abort_IT+0x290>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	4a62      	ldr	r2, [pc, #392]	@ (80028c0 <HAL_DMA_Abort_IT+0x3c4>)
 8002738:	4293      	cmp	r3, r2
 800273a:	d027      	beq.n	800278c <HAL_DMA_Abort_IT+0x290>
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	4a60      	ldr	r2, [pc, #384]	@ (80028c4 <HAL_DMA_Abort_IT+0x3c8>)
 8002742:	4293      	cmp	r3, r2
 8002744:	d022      	beq.n	800278c <HAL_DMA_Abort_IT+0x290>
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	4a5f      	ldr	r2, [pc, #380]	@ (80028c8 <HAL_DMA_Abort_IT+0x3cc>)
 800274c:	4293      	cmp	r3, r2
 800274e:	d01d      	beq.n	800278c <HAL_DMA_Abort_IT+0x290>
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	4a5d      	ldr	r2, [pc, #372]	@ (80028cc <HAL_DMA_Abort_IT+0x3d0>)
 8002756:	4293      	cmp	r3, r2
 8002758:	d018      	beq.n	800278c <HAL_DMA_Abort_IT+0x290>
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	4a5c      	ldr	r2, [pc, #368]	@ (80028d0 <HAL_DMA_Abort_IT+0x3d4>)
 8002760:	4293      	cmp	r3, r2
 8002762:	d013      	beq.n	800278c <HAL_DMA_Abort_IT+0x290>
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	4a5a      	ldr	r2, [pc, #360]	@ (80028d4 <HAL_DMA_Abort_IT+0x3d8>)
 800276a:	4293      	cmp	r3, r2
 800276c:	d00e      	beq.n	800278c <HAL_DMA_Abort_IT+0x290>
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	4a59      	ldr	r2, [pc, #356]	@ (80028d8 <HAL_DMA_Abort_IT+0x3dc>)
 8002774:	4293      	cmp	r3, r2
 8002776:	d009      	beq.n	800278c <HAL_DMA_Abort_IT+0x290>
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	4a57      	ldr	r2, [pc, #348]	@ (80028dc <HAL_DMA_Abort_IT+0x3e0>)
 800277e:	4293      	cmp	r3, r2
 8002780:	d004      	beq.n	800278c <HAL_DMA_Abort_IT+0x290>
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	4a56      	ldr	r2, [pc, #344]	@ (80028e0 <HAL_DMA_Abort_IT+0x3e4>)
 8002788:	4293      	cmp	r3, r2
 800278a:	d108      	bne.n	800279e <HAL_DMA_Abort_IT+0x2a2>
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	681a      	ldr	r2, [r3, #0]
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f022 0201 	bic.w	r2, r2, #1
 800279a:	601a      	str	r2, [r3, #0]
 800279c:	e007      	b.n	80027ae <HAL_DMA_Abort_IT+0x2b2>
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	681a      	ldr	r2, [r3, #0]
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f022 0201 	bic.w	r2, r2, #1
 80027ac:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	4a3c      	ldr	r2, [pc, #240]	@ (80028a4 <HAL_DMA_Abort_IT+0x3a8>)
 80027b4:	4293      	cmp	r3, r2
 80027b6:	d072      	beq.n	800289e <HAL_DMA_Abort_IT+0x3a2>
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	4a3a      	ldr	r2, [pc, #232]	@ (80028a8 <HAL_DMA_Abort_IT+0x3ac>)
 80027be:	4293      	cmp	r3, r2
 80027c0:	d06d      	beq.n	800289e <HAL_DMA_Abort_IT+0x3a2>
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	4a39      	ldr	r2, [pc, #228]	@ (80028ac <HAL_DMA_Abort_IT+0x3b0>)
 80027c8:	4293      	cmp	r3, r2
 80027ca:	d068      	beq.n	800289e <HAL_DMA_Abort_IT+0x3a2>
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4a37      	ldr	r2, [pc, #220]	@ (80028b0 <HAL_DMA_Abort_IT+0x3b4>)
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d063      	beq.n	800289e <HAL_DMA_Abort_IT+0x3a2>
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	4a36      	ldr	r2, [pc, #216]	@ (80028b4 <HAL_DMA_Abort_IT+0x3b8>)
 80027dc:	4293      	cmp	r3, r2
 80027de:	d05e      	beq.n	800289e <HAL_DMA_Abort_IT+0x3a2>
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	4a34      	ldr	r2, [pc, #208]	@ (80028b8 <HAL_DMA_Abort_IT+0x3bc>)
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d059      	beq.n	800289e <HAL_DMA_Abort_IT+0x3a2>
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	4a33      	ldr	r2, [pc, #204]	@ (80028bc <HAL_DMA_Abort_IT+0x3c0>)
 80027f0:	4293      	cmp	r3, r2
 80027f2:	d054      	beq.n	800289e <HAL_DMA_Abort_IT+0x3a2>
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	4a31      	ldr	r2, [pc, #196]	@ (80028c0 <HAL_DMA_Abort_IT+0x3c4>)
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d04f      	beq.n	800289e <HAL_DMA_Abort_IT+0x3a2>
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	4a30      	ldr	r2, [pc, #192]	@ (80028c4 <HAL_DMA_Abort_IT+0x3c8>)
 8002804:	4293      	cmp	r3, r2
 8002806:	d04a      	beq.n	800289e <HAL_DMA_Abort_IT+0x3a2>
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4a2e      	ldr	r2, [pc, #184]	@ (80028c8 <HAL_DMA_Abort_IT+0x3cc>)
 800280e:	4293      	cmp	r3, r2
 8002810:	d045      	beq.n	800289e <HAL_DMA_Abort_IT+0x3a2>
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	4a2d      	ldr	r2, [pc, #180]	@ (80028cc <HAL_DMA_Abort_IT+0x3d0>)
 8002818:	4293      	cmp	r3, r2
 800281a:	d040      	beq.n	800289e <HAL_DMA_Abort_IT+0x3a2>
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	4a2b      	ldr	r2, [pc, #172]	@ (80028d0 <HAL_DMA_Abort_IT+0x3d4>)
 8002822:	4293      	cmp	r3, r2
 8002824:	d03b      	beq.n	800289e <HAL_DMA_Abort_IT+0x3a2>
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4a2a      	ldr	r2, [pc, #168]	@ (80028d4 <HAL_DMA_Abort_IT+0x3d8>)
 800282c:	4293      	cmp	r3, r2
 800282e:	d036      	beq.n	800289e <HAL_DMA_Abort_IT+0x3a2>
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4a28      	ldr	r2, [pc, #160]	@ (80028d8 <HAL_DMA_Abort_IT+0x3dc>)
 8002836:	4293      	cmp	r3, r2
 8002838:	d031      	beq.n	800289e <HAL_DMA_Abort_IT+0x3a2>
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	4a27      	ldr	r2, [pc, #156]	@ (80028dc <HAL_DMA_Abort_IT+0x3e0>)
 8002840:	4293      	cmp	r3, r2
 8002842:	d02c      	beq.n	800289e <HAL_DMA_Abort_IT+0x3a2>
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4a25      	ldr	r2, [pc, #148]	@ (80028e0 <HAL_DMA_Abort_IT+0x3e4>)
 800284a:	4293      	cmp	r3, r2
 800284c:	d027      	beq.n	800289e <HAL_DMA_Abort_IT+0x3a2>
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	4a24      	ldr	r2, [pc, #144]	@ (80028e4 <HAL_DMA_Abort_IT+0x3e8>)
 8002854:	4293      	cmp	r3, r2
 8002856:	d022      	beq.n	800289e <HAL_DMA_Abort_IT+0x3a2>
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4a22      	ldr	r2, [pc, #136]	@ (80028e8 <HAL_DMA_Abort_IT+0x3ec>)
 800285e:	4293      	cmp	r3, r2
 8002860:	d01d      	beq.n	800289e <HAL_DMA_Abort_IT+0x3a2>
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	4a21      	ldr	r2, [pc, #132]	@ (80028ec <HAL_DMA_Abort_IT+0x3f0>)
 8002868:	4293      	cmp	r3, r2
 800286a:	d018      	beq.n	800289e <HAL_DMA_Abort_IT+0x3a2>
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	4a1f      	ldr	r2, [pc, #124]	@ (80028f0 <HAL_DMA_Abort_IT+0x3f4>)
 8002872:	4293      	cmp	r3, r2
 8002874:	d013      	beq.n	800289e <HAL_DMA_Abort_IT+0x3a2>
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4a1e      	ldr	r2, [pc, #120]	@ (80028f4 <HAL_DMA_Abort_IT+0x3f8>)
 800287c:	4293      	cmp	r3, r2
 800287e:	d00e      	beq.n	800289e <HAL_DMA_Abort_IT+0x3a2>
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	4a1c      	ldr	r2, [pc, #112]	@ (80028f8 <HAL_DMA_Abort_IT+0x3fc>)
 8002886:	4293      	cmp	r3, r2
 8002888:	d009      	beq.n	800289e <HAL_DMA_Abort_IT+0x3a2>
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	4a1b      	ldr	r2, [pc, #108]	@ (80028fc <HAL_DMA_Abort_IT+0x400>)
 8002890:	4293      	cmp	r3, r2
 8002892:	d004      	beq.n	800289e <HAL_DMA_Abort_IT+0x3a2>
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	4a19      	ldr	r2, [pc, #100]	@ (8002900 <HAL_DMA_Abort_IT+0x404>)
 800289a:	4293      	cmp	r3, r2
 800289c:	d132      	bne.n	8002904 <HAL_DMA_Abort_IT+0x408>
 800289e:	2301      	movs	r3, #1
 80028a0:	e031      	b.n	8002906 <HAL_DMA_Abort_IT+0x40a>
 80028a2:	bf00      	nop
 80028a4:	40020010 	.word	0x40020010
 80028a8:	40020028 	.word	0x40020028
 80028ac:	40020040 	.word	0x40020040
 80028b0:	40020058 	.word	0x40020058
 80028b4:	40020070 	.word	0x40020070
 80028b8:	40020088 	.word	0x40020088
 80028bc:	400200a0 	.word	0x400200a0
 80028c0:	400200b8 	.word	0x400200b8
 80028c4:	40020410 	.word	0x40020410
 80028c8:	40020428 	.word	0x40020428
 80028cc:	40020440 	.word	0x40020440
 80028d0:	40020458 	.word	0x40020458
 80028d4:	40020470 	.word	0x40020470
 80028d8:	40020488 	.word	0x40020488
 80028dc:	400204a0 	.word	0x400204a0
 80028e0:	400204b8 	.word	0x400204b8
 80028e4:	58025408 	.word	0x58025408
 80028e8:	5802541c 	.word	0x5802541c
 80028ec:	58025430 	.word	0x58025430
 80028f0:	58025444 	.word	0x58025444
 80028f4:	58025458 	.word	0x58025458
 80028f8:	5802546c 	.word	0x5802546c
 80028fc:	58025480 	.word	0x58025480
 8002900:	58025494 	.word	0x58025494
 8002904:	2300      	movs	r3, #0
 8002906:	2b00      	cmp	r3, #0
 8002908:	d028      	beq.n	800295c <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800290e:	681a      	ldr	r2, [r3, #0]
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002914:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002918:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800291e:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002924:	f003 031f 	and.w	r3, r3, #31
 8002928:	2201      	movs	r2, #1
 800292a:	409a      	lsls	r2, r3
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002934:	687a      	ldr	r2, [r7, #4]
 8002936:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8002938:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800293e:	2b00      	cmp	r3, #0
 8002940:	d00c      	beq.n	800295c <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002946:	681a      	ldr	r2, [r3, #0]
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800294c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002950:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002956:	687a      	ldr	r2, [r7, #4]
 8002958:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800295a:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2201      	movs	r2, #1
 8002960:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2200      	movs	r2, #0
 8002968:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002970:	2b00      	cmp	r3, #0
 8002972:	d003      	beq.n	800297c <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002978:	6878      	ldr	r0, [r7, #4]
 800297a:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 800297c:	2300      	movs	r3, #0
}
 800297e:	4618      	mov	r0, r3
 8002980:	3710      	adds	r7, #16
 8002982:	46bd      	mov	sp, r7
 8002984:	bd80      	pop	{r7, pc}
 8002986:	bf00      	nop

08002988 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	b08a      	sub	sp, #40	@ 0x28
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8002990:	2300      	movs	r3, #0
 8002992:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002994:	4b67      	ldr	r3, [pc, #412]	@ (8002b34 <HAL_DMA_IRQHandler+0x1ac>)
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	4a67      	ldr	r2, [pc, #412]	@ (8002b38 <HAL_DMA_IRQHandler+0x1b0>)
 800299a:	fba2 2303 	umull	r2, r3, r2, r3
 800299e:	0a9b      	lsrs	r3, r3, #10
 80029a0:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029a6:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029ac:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80029ae:	6a3b      	ldr	r3, [r7, #32]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80029b4:	69fb      	ldr	r3, [r7, #28]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	4a5f      	ldr	r2, [pc, #380]	@ (8002b3c <HAL_DMA_IRQHandler+0x1b4>)
 80029c0:	4293      	cmp	r3, r2
 80029c2:	d04a      	beq.n	8002a5a <HAL_DMA_IRQHandler+0xd2>
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	4a5d      	ldr	r2, [pc, #372]	@ (8002b40 <HAL_DMA_IRQHandler+0x1b8>)
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d045      	beq.n	8002a5a <HAL_DMA_IRQHandler+0xd2>
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	4a5c      	ldr	r2, [pc, #368]	@ (8002b44 <HAL_DMA_IRQHandler+0x1bc>)
 80029d4:	4293      	cmp	r3, r2
 80029d6:	d040      	beq.n	8002a5a <HAL_DMA_IRQHandler+0xd2>
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	4a5a      	ldr	r2, [pc, #360]	@ (8002b48 <HAL_DMA_IRQHandler+0x1c0>)
 80029de:	4293      	cmp	r3, r2
 80029e0:	d03b      	beq.n	8002a5a <HAL_DMA_IRQHandler+0xd2>
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	4a59      	ldr	r2, [pc, #356]	@ (8002b4c <HAL_DMA_IRQHandler+0x1c4>)
 80029e8:	4293      	cmp	r3, r2
 80029ea:	d036      	beq.n	8002a5a <HAL_DMA_IRQHandler+0xd2>
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4a57      	ldr	r2, [pc, #348]	@ (8002b50 <HAL_DMA_IRQHandler+0x1c8>)
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d031      	beq.n	8002a5a <HAL_DMA_IRQHandler+0xd2>
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	4a56      	ldr	r2, [pc, #344]	@ (8002b54 <HAL_DMA_IRQHandler+0x1cc>)
 80029fc:	4293      	cmp	r3, r2
 80029fe:	d02c      	beq.n	8002a5a <HAL_DMA_IRQHandler+0xd2>
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4a54      	ldr	r2, [pc, #336]	@ (8002b58 <HAL_DMA_IRQHandler+0x1d0>)
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d027      	beq.n	8002a5a <HAL_DMA_IRQHandler+0xd2>
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	4a53      	ldr	r2, [pc, #332]	@ (8002b5c <HAL_DMA_IRQHandler+0x1d4>)
 8002a10:	4293      	cmp	r3, r2
 8002a12:	d022      	beq.n	8002a5a <HAL_DMA_IRQHandler+0xd2>
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	4a51      	ldr	r2, [pc, #324]	@ (8002b60 <HAL_DMA_IRQHandler+0x1d8>)
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d01d      	beq.n	8002a5a <HAL_DMA_IRQHandler+0xd2>
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	4a50      	ldr	r2, [pc, #320]	@ (8002b64 <HAL_DMA_IRQHandler+0x1dc>)
 8002a24:	4293      	cmp	r3, r2
 8002a26:	d018      	beq.n	8002a5a <HAL_DMA_IRQHandler+0xd2>
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	4a4e      	ldr	r2, [pc, #312]	@ (8002b68 <HAL_DMA_IRQHandler+0x1e0>)
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	d013      	beq.n	8002a5a <HAL_DMA_IRQHandler+0xd2>
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	4a4d      	ldr	r2, [pc, #308]	@ (8002b6c <HAL_DMA_IRQHandler+0x1e4>)
 8002a38:	4293      	cmp	r3, r2
 8002a3a:	d00e      	beq.n	8002a5a <HAL_DMA_IRQHandler+0xd2>
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	4a4b      	ldr	r2, [pc, #300]	@ (8002b70 <HAL_DMA_IRQHandler+0x1e8>)
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d009      	beq.n	8002a5a <HAL_DMA_IRQHandler+0xd2>
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	4a4a      	ldr	r2, [pc, #296]	@ (8002b74 <HAL_DMA_IRQHandler+0x1ec>)
 8002a4c:	4293      	cmp	r3, r2
 8002a4e:	d004      	beq.n	8002a5a <HAL_DMA_IRQHandler+0xd2>
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	4a48      	ldr	r2, [pc, #288]	@ (8002b78 <HAL_DMA_IRQHandler+0x1f0>)
 8002a56:	4293      	cmp	r3, r2
 8002a58:	d101      	bne.n	8002a5e <HAL_DMA_IRQHandler+0xd6>
 8002a5a:	2301      	movs	r3, #1
 8002a5c:	e000      	b.n	8002a60 <HAL_DMA_IRQHandler+0xd8>
 8002a5e:	2300      	movs	r3, #0
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	f000 842b 	beq.w	80032bc <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a6a:	f003 031f 	and.w	r3, r3, #31
 8002a6e:	2208      	movs	r2, #8
 8002a70:	409a      	lsls	r2, r3
 8002a72:	69bb      	ldr	r3, [r7, #24]
 8002a74:	4013      	ands	r3, r2
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	f000 80a2 	beq.w	8002bc0 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4a2e      	ldr	r2, [pc, #184]	@ (8002b3c <HAL_DMA_IRQHandler+0x1b4>)
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d04a      	beq.n	8002b1c <HAL_DMA_IRQHandler+0x194>
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4a2d      	ldr	r2, [pc, #180]	@ (8002b40 <HAL_DMA_IRQHandler+0x1b8>)
 8002a8c:	4293      	cmp	r3, r2
 8002a8e:	d045      	beq.n	8002b1c <HAL_DMA_IRQHandler+0x194>
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4a2b      	ldr	r2, [pc, #172]	@ (8002b44 <HAL_DMA_IRQHandler+0x1bc>)
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d040      	beq.n	8002b1c <HAL_DMA_IRQHandler+0x194>
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	4a2a      	ldr	r2, [pc, #168]	@ (8002b48 <HAL_DMA_IRQHandler+0x1c0>)
 8002aa0:	4293      	cmp	r3, r2
 8002aa2:	d03b      	beq.n	8002b1c <HAL_DMA_IRQHandler+0x194>
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4a28      	ldr	r2, [pc, #160]	@ (8002b4c <HAL_DMA_IRQHandler+0x1c4>)
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d036      	beq.n	8002b1c <HAL_DMA_IRQHandler+0x194>
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4a27      	ldr	r2, [pc, #156]	@ (8002b50 <HAL_DMA_IRQHandler+0x1c8>)
 8002ab4:	4293      	cmp	r3, r2
 8002ab6:	d031      	beq.n	8002b1c <HAL_DMA_IRQHandler+0x194>
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4a25      	ldr	r2, [pc, #148]	@ (8002b54 <HAL_DMA_IRQHandler+0x1cc>)
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d02c      	beq.n	8002b1c <HAL_DMA_IRQHandler+0x194>
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4a24      	ldr	r2, [pc, #144]	@ (8002b58 <HAL_DMA_IRQHandler+0x1d0>)
 8002ac8:	4293      	cmp	r3, r2
 8002aca:	d027      	beq.n	8002b1c <HAL_DMA_IRQHandler+0x194>
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4a22      	ldr	r2, [pc, #136]	@ (8002b5c <HAL_DMA_IRQHandler+0x1d4>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d022      	beq.n	8002b1c <HAL_DMA_IRQHandler+0x194>
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	4a21      	ldr	r2, [pc, #132]	@ (8002b60 <HAL_DMA_IRQHandler+0x1d8>)
 8002adc:	4293      	cmp	r3, r2
 8002ade:	d01d      	beq.n	8002b1c <HAL_DMA_IRQHandler+0x194>
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4a1f      	ldr	r2, [pc, #124]	@ (8002b64 <HAL_DMA_IRQHandler+0x1dc>)
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d018      	beq.n	8002b1c <HAL_DMA_IRQHandler+0x194>
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	4a1e      	ldr	r2, [pc, #120]	@ (8002b68 <HAL_DMA_IRQHandler+0x1e0>)
 8002af0:	4293      	cmp	r3, r2
 8002af2:	d013      	beq.n	8002b1c <HAL_DMA_IRQHandler+0x194>
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	4a1c      	ldr	r2, [pc, #112]	@ (8002b6c <HAL_DMA_IRQHandler+0x1e4>)
 8002afa:	4293      	cmp	r3, r2
 8002afc:	d00e      	beq.n	8002b1c <HAL_DMA_IRQHandler+0x194>
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	4a1b      	ldr	r2, [pc, #108]	@ (8002b70 <HAL_DMA_IRQHandler+0x1e8>)
 8002b04:	4293      	cmp	r3, r2
 8002b06:	d009      	beq.n	8002b1c <HAL_DMA_IRQHandler+0x194>
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	4a19      	ldr	r2, [pc, #100]	@ (8002b74 <HAL_DMA_IRQHandler+0x1ec>)
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	d004      	beq.n	8002b1c <HAL_DMA_IRQHandler+0x194>
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	4a18      	ldr	r2, [pc, #96]	@ (8002b78 <HAL_DMA_IRQHandler+0x1f0>)
 8002b18:	4293      	cmp	r3, r2
 8002b1a:	d12f      	bne.n	8002b7c <HAL_DMA_IRQHandler+0x1f4>
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f003 0304 	and.w	r3, r3, #4
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	bf14      	ite	ne
 8002b2a:	2301      	movne	r3, #1
 8002b2c:	2300      	moveq	r3, #0
 8002b2e:	b2db      	uxtb	r3, r3
 8002b30:	e02e      	b.n	8002b90 <HAL_DMA_IRQHandler+0x208>
 8002b32:	bf00      	nop
 8002b34:	24000000 	.word	0x24000000
 8002b38:	1b4e81b5 	.word	0x1b4e81b5
 8002b3c:	40020010 	.word	0x40020010
 8002b40:	40020028 	.word	0x40020028
 8002b44:	40020040 	.word	0x40020040
 8002b48:	40020058 	.word	0x40020058
 8002b4c:	40020070 	.word	0x40020070
 8002b50:	40020088 	.word	0x40020088
 8002b54:	400200a0 	.word	0x400200a0
 8002b58:	400200b8 	.word	0x400200b8
 8002b5c:	40020410 	.word	0x40020410
 8002b60:	40020428 	.word	0x40020428
 8002b64:	40020440 	.word	0x40020440
 8002b68:	40020458 	.word	0x40020458
 8002b6c:	40020470 	.word	0x40020470
 8002b70:	40020488 	.word	0x40020488
 8002b74:	400204a0 	.word	0x400204a0
 8002b78:	400204b8 	.word	0x400204b8
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f003 0308 	and.w	r3, r3, #8
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	bf14      	ite	ne
 8002b8a:	2301      	movne	r3, #1
 8002b8c:	2300      	moveq	r3, #0
 8002b8e:	b2db      	uxtb	r3, r3
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d015      	beq.n	8002bc0 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	681a      	ldr	r2, [r3, #0]
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f022 0204 	bic.w	r2, r2, #4
 8002ba2:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ba8:	f003 031f 	and.w	r3, r3, #31
 8002bac:	2208      	movs	r2, #8
 8002bae:	409a      	lsls	r2, r3
 8002bb0:	6a3b      	ldr	r3, [r7, #32]
 8002bb2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bb8:	f043 0201 	orr.w	r2, r3, #1
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bc4:	f003 031f 	and.w	r3, r3, #31
 8002bc8:	69ba      	ldr	r2, [r7, #24]
 8002bca:	fa22 f303 	lsr.w	r3, r2, r3
 8002bce:	f003 0301 	and.w	r3, r3, #1
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d06e      	beq.n	8002cb4 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	4a69      	ldr	r2, [pc, #420]	@ (8002d80 <HAL_DMA_IRQHandler+0x3f8>)
 8002bdc:	4293      	cmp	r3, r2
 8002bde:	d04a      	beq.n	8002c76 <HAL_DMA_IRQHandler+0x2ee>
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4a67      	ldr	r2, [pc, #412]	@ (8002d84 <HAL_DMA_IRQHandler+0x3fc>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d045      	beq.n	8002c76 <HAL_DMA_IRQHandler+0x2ee>
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	4a66      	ldr	r2, [pc, #408]	@ (8002d88 <HAL_DMA_IRQHandler+0x400>)
 8002bf0:	4293      	cmp	r3, r2
 8002bf2:	d040      	beq.n	8002c76 <HAL_DMA_IRQHandler+0x2ee>
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4a64      	ldr	r2, [pc, #400]	@ (8002d8c <HAL_DMA_IRQHandler+0x404>)
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d03b      	beq.n	8002c76 <HAL_DMA_IRQHandler+0x2ee>
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	4a63      	ldr	r2, [pc, #396]	@ (8002d90 <HAL_DMA_IRQHandler+0x408>)
 8002c04:	4293      	cmp	r3, r2
 8002c06:	d036      	beq.n	8002c76 <HAL_DMA_IRQHandler+0x2ee>
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4a61      	ldr	r2, [pc, #388]	@ (8002d94 <HAL_DMA_IRQHandler+0x40c>)
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d031      	beq.n	8002c76 <HAL_DMA_IRQHandler+0x2ee>
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	4a60      	ldr	r2, [pc, #384]	@ (8002d98 <HAL_DMA_IRQHandler+0x410>)
 8002c18:	4293      	cmp	r3, r2
 8002c1a:	d02c      	beq.n	8002c76 <HAL_DMA_IRQHandler+0x2ee>
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4a5e      	ldr	r2, [pc, #376]	@ (8002d9c <HAL_DMA_IRQHandler+0x414>)
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d027      	beq.n	8002c76 <HAL_DMA_IRQHandler+0x2ee>
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	4a5d      	ldr	r2, [pc, #372]	@ (8002da0 <HAL_DMA_IRQHandler+0x418>)
 8002c2c:	4293      	cmp	r3, r2
 8002c2e:	d022      	beq.n	8002c76 <HAL_DMA_IRQHandler+0x2ee>
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4a5b      	ldr	r2, [pc, #364]	@ (8002da4 <HAL_DMA_IRQHandler+0x41c>)
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d01d      	beq.n	8002c76 <HAL_DMA_IRQHandler+0x2ee>
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	4a5a      	ldr	r2, [pc, #360]	@ (8002da8 <HAL_DMA_IRQHandler+0x420>)
 8002c40:	4293      	cmp	r3, r2
 8002c42:	d018      	beq.n	8002c76 <HAL_DMA_IRQHandler+0x2ee>
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	4a58      	ldr	r2, [pc, #352]	@ (8002dac <HAL_DMA_IRQHandler+0x424>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d013      	beq.n	8002c76 <HAL_DMA_IRQHandler+0x2ee>
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	4a57      	ldr	r2, [pc, #348]	@ (8002db0 <HAL_DMA_IRQHandler+0x428>)
 8002c54:	4293      	cmp	r3, r2
 8002c56:	d00e      	beq.n	8002c76 <HAL_DMA_IRQHandler+0x2ee>
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4a55      	ldr	r2, [pc, #340]	@ (8002db4 <HAL_DMA_IRQHandler+0x42c>)
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d009      	beq.n	8002c76 <HAL_DMA_IRQHandler+0x2ee>
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	4a54      	ldr	r2, [pc, #336]	@ (8002db8 <HAL_DMA_IRQHandler+0x430>)
 8002c68:	4293      	cmp	r3, r2
 8002c6a:	d004      	beq.n	8002c76 <HAL_DMA_IRQHandler+0x2ee>
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	4a52      	ldr	r2, [pc, #328]	@ (8002dbc <HAL_DMA_IRQHandler+0x434>)
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d10a      	bne.n	8002c8c <HAL_DMA_IRQHandler+0x304>
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	695b      	ldr	r3, [r3, #20]
 8002c7c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	bf14      	ite	ne
 8002c84:	2301      	movne	r3, #1
 8002c86:	2300      	moveq	r3, #0
 8002c88:	b2db      	uxtb	r3, r3
 8002c8a:	e003      	b.n	8002c94 <HAL_DMA_IRQHandler+0x30c>
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	2300      	movs	r3, #0
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d00d      	beq.n	8002cb4 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c9c:	f003 031f 	and.w	r3, r3, #31
 8002ca0:	2201      	movs	r2, #1
 8002ca2:	409a      	lsls	r2, r3
 8002ca4:	6a3b      	ldr	r3, [r7, #32]
 8002ca6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002cac:	f043 0202 	orr.w	r2, r3, #2
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002cb8:	f003 031f 	and.w	r3, r3, #31
 8002cbc:	2204      	movs	r2, #4
 8002cbe:	409a      	lsls	r2, r3
 8002cc0:	69bb      	ldr	r3, [r7, #24]
 8002cc2:	4013      	ands	r3, r2
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	f000 808f 	beq.w	8002de8 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	4a2c      	ldr	r2, [pc, #176]	@ (8002d80 <HAL_DMA_IRQHandler+0x3f8>)
 8002cd0:	4293      	cmp	r3, r2
 8002cd2:	d04a      	beq.n	8002d6a <HAL_DMA_IRQHandler+0x3e2>
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4a2a      	ldr	r2, [pc, #168]	@ (8002d84 <HAL_DMA_IRQHandler+0x3fc>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d045      	beq.n	8002d6a <HAL_DMA_IRQHandler+0x3e2>
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	4a29      	ldr	r2, [pc, #164]	@ (8002d88 <HAL_DMA_IRQHandler+0x400>)
 8002ce4:	4293      	cmp	r3, r2
 8002ce6:	d040      	beq.n	8002d6a <HAL_DMA_IRQHandler+0x3e2>
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4a27      	ldr	r2, [pc, #156]	@ (8002d8c <HAL_DMA_IRQHandler+0x404>)
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d03b      	beq.n	8002d6a <HAL_DMA_IRQHandler+0x3e2>
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	4a26      	ldr	r2, [pc, #152]	@ (8002d90 <HAL_DMA_IRQHandler+0x408>)
 8002cf8:	4293      	cmp	r3, r2
 8002cfa:	d036      	beq.n	8002d6a <HAL_DMA_IRQHandler+0x3e2>
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	4a24      	ldr	r2, [pc, #144]	@ (8002d94 <HAL_DMA_IRQHandler+0x40c>)
 8002d02:	4293      	cmp	r3, r2
 8002d04:	d031      	beq.n	8002d6a <HAL_DMA_IRQHandler+0x3e2>
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	4a23      	ldr	r2, [pc, #140]	@ (8002d98 <HAL_DMA_IRQHandler+0x410>)
 8002d0c:	4293      	cmp	r3, r2
 8002d0e:	d02c      	beq.n	8002d6a <HAL_DMA_IRQHandler+0x3e2>
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	4a21      	ldr	r2, [pc, #132]	@ (8002d9c <HAL_DMA_IRQHandler+0x414>)
 8002d16:	4293      	cmp	r3, r2
 8002d18:	d027      	beq.n	8002d6a <HAL_DMA_IRQHandler+0x3e2>
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	4a20      	ldr	r2, [pc, #128]	@ (8002da0 <HAL_DMA_IRQHandler+0x418>)
 8002d20:	4293      	cmp	r3, r2
 8002d22:	d022      	beq.n	8002d6a <HAL_DMA_IRQHandler+0x3e2>
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4a1e      	ldr	r2, [pc, #120]	@ (8002da4 <HAL_DMA_IRQHandler+0x41c>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d01d      	beq.n	8002d6a <HAL_DMA_IRQHandler+0x3e2>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	4a1d      	ldr	r2, [pc, #116]	@ (8002da8 <HAL_DMA_IRQHandler+0x420>)
 8002d34:	4293      	cmp	r3, r2
 8002d36:	d018      	beq.n	8002d6a <HAL_DMA_IRQHandler+0x3e2>
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	4a1b      	ldr	r2, [pc, #108]	@ (8002dac <HAL_DMA_IRQHandler+0x424>)
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d013      	beq.n	8002d6a <HAL_DMA_IRQHandler+0x3e2>
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	4a1a      	ldr	r2, [pc, #104]	@ (8002db0 <HAL_DMA_IRQHandler+0x428>)
 8002d48:	4293      	cmp	r3, r2
 8002d4a:	d00e      	beq.n	8002d6a <HAL_DMA_IRQHandler+0x3e2>
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	4a18      	ldr	r2, [pc, #96]	@ (8002db4 <HAL_DMA_IRQHandler+0x42c>)
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d009      	beq.n	8002d6a <HAL_DMA_IRQHandler+0x3e2>
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	4a17      	ldr	r2, [pc, #92]	@ (8002db8 <HAL_DMA_IRQHandler+0x430>)
 8002d5c:	4293      	cmp	r3, r2
 8002d5e:	d004      	beq.n	8002d6a <HAL_DMA_IRQHandler+0x3e2>
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	4a15      	ldr	r2, [pc, #84]	@ (8002dbc <HAL_DMA_IRQHandler+0x434>)
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d12a      	bne.n	8002dc0 <HAL_DMA_IRQHandler+0x438>
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f003 0302 	and.w	r3, r3, #2
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	bf14      	ite	ne
 8002d78:	2301      	movne	r3, #1
 8002d7a:	2300      	moveq	r3, #0
 8002d7c:	b2db      	uxtb	r3, r3
 8002d7e:	e023      	b.n	8002dc8 <HAL_DMA_IRQHandler+0x440>
 8002d80:	40020010 	.word	0x40020010
 8002d84:	40020028 	.word	0x40020028
 8002d88:	40020040 	.word	0x40020040
 8002d8c:	40020058 	.word	0x40020058
 8002d90:	40020070 	.word	0x40020070
 8002d94:	40020088 	.word	0x40020088
 8002d98:	400200a0 	.word	0x400200a0
 8002d9c:	400200b8 	.word	0x400200b8
 8002da0:	40020410 	.word	0x40020410
 8002da4:	40020428 	.word	0x40020428
 8002da8:	40020440 	.word	0x40020440
 8002dac:	40020458 	.word	0x40020458
 8002db0:	40020470 	.word	0x40020470
 8002db4:	40020488 	.word	0x40020488
 8002db8:	400204a0 	.word	0x400204a0
 8002dbc:	400204b8 	.word	0x400204b8
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d00d      	beq.n	8002de8 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002dd0:	f003 031f 	and.w	r3, r3, #31
 8002dd4:	2204      	movs	r2, #4
 8002dd6:	409a      	lsls	r2, r3
 8002dd8:	6a3b      	ldr	r3, [r7, #32]
 8002dda:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002de0:	f043 0204 	orr.w	r2, r3, #4
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002dec:	f003 031f 	and.w	r3, r3, #31
 8002df0:	2210      	movs	r2, #16
 8002df2:	409a      	lsls	r2, r3
 8002df4:	69bb      	ldr	r3, [r7, #24]
 8002df6:	4013      	ands	r3, r2
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	f000 80a6 	beq.w	8002f4a <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	4a85      	ldr	r2, [pc, #532]	@ (8003018 <HAL_DMA_IRQHandler+0x690>)
 8002e04:	4293      	cmp	r3, r2
 8002e06:	d04a      	beq.n	8002e9e <HAL_DMA_IRQHandler+0x516>
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	4a83      	ldr	r2, [pc, #524]	@ (800301c <HAL_DMA_IRQHandler+0x694>)
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d045      	beq.n	8002e9e <HAL_DMA_IRQHandler+0x516>
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	4a82      	ldr	r2, [pc, #520]	@ (8003020 <HAL_DMA_IRQHandler+0x698>)
 8002e18:	4293      	cmp	r3, r2
 8002e1a:	d040      	beq.n	8002e9e <HAL_DMA_IRQHandler+0x516>
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	4a80      	ldr	r2, [pc, #512]	@ (8003024 <HAL_DMA_IRQHandler+0x69c>)
 8002e22:	4293      	cmp	r3, r2
 8002e24:	d03b      	beq.n	8002e9e <HAL_DMA_IRQHandler+0x516>
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	4a7f      	ldr	r2, [pc, #508]	@ (8003028 <HAL_DMA_IRQHandler+0x6a0>)
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	d036      	beq.n	8002e9e <HAL_DMA_IRQHandler+0x516>
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4a7d      	ldr	r2, [pc, #500]	@ (800302c <HAL_DMA_IRQHandler+0x6a4>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d031      	beq.n	8002e9e <HAL_DMA_IRQHandler+0x516>
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	4a7c      	ldr	r2, [pc, #496]	@ (8003030 <HAL_DMA_IRQHandler+0x6a8>)
 8002e40:	4293      	cmp	r3, r2
 8002e42:	d02c      	beq.n	8002e9e <HAL_DMA_IRQHandler+0x516>
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4a7a      	ldr	r2, [pc, #488]	@ (8003034 <HAL_DMA_IRQHandler+0x6ac>)
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d027      	beq.n	8002e9e <HAL_DMA_IRQHandler+0x516>
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	4a79      	ldr	r2, [pc, #484]	@ (8003038 <HAL_DMA_IRQHandler+0x6b0>)
 8002e54:	4293      	cmp	r3, r2
 8002e56:	d022      	beq.n	8002e9e <HAL_DMA_IRQHandler+0x516>
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4a77      	ldr	r2, [pc, #476]	@ (800303c <HAL_DMA_IRQHandler+0x6b4>)
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d01d      	beq.n	8002e9e <HAL_DMA_IRQHandler+0x516>
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	4a76      	ldr	r2, [pc, #472]	@ (8003040 <HAL_DMA_IRQHandler+0x6b8>)
 8002e68:	4293      	cmp	r3, r2
 8002e6a:	d018      	beq.n	8002e9e <HAL_DMA_IRQHandler+0x516>
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	4a74      	ldr	r2, [pc, #464]	@ (8003044 <HAL_DMA_IRQHandler+0x6bc>)
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d013      	beq.n	8002e9e <HAL_DMA_IRQHandler+0x516>
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4a73      	ldr	r2, [pc, #460]	@ (8003048 <HAL_DMA_IRQHandler+0x6c0>)
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	d00e      	beq.n	8002e9e <HAL_DMA_IRQHandler+0x516>
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4a71      	ldr	r2, [pc, #452]	@ (800304c <HAL_DMA_IRQHandler+0x6c4>)
 8002e86:	4293      	cmp	r3, r2
 8002e88:	d009      	beq.n	8002e9e <HAL_DMA_IRQHandler+0x516>
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	4a70      	ldr	r2, [pc, #448]	@ (8003050 <HAL_DMA_IRQHandler+0x6c8>)
 8002e90:	4293      	cmp	r3, r2
 8002e92:	d004      	beq.n	8002e9e <HAL_DMA_IRQHandler+0x516>
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	4a6e      	ldr	r2, [pc, #440]	@ (8003054 <HAL_DMA_IRQHandler+0x6cc>)
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d10a      	bne.n	8002eb4 <HAL_DMA_IRQHandler+0x52c>
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f003 0308 	and.w	r3, r3, #8
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	bf14      	ite	ne
 8002eac:	2301      	movne	r3, #1
 8002eae:	2300      	moveq	r3, #0
 8002eb0:	b2db      	uxtb	r3, r3
 8002eb2:	e009      	b.n	8002ec8 <HAL_DMA_IRQHandler+0x540>
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f003 0304 	and.w	r3, r3, #4
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	bf14      	ite	ne
 8002ec2:	2301      	movne	r3, #1
 8002ec4:	2300      	moveq	r3, #0
 8002ec6:	b2db      	uxtb	r3, r3
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d03e      	beq.n	8002f4a <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ed0:	f003 031f 	and.w	r3, r3, #31
 8002ed4:	2210      	movs	r2, #16
 8002ed6:	409a      	lsls	r2, r3
 8002ed8:	6a3b      	ldr	r3, [r7, #32]
 8002eda:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d018      	beq.n	8002f1c <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d108      	bne.n	8002f0a <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d024      	beq.n	8002f4a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f04:	6878      	ldr	r0, [r7, #4]
 8002f06:	4798      	blx	r3
 8002f08:	e01f      	b.n	8002f4a <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d01b      	beq.n	8002f4a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002f16:	6878      	ldr	r0, [r7, #4]
 8002f18:	4798      	blx	r3
 8002f1a:	e016      	b.n	8002f4a <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d107      	bne.n	8002f3a <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	681a      	ldr	r2, [r3, #0]
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f022 0208 	bic.w	r2, r2, #8
 8002f38:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d003      	beq.n	8002f4a <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f46:	6878      	ldr	r0, [r7, #4]
 8002f48:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f4e:	f003 031f 	and.w	r3, r3, #31
 8002f52:	2220      	movs	r2, #32
 8002f54:	409a      	lsls	r2, r3
 8002f56:	69bb      	ldr	r3, [r7, #24]
 8002f58:	4013      	ands	r3, r2
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	f000 8110 	beq.w	8003180 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4a2c      	ldr	r2, [pc, #176]	@ (8003018 <HAL_DMA_IRQHandler+0x690>)
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d04a      	beq.n	8003000 <HAL_DMA_IRQHandler+0x678>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4a2b      	ldr	r2, [pc, #172]	@ (800301c <HAL_DMA_IRQHandler+0x694>)
 8002f70:	4293      	cmp	r3, r2
 8002f72:	d045      	beq.n	8003000 <HAL_DMA_IRQHandler+0x678>
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4a29      	ldr	r2, [pc, #164]	@ (8003020 <HAL_DMA_IRQHandler+0x698>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d040      	beq.n	8003000 <HAL_DMA_IRQHandler+0x678>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4a28      	ldr	r2, [pc, #160]	@ (8003024 <HAL_DMA_IRQHandler+0x69c>)
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d03b      	beq.n	8003000 <HAL_DMA_IRQHandler+0x678>
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4a26      	ldr	r2, [pc, #152]	@ (8003028 <HAL_DMA_IRQHandler+0x6a0>)
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d036      	beq.n	8003000 <HAL_DMA_IRQHandler+0x678>
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4a25      	ldr	r2, [pc, #148]	@ (800302c <HAL_DMA_IRQHandler+0x6a4>)
 8002f98:	4293      	cmp	r3, r2
 8002f9a:	d031      	beq.n	8003000 <HAL_DMA_IRQHandler+0x678>
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4a23      	ldr	r2, [pc, #140]	@ (8003030 <HAL_DMA_IRQHandler+0x6a8>)
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d02c      	beq.n	8003000 <HAL_DMA_IRQHandler+0x678>
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	4a22      	ldr	r2, [pc, #136]	@ (8003034 <HAL_DMA_IRQHandler+0x6ac>)
 8002fac:	4293      	cmp	r3, r2
 8002fae:	d027      	beq.n	8003000 <HAL_DMA_IRQHandler+0x678>
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	4a20      	ldr	r2, [pc, #128]	@ (8003038 <HAL_DMA_IRQHandler+0x6b0>)
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d022      	beq.n	8003000 <HAL_DMA_IRQHandler+0x678>
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	4a1f      	ldr	r2, [pc, #124]	@ (800303c <HAL_DMA_IRQHandler+0x6b4>)
 8002fc0:	4293      	cmp	r3, r2
 8002fc2:	d01d      	beq.n	8003000 <HAL_DMA_IRQHandler+0x678>
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	4a1d      	ldr	r2, [pc, #116]	@ (8003040 <HAL_DMA_IRQHandler+0x6b8>)
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d018      	beq.n	8003000 <HAL_DMA_IRQHandler+0x678>
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	4a1c      	ldr	r2, [pc, #112]	@ (8003044 <HAL_DMA_IRQHandler+0x6bc>)
 8002fd4:	4293      	cmp	r3, r2
 8002fd6:	d013      	beq.n	8003000 <HAL_DMA_IRQHandler+0x678>
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	4a1a      	ldr	r2, [pc, #104]	@ (8003048 <HAL_DMA_IRQHandler+0x6c0>)
 8002fde:	4293      	cmp	r3, r2
 8002fe0:	d00e      	beq.n	8003000 <HAL_DMA_IRQHandler+0x678>
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	4a19      	ldr	r2, [pc, #100]	@ (800304c <HAL_DMA_IRQHandler+0x6c4>)
 8002fe8:	4293      	cmp	r3, r2
 8002fea:	d009      	beq.n	8003000 <HAL_DMA_IRQHandler+0x678>
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	4a17      	ldr	r2, [pc, #92]	@ (8003050 <HAL_DMA_IRQHandler+0x6c8>)
 8002ff2:	4293      	cmp	r3, r2
 8002ff4:	d004      	beq.n	8003000 <HAL_DMA_IRQHandler+0x678>
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	4a16      	ldr	r2, [pc, #88]	@ (8003054 <HAL_DMA_IRQHandler+0x6cc>)
 8002ffc:	4293      	cmp	r3, r2
 8002ffe:	d12b      	bne.n	8003058 <HAL_DMA_IRQHandler+0x6d0>
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f003 0310 	and.w	r3, r3, #16
 800300a:	2b00      	cmp	r3, #0
 800300c:	bf14      	ite	ne
 800300e:	2301      	movne	r3, #1
 8003010:	2300      	moveq	r3, #0
 8003012:	b2db      	uxtb	r3, r3
 8003014:	e02a      	b.n	800306c <HAL_DMA_IRQHandler+0x6e4>
 8003016:	bf00      	nop
 8003018:	40020010 	.word	0x40020010
 800301c:	40020028 	.word	0x40020028
 8003020:	40020040 	.word	0x40020040
 8003024:	40020058 	.word	0x40020058
 8003028:	40020070 	.word	0x40020070
 800302c:	40020088 	.word	0x40020088
 8003030:	400200a0 	.word	0x400200a0
 8003034:	400200b8 	.word	0x400200b8
 8003038:	40020410 	.word	0x40020410
 800303c:	40020428 	.word	0x40020428
 8003040:	40020440 	.word	0x40020440
 8003044:	40020458 	.word	0x40020458
 8003048:	40020470 	.word	0x40020470
 800304c:	40020488 	.word	0x40020488
 8003050:	400204a0 	.word	0x400204a0
 8003054:	400204b8 	.word	0x400204b8
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f003 0302 	and.w	r3, r3, #2
 8003062:	2b00      	cmp	r3, #0
 8003064:	bf14      	ite	ne
 8003066:	2301      	movne	r3, #1
 8003068:	2300      	moveq	r3, #0
 800306a:	b2db      	uxtb	r3, r3
 800306c:	2b00      	cmp	r3, #0
 800306e:	f000 8087 	beq.w	8003180 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003076:	f003 031f 	and.w	r3, r3, #31
 800307a:	2220      	movs	r2, #32
 800307c:	409a      	lsls	r2, r3
 800307e:	6a3b      	ldr	r3, [r7, #32]
 8003080:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003088:	b2db      	uxtb	r3, r3
 800308a:	2b04      	cmp	r3, #4
 800308c:	d139      	bne.n	8003102 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	681a      	ldr	r2, [r3, #0]
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f022 0216 	bic.w	r2, r2, #22
 800309c:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	695a      	ldr	r2, [r3, #20]
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80030ac:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d103      	bne.n	80030be <HAL_DMA_IRQHandler+0x736>
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d007      	beq.n	80030ce <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	681a      	ldr	r2, [r3, #0]
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f022 0208 	bic.w	r2, r2, #8
 80030cc:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030d2:	f003 031f 	and.w	r3, r3, #31
 80030d6:	223f      	movs	r2, #63	@ 0x3f
 80030d8:	409a      	lsls	r2, r3
 80030da:	6a3b      	ldr	r3, [r7, #32]
 80030dc:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2201      	movs	r2, #1
 80030e2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	2200      	movs	r2, #0
 80030ea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	f000 834a 	beq.w	800378c <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80030fc:	6878      	ldr	r0, [r7, #4]
 80030fe:	4798      	blx	r3
          }
          return;
 8003100:	e344      	b.n	800378c <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800310c:	2b00      	cmp	r3, #0
 800310e:	d018      	beq.n	8003142 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800311a:	2b00      	cmp	r3, #0
 800311c:	d108      	bne.n	8003130 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003122:	2b00      	cmp	r3, #0
 8003124:	d02c      	beq.n	8003180 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800312a:	6878      	ldr	r0, [r7, #4]
 800312c:	4798      	blx	r3
 800312e:	e027      	b.n	8003180 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003134:	2b00      	cmp	r3, #0
 8003136:	d023      	beq.n	8003180 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800313c:	6878      	ldr	r0, [r7, #4]
 800313e:	4798      	blx	r3
 8003140:	e01e      	b.n	8003180 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800314c:	2b00      	cmp	r3, #0
 800314e:	d10f      	bne.n	8003170 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	681a      	ldr	r2, [r3, #0]
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f022 0210 	bic.w	r2, r2, #16
 800315e:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2201      	movs	r2, #1
 8003164:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2200      	movs	r2, #0
 800316c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003174:	2b00      	cmp	r3, #0
 8003176:	d003      	beq.n	8003180 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800317c:	6878      	ldr	r0, [r7, #4]
 800317e:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003184:	2b00      	cmp	r3, #0
 8003186:	f000 8306 	beq.w	8003796 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800318e:	f003 0301 	and.w	r3, r3, #1
 8003192:	2b00      	cmp	r3, #0
 8003194:	f000 8088 	beq.w	80032a8 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2204      	movs	r2, #4
 800319c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	4a7a      	ldr	r2, [pc, #488]	@ (8003390 <HAL_DMA_IRQHandler+0xa08>)
 80031a6:	4293      	cmp	r3, r2
 80031a8:	d04a      	beq.n	8003240 <HAL_DMA_IRQHandler+0x8b8>
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	4a79      	ldr	r2, [pc, #484]	@ (8003394 <HAL_DMA_IRQHandler+0xa0c>)
 80031b0:	4293      	cmp	r3, r2
 80031b2:	d045      	beq.n	8003240 <HAL_DMA_IRQHandler+0x8b8>
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	4a77      	ldr	r2, [pc, #476]	@ (8003398 <HAL_DMA_IRQHandler+0xa10>)
 80031ba:	4293      	cmp	r3, r2
 80031bc:	d040      	beq.n	8003240 <HAL_DMA_IRQHandler+0x8b8>
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	4a76      	ldr	r2, [pc, #472]	@ (800339c <HAL_DMA_IRQHandler+0xa14>)
 80031c4:	4293      	cmp	r3, r2
 80031c6:	d03b      	beq.n	8003240 <HAL_DMA_IRQHandler+0x8b8>
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	4a74      	ldr	r2, [pc, #464]	@ (80033a0 <HAL_DMA_IRQHandler+0xa18>)
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d036      	beq.n	8003240 <HAL_DMA_IRQHandler+0x8b8>
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	4a73      	ldr	r2, [pc, #460]	@ (80033a4 <HAL_DMA_IRQHandler+0xa1c>)
 80031d8:	4293      	cmp	r3, r2
 80031da:	d031      	beq.n	8003240 <HAL_DMA_IRQHandler+0x8b8>
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	4a71      	ldr	r2, [pc, #452]	@ (80033a8 <HAL_DMA_IRQHandler+0xa20>)
 80031e2:	4293      	cmp	r3, r2
 80031e4:	d02c      	beq.n	8003240 <HAL_DMA_IRQHandler+0x8b8>
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	4a70      	ldr	r2, [pc, #448]	@ (80033ac <HAL_DMA_IRQHandler+0xa24>)
 80031ec:	4293      	cmp	r3, r2
 80031ee:	d027      	beq.n	8003240 <HAL_DMA_IRQHandler+0x8b8>
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	4a6e      	ldr	r2, [pc, #440]	@ (80033b0 <HAL_DMA_IRQHandler+0xa28>)
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d022      	beq.n	8003240 <HAL_DMA_IRQHandler+0x8b8>
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	4a6d      	ldr	r2, [pc, #436]	@ (80033b4 <HAL_DMA_IRQHandler+0xa2c>)
 8003200:	4293      	cmp	r3, r2
 8003202:	d01d      	beq.n	8003240 <HAL_DMA_IRQHandler+0x8b8>
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	4a6b      	ldr	r2, [pc, #428]	@ (80033b8 <HAL_DMA_IRQHandler+0xa30>)
 800320a:	4293      	cmp	r3, r2
 800320c:	d018      	beq.n	8003240 <HAL_DMA_IRQHandler+0x8b8>
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	4a6a      	ldr	r2, [pc, #424]	@ (80033bc <HAL_DMA_IRQHandler+0xa34>)
 8003214:	4293      	cmp	r3, r2
 8003216:	d013      	beq.n	8003240 <HAL_DMA_IRQHandler+0x8b8>
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	4a68      	ldr	r2, [pc, #416]	@ (80033c0 <HAL_DMA_IRQHandler+0xa38>)
 800321e:	4293      	cmp	r3, r2
 8003220:	d00e      	beq.n	8003240 <HAL_DMA_IRQHandler+0x8b8>
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	4a67      	ldr	r2, [pc, #412]	@ (80033c4 <HAL_DMA_IRQHandler+0xa3c>)
 8003228:	4293      	cmp	r3, r2
 800322a:	d009      	beq.n	8003240 <HAL_DMA_IRQHandler+0x8b8>
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	4a65      	ldr	r2, [pc, #404]	@ (80033c8 <HAL_DMA_IRQHandler+0xa40>)
 8003232:	4293      	cmp	r3, r2
 8003234:	d004      	beq.n	8003240 <HAL_DMA_IRQHandler+0x8b8>
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	4a64      	ldr	r2, [pc, #400]	@ (80033cc <HAL_DMA_IRQHandler+0xa44>)
 800323c:	4293      	cmp	r3, r2
 800323e:	d108      	bne.n	8003252 <HAL_DMA_IRQHandler+0x8ca>
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	681a      	ldr	r2, [r3, #0]
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f022 0201 	bic.w	r2, r2, #1
 800324e:	601a      	str	r2, [r3, #0]
 8003250:	e007      	b.n	8003262 <HAL_DMA_IRQHandler+0x8da>
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	681a      	ldr	r2, [r3, #0]
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f022 0201 	bic.w	r2, r2, #1
 8003260:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	3301      	adds	r3, #1
 8003266:	60fb      	str	r3, [r7, #12]
 8003268:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800326a:	429a      	cmp	r2, r3
 800326c:	d307      	bcc.n	800327e <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f003 0301 	and.w	r3, r3, #1
 8003278:	2b00      	cmp	r3, #0
 800327a:	d1f2      	bne.n	8003262 <HAL_DMA_IRQHandler+0x8da>
 800327c:	e000      	b.n	8003280 <HAL_DMA_IRQHandler+0x8f8>
            break;
 800327e:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f003 0301 	and.w	r3, r3, #1
 800328a:	2b00      	cmp	r3, #0
 800328c:	d004      	beq.n	8003298 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	2203      	movs	r2, #3
 8003292:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8003296:	e003      	b.n	80032a0 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2201      	movs	r2, #1
 800329c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2200      	movs	r2, #0
 80032a4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	f000 8272 	beq.w	8003796 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80032b6:	6878      	ldr	r0, [r7, #4]
 80032b8:	4798      	blx	r3
 80032ba:	e26c      	b.n	8003796 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	4a43      	ldr	r2, [pc, #268]	@ (80033d0 <HAL_DMA_IRQHandler+0xa48>)
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d022      	beq.n	800330c <HAL_DMA_IRQHandler+0x984>
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	4a42      	ldr	r2, [pc, #264]	@ (80033d4 <HAL_DMA_IRQHandler+0xa4c>)
 80032cc:	4293      	cmp	r3, r2
 80032ce:	d01d      	beq.n	800330c <HAL_DMA_IRQHandler+0x984>
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	4a40      	ldr	r2, [pc, #256]	@ (80033d8 <HAL_DMA_IRQHandler+0xa50>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d018      	beq.n	800330c <HAL_DMA_IRQHandler+0x984>
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	4a3f      	ldr	r2, [pc, #252]	@ (80033dc <HAL_DMA_IRQHandler+0xa54>)
 80032e0:	4293      	cmp	r3, r2
 80032e2:	d013      	beq.n	800330c <HAL_DMA_IRQHandler+0x984>
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4a3d      	ldr	r2, [pc, #244]	@ (80033e0 <HAL_DMA_IRQHandler+0xa58>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d00e      	beq.n	800330c <HAL_DMA_IRQHandler+0x984>
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	4a3c      	ldr	r2, [pc, #240]	@ (80033e4 <HAL_DMA_IRQHandler+0xa5c>)
 80032f4:	4293      	cmp	r3, r2
 80032f6:	d009      	beq.n	800330c <HAL_DMA_IRQHandler+0x984>
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	4a3a      	ldr	r2, [pc, #232]	@ (80033e8 <HAL_DMA_IRQHandler+0xa60>)
 80032fe:	4293      	cmp	r3, r2
 8003300:	d004      	beq.n	800330c <HAL_DMA_IRQHandler+0x984>
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	4a39      	ldr	r2, [pc, #228]	@ (80033ec <HAL_DMA_IRQHandler+0xa64>)
 8003308:	4293      	cmp	r3, r2
 800330a:	d101      	bne.n	8003310 <HAL_DMA_IRQHandler+0x988>
 800330c:	2301      	movs	r3, #1
 800330e:	e000      	b.n	8003312 <HAL_DMA_IRQHandler+0x98a>
 8003310:	2300      	movs	r3, #0
 8003312:	2b00      	cmp	r3, #0
 8003314:	f000 823f 	beq.w	8003796 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003324:	f003 031f 	and.w	r3, r3, #31
 8003328:	2204      	movs	r2, #4
 800332a:	409a      	lsls	r2, r3
 800332c:	697b      	ldr	r3, [r7, #20]
 800332e:	4013      	ands	r3, r2
 8003330:	2b00      	cmp	r3, #0
 8003332:	f000 80cd 	beq.w	80034d0 <HAL_DMA_IRQHandler+0xb48>
 8003336:	693b      	ldr	r3, [r7, #16]
 8003338:	f003 0304 	and.w	r3, r3, #4
 800333c:	2b00      	cmp	r3, #0
 800333e:	f000 80c7 	beq.w	80034d0 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003346:	f003 031f 	and.w	r3, r3, #31
 800334a:	2204      	movs	r2, #4
 800334c:	409a      	lsls	r2, r3
 800334e:	69fb      	ldr	r3, [r7, #28]
 8003350:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003352:	693b      	ldr	r3, [r7, #16]
 8003354:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003358:	2b00      	cmp	r3, #0
 800335a:	d049      	beq.n	80033f0 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800335c:	693b      	ldr	r3, [r7, #16]
 800335e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003362:	2b00      	cmp	r3, #0
 8003364:	d109      	bne.n	800337a <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800336a:	2b00      	cmp	r3, #0
 800336c:	f000 8210 	beq.w	8003790 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003374:	6878      	ldr	r0, [r7, #4]
 8003376:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003378:	e20a      	b.n	8003790 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800337e:	2b00      	cmp	r3, #0
 8003380:	f000 8206 	beq.w	8003790 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003388:	6878      	ldr	r0, [r7, #4]
 800338a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800338c:	e200      	b.n	8003790 <HAL_DMA_IRQHandler+0xe08>
 800338e:	bf00      	nop
 8003390:	40020010 	.word	0x40020010
 8003394:	40020028 	.word	0x40020028
 8003398:	40020040 	.word	0x40020040
 800339c:	40020058 	.word	0x40020058
 80033a0:	40020070 	.word	0x40020070
 80033a4:	40020088 	.word	0x40020088
 80033a8:	400200a0 	.word	0x400200a0
 80033ac:	400200b8 	.word	0x400200b8
 80033b0:	40020410 	.word	0x40020410
 80033b4:	40020428 	.word	0x40020428
 80033b8:	40020440 	.word	0x40020440
 80033bc:	40020458 	.word	0x40020458
 80033c0:	40020470 	.word	0x40020470
 80033c4:	40020488 	.word	0x40020488
 80033c8:	400204a0 	.word	0x400204a0
 80033cc:	400204b8 	.word	0x400204b8
 80033d0:	58025408 	.word	0x58025408
 80033d4:	5802541c 	.word	0x5802541c
 80033d8:	58025430 	.word	0x58025430
 80033dc:	58025444 	.word	0x58025444
 80033e0:	58025458 	.word	0x58025458
 80033e4:	5802546c 	.word	0x5802546c
 80033e8:	58025480 	.word	0x58025480
 80033ec:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80033f0:	693b      	ldr	r3, [r7, #16]
 80033f2:	f003 0320 	and.w	r3, r3, #32
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d160      	bne.n	80034bc <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	4a7f      	ldr	r2, [pc, #508]	@ (80035fc <HAL_DMA_IRQHandler+0xc74>)
 8003400:	4293      	cmp	r3, r2
 8003402:	d04a      	beq.n	800349a <HAL_DMA_IRQHandler+0xb12>
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	4a7d      	ldr	r2, [pc, #500]	@ (8003600 <HAL_DMA_IRQHandler+0xc78>)
 800340a:	4293      	cmp	r3, r2
 800340c:	d045      	beq.n	800349a <HAL_DMA_IRQHandler+0xb12>
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	4a7c      	ldr	r2, [pc, #496]	@ (8003604 <HAL_DMA_IRQHandler+0xc7c>)
 8003414:	4293      	cmp	r3, r2
 8003416:	d040      	beq.n	800349a <HAL_DMA_IRQHandler+0xb12>
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	4a7a      	ldr	r2, [pc, #488]	@ (8003608 <HAL_DMA_IRQHandler+0xc80>)
 800341e:	4293      	cmp	r3, r2
 8003420:	d03b      	beq.n	800349a <HAL_DMA_IRQHandler+0xb12>
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	4a79      	ldr	r2, [pc, #484]	@ (800360c <HAL_DMA_IRQHandler+0xc84>)
 8003428:	4293      	cmp	r3, r2
 800342a:	d036      	beq.n	800349a <HAL_DMA_IRQHandler+0xb12>
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	4a77      	ldr	r2, [pc, #476]	@ (8003610 <HAL_DMA_IRQHandler+0xc88>)
 8003432:	4293      	cmp	r3, r2
 8003434:	d031      	beq.n	800349a <HAL_DMA_IRQHandler+0xb12>
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	4a76      	ldr	r2, [pc, #472]	@ (8003614 <HAL_DMA_IRQHandler+0xc8c>)
 800343c:	4293      	cmp	r3, r2
 800343e:	d02c      	beq.n	800349a <HAL_DMA_IRQHandler+0xb12>
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	4a74      	ldr	r2, [pc, #464]	@ (8003618 <HAL_DMA_IRQHandler+0xc90>)
 8003446:	4293      	cmp	r3, r2
 8003448:	d027      	beq.n	800349a <HAL_DMA_IRQHandler+0xb12>
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	4a73      	ldr	r2, [pc, #460]	@ (800361c <HAL_DMA_IRQHandler+0xc94>)
 8003450:	4293      	cmp	r3, r2
 8003452:	d022      	beq.n	800349a <HAL_DMA_IRQHandler+0xb12>
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	4a71      	ldr	r2, [pc, #452]	@ (8003620 <HAL_DMA_IRQHandler+0xc98>)
 800345a:	4293      	cmp	r3, r2
 800345c:	d01d      	beq.n	800349a <HAL_DMA_IRQHandler+0xb12>
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	4a70      	ldr	r2, [pc, #448]	@ (8003624 <HAL_DMA_IRQHandler+0xc9c>)
 8003464:	4293      	cmp	r3, r2
 8003466:	d018      	beq.n	800349a <HAL_DMA_IRQHandler+0xb12>
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	4a6e      	ldr	r2, [pc, #440]	@ (8003628 <HAL_DMA_IRQHandler+0xca0>)
 800346e:	4293      	cmp	r3, r2
 8003470:	d013      	beq.n	800349a <HAL_DMA_IRQHandler+0xb12>
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	4a6d      	ldr	r2, [pc, #436]	@ (800362c <HAL_DMA_IRQHandler+0xca4>)
 8003478:	4293      	cmp	r3, r2
 800347a:	d00e      	beq.n	800349a <HAL_DMA_IRQHandler+0xb12>
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	4a6b      	ldr	r2, [pc, #428]	@ (8003630 <HAL_DMA_IRQHandler+0xca8>)
 8003482:	4293      	cmp	r3, r2
 8003484:	d009      	beq.n	800349a <HAL_DMA_IRQHandler+0xb12>
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	4a6a      	ldr	r2, [pc, #424]	@ (8003634 <HAL_DMA_IRQHandler+0xcac>)
 800348c:	4293      	cmp	r3, r2
 800348e:	d004      	beq.n	800349a <HAL_DMA_IRQHandler+0xb12>
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	4a68      	ldr	r2, [pc, #416]	@ (8003638 <HAL_DMA_IRQHandler+0xcb0>)
 8003496:	4293      	cmp	r3, r2
 8003498:	d108      	bne.n	80034ac <HAL_DMA_IRQHandler+0xb24>
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	681a      	ldr	r2, [r3, #0]
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f022 0208 	bic.w	r2, r2, #8
 80034a8:	601a      	str	r2, [r3, #0]
 80034aa:	e007      	b.n	80034bc <HAL_DMA_IRQHandler+0xb34>
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	681a      	ldr	r2, [r3, #0]
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f022 0204 	bic.w	r2, r2, #4
 80034ba:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	f000 8165 	beq.w	8003790 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034ca:	6878      	ldr	r0, [r7, #4]
 80034cc:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80034ce:	e15f      	b.n	8003790 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034d4:	f003 031f 	and.w	r3, r3, #31
 80034d8:	2202      	movs	r2, #2
 80034da:	409a      	lsls	r2, r3
 80034dc:	697b      	ldr	r3, [r7, #20]
 80034de:	4013      	ands	r3, r2
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	f000 80c5 	beq.w	8003670 <HAL_DMA_IRQHandler+0xce8>
 80034e6:	693b      	ldr	r3, [r7, #16]
 80034e8:	f003 0302 	and.w	r3, r3, #2
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	f000 80bf 	beq.w	8003670 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034f6:	f003 031f 	and.w	r3, r3, #31
 80034fa:	2202      	movs	r2, #2
 80034fc:	409a      	lsls	r2, r3
 80034fe:	69fb      	ldr	r3, [r7, #28]
 8003500:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003502:	693b      	ldr	r3, [r7, #16]
 8003504:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003508:	2b00      	cmp	r3, #0
 800350a:	d018      	beq.n	800353e <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800350c:	693b      	ldr	r3, [r7, #16]
 800350e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003512:	2b00      	cmp	r3, #0
 8003514:	d109      	bne.n	800352a <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800351a:	2b00      	cmp	r3, #0
 800351c:	f000 813a 	beq.w	8003794 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003524:	6878      	ldr	r0, [r7, #4]
 8003526:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003528:	e134      	b.n	8003794 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800352e:	2b00      	cmp	r3, #0
 8003530:	f000 8130 	beq.w	8003794 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003538:	6878      	ldr	r0, [r7, #4]
 800353a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800353c:	e12a      	b.n	8003794 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800353e:	693b      	ldr	r3, [r7, #16]
 8003540:	f003 0320 	and.w	r3, r3, #32
 8003544:	2b00      	cmp	r3, #0
 8003546:	f040 8089 	bne.w	800365c <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	4a2b      	ldr	r2, [pc, #172]	@ (80035fc <HAL_DMA_IRQHandler+0xc74>)
 8003550:	4293      	cmp	r3, r2
 8003552:	d04a      	beq.n	80035ea <HAL_DMA_IRQHandler+0xc62>
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	4a29      	ldr	r2, [pc, #164]	@ (8003600 <HAL_DMA_IRQHandler+0xc78>)
 800355a:	4293      	cmp	r3, r2
 800355c:	d045      	beq.n	80035ea <HAL_DMA_IRQHandler+0xc62>
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	4a28      	ldr	r2, [pc, #160]	@ (8003604 <HAL_DMA_IRQHandler+0xc7c>)
 8003564:	4293      	cmp	r3, r2
 8003566:	d040      	beq.n	80035ea <HAL_DMA_IRQHandler+0xc62>
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	4a26      	ldr	r2, [pc, #152]	@ (8003608 <HAL_DMA_IRQHandler+0xc80>)
 800356e:	4293      	cmp	r3, r2
 8003570:	d03b      	beq.n	80035ea <HAL_DMA_IRQHandler+0xc62>
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	4a25      	ldr	r2, [pc, #148]	@ (800360c <HAL_DMA_IRQHandler+0xc84>)
 8003578:	4293      	cmp	r3, r2
 800357a:	d036      	beq.n	80035ea <HAL_DMA_IRQHandler+0xc62>
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4a23      	ldr	r2, [pc, #140]	@ (8003610 <HAL_DMA_IRQHandler+0xc88>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d031      	beq.n	80035ea <HAL_DMA_IRQHandler+0xc62>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	4a22      	ldr	r2, [pc, #136]	@ (8003614 <HAL_DMA_IRQHandler+0xc8c>)
 800358c:	4293      	cmp	r3, r2
 800358e:	d02c      	beq.n	80035ea <HAL_DMA_IRQHandler+0xc62>
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	4a20      	ldr	r2, [pc, #128]	@ (8003618 <HAL_DMA_IRQHandler+0xc90>)
 8003596:	4293      	cmp	r3, r2
 8003598:	d027      	beq.n	80035ea <HAL_DMA_IRQHandler+0xc62>
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	4a1f      	ldr	r2, [pc, #124]	@ (800361c <HAL_DMA_IRQHandler+0xc94>)
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d022      	beq.n	80035ea <HAL_DMA_IRQHandler+0xc62>
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	4a1d      	ldr	r2, [pc, #116]	@ (8003620 <HAL_DMA_IRQHandler+0xc98>)
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d01d      	beq.n	80035ea <HAL_DMA_IRQHandler+0xc62>
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	4a1c      	ldr	r2, [pc, #112]	@ (8003624 <HAL_DMA_IRQHandler+0xc9c>)
 80035b4:	4293      	cmp	r3, r2
 80035b6:	d018      	beq.n	80035ea <HAL_DMA_IRQHandler+0xc62>
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	4a1a      	ldr	r2, [pc, #104]	@ (8003628 <HAL_DMA_IRQHandler+0xca0>)
 80035be:	4293      	cmp	r3, r2
 80035c0:	d013      	beq.n	80035ea <HAL_DMA_IRQHandler+0xc62>
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	4a19      	ldr	r2, [pc, #100]	@ (800362c <HAL_DMA_IRQHandler+0xca4>)
 80035c8:	4293      	cmp	r3, r2
 80035ca:	d00e      	beq.n	80035ea <HAL_DMA_IRQHandler+0xc62>
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	4a17      	ldr	r2, [pc, #92]	@ (8003630 <HAL_DMA_IRQHandler+0xca8>)
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d009      	beq.n	80035ea <HAL_DMA_IRQHandler+0xc62>
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	4a16      	ldr	r2, [pc, #88]	@ (8003634 <HAL_DMA_IRQHandler+0xcac>)
 80035dc:	4293      	cmp	r3, r2
 80035de:	d004      	beq.n	80035ea <HAL_DMA_IRQHandler+0xc62>
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	4a14      	ldr	r2, [pc, #80]	@ (8003638 <HAL_DMA_IRQHandler+0xcb0>)
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d128      	bne.n	800363c <HAL_DMA_IRQHandler+0xcb4>
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	681a      	ldr	r2, [r3, #0]
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f022 0214 	bic.w	r2, r2, #20
 80035f8:	601a      	str	r2, [r3, #0]
 80035fa:	e027      	b.n	800364c <HAL_DMA_IRQHandler+0xcc4>
 80035fc:	40020010 	.word	0x40020010
 8003600:	40020028 	.word	0x40020028
 8003604:	40020040 	.word	0x40020040
 8003608:	40020058 	.word	0x40020058
 800360c:	40020070 	.word	0x40020070
 8003610:	40020088 	.word	0x40020088
 8003614:	400200a0 	.word	0x400200a0
 8003618:	400200b8 	.word	0x400200b8
 800361c:	40020410 	.word	0x40020410
 8003620:	40020428 	.word	0x40020428
 8003624:	40020440 	.word	0x40020440
 8003628:	40020458 	.word	0x40020458
 800362c:	40020470 	.word	0x40020470
 8003630:	40020488 	.word	0x40020488
 8003634:	400204a0 	.word	0x400204a0
 8003638:	400204b8 	.word	0x400204b8
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	681a      	ldr	r2, [r3, #0]
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f022 020a 	bic.w	r2, r2, #10
 800364a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2201      	movs	r2, #1
 8003650:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2200      	movs	r2, #0
 8003658:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003660:	2b00      	cmp	r3, #0
 8003662:	f000 8097 	beq.w	8003794 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800366a:	6878      	ldr	r0, [r7, #4]
 800366c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800366e:	e091      	b.n	8003794 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003674:	f003 031f 	and.w	r3, r3, #31
 8003678:	2208      	movs	r2, #8
 800367a:	409a      	lsls	r2, r3
 800367c:	697b      	ldr	r3, [r7, #20]
 800367e:	4013      	ands	r3, r2
 8003680:	2b00      	cmp	r3, #0
 8003682:	f000 8088 	beq.w	8003796 <HAL_DMA_IRQHandler+0xe0e>
 8003686:	693b      	ldr	r3, [r7, #16]
 8003688:	f003 0308 	and.w	r3, r3, #8
 800368c:	2b00      	cmp	r3, #0
 800368e:	f000 8082 	beq.w	8003796 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	4a41      	ldr	r2, [pc, #260]	@ (800379c <HAL_DMA_IRQHandler+0xe14>)
 8003698:	4293      	cmp	r3, r2
 800369a:	d04a      	beq.n	8003732 <HAL_DMA_IRQHandler+0xdaa>
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	4a3f      	ldr	r2, [pc, #252]	@ (80037a0 <HAL_DMA_IRQHandler+0xe18>)
 80036a2:	4293      	cmp	r3, r2
 80036a4:	d045      	beq.n	8003732 <HAL_DMA_IRQHandler+0xdaa>
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	4a3e      	ldr	r2, [pc, #248]	@ (80037a4 <HAL_DMA_IRQHandler+0xe1c>)
 80036ac:	4293      	cmp	r3, r2
 80036ae:	d040      	beq.n	8003732 <HAL_DMA_IRQHandler+0xdaa>
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	4a3c      	ldr	r2, [pc, #240]	@ (80037a8 <HAL_DMA_IRQHandler+0xe20>)
 80036b6:	4293      	cmp	r3, r2
 80036b8:	d03b      	beq.n	8003732 <HAL_DMA_IRQHandler+0xdaa>
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	4a3b      	ldr	r2, [pc, #236]	@ (80037ac <HAL_DMA_IRQHandler+0xe24>)
 80036c0:	4293      	cmp	r3, r2
 80036c2:	d036      	beq.n	8003732 <HAL_DMA_IRQHandler+0xdaa>
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	4a39      	ldr	r2, [pc, #228]	@ (80037b0 <HAL_DMA_IRQHandler+0xe28>)
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d031      	beq.n	8003732 <HAL_DMA_IRQHandler+0xdaa>
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	4a38      	ldr	r2, [pc, #224]	@ (80037b4 <HAL_DMA_IRQHandler+0xe2c>)
 80036d4:	4293      	cmp	r3, r2
 80036d6:	d02c      	beq.n	8003732 <HAL_DMA_IRQHandler+0xdaa>
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	4a36      	ldr	r2, [pc, #216]	@ (80037b8 <HAL_DMA_IRQHandler+0xe30>)
 80036de:	4293      	cmp	r3, r2
 80036e0:	d027      	beq.n	8003732 <HAL_DMA_IRQHandler+0xdaa>
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	4a35      	ldr	r2, [pc, #212]	@ (80037bc <HAL_DMA_IRQHandler+0xe34>)
 80036e8:	4293      	cmp	r3, r2
 80036ea:	d022      	beq.n	8003732 <HAL_DMA_IRQHandler+0xdaa>
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	4a33      	ldr	r2, [pc, #204]	@ (80037c0 <HAL_DMA_IRQHandler+0xe38>)
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d01d      	beq.n	8003732 <HAL_DMA_IRQHandler+0xdaa>
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	4a32      	ldr	r2, [pc, #200]	@ (80037c4 <HAL_DMA_IRQHandler+0xe3c>)
 80036fc:	4293      	cmp	r3, r2
 80036fe:	d018      	beq.n	8003732 <HAL_DMA_IRQHandler+0xdaa>
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	4a30      	ldr	r2, [pc, #192]	@ (80037c8 <HAL_DMA_IRQHandler+0xe40>)
 8003706:	4293      	cmp	r3, r2
 8003708:	d013      	beq.n	8003732 <HAL_DMA_IRQHandler+0xdaa>
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	4a2f      	ldr	r2, [pc, #188]	@ (80037cc <HAL_DMA_IRQHandler+0xe44>)
 8003710:	4293      	cmp	r3, r2
 8003712:	d00e      	beq.n	8003732 <HAL_DMA_IRQHandler+0xdaa>
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	4a2d      	ldr	r2, [pc, #180]	@ (80037d0 <HAL_DMA_IRQHandler+0xe48>)
 800371a:	4293      	cmp	r3, r2
 800371c:	d009      	beq.n	8003732 <HAL_DMA_IRQHandler+0xdaa>
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	4a2c      	ldr	r2, [pc, #176]	@ (80037d4 <HAL_DMA_IRQHandler+0xe4c>)
 8003724:	4293      	cmp	r3, r2
 8003726:	d004      	beq.n	8003732 <HAL_DMA_IRQHandler+0xdaa>
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	4a2a      	ldr	r2, [pc, #168]	@ (80037d8 <HAL_DMA_IRQHandler+0xe50>)
 800372e:	4293      	cmp	r3, r2
 8003730:	d108      	bne.n	8003744 <HAL_DMA_IRQHandler+0xdbc>
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	681a      	ldr	r2, [r3, #0]
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f022 021c 	bic.w	r2, r2, #28
 8003740:	601a      	str	r2, [r3, #0]
 8003742:	e007      	b.n	8003754 <HAL_DMA_IRQHandler+0xdcc>
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	681a      	ldr	r2, [r3, #0]
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f022 020e 	bic.w	r2, r2, #14
 8003752:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003758:	f003 031f 	and.w	r3, r3, #31
 800375c:	2201      	movs	r2, #1
 800375e:	409a      	lsls	r2, r3
 8003760:	69fb      	ldr	r3, [r7, #28]
 8003762:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2201      	movs	r2, #1
 8003768:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2201      	movs	r2, #1
 800376e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	2200      	movs	r2, #0
 8003776:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800377e:	2b00      	cmp	r3, #0
 8003780:	d009      	beq.n	8003796 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003786:	6878      	ldr	r0, [r7, #4]
 8003788:	4798      	blx	r3
 800378a:	e004      	b.n	8003796 <HAL_DMA_IRQHandler+0xe0e>
          return;
 800378c:	bf00      	nop
 800378e:	e002      	b.n	8003796 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003790:	bf00      	nop
 8003792:	e000      	b.n	8003796 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003794:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8003796:	3728      	adds	r7, #40	@ 0x28
 8003798:	46bd      	mov	sp, r7
 800379a:	bd80      	pop	{r7, pc}
 800379c:	40020010 	.word	0x40020010
 80037a0:	40020028 	.word	0x40020028
 80037a4:	40020040 	.word	0x40020040
 80037a8:	40020058 	.word	0x40020058
 80037ac:	40020070 	.word	0x40020070
 80037b0:	40020088 	.word	0x40020088
 80037b4:	400200a0 	.word	0x400200a0
 80037b8:	400200b8 	.word	0x400200b8
 80037bc:	40020410 	.word	0x40020410
 80037c0:	40020428 	.word	0x40020428
 80037c4:	40020440 	.word	0x40020440
 80037c8:	40020458 	.word	0x40020458
 80037cc:	40020470 	.word	0x40020470
 80037d0:	40020488 	.word	0x40020488
 80037d4:	400204a0 	.word	0x400204a0
 80037d8:	400204b8 	.word	0x400204b8

080037dc <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80037dc:	b480      	push	{r7}
 80037de:	b085      	sub	sp, #20
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	4a42      	ldr	r2, [pc, #264]	@ (80038f4 <DMA_CalcBaseAndBitshift+0x118>)
 80037ea:	4293      	cmp	r3, r2
 80037ec:	d04a      	beq.n	8003884 <DMA_CalcBaseAndBitshift+0xa8>
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	4a41      	ldr	r2, [pc, #260]	@ (80038f8 <DMA_CalcBaseAndBitshift+0x11c>)
 80037f4:	4293      	cmp	r3, r2
 80037f6:	d045      	beq.n	8003884 <DMA_CalcBaseAndBitshift+0xa8>
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	4a3f      	ldr	r2, [pc, #252]	@ (80038fc <DMA_CalcBaseAndBitshift+0x120>)
 80037fe:	4293      	cmp	r3, r2
 8003800:	d040      	beq.n	8003884 <DMA_CalcBaseAndBitshift+0xa8>
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	4a3e      	ldr	r2, [pc, #248]	@ (8003900 <DMA_CalcBaseAndBitshift+0x124>)
 8003808:	4293      	cmp	r3, r2
 800380a:	d03b      	beq.n	8003884 <DMA_CalcBaseAndBitshift+0xa8>
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	4a3c      	ldr	r2, [pc, #240]	@ (8003904 <DMA_CalcBaseAndBitshift+0x128>)
 8003812:	4293      	cmp	r3, r2
 8003814:	d036      	beq.n	8003884 <DMA_CalcBaseAndBitshift+0xa8>
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	4a3b      	ldr	r2, [pc, #236]	@ (8003908 <DMA_CalcBaseAndBitshift+0x12c>)
 800381c:	4293      	cmp	r3, r2
 800381e:	d031      	beq.n	8003884 <DMA_CalcBaseAndBitshift+0xa8>
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	4a39      	ldr	r2, [pc, #228]	@ (800390c <DMA_CalcBaseAndBitshift+0x130>)
 8003826:	4293      	cmp	r3, r2
 8003828:	d02c      	beq.n	8003884 <DMA_CalcBaseAndBitshift+0xa8>
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	4a38      	ldr	r2, [pc, #224]	@ (8003910 <DMA_CalcBaseAndBitshift+0x134>)
 8003830:	4293      	cmp	r3, r2
 8003832:	d027      	beq.n	8003884 <DMA_CalcBaseAndBitshift+0xa8>
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	4a36      	ldr	r2, [pc, #216]	@ (8003914 <DMA_CalcBaseAndBitshift+0x138>)
 800383a:	4293      	cmp	r3, r2
 800383c:	d022      	beq.n	8003884 <DMA_CalcBaseAndBitshift+0xa8>
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	4a35      	ldr	r2, [pc, #212]	@ (8003918 <DMA_CalcBaseAndBitshift+0x13c>)
 8003844:	4293      	cmp	r3, r2
 8003846:	d01d      	beq.n	8003884 <DMA_CalcBaseAndBitshift+0xa8>
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	4a33      	ldr	r2, [pc, #204]	@ (800391c <DMA_CalcBaseAndBitshift+0x140>)
 800384e:	4293      	cmp	r3, r2
 8003850:	d018      	beq.n	8003884 <DMA_CalcBaseAndBitshift+0xa8>
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	4a32      	ldr	r2, [pc, #200]	@ (8003920 <DMA_CalcBaseAndBitshift+0x144>)
 8003858:	4293      	cmp	r3, r2
 800385a:	d013      	beq.n	8003884 <DMA_CalcBaseAndBitshift+0xa8>
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	4a30      	ldr	r2, [pc, #192]	@ (8003924 <DMA_CalcBaseAndBitshift+0x148>)
 8003862:	4293      	cmp	r3, r2
 8003864:	d00e      	beq.n	8003884 <DMA_CalcBaseAndBitshift+0xa8>
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	4a2f      	ldr	r2, [pc, #188]	@ (8003928 <DMA_CalcBaseAndBitshift+0x14c>)
 800386c:	4293      	cmp	r3, r2
 800386e:	d009      	beq.n	8003884 <DMA_CalcBaseAndBitshift+0xa8>
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	4a2d      	ldr	r2, [pc, #180]	@ (800392c <DMA_CalcBaseAndBitshift+0x150>)
 8003876:	4293      	cmp	r3, r2
 8003878:	d004      	beq.n	8003884 <DMA_CalcBaseAndBitshift+0xa8>
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	4a2c      	ldr	r2, [pc, #176]	@ (8003930 <DMA_CalcBaseAndBitshift+0x154>)
 8003880:	4293      	cmp	r3, r2
 8003882:	d101      	bne.n	8003888 <DMA_CalcBaseAndBitshift+0xac>
 8003884:	2301      	movs	r3, #1
 8003886:	e000      	b.n	800388a <DMA_CalcBaseAndBitshift+0xae>
 8003888:	2300      	movs	r3, #0
 800388a:	2b00      	cmp	r3, #0
 800388c:	d024      	beq.n	80038d8 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	b2db      	uxtb	r3, r3
 8003894:	3b10      	subs	r3, #16
 8003896:	4a27      	ldr	r2, [pc, #156]	@ (8003934 <DMA_CalcBaseAndBitshift+0x158>)
 8003898:	fba2 2303 	umull	r2, r3, r2, r3
 800389c:	091b      	lsrs	r3, r3, #4
 800389e:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	f003 0307 	and.w	r3, r3, #7
 80038a6:	4a24      	ldr	r2, [pc, #144]	@ (8003938 <DMA_CalcBaseAndBitshift+0x15c>)
 80038a8:	5cd3      	ldrb	r3, [r2, r3]
 80038aa:	461a      	mov	r2, r3
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	2b03      	cmp	r3, #3
 80038b4:	d908      	bls.n	80038c8 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	461a      	mov	r2, r3
 80038bc:	4b1f      	ldr	r3, [pc, #124]	@ (800393c <DMA_CalcBaseAndBitshift+0x160>)
 80038be:	4013      	ands	r3, r2
 80038c0:	1d1a      	adds	r2, r3, #4
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	659a      	str	r2, [r3, #88]	@ 0x58
 80038c6:	e00d      	b.n	80038e4 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	461a      	mov	r2, r3
 80038ce:	4b1b      	ldr	r3, [pc, #108]	@ (800393c <DMA_CalcBaseAndBitshift+0x160>)
 80038d0:	4013      	ands	r3, r2
 80038d2:	687a      	ldr	r2, [r7, #4]
 80038d4:	6593      	str	r3, [r2, #88]	@ 0x58
 80038d6:	e005      	b.n	80038e4 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80038e8:	4618      	mov	r0, r3
 80038ea:	3714      	adds	r7, #20
 80038ec:	46bd      	mov	sp, r7
 80038ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f2:	4770      	bx	lr
 80038f4:	40020010 	.word	0x40020010
 80038f8:	40020028 	.word	0x40020028
 80038fc:	40020040 	.word	0x40020040
 8003900:	40020058 	.word	0x40020058
 8003904:	40020070 	.word	0x40020070
 8003908:	40020088 	.word	0x40020088
 800390c:	400200a0 	.word	0x400200a0
 8003910:	400200b8 	.word	0x400200b8
 8003914:	40020410 	.word	0x40020410
 8003918:	40020428 	.word	0x40020428
 800391c:	40020440 	.word	0x40020440
 8003920:	40020458 	.word	0x40020458
 8003924:	40020470 	.word	0x40020470
 8003928:	40020488 	.word	0x40020488
 800392c:	400204a0 	.word	0x400204a0
 8003930:	400204b8 	.word	0x400204b8
 8003934:	aaaaaaab 	.word	0xaaaaaaab
 8003938:	0800a140 	.word	0x0800a140
 800393c:	fffffc00 	.word	0xfffffc00

08003940 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(const DMA_HandleTypeDef *hdma)
{
 8003940:	b480      	push	{r7}
 8003942:	b085      	sub	sp, #20
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003948:	2300      	movs	r3, #0
 800394a:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	699b      	ldr	r3, [r3, #24]
 8003950:	2b00      	cmp	r3, #0
 8003952:	d120      	bne.n	8003996 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003958:	2b03      	cmp	r3, #3
 800395a:	d858      	bhi.n	8003a0e <DMA_CheckFifoParam+0xce>
 800395c:	a201      	add	r2, pc, #4	@ (adr r2, 8003964 <DMA_CheckFifoParam+0x24>)
 800395e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003962:	bf00      	nop
 8003964:	08003975 	.word	0x08003975
 8003968:	08003987 	.word	0x08003987
 800396c:	08003975 	.word	0x08003975
 8003970:	08003a0f 	.word	0x08003a0f
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003978:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800397c:	2b00      	cmp	r3, #0
 800397e:	d048      	beq.n	8003a12 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8003980:	2301      	movs	r3, #1
 8003982:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003984:	e045      	b.n	8003a12 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800398a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800398e:	d142      	bne.n	8003a16 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8003990:	2301      	movs	r3, #1
 8003992:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003994:	e03f      	b.n	8003a16 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	699b      	ldr	r3, [r3, #24]
 800399a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800399e:	d123      	bne.n	80039e8 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039a4:	2b03      	cmp	r3, #3
 80039a6:	d838      	bhi.n	8003a1a <DMA_CheckFifoParam+0xda>
 80039a8:	a201      	add	r2, pc, #4	@ (adr r2, 80039b0 <DMA_CheckFifoParam+0x70>)
 80039aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039ae:	bf00      	nop
 80039b0:	080039c1 	.word	0x080039c1
 80039b4:	080039c7 	.word	0x080039c7
 80039b8:	080039c1 	.word	0x080039c1
 80039bc:	080039d9 	.word	0x080039d9
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80039c0:	2301      	movs	r3, #1
 80039c2:	73fb      	strb	r3, [r7, #15]
        break;
 80039c4:	e030      	b.n	8003a28 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039ca:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d025      	beq.n	8003a1e <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80039d2:	2301      	movs	r3, #1
 80039d4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80039d6:	e022      	b.n	8003a1e <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039dc:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80039e0:	d11f      	bne.n	8003a22 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80039e2:	2301      	movs	r3, #1
 80039e4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80039e6:	e01c      	b.n	8003a22 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039ec:	2b02      	cmp	r3, #2
 80039ee:	d902      	bls.n	80039f6 <DMA_CheckFifoParam+0xb6>
 80039f0:	2b03      	cmp	r3, #3
 80039f2:	d003      	beq.n	80039fc <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80039f4:	e018      	b.n	8003a28 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80039f6:	2301      	movs	r3, #1
 80039f8:	73fb      	strb	r3, [r7, #15]
        break;
 80039fa:	e015      	b.n	8003a28 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a00:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d00e      	beq.n	8003a26 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8003a08:	2301      	movs	r3, #1
 8003a0a:	73fb      	strb	r3, [r7, #15]
    break;
 8003a0c:	e00b      	b.n	8003a26 <DMA_CheckFifoParam+0xe6>
        break;
 8003a0e:	bf00      	nop
 8003a10:	e00a      	b.n	8003a28 <DMA_CheckFifoParam+0xe8>
        break;
 8003a12:	bf00      	nop
 8003a14:	e008      	b.n	8003a28 <DMA_CheckFifoParam+0xe8>
        break;
 8003a16:	bf00      	nop
 8003a18:	e006      	b.n	8003a28 <DMA_CheckFifoParam+0xe8>
        break;
 8003a1a:	bf00      	nop
 8003a1c:	e004      	b.n	8003a28 <DMA_CheckFifoParam+0xe8>
        break;
 8003a1e:	bf00      	nop
 8003a20:	e002      	b.n	8003a28 <DMA_CheckFifoParam+0xe8>
        break;
 8003a22:	bf00      	nop
 8003a24:	e000      	b.n	8003a28 <DMA_CheckFifoParam+0xe8>
    break;
 8003a26:	bf00      	nop
    }
  }

  return status;
 8003a28:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	3714      	adds	r7, #20
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a34:	4770      	bx	lr
 8003a36:	bf00      	nop

08003a38 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003a38:	b480      	push	{r7}
 8003a3a:	b085      	sub	sp, #20
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	4a38      	ldr	r2, [pc, #224]	@ (8003b2c <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8003a4c:	4293      	cmp	r3, r2
 8003a4e:	d022      	beq.n	8003a96 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	4a36      	ldr	r2, [pc, #216]	@ (8003b30 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d01d      	beq.n	8003a96 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	4a35      	ldr	r2, [pc, #212]	@ (8003b34 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8003a60:	4293      	cmp	r3, r2
 8003a62:	d018      	beq.n	8003a96 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	4a33      	ldr	r2, [pc, #204]	@ (8003b38 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	d013      	beq.n	8003a96 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	4a32      	ldr	r2, [pc, #200]	@ (8003b3c <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8003a74:	4293      	cmp	r3, r2
 8003a76:	d00e      	beq.n	8003a96 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	4a30      	ldr	r2, [pc, #192]	@ (8003b40 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d009      	beq.n	8003a96 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	4a2f      	ldr	r2, [pc, #188]	@ (8003b44 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8003a88:	4293      	cmp	r3, r2
 8003a8a:	d004      	beq.n	8003a96 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	4a2d      	ldr	r2, [pc, #180]	@ (8003b48 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d101      	bne.n	8003a9a <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8003a96:	2301      	movs	r3, #1
 8003a98:	e000      	b.n	8003a9c <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d01a      	beq.n	8003ad6 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	b2db      	uxtb	r3, r3
 8003aa6:	3b08      	subs	r3, #8
 8003aa8:	4a28      	ldr	r2, [pc, #160]	@ (8003b4c <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8003aaa:	fba2 2303 	umull	r2, r3, r2, r3
 8003aae:	091b      	lsrs	r3, r3, #4
 8003ab0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8003ab2:	68fa      	ldr	r2, [r7, #12]
 8003ab4:	4b26      	ldr	r3, [pc, #152]	@ (8003b50 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8003ab6:	4413      	add	r3, r2
 8003ab8:	009b      	lsls	r3, r3, #2
 8003aba:	461a      	mov	r2, r3
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	4a24      	ldr	r2, [pc, #144]	@ (8003b54 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8003ac4:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	f003 031f 	and.w	r3, r3, #31
 8003acc:	2201      	movs	r2, #1
 8003ace:	409a      	lsls	r2, r3
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8003ad4:	e024      	b.n	8003b20 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	b2db      	uxtb	r3, r3
 8003adc:	3b10      	subs	r3, #16
 8003ade:	4a1e      	ldr	r2, [pc, #120]	@ (8003b58 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8003ae0:	fba2 2303 	umull	r2, r3, r2, r3
 8003ae4:	091b      	lsrs	r3, r3, #4
 8003ae6:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8003ae8:	68bb      	ldr	r3, [r7, #8]
 8003aea:	4a1c      	ldr	r2, [pc, #112]	@ (8003b5c <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8003aec:	4293      	cmp	r3, r2
 8003aee:	d806      	bhi.n	8003afe <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8003af0:	68bb      	ldr	r3, [r7, #8]
 8003af2:	4a1b      	ldr	r2, [pc, #108]	@ (8003b60 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8003af4:	4293      	cmp	r3, r2
 8003af6:	d902      	bls.n	8003afe <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	3308      	adds	r3, #8
 8003afc:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8003afe:	68fa      	ldr	r2, [r7, #12]
 8003b00:	4b18      	ldr	r3, [pc, #96]	@ (8003b64 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8003b02:	4413      	add	r3, r2
 8003b04:	009b      	lsls	r3, r3, #2
 8003b06:	461a      	mov	r2, r3
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	4a16      	ldr	r2, [pc, #88]	@ (8003b68 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8003b10:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	f003 031f 	and.w	r3, r3, #31
 8003b18:	2201      	movs	r2, #1
 8003b1a:	409a      	lsls	r2, r3
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003b20:	bf00      	nop
 8003b22:	3714      	adds	r7, #20
 8003b24:	46bd      	mov	sp, r7
 8003b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2a:	4770      	bx	lr
 8003b2c:	58025408 	.word	0x58025408
 8003b30:	5802541c 	.word	0x5802541c
 8003b34:	58025430 	.word	0x58025430
 8003b38:	58025444 	.word	0x58025444
 8003b3c:	58025458 	.word	0x58025458
 8003b40:	5802546c 	.word	0x5802546c
 8003b44:	58025480 	.word	0x58025480
 8003b48:	58025494 	.word	0x58025494
 8003b4c:	cccccccd 	.word	0xcccccccd
 8003b50:	16009600 	.word	0x16009600
 8003b54:	58025880 	.word	0x58025880
 8003b58:	aaaaaaab 	.word	0xaaaaaaab
 8003b5c:	400204b8 	.word	0x400204b8
 8003b60:	4002040f 	.word	0x4002040f
 8003b64:	10008200 	.word	0x10008200
 8003b68:	40020880 	.word	0x40020880

08003b6c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003b6c:	b480      	push	{r7}
 8003b6e:	b085      	sub	sp, #20
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	685b      	ldr	r3, [r3, #4]
 8003b78:	b2db      	uxtb	r3, r3
 8003b7a:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d04a      	beq.n	8003c18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	2b08      	cmp	r3, #8
 8003b86:	d847      	bhi.n	8003c18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	4a25      	ldr	r2, [pc, #148]	@ (8003c24 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	d022      	beq.n	8003bd8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	4a24      	ldr	r2, [pc, #144]	@ (8003c28 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8003b98:	4293      	cmp	r3, r2
 8003b9a:	d01d      	beq.n	8003bd8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	4a22      	ldr	r2, [pc, #136]	@ (8003c2c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8003ba2:	4293      	cmp	r3, r2
 8003ba4:	d018      	beq.n	8003bd8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	4a21      	ldr	r2, [pc, #132]	@ (8003c30 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8003bac:	4293      	cmp	r3, r2
 8003bae:	d013      	beq.n	8003bd8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	4a1f      	ldr	r2, [pc, #124]	@ (8003c34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8003bb6:	4293      	cmp	r3, r2
 8003bb8:	d00e      	beq.n	8003bd8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	4a1e      	ldr	r2, [pc, #120]	@ (8003c38 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8003bc0:	4293      	cmp	r3, r2
 8003bc2:	d009      	beq.n	8003bd8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	4a1c      	ldr	r2, [pc, #112]	@ (8003c3c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	d004      	beq.n	8003bd8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	4a1b      	ldr	r2, [pc, #108]	@ (8003c40 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8003bd4:	4293      	cmp	r3, r2
 8003bd6:	d101      	bne.n	8003bdc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8003bd8:	2301      	movs	r3, #1
 8003bda:	e000      	b.n	8003bde <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8003bdc:	2300      	movs	r3, #0
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d00a      	beq.n	8003bf8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8003be2:	68fa      	ldr	r2, [r7, #12]
 8003be4:	4b17      	ldr	r3, [pc, #92]	@ (8003c44 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8003be6:	4413      	add	r3, r2
 8003be8:	009b      	lsls	r3, r3, #2
 8003bea:	461a      	mov	r2, r3
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	4a15      	ldr	r2, [pc, #84]	@ (8003c48 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8003bf4:	671a      	str	r2, [r3, #112]	@ 0x70
 8003bf6:	e009      	b.n	8003c0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003bf8:	68fa      	ldr	r2, [r7, #12]
 8003bfa:	4b14      	ldr	r3, [pc, #80]	@ (8003c4c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8003bfc:	4413      	add	r3, r2
 8003bfe:	009b      	lsls	r3, r3, #2
 8003c00:	461a      	mov	r2, r3
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	4a11      	ldr	r2, [pc, #68]	@ (8003c50 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8003c0a:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	3b01      	subs	r3, #1
 8003c10:	2201      	movs	r2, #1
 8003c12:	409a      	lsls	r2, r3
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8003c18:	bf00      	nop
 8003c1a:	3714      	adds	r7, #20
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c22:	4770      	bx	lr
 8003c24:	58025408 	.word	0x58025408
 8003c28:	5802541c 	.word	0x5802541c
 8003c2c:	58025430 	.word	0x58025430
 8003c30:	58025444 	.word	0x58025444
 8003c34:	58025458 	.word	0x58025458
 8003c38:	5802546c 	.word	0x5802546c
 8003c3c:	58025480 	.word	0x58025480
 8003c40:	58025494 	.word	0x58025494
 8003c44:	1600963f 	.word	0x1600963f
 8003c48:	58025940 	.word	0x58025940
 8003c4c:	1000823f 	.word	0x1000823f
 8003c50:	40020940 	.word	0x40020940

08003c54 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8003c54:	b480      	push	{r7}
 8003c56:	b089      	sub	sp, #36	@ 0x24
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
 8003c5c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003c5e:	2300      	movs	r3, #0
 8003c60:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8003c62:	4b89      	ldr	r3, [pc, #548]	@ (8003e88 <HAL_GPIO_Init+0x234>)
 8003c64:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003c66:	e194      	b.n	8003f92 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	681a      	ldr	r2, [r3, #0]
 8003c6c:	2101      	movs	r1, #1
 8003c6e:	69fb      	ldr	r3, [r7, #28]
 8003c70:	fa01 f303 	lsl.w	r3, r1, r3
 8003c74:	4013      	ands	r3, r2
 8003c76:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8003c78:	693b      	ldr	r3, [r7, #16]
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	f000 8186 	beq.w	8003f8c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	685b      	ldr	r3, [r3, #4]
 8003c84:	f003 0303 	and.w	r3, r3, #3
 8003c88:	2b01      	cmp	r3, #1
 8003c8a:	d005      	beq.n	8003c98 <HAL_GPIO_Init+0x44>
 8003c8c:	683b      	ldr	r3, [r7, #0]
 8003c8e:	685b      	ldr	r3, [r3, #4]
 8003c90:	f003 0303 	and.w	r3, r3, #3
 8003c94:	2b02      	cmp	r3, #2
 8003c96:	d130      	bne.n	8003cfa <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	689b      	ldr	r3, [r3, #8]
 8003c9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003c9e:	69fb      	ldr	r3, [r7, #28]
 8003ca0:	005b      	lsls	r3, r3, #1
 8003ca2:	2203      	movs	r2, #3
 8003ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ca8:	43db      	mvns	r3, r3
 8003caa:	69ba      	ldr	r2, [r7, #24]
 8003cac:	4013      	ands	r3, r2
 8003cae:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	68da      	ldr	r2, [r3, #12]
 8003cb4:	69fb      	ldr	r3, [r7, #28]
 8003cb6:	005b      	lsls	r3, r3, #1
 8003cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8003cbc:	69ba      	ldr	r2, [r7, #24]
 8003cbe:	4313      	orrs	r3, r2
 8003cc0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	69ba      	ldr	r2, [r7, #24]
 8003cc6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	685b      	ldr	r3, [r3, #4]
 8003ccc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003cce:	2201      	movs	r2, #1
 8003cd0:	69fb      	ldr	r3, [r7, #28]
 8003cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8003cd6:	43db      	mvns	r3, r3
 8003cd8:	69ba      	ldr	r2, [r7, #24]
 8003cda:	4013      	ands	r3, r2
 8003cdc:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003cde:	683b      	ldr	r3, [r7, #0]
 8003ce0:	685b      	ldr	r3, [r3, #4]
 8003ce2:	091b      	lsrs	r3, r3, #4
 8003ce4:	f003 0201 	and.w	r2, r3, #1
 8003ce8:	69fb      	ldr	r3, [r7, #28]
 8003cea:	fa02 f303 	lsl.w	r3, r2, r3
 8003cee:	69ba      	ldr	r2, [r7, #24]
 8003cf0:	4313      	orrs	r3, r2
 8003cf2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	69ba      	ldr	r2, [r7, #24]
 8003cf8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003cfa:	683b      	ldr	r3, [r7, #0]
 8003cfc:	685b      	ldr	r3, [r3, #4]
 8003cfe:	f003 0303 	and.w	r3, r3, #3
 8003d02:	2b03      	cmp	r3, #3
 8003d04:	d017      	beq.n	8003d36 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	68db      	ldr	r3, [r3, #12]
 8003d0a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003d0c:	69fb      	ldr	r3, [r7, #28]
 8003d0e:	005b      	lsls	r3, r3, #1
 8003d10:	2203      	movs	r2, #3
 8003d12:	fa02 f303 	lsl.w	r3, r2, r3
 8003d16:	43db      	mvns	r3, r3
 8003d18:	69ba      	ldr	r2, [r7, #24]
 8003d1a:	4013      	ands	r3, r2
 8003d1c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	689a      	ldr	r2, [r3, #8]
 8003d22:	69fb      	ldr	r3, [r7, #28]
 8003d24:	005b      	lsls	r3, r3, #1
 8003d26:	fa02 f303 	lsl.w	r3, r2, r3
 8003d2a:	69ba      	ldr	r2, [r7, #24]
 8003d2c:	4313      	orrs	r3, r2
 8003d2e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	69ba      	ldr	r2, [r7, #24]
 8003d34:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	685b      	ldr	r3, [r3, #4]
 8003d3a:	f003 0303 	and.w	r3, r3, #3
 8003d3e:	2b02      	cmp	r3, #2
 8003d40:	d123      	bne.n	8003d8a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003d42:	69fb      	ldr	r3, [r7, #28]
 8003d44:	08da      	lsrs	r2, r3, #3
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	3208      	adds	r2, #8
 8003d4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003d4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003d50:	69fb      	ldr	r3, [r7, #28]
 8003d52:	f003 0307 	and.w	r3, r3, #7
 8003d56:	009b      	lsls	r3, r3, #2
 8003d58:	220f      	movs	r2, #15
 8003d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d5e:	43db      	mvns	r3, r3
 8003d60:	69ba      	ldr	r2, [r7, #24]
 8003d62:	4013      	ands	r3, r2
 8003d64:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003d66:	683b      	ldr	r3, [r7, #0]
 8003d68:	691a      	ldr	r2, [r3, #16]
 8003d6a:	69fb      	ldr	r3, [r7, #28]
 8003d6c:	f003 0307 	and.w	r3, r3, #7
 8003d70:	009b      	lsls	r3, r3, #2
 8003d72:	fa02 f303 	lsl.w	r3, r2, r3
 8003d76:	69ba      	ldr	r2, [r7, #24]
 8003d78:	4313      	orrs	r3, r2
 8003d7a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003d7c:	69fb      	ldr	r3, [r7, #28]
 8003d7e:	08da      	lsrs	r2, r3, #3
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	3208      	adds	r2, #8
 8003d84:	69b9      	ldr	r1, [r7, #24]
 8003d86:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003d90:	69fb      	ldr	r3, [r7, #28]
 8003d92:	005b      	lsls	r3, r3, #1
 8003d94:	2203      	movs	r2, #3
 8003d96:	fa02 f303 	lsl.w	r3, r2, r3
 8003d9a:	43db      	mvns	r3, r3
 8003d9c:	69ba      	ldr	r2, [r7, #24]
 8003d9e:	4013      	ands	r3, r2
 8003da0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	685b      	ldr	r3, [r3, #4]
 8003da6:	f003 0203 	and.w	r2, r3, #3
 8003daa:	69fb      	ldr	r3, [r7, #28]
 8003dac:	005b      	lsls	r3, r3, #1
 8003dae:	fa02 f303 	lsl.w	r3, r2, r3
 8003db2:	69ba      	ldr	r2, [r7, #24]
 8003db4:	4313      	orrs	r3, r2
 8003db6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	69ba      	ldr	r2, [r7, #24]
 8003dbc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003dbe:	683b      	ldr	r3, [r7, #0]
 8003dc0:	685b      	ldr	r3, [r3, #4]
 8003dc2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	f000 80e0 	beq.w	8003f8c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003dcc:	4b2f      	ldr	r3, [pc, #188]	@ (8003e8c <HAL_GPIO_Init+0x238>)
 8003dce:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003dd2:	4a2e      	ldr	r2, [pc, #184]	@ (8003e8c <HAL_GPIO_Init+0x238>)
 8003dd4:	f043 0302 	orr.w	r3, r3, #2
 8003dd8:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8003ddc:	4b2b      	ldr	r3, [pc, #172]	@ (8003e8c <HAL_GPIO_Init+0x238>)
 8003dde:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003de2:	f003 0302 	and.w	r3, r3, #2
 8003de6:	60fb      	str	r3, [r7, #12]
 8003de8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003dea:	4a29      	ldr	r2, [pc, #164]	@ (8003e90 <HAL_GPIO_Init+0x23c>)
 8003dec:	69fb      	ldr	r3, [r7, #28]
 8003dee:	089b      	lsrs	r3, r3, #2
 8003df0:	3302      	adds	r3, #2
 8003df2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003df6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003df8:	69fb      	ldr	r3, [r7, #28]
 8003dfa:	f003 0303 	and.w	r3, r3, #3
 8003dfe:	009b      	lsls	r3, r3, #2
 8003e00:	220f      	movs	r2, #15
 8003e02:	fa02 f303 	lsl.w	r3, r2, r3
 8003e06:	43db      	mvns	r3, r3
 8003e08:	69ba      	ldr	r2, [r7, #24]
 8003e0a:	4013      	ands	r3, r2
 8003e0c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	4a20      	ldr	r2, [pc, #128]	@ (8003e94 <HAL_GPIO_Init+0x240>)
 8003e12:	4293      	cmp	r3, r2
 8003e14:	d052      	beq.n	8003ebc <HAL_GPIO_Init+0x268>
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	4a1f      	ldr	r2, [pc, #124]	@ (8003e98 <HAL_GPIO_Init+0x244>)
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	d031      	beq.n	8003e82 <HAL_GPIO_Init+0x22e>
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	4a1e      	ldr	r2, [pc, #120]	@ (8003e9c <HAL_GPIO_Init+0x248>)
 8003e22:	4293      	cmp	r3, r2
 8003e24:	d02b      	beq.n	8003e7e <HAL_GPIO_Init+0x22a>
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	4a1d      	ldr	r2, [pc, #116]	@ (8003ea0 <HAL_GPIO_Init+0x24c>)
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	d025      	beq.n	8003e7a <HAL_GPIO_Init+0x226>
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	4a1c      	ldr	r2, [pc, #112]	@ (8003ea4 <HAL_GPIO_Init+0x250>)
 8003e32:	4293      	cmp	r3, r2
 8003e34:	d01f      	beq.n	8003e76 <HAL_GPIO_Init+0x222>
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	4a1b      	ldr	r2, [pc, #108]	@ (8003ea8 <HAL_GPIO_Init+0x254>)
 8003e3a:	4293      	cmp	r3, r2
 8003e3c:	d019      	beq.n	8003e72 <HAL_GPIO_Init+0x21e>
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	4a1a      	ldr	r2, [pc, #104]	@ (8003eac <HAL_GPIO_Init+0x258>)
 8003e42:	4293      	cmp	r3, r2
 8003e44:	d013      	beq.n	8003e6e <HAL_GPIO_Init+0x21a>
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	4a19      	ldr	r2, [pc, #100]	@ (8003eb0 <HAL_GPIO_Init+0x25c>)
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d00d      	beq.n	8003e6a <HAL_GPIO_Init+0x216>
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	4a18      	ldr	r2, [pc, #96]	@ (8003eb4 <HAL_GPIO_Init+0x260>)
 8003e52:	4293      	cmp	r3, r2
 8003e54:	d007      	beq.n	8003e66 <HAL_GPIO_Init+0x212>
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	4a17      	ldr	r2, [pc, #92]	@ (8003eb8 <HAL_GPIO_Init+0x264>)
 8003e5a:	4293      	cmp	r3, r2
 8003e5c:	d101      	bne.n	8003e62 <HAL_GPIO_Init+0x20e>
 8003e5e:	2309      	movs	r3, #9
 8003e60:	e02d      	b.n	8003ebe <HAL_GPIO_Init+0x26a>
 8003e62:	230a      	movs	r3, #10
 8003e64:	e02b      	b.n	8003ebe <HAL_GPIO_Init+0x26a>
 8003e66:	2308      	movs	r3, #8
 8003e68:	e029      	b.n	8003ebe <HAL_GPIO_Init+0x26a>
 8003e6a:	2307      	movs	r3, #7
 8003e6c:	e027      	b.n	8003ebe <HAL_GPIO_Init+0x26a>
 8003e6e:	2306      	movs	r3, #6
 8003e70:	e025      	b.n	8003ebe <HAL_GPIO_Init+0x26a>
 8003e72:	2305      	movs	r3, #5
 8003e74:	e023      	b.n	8003ebe <HAL_GPIO_Init+0x26a>
 8003e76:	2304      	movs	r3, #4
 8003e78:	e021      	b.n	8003ebe <HAL_GPIO_Init+0x26a>
 8003e7a:	2303      	movs	r3, #3
 8003e7c:	e01f      	b.n	8003ebe <HAL_GPIO_Init+0x26a>
 8003e7e:	2302      	movs	r3, #2
 8003e80:	e01d      	b.n	8003ebe <HAL_GPIO_Init+0x26a>
 8003e82:	2301      	movs	r3, #1
 8003e84:	e01b      	b.n	8003ebe <HAL_GPIO_Init+0x26a>
 8003e86:	bf00      	nop
 8003e88:	58000080 	.word	0x58000080
 8003e8c:	58024400 	.word	0x58024400
 8003e90:	58000400 	.word	0x58000400
 8003e94:	58020000 	.word	0x58020000
 8003e98:	58020400 	.word	0x58020400
 8003e9c:	58020800 	.word	0x58020800
 8003ea0:	58020c00 	.word	0x58020c00
 8003ea4:	58021000 	.word	0x58021000
 8003ea8:	58021400 	.word	0x58021400
 8003eac:	58021800 	.word	0x58021800
 8003eb0:	58021c00 	.word	0x58021c00
 8003eb4:	58022000 	.word	0x58022000
 8003eb8:	58022400 	.word	0x58022400
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	69fa      	ldr	r2, [r7, #28]
 8003ec0:	f002 0203 	and.w	r2, r2, #3
 8003ec4:	0092      	lsls	r2, r2, #2
 8003ec6:	4093      	lsls	r3, r2
 8003ec8:	69ba      	ldr	r2, [r7, #24]
 8003eca:	4313      	orrs	r3, r2
 8003ecc:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003ece:	4938      	ldr	r1, [pc, #224]	@ (8003fb0 <HAL_GPIO_Init+0x35c>)
 8003ed0:	69fb      	ldr	r3, [r7, #28]
 8003ed2:	089b      	lsrs	r3, r3, #2
 8003ed4:	3302      	adds	r3, #2
 8003ed6:	69ba      	ldr	r2, [r7, #24]
 8003ed8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003edc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003ee4:	693b      	ldr	r3, [r7, #16]
 8003ee6:	43db      	mvns	r3, r3
 8003ee8:	69ba      	ldr	r2, [r7, #24]
 8003eea:	4013      	ands	r3, r2
 8003eec:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003eee:	683b      	ldr	r3, [r7, #0]
 8003ef0:	685b      	ldr	r3, [r3, #4]
 8003ef2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d003      	beq.n	8003f02 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8003efa:	69ba      	ldr	r2, [r7, #24]
 8003efc:	693b      	ldr	r3, [r7, #16]
 8003efe:	4313      	orrs	r3, r2
 8003f00:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8003f02:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003f06:	69bb      	ldr	r3, [r7, #24]
 8003f08:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003f0a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003f0e:	685b      	ldr	r3, [r3, #4]
 8003f10:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003f12:	693b      	ldr	r3, [r7, #16]
 8003f14:	43db      	mvns	r3, r3
 8003f16:	69ba      	ldr	r2, [r7, #24]
 8003f18:	4013      	ands	r3, r2
 8003f1a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	685b      	ldr	r3, [r3, #4]
 8003f20:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d003      	beq.n	8003f30 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003f28:	69ba      	ldr	r2, [r7, #24]
 8003f2a:	693b      	ldr	r3, [r7, #16]
 8003f2c:	4313      	orrs	r3, r2
 8003f2e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8003f30:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003f34:	69bb      	ldr	r3, [r7, #24]
 8003f36:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8003f38:	697b      	ldr	r3, [r7, #20]
 8003f3a:	685b      	ldr	r3, [r3, #4]
 8003f3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003f3e:	693b      	ldr	r3, [r7, #16]
 8003f40:	43db      	mvns	r3, r3
 8003f42:	69ba      	ldr	r2, [r7, #24]
 8003f44:	4013      	ands	r3, r2
 8003f46:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	685b      	ldr	r3, [r3, #4]
 8003f4c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d003      	beq.n	8003f5c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8003f54:	69ba      	ldr	r2, [r7, #24]
 8003f56:	693b      	ldr	r3, [r7, #16]
 8003f58:	4313      	orrs	r3, r2
 8003f5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8003f5c:	697b      	ldr	r3, [r7, #20]
 8003f5e:	69ba      	ldr	r2, [r7, #24]
 8003f60:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8003f62:	697b      	ldr	r3, [r7, #20]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003f68:	693b      	ldr	r3, [r7, #16]
 8003f6a:	43db      	mvns	r3, r3
 8003f6c:	69ba      	ldr	r2, [r7, #24]
 8003f6e:	4013      	ands	r3, r2
 8003f70:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003f72:	683b      	ldr	r3, [r7, #0]
 8003f74:	685b      	ldr	r3, [r3, #4]
 8003f76:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d003      	beq.n	8003f86 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8003f7e:	69ba      	ldr	r2, [r7, #24]
 8003f80:	693b      	ldr	r3, [r7, #16]
 8003f82:	4313      	orrs	r3, r2
 8003f84:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8003f86:	697b      	ldr	r3, [r7, #20]
 8003f88:	69ba      	ldr	r2, [r7, #24]
 8003f8a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8003f8c:	69fb      	ldr	r3, [r7, #28]
 8003f8e:	3301      	adds	r3, #1
 8003f90:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003f92:	683b      	ldr	r3, [r7, #0]
 8003f94:	681a      	ldr	r2, [r3, #0]
 8003f96:	69fb      	ldr	r3, [r7, #28]
 8003f98:	fa22 f303 	lsr.w	r3, r2, r3
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	f47f ae63 	bne.w	8003c68 <HAL_GPIO_Init+0x14>
  }
}
 8003fa2:	bf00      	nop
 8003fa4:	bf00      	nop
 8003fa6:	3724      	adds	r7, #36	@ 0x24
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fae:	4770      	bx	lr
 8003fb0:	58000400 	.word	0x58000400

08003fb4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003fb4:	b480      	push	{r7}
 8003fb6:	b083      	sub	sp, #12
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
 8003fbc:	460b      	mov	r3, r1
 8003fbe:	807b      	strh	r3, [r7, #2]
 8003fc0:	4613      	mov	r3, r2
 8003fc2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003fc4:	787b      	ldrb	r3, [r7, #1]
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d003      	beq.n	8003fd2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003fca:	887a      	ldrh	r2, [r7, #2]
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8003fd0:	e003      	b.n	8003fda <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003fd2:	887b      	ldrh	r3, [r7, #2]
 8003fd4:	041a      	lsls	r2, r3, #16
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	619a      	str	r2, [r3, #24]
}
 8003fda:	bf00      	nop
 8003fdc:	370c      	adds	r7, #12
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe4:	4770      	bx	lr
	...

08003fe8 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	b084      	sub	sp, #16
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8003ff0:	4b19      	ldr	r3, [pc, #100]	@ (8004058 <HAL_PWREx_ConfigSupply+0x70>)
 8003ff2:	68db      	ldr	r3, [r3, #12]
 8003ff4:	f003 0304 	and.w	r3, r3, #4
 8003ff8:	2b04      	cmp	r3, #4
 8003ffa:	d00a      	beq.n	8004012 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003ffc:	4b16      	ldr	r3, [pc, #88]	@ (8004058 <HAL_PWREx_ConfigSupply+0x70>)
 8003ffe:	68db      	ldr	r3, [r3, #12]
 8004000:	f003 0307 	and.w	r3, r3, #7
 8004004:	687a      	ldr	r2, [r7, #4]
 8004006:	429a      	cmp	r2, r3
 8004008:	d001      	beq.n	800400e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800400a:	2301      	movs	r3, #1
 800400c:	e01f      	b.n	800404e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800400e:	2300      	movs	r3, #0
 8004010:	e01d      	b.n	800404e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8004012:	4b11      	ldr	r3, [pc, #68]	@ (8004058 <HAL_PWREx_ConfigSupply+0x70>)
 8004014:	68db      	ldr	r3, [r3, #12]
 8004016:	f023 0207 	bic.w	r2, r3, #7
 800401a:	490f      	ldr	r1, [pc, #60]	@ (8004058 <HAL_PWREx_ConfigSupply+0x70>)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	4313      	orrs	r3, r2
 8004020:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8004022:	f7fd fa2d 	bl	8001480 <HAL_GetTick>
 8004026:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004028:	e009      	b.n	800403e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800402a:	f7fd fa29 	bl	8001480 <HAL_GetTick>
 800402e:	4602      	mov	r2, r0
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	1ad3      	subs	r3, r2, r3
 8004034:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004038:	d901      	bls.n	800403e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800403a:	2301      	movs	r3, #1
 800403c:	e007      	b.n	800404e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800403e:	4b06      	ldr	r3, [pc, #24]	@ (8004058 <HAL_PWREx_ConfigSupply+0x70>)
 8004040:	685b      	ldr	r3, [r3, #4]
 8004042:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004046:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800404a:	d1ee      	bne.n	800402a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800404c:	2300      	movs	r3, #0
}
 800404e:	4618      	mov	r0, r3
 8004050:	3710      	adds	r7, #16
 8004052:	46bd      	mov	sp, r7
 8004054:	bd80      	pop	{r7, pc}
 8004056:	bf00      	nop
 8004058:	58024800 	.word	0x58024800

0800405c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800405c:	b580      	push	{r7, lr}
 800405e:	b08c      	sub	sp, #48	@ 0x30
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2b00      	cmp	r3, #0
 8004068:	d102      	bne.n	8004070 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800406a:	2301      	movs	r3, #1
 800406c:	f000 bc48 	b.w	8004900 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f003 0301 	and.w	r3, r3, #1
 8004078:	2b00      	cmp	r3, #0
 800407a:	f000 8088 	beq.w	800418e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800407e:	4b99      	ldr	r3, [pc, #612]	@ (80042e4 <HAL_RCC_OscConfig+0x288>)
 8004080:	691b      	ldr	r3, [r3, #16]
 8004082:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004086:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004088:	4b96      	ldr	r3, [pc, #600]	@ (80042e4 <HAL_RCC_OscConfig+0x288>)
 800408a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800408c:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800408e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004090:	2b10      	cmp	r3, #16
 8004092:	d007      	beq.n	80040a4 <HAL_RCC_OscConfig+0x48>
 8004094:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004096:	2b18      	cmp	r3, #24
 8004098:	d111      	bne.n	80040be <HAL_RCC_OscConfig+0x62>
 800409a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800409c:	f003 0303 	and.w	r3, r3, #3
 80040a0:	2b02      	cmp	r3, #2
 80040a2:	d10c      	bne.n	80040be <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040a4:	4b8f      	ldr	r3, [pc, #572]	@ (80042e4 <HAL_RCC_OscConfig+0x288>)
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d06d      	beq.n	800418c <HAL_RCC_OscConfig+0x130>
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	685b      	ldr	r3, [r3, #4]
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d169      	bne.n	800418c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80040b8:	2301      	movs	r3, #1
 80040ba:	f000 bc21 	b.w	8004900 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	685b      	ldr	r3, [r3, #4]
 80040c2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80040c6:	d106      	bne.n	80040d6 <HAL_RCC_OscConfig+0x7a>
 80040c8:	4b86      	ldr	r3, [pc, #536]	@ (80042e4 <HAL_RCC_OscConfig+0x288>)
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	4a85      	ldr	r2, [pc, #532]	@ (80042e4 <HAL_RCC_OscConfig+0x288>)
 80040ce:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80040d2:	6013      	str	r3, [r2, #0]
 80040d4:	e02e      	b.n	8004134 <HAL_RCC_OscConfig+0xd8>
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	685b      	ldr	r3, [r3, #4]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d10c      	bne.n	80040f8 <HAL_RCC_OscConfig+0x9c>
 80040de:	4b81      	ldr	r3, [pc, #516]	@ (80042e4 <HAL_RCC_OscConfig+0x288>)
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	4a80      	ldr	r2, [pc, #512]	@ (80042e4 <HAL_RCC_OscConfig+0x288>)
 80040e4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80040e8:	6013      	str	r3, [r2, #0]
 80040ea:	4b7e      	ldr	r3, [pc, #504]	@ (80042e4 <HAL_RCC_OscConfig+0x288>)
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	4a7d      	ldr	r2, [pc, #500]	@ (80042e4 <HAL_RCC_OscConfig+0x288>)
 80040f0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80040f4:	6013      	str	r3, [r2, #0]
 80040f6:	e01d      	b.n	8004134 <HAL_RCC_OscConfig+0xd8>
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	685b      	ldr	r3, [r3, #4]
 80040fc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004100:	d10c      	bne.n	800411c <HAL_RCC_OscConfig+0xc0>
 8004102:	4b78      	ldr	r3, [pc, #480]	@ (80042e4 <HAL_RCC_OscConfig+0x288>)
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	4a77      	ldr	r2, [pc, #476]	@ (80042e4 <HAL_RCC_OscConfig+0x288>)
 8004108:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800410c:	6013      	str	r3, [r2, #0]
 800410e:	4b75      	ldr	r3, [pc, #468]	@ (80042e4 <HAL_RCC_OscConfig+0x288>)
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	4a74      	ldr	r2, [pc, #464]	@ (80042e4 <HAL_RCC_OscConfig+0x288>)
 8004114:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004118:	6013      	str	r3, [r2, #0]
 800411a:	e00b      	b.n	8004134 <HAL_RCC_OscConfig+0xd8>
 800411c:	4b71      	ldr	r3, [pc, #452]	@ (80042e4 <HAL_RCC_OscConfig+0x288>)
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	4a70      	ldr	r2, [pc, #448]	@ (80042e4 <HAL_RCC_OscConfig+0x288>)
 8004122:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004126:	6013      	str	r3, [r2, #0]
 8004128:	4b6e      	ldr	r3, [pc, #440]	@ (80042e4 <HAL_RCC_OscConfig+0x288>)
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	4a6d      	ldr	r2, [pc, #436]	@ (80042e4 <HAL_RCC_OscConfig+0x288>)
 800412e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004132:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	685b      	ldr	r3, [r3, #4]
 8004138:	2b00      	cmp	r3, #0
 800413a:	d013      	beq.n	8004164 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800413c:	f7fd f9a0 	bl	8001480 <HAL_GetTick>
 8004140:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004142:	e008      	b.n	8004156 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004144:	f7fd f99c 	bl	8001480 <HAL_GetTick>
 8004148:	4602      	mov	r2, r0
 800414a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800414c:	1ad3      	subs	r3, r2, r3
 800414e:	2b64      	cmp	r3, #100	@ 0x64
 8004150:	d901      	bls.n	8004156 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004152:	2303      	movs	r3, #3
 8004154:	e3d4      	b.n	8004900 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004156:	4b63      	ldr	r3, [pc, #396]	@ (80042e4 <HAL_RCC_OscConfig+0x288>)
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800415e:	2b00      	cmp	r3, #0
 8004160:	d0f0      	beq.n	8004144 <HAL_RCC_OscConfig+0xe8>
 8004162:	e014      	b.n	800418e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004164:	f7fd f98c 	bl	8001480 <HAL_GetTick>
 8004168:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800416a:	e008      	b.n	800417e <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800416c:	f7fd f988 	bl	8001480 <HAL_GetTick>
 8004170:	4602      	mov	r2, r0
 8004172:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004174:	1ad3      	subs	r3, r2, r3
 8004176:	2b64      	cmp	r3, #100	@ 0x64
 8004178:	d901      	bls.n	800417e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800417a:	2303      	movs	r3, #3
 800417c:	e3c0      	b.n	8004900 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800417e:	4b59      	ldr	r3, [pc, #356]	@ (80042e4 <HAL_RCC_OscConfig+0x288>)
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004186:	2b00      	cmp	r3, #0
 8004188:	d1f0      	bne.n	800416c <HAL_RCC_OscConfig+0x110>
 800418a:	e000      	b.n	800418e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800418c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f003 0302 	and.w	r3, r3, #2
 8004196:	2b00      	cmp	r3, #0
 8004198:	f000 80ca 	beq.w	8004330 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800419c:	4b51      	ldr	r3, [pc, #324]	@ (80042e4 <HAL_RCC_OscConfig+0x288>)
 800419e:	691b      	ldr	r3, [r3, #16]
 80041a0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80041a4:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80041a6:	4b4f      	ldr	r3, [pc, #316]	@ (80042e4 <HAL_RCC_OscConfig+0x288>)
 80041a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041aa:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80041ac:	6a3b      	ldr	r3, [r7, #32]
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d007      	beq.n	80041c2 <HAL_RCC_OscConfig+0x166>
 80041b2:	6a3b      	ldr	r3, [r7, #32]
 80041b4:	2b18      	cmp	r3, #24
 80041b6:	d156      	bne.n	8004266 <HAL_RCC_OscConfig+0x20a>
 80041b8:	69fb      	ldr	r3, [r7, #28]
 80041ba:	f003 0303 	and.w	r3, r3, #3
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d151      	bne.n	8004266 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80041c2:	4b48      	ldr	r3, [pc, #288]	@ (80042e4 <HAL_RCC_OscConfig+0x288>)
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f003 0304 	and.w	r3, r3, #4
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d005      	beq.n	80041da <HAL_RCC_OscConfig+0x17e>
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	68db      	ldr	r3, [r3, #12]
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d101      	bne.n	80041da <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80041d6:	2301      	movs	r3, #1
 80041d8:	e392      	b.n	8004900 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80041da:	4b42      	ldr	r3, [pc, #264]	@ (80042e4 <HAL_RCC_OscConfig+0x288>)
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f023 0219 	bic.w	r2, r3, #25
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	68db      	ldr	r3, [r3, #12]
 80041e6:	493f      	ldr	r1, [pc, #252]	@ (80042e4 <HAL_RCC_OscConfig+0x288>)
 80041e8:	4313      	orrs	r3, r2
 80041ea:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041ec:	f7fd f948 	bl	8001480 <HAL_GetTick>
 80041f0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80041f2:	e008      	b.n	8004206 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80041f4:	f7fd f944 	bl	8001480 <HAL_GetTick>
 80041f8:	4602      	mov	r2, r0
 80041fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041fc:	1ad3      	subs	r3, r2, r3
 80041fe:	2b02      	cmp	r3, #2
 8004200:	d901      	bls.n	8004206 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004202:	2303      	movs	r3, #3
 8004204:	e37c      	b.n	8004900 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004206:	4b37      	ldr	r3, [pc, #220]	@ (80042e4 <HAL_RCC_OscConfig+0x288>)
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f003 0304 	and.w	r3, r3, #4
 800420e:	2b00      	cmp	r3, #0
 8004210:	d0f0      	beq.n	80041f4 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004212:	f7fd f965 	bl	80014e0 <HAL_GetREVID>
 8004216:	4603      	mov	r3, r0
 8004218:	f241 0203 	movw	r2, #4099	@ 0x1003
 800421c:	4293      	cmp	r3, r2
 800421e:	d817      	bhi.n	8004250 <HAL_RCC_OscConfig+0x1f4>
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	691b      	ldr	r3, [r3, #16]
 8004224:	2b40      	cmp	r3, #64	@ 0x40
 8004226:	d108      	bne.n	800423a <HAL_RCC_OscConfig+0x1de>
 8004228:	4b2e      	ldr	r3, [pc, #184]	@ (80042e4 <HAL_RCC_OscConfig+0x288>)
 800422a:	685b      	ldr	r3, [r3, #4]
 800422c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8004230:	4a2c      	ldr	r2, [pc, #176]	@ (80042e4 <HAL_RCC_OscConfig+0x288>)
 8004232:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004236:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004238:	e07a      	b.n	8004330 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800423a:	4b2a      	ldr	r3, [pc, #168]	@ (80042e4 <HAL_RCC_OscConfig+0x288>)
 800423c:	685b      	ldr	r3, [r3, #4]
 800423e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	691b      	ldr	r3, [r3, #16]
 8004246:	031b      	lsls	r3, r3, #12
 8004248:	4926      	ldr	r1, [pc, #152]	@ (80042e4 <HAL_RCC_OscConfig+0x288>)
 800424a:	4313      	orrs	r3, r2
 800424c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800424e:	e06f      	b.n	8004330 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004250:	4b24      	ldr	r3, [pc, #144]	@ (80042e4 <HAL_RCC_OscConfig+0x288>)
 8004252:	685b      	ldr	r3, [r3, #4]
 8004254:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	691b      	ldr	r3, [r3, #16]
 800425c:	061b      	lsls	r3, r3, #24
 800425e:	4921      	ldr	r1, [pc, #132]	@ (80042e4 <HAL_RCC_OscConfig+0x288>)
 8004260:	4313      	orrs	r3, r2
 8004262:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004264:	e064      	b.n	8004330 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	68db      	ldr	r3, [r3, #12]
 800426a:	2b00      	cmp	r3, #0
 800426c:	d047      	beq.n	80042fe <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800426e:	4b1d      	ldr	r3, [pc, #116]	@ (80042e4 <HAL_RCC_OscConfig+0x288>)
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f023 0219 	bic.w	r2, r3, #25
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	68db      	ldr	r3, [r3, #12]
 800427a:	491a      	ldr	r1, [pc, #104]	@ (80042e4 <HAL_RCC_OscConfig+0x288>)
 800427c:	4313      	orrs	r3, r2
 800427e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004280:	f7fd f8fe 	bl	8001480 <HAL_GetTick>
 8004284:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004286:	e008      	b.n	800429a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004288:	f7fd f8fa 	bl	8001480 <HAL_GetTick>
 800428c:	4602      	mov	r2, r0
 800428e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004290:	1ad3      	subs	r3, r2, r3
 8004292:	2b02      	cmp	r3, #2
 8004294:	d901      	bls.n	800429a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8004296:	2303      	movs	r3, #3
 8004298:	e332      	b.n	8004900 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800429a:	4b12      	ldr	r3, [pc, #72]	@ (80042e4 <HAL_RCC_OscConfig+0x288>)
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f003 0304 	and.w	r3, r3, #4
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d0f0      	beq.n	8004288 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042a6:	f7fd f91b 	bl	80014e0 <HAL_GetREVID>
 80042aa:	4603      	mov	r3, r0
 80042ac:	f241 0203 	movw	r2, #4099	@ 0x1003
 80042b0:	4293      	cmp	r3, r2
 80042b2:	d819      	bhi.n	80042e8 <HAL_RCC_OscConfig+0x28c>
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	691b      	ldr	r3, [r3, #16]
 80042b8:	2b40      	cmp	r3, #64	@ 0x40
 80042ba:	d108      	bne.n	80042ce <HAL_RCC_OscConfig+0x272>
 80042bc:	4b09      	ldr	r3, [pc, #36]	@ (80042e4 <HAL_RCC_OscConfig+0x288>)
 80042be:	685b      	ldr	r3, [r3, #4]
 80042c0:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80042c4:	4a07      	ldr	r2, [pc, #28]	@ (80042e4 <HAL_RCC_OscConfig+0x288>)
 80042c6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80042ca:	6053      	str	r3, [r2, #4]
 80042cc:	e030      	b.n	8004330 <HAL_RCC_OscConfig+0x2d4>
 80042ce:	4b05      	ldr	r3, [pc, #20]	@ (80042e4 <HAL_RCC_OscConfig+0x288>)
 80042d0:	685b      	ldr	r3, [r3, #4]
 80042d2:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	691b      	ldr	r3, [r3, #16]
 80042da:	031b      	lsls	r3, r3, #12
 80042dc:	4901      	ldr	r1, [pc, #4]	@ (80042e4 <HAL_RCC_OscConfig+0x288>)
 80042de:	4313      	orrs	r3, r2
 80042e0:	604b      	str	r3, [r1, #4]
 80042e2:	e025      	b.n	8004330 <HAL_RCC_OscConfig+0x2d4>
 80042e4:	58024400 	.word	0x58024400
 80042e8:	4b9a      	ldr	r3, [pc, #616]	@ (8004554 <HAL_RCC_OscConfig+0x4f8>)
 80042ea:	685b      	ldr	r3, [r3, #4]
 80042ec:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	691b      	ldr	r3, [r3, #16]
 80042f4:	061b      	lsls	r3, r3, #24
 80042f6:	4997      	ldr	r1, [pc, #604]	@ (8004554 <HAL_RCC_OscConfig+0x4f8>)
 80042f8:	4313      	orrs	r3, r2
 80042fa:	604b      	str	r3, [r1, #4]
 80042fc:	e018      	b.n	8004330 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80042fe:	4b95      	ldr	r3, [pc, #596]	@ (8004554 <HAL_RCC_OscConfig+0x4f8>)
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	4a94      	ldr	r2, [pc, #592]	@ (8004554 <HAL_RCC_OscConfig+0x4f8>)
 8004304:	f023 0301 	bic.w	r3, r3, #1
 8004308:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800430a:	f7fd f8b9 	bl	8001480 <HAL_GetTick>
 800430e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004310:	e008      	b.n	8004324 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004312:	f7fd f8b5 	bl	8001480 <HAL_GetTick>
 8004316:	4602      	mov	r2, r0
 8004318:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800431a:	1ad3      	subs	r3, r2, r3
 800431c:	2b02      	cmp	r3, #2
 800431e:	d901      	bls.n	8004324 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8004320:	2303      	movs	r3, #3
 8004322:	e2ed      	b.n	8004900 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004324:	4b8b      	ldr	r3, [pc, #556]	@ (8004554 <HAL_RCC_OscConfig+0x4f8>)
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f003 0304 	and.w	r3, r3, #4
 800432c:	2b00      	cmp	r3, #0
 800432e:	d1f0      	bne.n	8004312 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f003 0310 	and.w	r3, r3, #16
 8004338:	2b00      	cmp	r3, #0
 800433a:	f000 80a9 	beq.w	8004490 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800433e:	4b85      	ldr	r3, [pc, #532]	@ (8004554 <HAL_RCC_OscConfig+0x4f8>)
 8004340:	691b      	ldr	r3, [r3, #16]
 8004342:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004346:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004348:	4b82      	ldr	r3, [pc, #520]	@ (8004554 <HAL_RCC_OscConfig+0x4f8>)
 800434a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800434c:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800434e:	69bb      	ldr	r3, [r7, #24]
 8004350:	2b08      	cmp	r3, #8
 8004352:	d007      	beq.n	8004364 <HAL_RCC_OscConfig+0x308>
 8004354:	69bb      	ldr	r3, [r7, #24]
 8004356:	2b18      	cmp	r3, #24
 8004358:	d13a      	bne.n	80043d0 <HAL_RCC_OscConfig+0x374>
 800435a:	697b      	ldr	r3, [r7, #20]
 800435c:	f003 0303 	and.w	r3, r3, #3
 8004360:	2b01      	cmp	r3, #1
 8004362:	d135      	bne.n	80043d0 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004364:	4b7b      	ldr	r3, [pc, #492]	@ (8004554 <HAL_RCC_OscConfig+0x4f8>)
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800436c:	2b00      	cmp	r3, #0
 800436e:	d005      	beq.n	800437c <HAL_RCC_OscConfig+0x320>
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	69db      	ldr	r3, [r3, #28]
 8004374:	2b80      	cmp	r3, #128	@ 0x80
 8004376:	d001      	beq.n	800437c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8004378:	2301      	movs	r3, #1
 800437a:	e2c1      	b.n	8004900 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800437c:	f7fd f8b0 	bl	80014e0 <HAL_GetREVID>
 8004380:	4603      	mov	r3, r0
 8004382:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004386:	4293      	cmp	r3, r2
 8004388:	d817      	bhi.n	80043ba <HAL_RCC_OscConfig+0x35e>
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6a1b      	ldr	r3, [r3, #32]
 800438e:	2b20      	cmp	r3, #32
 8004390:	d108      	bne.n	80043a4 <HAL_RCC_OscConfig+0x348>
 8004392:	4b70      	ldr	r3, [pc, #448]	@ (8004554 <HAL_RCC_OscConfig+0x4f8>)
 8004394:	685b      	ldr	r3, [r3, #4]
 8004396:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800439a:	4a6e      	ldr	r2, [pc, #440]	@ (8004554 <HAL_RCC_OscConfig+0x4f8>)
 800439c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80043a0:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80043a2:	e075      	b.n	8004490 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80043a4:	4b6b      	ldr	r3, [pc, #428]	@ (8004554 <HAL_RCC_OscConfig+0x4f8>)
 80043a6:	685b      	ldr	r3, [r3, #4]
 80043a8:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	6a1b      	ldr	r3, [r3, #32]
 80043b0:	069b      	lsls	r3, r3, #26
 80043b2:	4968      	ldr	r1, [pc, #416]	@ (8004554 <HAL_RCC_OscConfig+0x4f8>)
 80043b4:	4313      	orrs	r3, r2
 80043b6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80043b8:	e06a      	b.n	8004490 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80043ba:	4b66      	ldr	r3, [pc, #408]	@ (8004554 <HAL_RCC_OscConfig+0x4f8>)
 80043bc:	68db      	ldr	r3, [r3, #12]
 80043be:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6a1b      	ldr	r3, [r3, #32]
 80043c6:	061b      	lsls	r3, r3, #24
 80043c8:	4962      	ldr	r1, [pc, #392]	@ (8004554 <HAL_RCC_OscConfig+0x4f8>)
 80043ca:	4313      	orrs	r3, r2
 80043cc:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80043ce:	e05f      	b.n	8004490 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	69db      	ldr	r3, [r3, #28]
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d042      	beq.n	800445e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80043d8:	4b5e      	ldr	r3, [pc, #376]	@ (8004554 <HAL_RCC_OscConfig+0x4f8>)
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	4a5d      	ldr	r2, [pc, #372]	@ (8004554 <HAL_RCC_OscConfig+0x4f8>)
 80043de:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80043e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043e4:	f7fd f84c 	bl	8001480 <HAL_GetTick>
 80043e8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80043ea:	e008      	b.n	80043fe <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80043ec:	f7fd f848 	bl	8001480 <HAL_GetTick>
 80043f0:	4602      	mov	r2, r0
 80043f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043f4:	1ad3      	subs	r3, r2, r3
 80043f6:	2b02      	cmp	r3, #2
 80043f8:	d901      	bls.n	80043fe <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80043fa:	2303      	movs	r3, #3
 80043fc:	e280      	b.n	8004900 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80043fe:	4b55      	ldr	r3, [pc, #340]	@ (8004554 <HAL_RCC_OscConfig+0x4f8>)
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004406:	2b00      	cmp	r3, #0
 8004408:	d0f0      	beq.n	80043ec <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800440a:	f7fd f869 	bl	80014e0 <HAL_GetREVID>
 800440e:	4603      	mov	r3, r0
 8004410:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004414:	4293      	cmp	r3, r2
 8004416:	d817      	bhi.n	8004448 <HAL_RCC_OscConfig+0x3ec>
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	6a1b      	ldr	r3, [r3, #32]
 800441c:	2b20      	cmp	r3, #32
 800441e:	d108      	bne.n	8004432 <HAL_RCC_OscConfig+0x3d6>
 8004420:	4b4c      	ldr	r3, [pc, #304]	@ (8004554 <HAL_RCC_OscConfig+0x4f8>)
 8004422:	685b      	ldr	r3, [r3, #4]
 8004424:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8004428:	4a4a      	ldr	r2, [pc, #296]	@ (8004554 <HAL_RCC_OscConfig+0x4f8>)
 800442a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800442e:	6053      	str	r3, [r2, #4]
 8004430:	e02e      	b.n	8004490 <HAL_RCC_OscConfig+0x434>
 8004432:	4b48      	ldr	r3, [pc, #288]	@ (8004554 <HAL_RCC_OscConfig+0x4f8>)
 8004434:	685b      	ldr	r3, [r3, #4]
 8004436:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6a1b      	ldr	r3, [r3, #32]
 800443e:	069b      	lsls	r3, r3, #26
 8004440:	4944      	ldr	r1, [pc, #272]	@ (8004554 <HAL_RCC_OscConfig+0x4f8>)
 8004442:	4313      	orrs	r3, r2
 8004444:	604b      	str	r3, [r1, #4]
 8004446:	e023      	b.n	8004490 <HAL_RCC_OscConfig+0x434>
 8004448:	4b42      	ldr	r3, [pc, #264]	@ (8004554 <HAL_RCC_OscConfig+0x4f8>)
 800444a:	68db      	ldr	r3, [r3, #12]
 800444c:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	6a1b      	ldr	r3, [r3, #32]
 8004454:	061b      	lsls	r3, r3, #24
 8004456:	493f      	ldr	r1, [pc, #252]	@ (8004554 <HAL_RCC_OscConfig+0x4f8>)
 8004458:	4313      	orrs	r3, r2
 800445a:	60cb      	str	r3, [r1, #12]
 800445c:	e018      	b.n	8004490 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800445e:	4b3d      	ldr	r3, [pc, #244]	@ (8004554 <HAL_RCC_OscConfig+0x4f8>)
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	4a3c      	ldr	r2, [pc, #240]	@ (8004554 <HAL_RCC_OscConfig+0x4f8>)
 8004464:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004468:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800446a:	f7fd f809 	bl	8001480 <HAL_GetTick>
 800446e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004470:	e008      	b.n	8004484 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004472:	f7fd f805 	bl	8001480 <HAL_GetTick>
 8004476:	4602      	mov	r2, r0
 8004478:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800447a:	1ad3      	subs	r3, r2, r3
 800447c:	2b02      	cmp	r3, #2
 800447e:	d901      	bls.n	8004484 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004480:	2303      	movs	r3, #3
 8004482:	e23d      	b.n	8004900 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004484:	4b33      	ldr	r3, [pc, #204]	@ (8004554 <HAL_RCC_OscConfig+0x4f8>)
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800448c:	2b00      	cmp	r3, #0
 800448e:	d1f0      	bne.n	8004472 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f003 0308 	and.w	r3, r3, #8
 8004498:	2b00      	cmp	r3, #0
 800449a:	d036      	beq.n	800450a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	695b      	ldr	r3, [r3, #20]
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d019      	beq.n	80044d8 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80044a4:	4b2b      	ldr	r3, [pc, #172]	@ (8004554 <HAL_RCC_OscConfig+0x4f8>)
 80044a6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80044a8:	4a2a      	ldr	r2, [pc, #168]	@ (8004554 <HAL_RCC_OscConfig+0x4f8>)
 80044aa:	f043 0301 	orr.w	r3, r3, #1
 80044ae:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044b0:	f7fc ffe6 	bl	8001480 <HAL_GetTick>
 80044b4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80044b6:	e008      	b.n	80044ca <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80044b8:	f7fc ffe2 	bl	8001480 <HAL_GetTick>
 80044bc:	4602      	mov	r2, r0
 80044be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044c0:	1ad3      	subs	r3, r2, r3
 80044c2:	2b02      	cmp	r3, #2
 80044c4:	d901      	bls.n	80044ca <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80044c6:	2303      	movs	r3, #3
 80044c8:	e21a      	b.n	8004900 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80044ca:	4b22      	ldr	r3, [pc, #136]	@ (8004554 <HAL_RCC_OscConfig+0x4f8>)
 80044cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80044ce:	f003 0302 	and.w	r3, r3, #2
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d0f0      	beq.n	80044b8 <HAL_RCC_OscConfig+0x45c>
 80044d6:	e018      	b.n	800450a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80044d8:	4b1e      	ldr	r3, [pc, #120]	@ (8004554 <HAL_RCC_OscConfig+0x4f8>)
 80044da:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80044dc:	4a1d      	ldr	r2, [pc, #116]	@ (8004554 <HAL_RCC_OscConfig+0x4f8>)
 80044de:	f023 0301 	bic.w	r3, r3, #1
 80044e2:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044e4:	f7fc ffcc 	bl	8001480 <HAL_GetTick>
 80044e8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80044ea:	e008      	b.n	80044fe <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80044ec:	f7fc ffc8 	bl	8001480 <HAL_GetTick>
 80044f0:	4602      	mov	r2, r0
 80044f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044f4:	1ad3      	subs	r3, r2, r3
 80044f6:	2b02      	cmp	r3, #2
 80044f8:	d901      	bls.n	80044fe <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80044fa:	2303      	movs	r3, #3
 80044fc:	e200      	b.n	8004900 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80044fe:	4b15      	ldr	r3, [pc, #84]	@ (8004554 <HAL_RCC_OscConfig+0x4f8>)
 8004500:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004502:	f003 0302 	and.w	r3, r3, #2
 8004506:	2b00      	cmp	r3, #0
 8004508:	d1f0      	bne.n	80044ec <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f003 0320 	and.w	r3, r3, #32
 8004512:	2b00      	cmp	r3, #0
 8004514:	d039      	beq.n	800458a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	699b      	ldr	r3, [r3, #24]
 800451a:	2b00      	cmp	r3, #0
 800451c:	d01c      	beq.n	8004558 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800451e:	4b0d      	ldr	r3, [pc, #52]	@ (8004554 <HAL_RCC_OscConfig+0x4f8>)
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	4a0c      	ldr	r2, [pc, #48]	@ (8004554 <HAL_RCC_OscConfig+0x4f8>)
 8004524:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004528:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800452a:	f7fc ffa9 	bl	8001480 <HAL_GetTick>
 800452e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004530:	e008      	b.n	8004544 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004532:	f7fc ffa5 	bl	8001480 <HAL_GetTick>
 8004536:	4602      	mov	r2, r0
 8004538:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800453a:	1ad3      	subs	r3, r2, r3
 800453c:	2b02      	cmp	r3, #2
 800453e:	d901      	bls.n	8004544 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8004540:	2303      	movs	r3, #3
 8004542:	e1dd      	b.n	8004900 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004544:	4b03      	ldr	r3, [pc, #12]	@ (8004554 <HAL_RCC_OscConfig+0x4f8>)
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800454c:	2b00      	cmp	r3, #0
 800454e:	d0f0      	beq.n	8004532 <HAL_RCC_OscConfig+0x4d6>
 8004550:	e01b      	b.n	800458a <HAL_RCC_OscConfig+0x52e>
 8004552:	bf00      	nop
 8004554:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004558:	4b9b      	ldr	r3, [pc, #620]	@ (80047c8 <HAL_RCC_OscConfig+0x76c>)
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	4a9a      	ldr	r2, [pc, #616]	@ (80047c8 <HAL_RCC_OscConfig+0x76c>)
 800455e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004562:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004564:	f7fc ff8c 	bl	8001480 <HAL_GetTick>
 8004568:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800456a:	e008      	b.n	800457e <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800456c:	f7fc ff88 	bl	8001480 <HAL_GetTick>
 8004570:	4602      	mov	r2, r0
 8004572:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004574:	1ad3      	subs	r3, r2, r3
 8004576:	2b02      	cmp	r3, #2
 8004578:	d901      	bls.n	800457e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800457a:	2303      	movs	r3, #3
 800457c:	e1c0      	b.n	8004900 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800457e:	4b92      	ldr	r3, [pc, #584]	@ (80047c8 <HAL_RCC_OscConfig+0x76c>)
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004586:	2b00      	cmp	r3, #0
 8004588:	d1f0      	bne.n	800456c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f003 0304 	and.w	r3, r3, #4
 8004592:	2b00      	cmp	r3, #0
 8004594:	f000 8081 	beq.w	800469a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004598:	4b8c      	ldr	r3, [pc, #560]	@ (80047cc <HAL_RCC_OscConfig+0x770>)
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	4a8b      	ldr	r2, [pc, #556]	@ (80047cc <HAL_RCC_OscConfig+0x770>)
 800459e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80045a2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80045a4:	f7fc ff6c 	bl	8001480 <HAL_GetTick>
 80045a8:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80045aa:	e008      	b.n	80045be <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80045ac:	f7fc ff68 	bl	8001480 <HAL_GetTick>
 80045b0:	4602      	mov	r2, r0
 80045b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045b4:	1ad3      	subs	r3, r2, r3
 80045b6:	2b64      	cmp	r3, #100	@ 0x64
 80045b8:	d901      	bls.n	80045be <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80045ba:	2303      	movs	r3, #3
 80045bc:	e1a0      	b.n	8004900 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80045be:	4b83      	ldr	r3, [pc, #524]	@ (80047cc <HAL_RCC_OscConfig+0x770>)
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d0f0      	beq.n	80045ac <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	689b      	ldr	r3, [r3, #8]
 80045ce:	2b01      	cmp	r3, #1
 80045d0:	d106      	bne.n	80045e0 <HAL_RCC_OscConfig+0x584>
 80045d2:	4b7d      	ldr	r3, [pc, #500]	@ (80047c8 <HAL_RCC_OscConfig+0x76c>)
 80045d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045d6:	4a7c      	ldr	r2, [pc, #496]	@ (80047c8 <HAL_RCC_OscConfig+0x76c>)
 80045d8:	f043 0301 	orr.w	r3, r3, #1
 80045dc:	6713      	str	r3, [r2, #112]	@ 0x70
 80045de:	e02d      	b.n	800463c <HAL_RCC_OscConfig+0x5e0>
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	689b      	ldr	r3, [r3, #8]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d10c      	bne.n	8004602 <HAL_RCC_OscConfig+0x5a6>
 80045e8:	4b77      	ldr	r3, [pc, #476]	@ (80047c8 <HAL_RCC_OscConfig+0x76c>)
 80045ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045ec:	4a76      	ldr	r2, [pc, #472]	@ (80047c8 <HAL_RCC_OscConfig+0x76c>)
 80045ee:	f023 0301 	bic.w	r3, r3, #1
 80045f2:	6713      	str	r3, [r2, #112]	@ 0x70
 80045f4:	4b74      	ldr	r3, [pc, #464]	@ (80047c8 <HAL_RCC_OscConfig+0x76c>)
 80045f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045f8:	4a73      	ldr	r2, [pc, #460]	@ (80047c8 <HAL_RCC_OscConfig+0x76c>)
 80045fa:	f023 0304 	bic.w	r3, r3, #4
 80045fe:	6713      	str	r3, [r2, #112]	@ 0x70
 8004600:	e01c      	b.n	800463c <HAL_RCC_OscConfig+0x5e0>
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	689b      	ldr	r3, [r3, #8]
 8004606:	2b05      	cmp	r3, #5
 8004608:	d10c      	bne.n	8004624 <HAL_RCC_OscConfig+0x5c8>
 800460a:	4b6f      	ldr	r3, [pc, #444]	@ (80047c8 <HAL_RCC_OscConfig+0x76c>)
 800460c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800460e:	4a6e      	ldr	r2, [pc, #440]	@ (80047c8 <HAL_RCC_OscConfig+0x76c>)
 8004610:	f043 0304 	orr.w	r3, r3, #4
 8004614:	6713      	str	r3, [r2, #112]	@ 0x70
 8004616:	4b6c      	ldr	r3, [pc, #432]	@ (80047c8 <HAL_RCC_OscConfig+0x76c>)
 8004618:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800461a:	4a6b      	ldr	r2, [pc, #428]	@ (80047c8 <HAL_RCC_OscConfig+0x76c>)
 800461c:	f043 0301 	orr.w	r3, r3, #1
 8004620:	6713      	str	r3, [r2, #112]	@ 0x70
 8004622:	e00b      	b.n	800463c <HAL_RCC_OscConfig+0x5e0>
 8004624:	4b68      	ldr	r3, [pc, #416]	@ (80047c8 <HAL_RCC_OscConfig+0x76c>)
 8004626:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004628:	4a67      	ldr	r2, [pc, #412]	@ (80047c8 <HAL_RCC_OscConfig+0x76c>)
 800462a:	f023 0301 	bic.w	r3, r3, #1
 800462e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004630:	4b65      	ldr	r3, [pc, #404]	@ (80047c8 <HAL_RCC_OscConfig+0x76c>)
 8004632:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004634:	4a64      	ldr	r2, [pc, #400]	@ (80047c8 <HAL_RCC_OscConfig+0x76c>)
 8004636:	f023 0304 	bic.w	r3, r3, #4
 800463a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	689b      	ldr	r3, [r3, #8]
 8004640:	2b00      	cmp	r3, #0
 8004642:	d015      	beq.n	8004670 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004644:	f7fc ff1c 	bl	8001480 <HAL_GetTick>
 8004648:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800464a:	e00a      	b.n	8004662 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800464c:	f7fc ff18 	bl	8001480 <HAL_GetTick>
 8004650:	4602      	mov	r2, r0
 8004652:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004654:	1ad3      	subs	r3, r2, r3
 8004656:	f241 3288 	movw	r2, #5000	@ 0x1388
 800465a:	4293      	cmp	r3, r2
 800465c:	d901      	bls.n	8004662 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800465e:	2303      	movs	r3, #3
 8004660:	e14e      	b.n	8004900 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004662:	4b59      	ldr	r3, [pc, #356]	@ (80047c8 <HAL_RCC_OscConfig+0x76c>)
 8004664:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004666:	f003 0302 	and.w	r3, r3, #2
 800466a:	2b00      	cmp	r3, #0
 800466c:	d0ee      	beq.n	800464c <HAL_RCC_OscConfig+0x5f0>
 800466e:	e014      	b.n	800469a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004670:	f7fc ff06 	bl	8001480 <HAL_GetTick>
 8004674:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004676:	e00a      	b.n	800468e <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004678:	f7fc ff02 	bl	8001480 <HAL_GetTick>
 800467c:	4602      	mov	r2, r0
 800467e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004680:	1ad3      	subs	r3, r2, r3
 8004682:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004686:	4293      	cmp	r3, r2
 8004688:	d901      	bls.n	800468e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800468a:	2303      	movs	r3, #3
 800468c:	e138      	b.n	8004900 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800468e:	4b4e      	ldr	r3, [pc, #312]	@ (80047c8 <HAL_RCC_OscConfig+0x76c>)
 8004690:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004692:	f003 0302 	and.w	r3, r3, #2
 8004696:	2b00      	cmp	r3, #0
 8004698:	d1ee      	bne.n	8004678 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800469e:	2b00      	cmp	r3, #0
 80046a0:	f000 812d 	beq.w	80048fe <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80046a4:	4b48      	ldr	r3, [pc, #288]	@ (80047c8 <HAL_RCC_OscConfig+0x76c>)
 80046a6:	691b      	ldr	r3, [r3, #16]
 80046a8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80046ac:	2b18      	cmp	r3, #24
 80046ae:	f000 80bd 	beq.w	800482c <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046b6:	2b02      	cmp	r3, #2
 80046b8:	f040 809e 	bne.w	80047f8 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046bc:	4b42      	ldr	r3, [pc, #264]	@ (80047c8 <HAL_RCC_OscConfig+0x76c>)
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	4a41      	ldr	r2, [pc, #260]	@ (80047c8 <HAL_RCC_OscConfig+0x76c>)
 80046c2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80046c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046c8:	f7fc feda 	bl	8001480 <HAL_GetTick>
 80046cc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80046ce:	e008      	b.n	80046e2 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046d0:	f7fc fed6 	bl	8001480 <HAL_GetTick>
 80046d4:	4602      	mov	r2, r0
 80046d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046d8:	1ad3      	subs	r3, r2, r3
 80046da:	2b02      	cmp	r3, #2
 80046dc:	d901      	bls.n	80046e2 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80046de:	2303      	movs	r3, #3
 80046e0:	e10e      	b.n	8004900 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80046e2:	4b39      	ldr	r3, [pc, #228]	@ (80047c8 <HAL_RCC_OscConfig+0x76c>)
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d1f0      	bne.n	80046d0 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80046ee:	4b36      	ldr	r3, [pc, #216]	@ (80047c8 <HAL_RCC_OscConfig+0x76c>)
 80046f0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80046f2:	4b37      	ldr	r3, [pc, #220]	@ (80047d0 <HAL_RCC_OscConfig+0x774>)
 80046f4:	4013      	ands	r3, r2
 80046f6:	687a      	ldr	r2, [r7, #4]
 80046f8:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80046fa:	687a      	ldr	r2, [r7, #4]
 80046fc:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80046fe:	0112      	lsls	r2, r2, #4
 8004700:	430a      	orrs	r2, r1
 8004702:	4931      	ldr	r1, [pc, #196]	@ (80047c8 <HAL_RCC_OscConfig+0x76c>)
 8004704:	4313      	orrs	r3, r2
 8004706:	628b      	str	r3, [r1, #40]	@ 0x28
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800470c:	3b01      	subs	r3, #1
 800470e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004716:	3b01      	subs	r3, #1
 8004718:	025b      	lsls	r3, r3, #9
 800471a:	b29b      	uxth	r3, r3
 800471c:	431a      	orrs	r2, r3
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004722:	3b01      	subs	r3, #1
 8004724:	041b      	lsls	r3, r3, #16
 8004726:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800472a:	431a      	orrs	r2, r3
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004730:	3b01      	subs	r3, #1
 8004732:	061b      	lsls	r3, r3, #24
 8004734:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004738:	4923      	ldr	r1, [pc, #140]	@ (80047c8 <HAL_RCC_OscConfig+0x76c>)
 800473a:	4313      	orrs	r3, r2
 800473c:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800473e:	4b22      	ldr	r3, [pc, #136]	@ (80047c8 <HAL_RCC_OscConfig+0x76c>)
 8004740:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004742:	4a21      	ldr	r2, [pc, #132]	@ (80047c8 <HAL_RCC_OscConfig+0x76c>)
 8004744:	f023 0301 	bic.w	r3, r3, #1
 8004748:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800474a:	4b1f      	ldr	r3, [pc, #124]	@ (80047c8 <HAL_RCC_OscConfig+0x76c>)
 800474c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800474e:	4b21      	ldr	r3, [pc, #132]	@ (80047d4 <HAL_RCC_OscConfig+0x778>)
 8004750:	4013      	ands	r3, r2
 8004752:	687a      	ldr	r2, [r7, #4]
 8004754:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004756:	00d2      	lsls	r2, r2, #3
 8004758:	491b      	ldr	r1, [pc, #108]	@ (80047c8 <HAL_RCC_OscConfig+0x76c>)
 800475a:	4313      	orrs	r3, r2
 800475c:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800475e:	4b1a      	ldr	r3, [pc, #104]	@ (80047c8 <HAL_RCC_OscConfig+0x76c>)
 8004760:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004762:	f023 020c 	bic.w	r2, r3, #12
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800476a:	4917      	ldr	r1, [pc, #92]	@ (80047c8 <HAL_RCC_OscConfig+0x76c>)
 800476c:	4313      	orrs	r3, r2
 800476e:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8004770:	4b15      	ldr	r3, [pc, #84]	@ (80047c8 <HAL_RCC_OscConfig+0x76c>)
 8004772:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004774:	f023 0202 	bic.w	r2, r3, #2
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800477c:	4912      	ldr	r1, [pc, #72]	@ (80047c8 <HAL_RCC_OscConfig+0x76c>)
 800477e:	4313      	orrs	r3, r2
 8004780:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004782:	4b11      	ldr	r3, [pc, #68]	@ (80047c8 <HAL_RCC_OscConfig+0x76c>)
 8004784:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004786:	4a10      	ldr	r2, [pc, #64]	@ (80047c8 <HAL_RCC_OscConfig+0x76c>)
 8004788:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800478c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800478e:	4b0e      	ldr	r3, [pc, #56]	@ (80047c8 <HAL_RCC_OscConfig+0x76c>)
 8004790:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004792:	4a0d      	ldr	r2, [pc, #52]	@ (80047c8 <HAL_RCC_OscConfig+0x76c>)
 8004794:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004798:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800479a:	4b0b      	ldr	r3, [pc, #44]	@ (80047c8 <HAL_RCC_OscConfig+0x76c>)
 800479c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800479e:	4a0a      	ldr	r2, [pc, #40]	@ (80047c8 <HAL_RCC_OscConfig+0x76c>)
 80047a0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80047a4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80047a6:	4b08      	ldr	r3, [pc, #32]	@ (80047c8 <HAL_RCC_OscConfig+0x76c>)
 80047a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047aa:	4a07      	ldr	r2, [pc, #28]	@ (80047c8 <HAL_RCC_OscConfig+0x76c>)
 80047ac:	f043 0301 	orr.w	r3, r3, #1
 80047b0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80047b2:	4b05      	ldr	r3, [pc, #20]	@ (80047c8 <HAL_RCC_OscConfig+0x76c>)
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	4a04      	ldr	r2, [pc, #16]	@ (80047c8 <HAL_RCC_OscConfig+0x76c>)
 80047b8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80047bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047be:	f7fc fe5f 	bl	8001480 <HAL_GetTick>
 80047c2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80047c4:	e011      	b.n	80047ea <HAL_RCC_OscConfig+0x78e>
 80047c6:	bf00      	nop
 80047c8:	58024400 	.word	0x58024400
 80047cc:	58024800 	.word	0x58024800
 80047d0:	fffffc0c 	.word	0xfffffc0c
 80047d4:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80047d8:	f7fc fe52 	bl	8001480 <HAL_GetTick>
 80047dc:	4602      	mov	r2, r0
 80047de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047e0:	1ad3      	subs	r3, r2, r3
 80047e2:	2b02      	cmp	r3, #2
 80047e4:	d901      	bls.n	80047ea <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80047e6:	2303      	movs	r3, #3
 80047e8:	e08a      	b.n	8004900 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80047ea:	4b47      	ldr	r3, [pc, #284]	@ (8004908 <HAL_RCC_OscConfig+0x8ac>)
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d0f0      	beq.n	80047d8 <HAL_RCC_OscConfig+0x77c>
 80047f6:	e082      	b.n	80048fe <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047f8:	4b43      	ldr	r3, [pc, #268]	@ (8004908 <HAL_RCC_OscConfig+0x8ac>)
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	4a42      	ldr	r2, [pc, #264]	@ (8004908 <HAL_RCC_OscConfig+0x8ac>)
 80047fe:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004802:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004804:	f7fc fe3c 	bl	8001480 <HAL_GetTick>
 8004808:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800480a:	e008      	b.n	800481e <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800480c:	f7fc fe38 	bl	8001480 <HAL_GetTick>
 8004810:	4602      	mov	r2, r0
 8004812:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004814:	1ad3      	subs	r3, r2, r3
 8004816:	2b02      	cmp	r3, #2
 8004818:	d901      	bls.n	800481e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800481a:	2303      	movs	r3, #3
 800481c:	e070      	b.n	8004900 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800481e:	4b3a      	ldr	r3, [pc, #232]	@ (8004908 <HAL_RCC_OscConfig+0x8ac>)
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004826:	2b00      	cmp	r3, #0
 8004828:	d1f0      	bne.n	800480c <HAL_RCC_OscConfig+0x7b0>
 800482a:	e068      	b.n	80048fe <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800482c:	4b36      	ldr	r3, [pc, #216]	@ (8004908 <HAL_RCC_OscConfig+0x8ac>)
 800482e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004830:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004832:	4b35      	ldr	r3, [pc, #212]	@ (8004908 <HAL_RCC_OscConfig+0x8ac>)
 8004834:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004836:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800483c:	2b01      	cmp	r3, #1
 800483e:	d031      	beq.n	80048a4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004840:	693b      	ldr	r3, [r7, #16]
 8004842:	f003 0203 	and.w	r2, r3, #3
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800484a:	429a      	cmp	r2, r3
 800484c:	d12a      	bne.n	80048a4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800484e:	693b      	ldr	r3, [r7, #16]
 8004850:	091b      	lsrs	r3, r3, #4
 8004852:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800485a:	429a      	cmp	r2, r3
 800485c:	d122      	bne.n	80048a4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004868:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800486a:	429a      	cmp	r2, r3
 800486c:	d11a      	bne.n	80048a4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	0a5b      	lsrs	r3, r3, #9
 8004872:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800487a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800487c:	429a      	cmp	r2, r3
 800487e:	d111      	bne.n	80048a4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	0c1b      	lsrs	r3, r3, #16
 8004884:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800488c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800488e:	429a      	cmp	r2, r3
 8004890:	d108      	bne.n	80048a4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	0e1b      	lsrs	r3, r3, #24
 8004896:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800489e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80048a0:	429a      	cmp	r2, r3
 80048a2:	d001      	beq.n	80048a8 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80048a4:	2301      	movs	r3, #1
 80048a6:	e02b      	b.n	8004900 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80048a8:	4b17      	ldr	r3, [pc, #92]	@ (8004908 <HAL_RCC_OscConfig+0x8ac>)
 80048aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80048ac:	08db      	lsrs	r3, r3, #3
 80048ae:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80048b2:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80048b8:	693a      	ldr	r2, [r7, #16]
 80048ba:	429a      	cmp	r2, r3
 80048bc:	d01f      	beq.n	80048fe <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80048be:	4b12      	ldr	r3, [pc, #72]	@ (8004908 <HAL_RCC_OscConfig+0x8ac>)
 80048c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048c2:	4a11      	ldr	r2, [pc, #68]	@ (8004908 <HAL_RCC_OscConfig+0x8ac>)
 80048c4:	f023 0301 	bic.w	r3, r3, #1
 80048c8:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80048ca:	f7fc fdd9 	bl	8001480 <HAL_GetTick>
 80048ce:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80048d0:	bf00      	nop
 80048d2:	f7fc fdd5 	bl	8001480 <HAL_GetTick>
 80048d6:	4602      	mov	r2, r0
 80048d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048da:	4293      	cmp	r3, r2
 80048dc:	d0f9      	beq.n	80048d2 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80048de:	4b0a      	ldr	r3, [pc, #40]	@ (8004908 <HAL_RCC_OscConfig+0x8ac>)
 80048e0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80048e2:	4b0a      	ldr	r3, [pc, #40]	@ (800490c <HAL_RCC_OscConfig+0x8b0>)
 80048e4:	4013      	ands	r3, r2
 80048e6:	687a      	ldr	r2, [r7, #4]
 80048e8:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80048ea:	00d2      	lsls	r2, r2, #3
 80048ec:	4906      	ldr	r1, [pc, #24]	@ (8004908 <HAL_RCC_OscConfig+0x8ac>)
 80048ee:	4313      	orrs	r3, r2
 80048f0:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80048f2:	4b05      	ldr	r3, [pc, #20]	@ (8004908 <HAL_RCC_OscConfig+0x8ac>)
 80048f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048f6:	4a04      	ldr	r2, [pc, #16]	@ (8004908 <HAL_RCC_OscConfig+0x8ac>)
 80048f8:	f043 0301 	orr.w	r3, r3, #1
 80048fc:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80048fe:	2300      	movs	r3, #0
}
 8004900:	4618      	mov	r0, r3
 8004902:	3730      	adds	r7, #48	@ 0x30
 8004904:	46bd      	mov	sp, r7
 8004906:	bd80      	pop	{r7, pc}
 8004908:	58024400 	.word	0x58024400
 800490c:	ffff0007 	.word	0xffff0007

08004910 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004910:	b580      	push	{r7, lr}
 8004912:	b086      	sub	sp, #24
 8004914:	af00      	add	r7, sp, #0
 8004916:	6078      	str	r0, [r7, #4]
 8004918:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	2b00      	cmp	r3, #0
 800491e:	d101      	bne.n	8004924 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004920:	2301      	movs	r3, #1
 8004922:	e19c      	b.n	8004c5e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004924:	4b8a      	ldr	r3, [pc, #552]	@ (8004b50 <HAL_RCC_ClockConfig+0x240>)
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f003 030f 	and.w	r3, r3, #15
 800492c:	683a      	ldr	r2, [r7, #0]
 800492e:	429a      	cmp	r2, r3
 8004930:	d910      	bls.n	8004954 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004932:	4b87      	ldr	r3, [pc, #540]	@ (8004b50 <HAL_RCC_ClockConfig+0x240>)
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f023 020f 	bic.w	r2, r3, #15
 800493a:	4985      	ldr	r1, [pc, #532]	@ (8004b50 <HAL_RCC_ClockConfig+0x240>)
 800493c:	683b      	ldr	r3, [r7, #0]
 800493e:	4313      	orrs	r3, r2
 8004940:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004942:	4b83      	ldr	r3, [pc, #524]	@ (8004b50 <HAL_RCC_ClockConfig+0x240>)
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f003 030f 	and.w	r3, r3, #15
 800494a:	683a      	ldr	r2, [r7, #0]
 800494c:	429a      	cmp	r2, r3
 800494e:	d001      	beq.n	8004954 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004950:	2301      	movs	r3, #1
 8004952:	e184      	b.n	8004c5e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f003 0304 	and.w	r3, r3, #4
 800495c:	2b00      	cmp	r3, #0
 800495e:	d010      	beq.n	8004982 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	691a      	ldr	r2, [r3, #16]
 8004964:	4b7b      	ldr	r3, [pc, #492]	@ (8004b54 <HAL_RCC_ClockConfig+0x244>)
 8004966:	699b      	ldr	r3, [r3, #24]
 8004968:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800496c:	429a      	cmp	r2, r3
 800496e:	d908      	bls.n	8004982 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004970:	4b78      	ldr	r3, [pc, #480]	@ (8004b54 <HAL_RCC_ClockConfig+0x244>)
 8004972:	699b      	ldr	r3, [r3, #24]
 8004974:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	691b      	ldr	r3, [r3, #16]
 800497c:	4975      	ldr	r1, [pc, #468]	@ (8004b54 <HAL_RCC_ClockConfig+0x244>)
 800497e:	4313      	orrs	r3, r2
 8004980:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f003 0308 	and.w	r3, r3, #8
 800498a:	2b00      	cmp	r3, #0
 800498c:	d010      	beq.n	80049b0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	695a      	ldr	r2, [r3, #20]
 8004992:	4b70      	ldr	r3, [pc, #448]	@ (8004b54 <HAL_RCC_ClockConfig+0x244>)
 8004994:	69db      	ldr	r3, [r3, #28]
 8004996:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800499a:	429a      	cmp	r2, r3
 800499c:	d908      	bls.n	80049b0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800499e:	4b6d      	ldr	r3, [pc, #436]	@ (8004b54 <HAL_RCC_ClockConfig+0x244>)
 80049a0:	69db      	ldr	r3, [r3, #28]
 80049a2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	695b      	ldr	r3, [r3, #20]
 80049aa:	496a      	ldr	r1, [pc, #424]	@ (8004b54 <HAL_RCC_ClockConfig+0x244>)
 80049ac:	4313      	orrs	r3, r2
 80049ae:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f003 0310 	and.w	r3, r3, #16
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d010      	beq.n	80049de <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	699a      	ldr	r2, [r3, #24]
 80049c0:	4b64      	ldr	r3, [pc, #400]	@ (8004b54 <HAL_RCC_ClockConfig+0x244>)
 80049c2:	69db      	ldr	r3, [r3, #28]
 80049c4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80049c8:	429a      	cmp	r2, r3
 80049ca:	d908      	bls.n	80049de <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80049cc:	4b61      	ldr	r3, [pc, #388]	@ (8004b54 <HAL_RCC_ClockConfig+0x244>)
 80049ce:	69db      	ldr	r3, [r3, #28]
 80049d0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	699b      	ldr	r3, [r3, #24]
 80049d8:	495e      	ldr	r1, [pc, #376]	@ (8004b54 <HAL_RCC_ClockConfig+0x244>)
 80049da:	4313      	orrs	r3, r2
 80049dc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f003 0320 	and.w	r3, r3, #32
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d010      	beq.n	8004a0c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	69da      	ldr	r2, [r3, #28]
 80049ee:	4b59      	ldr	r3, [pc, #356]	@ (8004b54 <HAL_RCC_ClockConfig+0x244>)
 80049f0:	6a1b      	ldr	r3, [r3, #32]
 80049f2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80049f6:	429a      	cmp	r2, r3
 80049f8:	d908      	bls.n	8004a0c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80049fa:	4b56      	ldr	r3, [pc, #344]	@ (8004b54 <HAL_RCC_ClockConfig+0x244>)
 80049fc:	6a1b      	ldr	r3, [r3, #32]
 80049fe:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	69db      	ldr	r3, [r3, #28]
 8004a06:	4953      	ldr	r1, [pc, #332]	@ (8004b54 <HAL_RCC_ClockConfig+0x244>)
 8004a08:	4313      	orrs	r3, r2
 8004a0a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f003 0302 	and.w	r3, r3, #2
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d010      	beq.n	8004a3a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	68da      	ldr	r2, [r3, #12]
 8004a1c:	4b4d      	ldr	r3, [pc, #308]	@ (8004b54 <HAL_RCC_ClockConfig+0x244>)
 8004a1e:	699b      	ldr	r3, [r3, #24]
 8004a20:	f003 030f 	and.w	r3, r3, #15
 8004a24:	429a      	cmp	r2, r3
 8004a26:	d908      	bls.n	8004a3a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a28:	4b4a      	ldr	r3, [pc, #296]	@ (8004b54 <HAL_RCC_ClockConfig+0x244>)
 8004a2a:	699b      	ldr	r3, [r3, #24]
 8004a2c:	f023 020f 	bic.w	r2, r3, #15
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	68db      	ldr	r3, [r3, #12]
 8004a34:	4947      	ldr	r1, [pc, #284]	@ (8004b54 <HAL_RCC_ClockConfig+0x244>)
 8004a36:	4313      	orrs	r3, r2
 8004a38:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f003 0301 	and.w	r3, r3, #1
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d055      	beq.n	8004af2 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8004a46:	4b43      	ldr	r3, [pc, #268]	@ (8004b54 <HAL_RCC_ClockConfig+0x244>)
 8004a48:	699b      	ldr	r3, [r3, #24]
 8004a4a:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	689b      	ldr	r3, [r3, #8]
 8004a52:	4940      	ldr	r1, [pc, #256]	@ (8004b54 <HAL_RCC_ClockConfig+0x244>)
 8004a54:	4313      	orrs	r3, r2
 8004a56:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	685b      	ldr	r3, [r3, #4]
 8004a5c:	2b02      	cmp	r3, #2
 8004a5e:	d107      	bne.n	8004a70 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004a60:	4b3c      	ldr	r3, [pc, #240]	@ (8004b54 <HAL_RCC_ClockConfig+0x244>)
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d121      	bne.n	8004ab0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004a6c:	2301      	movs	r3, #1
 8004a6e:	e0f6      	b.n	8004c5e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	685b      	ldr	r3, [r3, #4]
 8004a74:	2b03      	cmp	r3, #3
 8004a76:	d107      	bne.n	8004a88 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004a78:	4b36      	ldr	r3, [pc, #216]	@ (8004b54 <HAL_RCC_ClockConfig+0x244>)
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d115      	bne.n	8004ab0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004a84:	2301      	movs	r3, #1
 8004a86:	e0ea      	b.n	8004c5e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	685b      	ldr	r3, [r3, #4]
 8004a8c:	2b01      	cmp	r3, #1
 8004a8e:	d107      	bne.n	8004aa0 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004a90:	4b30      	ldr	r3, [pc, #192]	@ (8004b54 <HAL_RCC_ClockConfig+0x244>)
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d109      	bne.n	8004ab0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004a9c:	2301      	movs	r3, #1
 8004a9e:	e0de      	b.n	8004c5e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004aa0:	4b2c      	ldr	r3, [pc, #176]	@ (8004b54 <HAL_RCC_ClockConfig+0x244>)
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f003 0304 	and.w	r3, r3, #4
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d101      	bne.n	8004ab0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004aac:	2301      	movs	r3, #1
 8004aae:	e0d6      	b.n	8004c5e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004ab0:	4b28      	ldr	r3, [pc, #160]	@ (8004b54 <HAL_RCC_ClockConfig+0x244>)
 8004ab2:	691b      	ldr	r3, [r3, #16]
 8004ab4:	f023 0207 	bic.w	r2, r3, #7
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	685b      	ldr	r3, [r3, #4]
 8004abc:	4925      	ldr	r1, [pc, #148]	@ (8004b54 <HAL_RCC_ClockConfig+0x244>)
 8004abe:	4313      	orrs	r3, r2
 8004ac0:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ac2:	f7fc fcdd 	bl	8001480 <HAL_GetTick>
 8004ac6:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ac8:	e00a      	b.n	8004ae0 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004aca:	f7fc fcd9 	bl	8001480 <HAL_GetTick>
 8004ace:	4602      	mov	r2, r0
 8004ad0:	697b      	ldr	r3, [r7, #20]
 8004ad2:	1ad3      	subs	r3, r2, r3
 8004ad4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004ad8:	4293      	cmp	r3, r2
 8004ada:	d901      	bls.n	8004ae0 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8004adc:	2303      	movs	r3, #3
 8004ade:	e0be      	b.n	8004c5e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ae0:	4b1c      	ldr	r3, [pc, #112]	@ (8004b54 <HAL_RCC_ClockConfig+0x244>)
 8004ae2:	691b      	ldr	r3, [r3, #16]
 8004ae4:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	685b      	ldr	r3, [r3, #4]
 8004aec:	00db      	lsls	r3, r3, #3
 8004aee:	429a      	cmp	r2, r3
 8004af0:	d1eb      	bne.n	8004aca <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f003 0302 	and.w	r3, r3, #2
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d010      	beq.n	8004b20 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	68da      	ldr	r2, [r3, #12]
 8004b02:	4b14      	ldr	r3, [pc, #80]	@ (8004b54 <HAL_RCC_ClockConfig+0x244>)
 8004b04:	699b      	ldr	r3, [r3, #24]
 8004b06:	f003 030f 	and.w	r3, r3, #15
 8004b0a:	429a      	cmp	r2, r3
 8004b0c:	d208      	bcs.n	8004b20 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004b0e:	4b11      	ldr	r3, [pc, #68]	@ (8004b54 <HAL_RCC_ClockConfig+0x244>)
 8004b10:	699b      	ldr	r3, [r3, #24]
 8004b12:	f023 020f 	bic.w	r2, r3, #15
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	68db      	ldr	r3, [r3, #12]
 8004b1a:	490e      	ldr	r1, [pc, #56]	@ (8004b54 <HAL_RCC_ClockConfig+0x244>)
 8004b1c:	4313      	orrs	r3, r2
 8004b1e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004b20:	4b0b      	ldr	r3, [pc, #44]	@ (8004b50 <HAL_RCC_ClockConfig+0x240>)
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f003 030f 	and.w	r3, r3, #15
 8004b28:	683a      	ldr	r2, [r7, #0]
 8004b2a:	429a      	cmp	r2, r3
 8004b2c:	d214      	bcs.n	8004b58 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b2e:	4b08      	ldr	r3, [pc, #32]	@ (8004b50 <HAL_RCC_ClockConfig+0x240>)
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f023 020f 	bic.w	r2, r3, #15
 8004b36:	4906      	ldr	r1, [pc, #24]	@ (8004b50 <HAL_RCC_ClockConfig+0x240>)
 8004b38:	683b      	ldr	r3, [r7, #0]
 8004b3a:	4313      	orrs	r3, r2
 8004b3c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b3e:	4b04      	ldr	r3, [pc, #16]	@ (8004b50 <HAL_RCC_ClockConfig+0x240>)
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f003 030f 	and.w	r3, r3, #15
 8004b46:	683a      	ldr	r2, [r7, #0]
 8004b48:	429a      	cmp	r2, r3
 8004b4a:	d005      	beq.n	8004b58 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004b4c:	2301      	movs	r3, #1
 8004b4e:	e086      	b.n	8004c5e <HAL_RCC_ClockConfig+0x34e>
 8004b50:	52002000 	.word	0x52002000
 8004b54:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f003 0304 	and.w	r3, r3, #4
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d010      	beq.n	8004b86 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	691a      	ldr	r2, [r3, #16]
 8004b68:	4b3f      	ldr	r3, [pc, #252]	@ (8004c68 <HAL_RCC_ClockConfig+0x358>)
 8004b6a:	699b      	ldr	r3, [r3, #24]
 8004b6c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004b70:	429a      	cmp	r2, r3
 8004b72:	d208      	bcs.n	8004b86 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004b74:	4b3c      	ldr	r3, [pc, #240]	@ (8004c68 <HAL_RCC_ClockConfig+0x358>)
 8004b76:	699b      	ldr	r3, [r3, #24]
 8004b78:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	691b      	ldr	r3, [r3, #16]
 8004b80:	4939      	ldr	r1, [pc, #228]	@ (8004c68 <HAL_RCC_ClockConfig+0x358>)
 8004b82:	4313      	orrs	r3, r2
 8004b84:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f003 0308 	and.w	r3, r3, #8
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d010      	beq.n	8004bb4 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	695a      	ldr	r2, [r3, #20]
 8004b96:	4b34      	ldr	r3, [pc, #208]	@ (8004c68 <HAL_RCC_ClockConfig+0x358>)
 8004b98:	69db      	ldr	r3, [r3, #28]
 8004b9a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004b9e:	429a      	cmp	r2, r3
 8004ba0:	d208      	bcs.n	8004bb4 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004ba2:	4b31      	ldr	r3, [pc, #196]	@ (8004c68 <HAL_RCC_ClockConfig+0x358>)
 8004ba4:	69db      	ldr	r3, [r3, #28]
 8004ba6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	695b      	ldr	r3, [r3, #20]
 8004bae:	492e      	ldr	r1, [pc, #184]	@ (8004c68 <HAL_RCC_ClockConfig+0x358>)
 8004bb0:	4313      	orrs	r3, r2
 8004bb2:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f003 0310 	and.w	r3, r3, #16
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d010      	beq.n	8004be2 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	699a      	ldr	r2, [r3, #24]
 8004bc4:	4b28      	ldr	r3, [pc, #160]	@ (8004c68 <HAL_RCC_ClockConfig+0x358>)
 8004bc6:	69db      	ldr	r3, [r3, #28]
 8004bc8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004bcc:	429a      	cmp	r2, r3
 8004bce:	d208      	bcs.n	8004be2 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004bd0:	4b25      	ldr	r3, [pc, #148]	@ (8004c68 <HAL_RCC_ClockConfig+0x358>)
 8004bd2:	69db      	ldr	r3, [r3, #28]
 8004bd4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	699b      	ldr	r3, [r3, #24]
 8004bdc:	4922      	ldr	r1, [pc, #136]	@ (8004c68 <HAL_RCC_ClockConfig+0x358>)
 8004bde:	4313      	orrs	r3, r2
 8004be0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f003 0320 	and.w	r3, r3, #32
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d010      	beq.n	8004c10 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	69da      	ldr	r2, [r3, #28]
 8004bf2:	4b1d      	ldr	r3, [pc, #116]	@ (8004c68 <HAL_RCC_ClockConfig+0x358>)
 8004bf4:	6a1b      	ldr	r3, [r3, #32]
 8004bf6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004bfa:	429a      	cmp	r2, r3
 8004bfc:	d208      	bcs.n	8004c10 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004bfe:	4b1a      	ldr	r3, [pc, #104]	@ (8004c68 <HAL_RCC_ClockConfig+0x358>)
 8004c00:	6a1b      	ldr	r3, [r3, #32]
 8004c02:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	69db      	ldr	r3, [r3, #28]
 8004c0a:	4917      	ldr	r1, [pc, #92]	@ (8004c68 <HAL_RCC_ClockConfig+0x358>)
 8004c0c:	4313      	orrs	r3, r2
 8004c0e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004c10:	f000 f834 	bl	8004c7c <HAL_RCC_GetSysClockFreq>
 8004c14:	4602      	mov	r2, r0
 8004c16:	4b14      	ldr	r3, [pc, #80]	@ (8004c68 <HAL_RCC_ClockConfig+0x358>)
 8004c18:	699b      	ldr	r3, [r3, #24]
 8004c1a:	0a1b      	lsrs	r3, r3, #8
 8004c1c:	f003 030f 	and.w	r3, r3, #15
 8004c20:	4912      	ldr	r1, [pc, #72]	@ (8004c6c <HAL_RCC_ClockConfig+0x35c>)
 8004c22:	5ccb      	ldrb	r3, [r1, r3]
 8004c24:	f003 031f 	and.w	r3, r3, #31
 8004c28:	fa22 f303 	lsr.w	r3, r2, r3
 8004c2c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004c2e:	4b0e      	ldr	r3, [pc, #56]	@ (8004c68 <HAL_RCC_ClockConfig+0x358>)
 8004c30:	699b      	ldr	r3, [r3, #24]
 8004c32:	f003 030f 	and.w	r3, r3, #15
 8004c36:	4a0d      	ldr	r2, [pc, #52]	@ (8004c6c <HAL_RCC_ClockConfig+0x35c>)
 8004c38:	5cd3      	ldrb	r3, [r2, r3]
 8004c3a:	f003 031f 	and.w	r3, r3, #31
 8004c3e:	693a      	ldr	r2, [r7, #16]
 8004c40:	fa22 f303 	lsr.w	r3, r2, r3
 8004c44:	4a0a      	ldr	r2, [pc, #40]	@ (8004c70 <HAL_RCC_ClockConfig+0x360>)
 8004c46:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004c48:	4a0a      	ldr	r2, [pc, #40]	@ (8004c74 <HAL_RCC_ClockConfig+0x364>)
 8004c4a:	693b      	ldr	r3, [r7, #16]
 8004c4c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8004c4e:	4b0a      	ldr	r3, [pc, #40]	@ (8004c78 <HAL_RCC_ClockConfig+0x368>)
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	4618      	mov	r0, r3
 8004c54:	f7fc fbca 	bl	80013ec <HAL_InitTick>
 8004c58:	4603      	mov	r3, r0
 8004c5a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8004c5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c5e:	4618      	mov	r0, r3
 8004c60:	3718      	adds	r7, #24
 8004c62:	46bd      	mov	sp, r7
 8004c64:	bd80      	pop	{r7, pc}
 8004c66:	bf00      	nop
 8004c68:	58024400 	.word	0x58024400
 8004c6c:	0800a130 	.word	0x0800a130
 8004c70:	24000004 	.word	0x24000004
 8004c74:	24000000 	.word	0x24000000
 8004c78:	24000008 	.word	0x24000008

08004c7c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004c7c:	b480      	push	{r7}
 8004c7e:	b089      	sub	sp, #36	@ 0x24
 8004c80:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004c82:	4bb3      	ldr	r3, [pc, #716]	@ (8004f50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004c84:	691b      	ldr	r3, [r3, #16]
 8004c86:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004c8a:	2b18      	cmp	r3, #24
 8004c8c:	f200 8155 	bhi.w	8004f3a <HAL_RCC_GetSysClockFreq+0x2be>
 8004c90:	a201      	add	r2, pc, #4	@ (adr r2, 8004c98 <HAL_RCC_GetSysClockFreq+0x1c>)
 8004c92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c96:	bf00      	nop
 8004c98:	08004cfd 	.word	0x08004cfd
 8004c9c:	08004f3b 	.word	0x08004f3b
 8004ca0:	08004f3b 	.word	0x08004f3b
 8004ca4:	08004f3b 	.word	0x08004f3b
 8004ca8:	08004f3b 	.word	0x08004f3b
 8004cac:	08004f3b 	.word	0x08004f3b
 8004cb0:	08004f3b 	.word	0x08004f3b
 8004cb4:	08004f3b 	.word	0x08004f3b
 8004cb8:	08004d23 	.word	0x08004d23
 8004cbc:	08004f3b 	.word	0x08004f3b
 8004cc0:	08004f3b 	.word	0x08004f3b
 8004cc4:	08004f3b 	.word	0x08004f3b
 8004cc8:	08004f3b 	.word	0x08004f3b
 8004ccc:	08004f3b 	.word	0x08004f3b
 8004cd0:	08004f3b 	.word	0x08004f3b
 8004cd4:	08004f3b 	.word	0x08004f3b
 8004cd8:	08004d29 	.word	0x08004d29
 8004cdc:	08004f3b 	.word	0x08004f3b
 8004ce0:	08004f3b 	.word	0x08004f3b
 8004ce4:	08004f3b 	.word	0x08004f3b
 8004ce8:	08004f3b 	.word	0x08004f3b
 8004cec:	08004f3b 	.word	0x08004f3b
 8004cf0:	08004f3b 	.word	0x08004f3b
 8004cf4:	08004f3b 	.word	0x08004f3b
 8004cf8:	08004d2f 	.word	0x08004d2f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004cfc:	4b94      	ldr	r3, [pc, #592]	@ (8004f50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f003 0320 	and.w	r3, r3, #32
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d009      	beq.n	8004d1c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004d08:	4b91      	ldr	r3, [pc, #580]	@ (8004f50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	08db      	lsrs	r3, r3, #3
 8004d0e:	f003 0303 	and.w	r3, r3, #3
 8004d12:	4a90      	ldr	r2, [pc, #576]	@ (8004f54 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004d14:	fa22 f303 	lsr.w	r3, r2, r3
 8004d18:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8004d1a:	e111      	b.n	8004f40 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004d1c:	4b8d      	ldr	r3, [pc, #564]	@ (8004f54 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004d1e:	61bb      	str	r3, [r7, #24]
      break;
 8004d20:	e10e      	b.n	8004f40 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8004d22:	4b8d      	ldr	r3, [pc, #564]	@ (8004f58 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004d24:	61bb      	str	r3, [r7, #24]
      break;
 8004d26:	e10b      	b.n	8004f40 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8004d28:	4b8c      	ldr	r3, [pc, #560]	@ (8004f5c <HAL_RCC_GetSysClockFreq+0x2e0>)
 8004d2a:	61bb      	str	r3, [r7, #24]
      break;
 8004d2c:	e108      	b.n	8004f40 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004d2e:	4b88      	ldr	r3, [pc, #544]	@ (8004f50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004d30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d32:	f003 0303 	and.w	r3, r3, #3
 8004d36:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8004d38:	4b85      	ldr	r3, [pc, #532]	@ (8004f50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004d3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d3c:	091b      	lsrs	r3, r3, #4
 8004d3e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004d42:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004d44:	4b82      	ldr	r3, [pc, #520]	@ (8004f50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004d46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d48:	f003 0301 	and.w	r3, r3, #1
 8004d4c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8004d4e:	4b80      	ldr	r3, [pc, #512]	@ (8004f50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004d50:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004d52:	08db      	lsrs	r3, r3, #3
 8004d54:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004d58:	68fa      	ldr	r2, [r7, #12]
 8004d5a:	fb02 f303 	mul.w	r3, r2, r3
 8004d5e:	ee07 3a90 	vmov	s15, r3
 8004d62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d66:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8004d6a:	693b      	ldr	r3, [r7, #16]
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	f000 80e1 	beq.w	8004f34 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 8004d72:	697b      	ldr	r3, [r7, #20]
 8004d74:	2b02      	cmp	r3, #2
 8004d76:	f000 8083 	beq.w	8004e80 <HAL_RCC_GetSysClockFreq+0x204>
 8004d7a:	697b      	ldr	r3, [r7, #20]
 8004d7c:	2b02      	cmp	r3, #2
 8004d7e:	f200 80a1 	bhi.w	8004ec4 <HAL_RCC_GetSysClockFreq+0x248>
 8004d82:	697b      	ldr	r3, [r7, #20]
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d003      	beq.n	8004d90 <HAL_RCC_GetSysClockFreq+0x114>
 8004d88:	697b      	ldr	r3, [r7, #20]
 8004d8a:	2b01      	cmp	r3, #1
 8004d8c:	d056      	beq.n	8004e3c <HAL_RCC_GetSysClockFreq+0x1c0>
 8004d8e:	e099      	b.n	8004ec4 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004d90:	4b6f      	ldr	r3, [pc, #444]	@ (8004f50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f003 0320 	and.w	r3, r3, #32
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d02d      	beq.n	8004df8 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004d9c:	4b6c      	ldr	r3, [pc, #432]	@ (8004f50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	08db      	lsrs	r3, r3, #3
 8004da2:	f003 0303 	and.w	r3, r3, #3
 8004da6:	4a6b      	ldr	r2, [pc, #428]	@ (8004f54 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004da8:	fa22 f303 	lsr.w	r3, r2, r3
 8004dac:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	ee07 3a90 	vmov	s15, r3
 8004db4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004db8:	693b      	ldr	r3, [r7, #16]
 8004dba:	ee07 3a90 	vmov	s15, r3
 8004dbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004dc2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004dc6:	4b62      	ldr	r3, [pc, #392]	@ (8004f50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004dc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004dca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004dce:	ee07 3a90 	vmov	s15, r3
 8004dd2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004dd6:	ed97 6a02 	vldr	s12, [r7, #8]
 8004dda:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8004f60 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004dde:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004de2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004de6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004dea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004dee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004df2:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8004df6:	e087      	b.n	8004f08 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004df8:	693b      	ldr	r3, [r7, #16]
 8004dfa:	ee07 3a90 	vmov	s15, r3
 8004dfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e02:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8004f64 <HAL_RCC_GetSysClockFreq+0x2e8>
 8004e06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e0a:	4b51      	ldr	r3, [pc, #324]	@ (8004f50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004e0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e12:	ee07 3a90 	vmov	s15, r3
 8004e16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e1a:	ed97 6a02 	vldr	s12, [r7, #8]
 8004e1e:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8004f60 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004e22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e2a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004e2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e36:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004e3a:	e065      	b.n	8004f08 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004e3c:	693b      	ldr	r3, [r7, #16]
 8004e3e:	ee07 3a90 	vmov	s15, r3
 8004e42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e46:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8004f68 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004e4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e4e:	4b40      	ldr	r3, [pc, #256]	@ (8004f50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004e50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e56:	ee07 3a90 	vmov	s15, r3
 8004e5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e5e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004e62:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8004f60 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004e66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e6e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004e72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e7a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004e7e:	e043      	b.n	8004f08 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004e80:	693b      	ldr	r3, [r7, #16]
 8004e82:	ee07 3a90 	vmov	s15, r3
 8004e86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e8a:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8004f6c <HAL_RCC_GetSysClockFreq+0x2f0>
 8004e8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e92:	4b2f      	ldr	r3, [pc, #188]	@ (8004f50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004e94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e9a:	ee07 3a90 	vmov	s15, r3
 8004e9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ea2:	ed97 6a02 	vldr	s12, [r7, #8]
 8004ea6:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8004f60 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004eaa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004eae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004eb2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004eb6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004eba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ebe:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004ec2:	e021      	b.n	8004f08 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004ec4:	693b      	ldr	r3, [r7, #16]
 8004ec6:	ee07 3a90 	vmov	s15, r3
 8004eca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ece:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8004f68 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004ed2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ed6:	4b1e      	ldr	r3, [pc, #120]	@ (8004f50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004ed8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004eda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ede:	ee07 3a90 	vmov	s15, r3
 8004ee2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ee6:	ed97 6a02 	vldr	s12, [r7, #8]
 8004eea:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8004f60 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004eee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004ef2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ef6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004efa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004efe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f02:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004f06:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8004f08:	4b11      	ldr	r3, [pc, #68]	@ (8004f50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004f0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f0c:	0a5b      	lsrs	r3, r3, #9
 8004f0e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004f12:	3301      	adds	r3, #1
 8004f14:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8004f16:	683b      	ldr	r3, [r7, #0]
 8004f18:	ee07 3a90 	vmov	s15, r3
 8004f1c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004f20:	edd7 6a07 	vldr	s13, [r7, #28]
 8004f24:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004f28:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004f2c:	ee17 3a90 	vmov	r3, s15
 8004f30:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8004f32:	e005      	b.n	8004f40 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8004f34:	2300      	movs	r3, #0
 8004f36:	61bb      	str	r3, [r7, #24]
      break;
 8004f38:	e002      	b.n	8004f40 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8004f3a:	4b07      	ldr	r3, [pc, #28]	@ (8004f58 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004f3c:	61bb      	str	r3, [r7, #24]
      break;
 8004f3e:	bf00      	nop
  }

  return sysclockfreq;
 8004f40:	69bb      	ldr	r3, [r7, #24]
}
 8004f42:	4618      	mov	r0, r3
 8004f44:	3724      	adds	r7, #36	@ 0x24
 8004f46:	46bd      	mov	sp, r7
 8004f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4c:	4770      	bx	lr
 8004f4e:	bf00      	nop
 8004f50:	58024400 	.word	0x58024400
 8004f54:	03d09000 	.word	0x03d09000
 8004f58:	003d0900 	.word	0x003d0900
 8004f5c:	017d7840 	.word	0x017d7840
 8004f60:	46000000 	.word	0x46000000
 8004f64:	4c742400 	.word	0x4c742400
 8004f68:	4a742400 	.word	0x4a742400
 8004f6c:	4bbebc20 	.word	0x4bbebc20

08004f70 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004f70:	b580      	push	{r7, lr}
 8004f72:	b082      	sub	sp, #8
 8004f74:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004f76:	f7ff fe81 	bl	8004c7c <HAL_RCC_GetSysClockFreq>
 8004f7a:	4602      	mov	r2, r0
 8004f7c:	4b10      	ldr	r3, [pc, #64]	@ (8004fc0 <HAL_RCC_GetHCLKFreq+0x50>)
 8004f7e:	699b      	ldr	r3, [r3, #24]
 8004f80:	0a1b      	lsrs	r3, r3, #8
 8004f82:	f003 030f 	and.w	r3, r3, #15
 8004f86:	490f      	ldr	r1, [pc, #60]	@ (8004fc4 <HAL_RCC_GetHCLKFreq+0x54>)
 8004f88:	5ccb      	ldrb	r3, [r1, r3]
 8004f8a:	f003 031f 	and.w	r3, r3, #31
 8004f8e:	fa22 f303 	lsr.w	r3, r2, r3
 8004f92:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004f94:	4b0a      	ldr	r3, [pc, #40]	@ (8004fc0 <HAL_RCC_GetHCLKFreq+0x50>)
 8004f96:	699b      	ldr	r3, [r3, #24]
 8004f98:	f003 030f 	and.w	r3, r3, #15
 8004f9c:	4a09      	ldr	r2, [pc, #36]	@ (8004fc4 <HAL_RCC_GetHCLKFreq+0x54>)
 8004f9e:	5cd3      	ldrb	r3, [r2, r3]
 8004fa0:	f003 031f 	and.w	r3, r3, #31
 8004fa4:	687a      	ldr	r2, [r7, #4]
 8004fa6:	fa22 f303 	lsr.w	r3, r2, r3
 8004faa:	4a07      	ldr	r2, [pc, #28]	@ (8004fc8 <HAL_RCC_GetHCLKFreq+0x58>)
 8004fac:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004fae:	4a07      	ldr	r2, [pc, #28]	@ (8004fcc <HAL_RCC_GetHCLKFreq+0x5c>)
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8004fb4:	4b04      	ldr	r3, [pc, #16]	@ (8004fc8 <HAL_RCC_GetHCLKFreq+0x58>)
 8004fb6:	681b      	ldr	r3, [r3, #0]
}
 8004fb8:	4618      	mov	r0, r3
 8004fba:	3708      	adds	r7, #8
 8004fbc:	46bd      	mov	sp, r7
 8004fbe:	bd80      	pop	{r7, pc}
 8004fc0:	58024400 	.word	0x58024400
 8004fc4:	0800a130 	.word	0x0800a130
 8004fc8:	24000004 	.word	0x24000004
 8004fcc:	24000000 	.word	0x24000000

08004fd0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004fd0:	b580      	push	{r7, lr}
 8004fd2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8004fd4:	f7ff ffcc 	bl	8004f70 <HAL_RCC_GetHCLKFreq>
 8004fd8:	4602      	mov	r2, r0
 8004fda:	4b06      	ldr	r3, [pc, #24]	@ (8004ff4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004fdc:	69db      	ldr	r3, [r3, #28]
 8004fde:	091b      	lsrs	r3, r3, #4
 8004fe0:	f003 0307 	and.w	r3, r3, #7
 8004fe4:	4904      	ldr	r1, [pc, #16]	@ (8004ff8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004fe6:	5ccb      	ldrb	r3, [r1, r3]
 8004fe8:	f003 031f 	and.w	r3, r3, #31
 8004fec:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8004ff0:	4618      	mov	r0, r3
 8004ff2:	bd80      	pop	{r7, pc}
 8004ff4:	58024400 	.word	0x58024400
 8004ff8:	0800a130 	.word	0x0800a130

08004ffc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004ffc:	b580      	push	{r7, lr}
 8004ffe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8005000:	f7ff ffb6 	bl	8004f70 <HAL_RCC_GetHCLKFreq>
 8005004:	4602      	mov	r2, r0
 8005006:	4b06      	ldr	r3, [pc, #24]	@ (8005020 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005008:	69db      	ldr	r3, [r3, #28]
 800500a:	0a1b      	lsrs	r3, r3, #8
 800500c:	f003 0307 	and.w	r3, r3, #7
 8005010:	4904      	ldr	r1, [pc, #16]	@ (8005024 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005012:	5ccb      	ldrb	r3, [r1, r3]
 8005014:	f003 031f 	and.w	r3, r3, #31
 8005018:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800501c:	4618      	mov	r0, r3
 800501e:	bd80      	pop	{r7, pc}
 8005020:	58024400 	.word	0x58024400
 8005024:	0800a130 	.word	0x0800a130

08005028 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005028:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800502c:	b0ca      	sub	sp, #296	@ 0x128
 800502e:	af00      	add	r7, sp, #0
 8005030:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005034:	2300      	movs	r3, #0
 8005036:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800503a:	2300      	movs	r3, #0
 800503c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005040:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005044:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005048:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 800504c:	2500      	movs	r5, #0
 800504e:	ea54 0305 	orrs.w	r3, r4, r5
 8005052:	d049      	beq.n	80050e8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8005054:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005058:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800505a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800505e:	d02f      	beq.n	80050c0 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8005060:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005064:	d828      	bhi.n	80050b8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005066:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800506a:	d01a      	beq.n	80050a2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800506c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005070:	d822      	bhi.n	80050b8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005072:	2b00      	cmp	r3, #0
 8005074:	d003      	beq.n	800507e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8005076:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800507a:	d007      	beq.n	800508c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800507c:	e01c      	b.n	80050b8 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800507e:	4bb8      	ldr	r3, [pc, #736]	@ (8005360 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005080:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005082:	4ab7      	ldr	r2, [pc, #732]	@ (8005360 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005084:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005088:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800508a:	e01a      	b.n	80050c2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800508c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005090:	3308      	adds	r3, #8
 8005092:	2102      	movs	r1, #2
 8005094:	4618      	mov	r0, r3
 8005096:	f001 fc8f 	bl	80069b8 <RCCEx_PLL2_Config>
 800509a:	4603      	mov	r3, r0
 800509c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80050a0:	e00f      	b.n	80050c2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80050a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80050a6:	3328      	adds	r3, #40	@ 0x28
 80050a8:	2102      	movs	r1, #2
 80050aa:	4618      	mov	r0, r3
 80050ac:	f001 fd36 	bl	8006b1c <RCCEx_PLL3_Config>
 80050b0:	4603      	mov	r3, r0
 80050b2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80050b6:	e004      	b.n	80050c2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80050b8:	2301      	movs	r3, #1
 80050ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80050be:	e000      	b.n	80050c2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80050c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80050c2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d10a      	bne.n	80050e0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80050ca:	4ba5      	ldr	r3, [pc, #660]	@ (8005360 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80050cc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80050ce:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80050d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80050d6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80050d8:	4aa1      	ldr	r2, [pc, #644]	@ (8005360 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80050da:	430b      	orrs	r3, r1
 80050dc:	6513      	str	r3, [r2, #80]	@ 0x50
 80050de:	e003      	b.n	80050e8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050e0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80050e4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80050e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80050ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050f0:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 80050f4:	f04f 0900 	mov.w	r9, #0
 80050f8:	ea58 0309 	orrs.w	r3, r8, r9
 80050fc:	d047      	beq.n	800518e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80050fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005102:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005104:	2b04      	cmp	r3, #4
 8005106:	d82a      	bhi.n	800515e <HAL_RCCEx_PeriphCLKConfig+0x136>
 8005108:	a201      	add	r2, pc, #4	@ (adr r2, 8005110 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800510a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800510e:	bf00      	nop
 8005110:	08005125 	.word	0x08005125
 8005114:	08005133 	.word	0x08005133
 8005118:	08005149 	.word	0x08005149
 800511c:	08005167 	.word	0x08005167
 8005120:	08005167 	.word	0x08005167
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005124:	4b8e      	ldr	r3, [pc, #568]	@ (8005360 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005126:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005128:	4a8d      	ldr	r2, [pc, #564]	@ (8005360 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800512a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800512e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005130:	e01a      	b.n	8005168 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005132:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005136:	3308      	adds	r3, #8
 8005138:	2100      	movs	r1, #0
 800513a:	4618      	mov	r0, r3
 800513c:	f001 fc3c 	bl	80069b8 <RCCEx_PLL2_Config>
 8005140:	4603      	mov	r3, r0
 8005142:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005146:	e00f      	b.n	8005168 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005148:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800514c:	3328      	adds	r3, #40	@ 0x28
 800514e:	2100      	movs	r1, #0
 8005150:	4618      	mov	r0, r3
 8005152:	f001 fce3 	bl	8006b1c <RCCEx_PLL3_Config>
 8005156:	4603      	mov	r3, r0
 8005158:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800515c:	e004      	b.n	8005168 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800515e:	2301      	movs	r3, #1
 8005160:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005164:	e000      	b.n	8005168 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8005166:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005168:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800516c:	2b00      	cmp	r3, #0
 800516e:	d10a      	bne.n	8005186 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005170:	4b7b      	ldr	r3, [pc, #492]	@ (8005360 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005172:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005174:	f023 0107 	bic.w	r1, r3, #7
 8005178:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800517c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800517e:	4a78      	ldr	r2, [pc, #480]	@ (8005360 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005180:	430b      	orrs	r3, r1
 8005182:	6513      	str	r3, [r2, #80]	@ 0x50
 8005184:	e003      	b.n	800518e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005186:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800518a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800518e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005192:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005196:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 800519a:	f04f 0b00 	mov.w	fp, #0
 800519e:	ea5a 030b 	orrs.w	r3, sl, fp
 80051a2:	d04c      	beq.n	800523e <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 80051a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80051a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80051aa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80051ae:	d030      	beq.n	8005212 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80051b0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80051b4:	d829      	bhi.n	800520a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80051b6:	2bc0      	cmp	r3, #192	@ 0xc0
 80051b8:	d02d      	beq.n	8005216 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80051ba:	2bc0      	cmp	r3, #192	@ 0xc0
 80051bc:	d825      	bhi.n	800520a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80051be:	2b80      	cmp	r3, #128	@ 0x80
 80051c0:	d018      	beq.n	80051f4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80051c2:	2b80      	cmp	r3, #128	@ 0x80
 80051c4:	d821      	bhi.n	800520a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d002      	beq.n	80051d0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80051ca:	2b40      	cmp	r3, #64	@ 0x40
 80051cc:	d007      	beq.n	80051de <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80051ce:	e01c      	b.n	800520a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80051d0:	4b63      	ldr	r3, [pc, #396]	@ (8005360 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80051d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051d4:	4a62      	ldr	r2, [pc, #392]	@ (8005360 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80051d6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80051da:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80051dc:	e01c      	b.n	8005218 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80051de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80051e2:	3308      	adds	r3, #8
 80051e4:	2100      	movs	r1, #0
 80051e6:	4618      	mov	r0, r3
 80051e8:	f001 fbe6 	bl	80069b8 <RCCEx_PLL2_Config>
 80051ec:	4603      	mov	r3, r0
 80051ee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80051f2:	e011      	b.n	8005218 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80051f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80051f8:	3328      	adds	r3, #40	@ 0x28
 80051fa:	2100      	movs	r1, #0
 80051fc:	4618      	mov	r0, r3
 80051fe:	f001 fc8d 	bl	8006b1c <RCCEx_PLL3_Config>
 8005202:	4603      	mov	r3, r0
 8005204:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005208:	e006      	b.n	8005218 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800520a:	2301      	movs	r3, #1
 800520c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005210:	e002      	b.n	8005218 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8005212:	bf00      	nop
 8005214:	e000      	b.n	8005218 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8005216:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005218:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800521c:	2b00      	cmp	r3, #0
 800521e:	d10a      	bne.n	8005236 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8005220:	4b4f      	ldr	r3, [pc, #316]	@ (8005360 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005222:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005224:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8005228:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800522c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800522e:	4a4c      	ldr	r2, [pc, #304]	@ (8005360 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005230:	430b      	orrs	r3, r1
 8005232:	6513      	str	r3, [r2, #80]	@ 0x50
 8005234:	e003      	b.n	800523e <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005236:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800523a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800523e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005242:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005246:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800524a:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 800524e:	2300      	movs	r3, #0
 8005250:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8005254:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8005258:	460b      	mov	r3, r1
 800525a:	4313      	orrs	r3, r2
 800525c:	d053      	beq.n	8005306 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800525e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005262:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005266:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800526a:	d035      	beq.n	80052d8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800526c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005270:	d82e      	bhi.n	80052d0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005272:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005276:	d031      	beq.n	80052dc <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8005278:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800527c:	d828      	bhi.n	80052d0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800527e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005282:	d01a      	beq.n	80052ba <HAL_RCCEx_PeriphCLKConfig+0x292>
 8005284:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005288:	d822      	bhi.n	80052d0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800528a:	2b00      	cmp	r3, #0
 800528c:	d003      	beq.n	8005296 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800528e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005292:	d007      	beq.n	80052a4 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8005294:	e01c      	b.n	80052d0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005296:	4b32      	ldr	r3, [pc, #200]	@ (8005360 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005298:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800529a:	4a31      	ldr	r2, [pc, #196]	@ (8005360 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800529c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80052a0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80052a2:	e01c      	b.n	80052de <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80052a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80052a8:	3308      	adds	r3, #8
 80052aa:	2100      	movs	r1, #0
 80052ac:	4618      	mov	r0, r3
 80052ae:	f001 fb83 	bl	80069b8 <RCCEx_PLL2_Config>
 80052b2:	4603      	mov	r3, r0
 80052b4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80052b8:	e011      	b.n	80052de <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80052ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80052be:	3328      	adds	r3, #40	@ 0x28
 80052c0:	2100      	movs	r1, #0
 80052c2:	4618      	mov	r0, r3
 80052c4:	f001 fc2a 	bl	8006b1c <RCCEx_PLL3_Config>
 80052c8:	4603      	mov	r3, r0
 80052ca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80052ce:	e006      	b.n	80052de <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80052d0:	2301      	movs	r3, #1
 80052d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80052d6:	e002      	b.n	80052de <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80052d8:	bf00      	nop
 80052da:	e000      	b.n	80052de <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80052dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80052de:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d10b      	bne.n	80052fe <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80052e6:	4b1e      	ldr	r3, [pc, #120]	@ (8005360 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80052e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80052ea:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 80052ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80052f2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80052f6:	4a1a      	ldr	r2, [pc, #104]	@ (8005360 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80052f8:	430b      	orrs	r3, r1
 80052fa:	6593      	str	r3, [r2, #88]	@ 0x58
 80052fc:	e003      	b.n	8005306 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052fe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005302:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8005306:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800530a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800530e:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8005312:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8005316:	2300      	movs	r3, #0
 8005318:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800531c:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8005320:	460b      	mov	r3, r1
 8005322:	4313      	orrs	r3, r2
 8005324:	d056      	beq.n	80053d4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8005326:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800532a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800532e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005332:	d038      	beq.n	80053a6 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8005334:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005338:	d831      	bhi.n	800539e <HAL_RCCEx_PeriphCLKConfig+0x376>
 800533a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800533e:	d034      	beq.n	80053aa <HAL_RCCEx_PeriphCLKConfig+0x382>
 8005340:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005344:	d82b      	bhi.n	800539e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005346:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800534a:	d01d      	beq.n	8005388 <HAL_RCCEx_PeriphCLKConfig+0x360>
 800534c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005350:	d825      	bhi.n	800539e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005352:	2b00      	cmp	r3, #0
 8005354:	d006      	beq.n	8005364 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8005356:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800535a:	d00a      	beq.n	8005372 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800535c:	e01f      	b.n	800539e <HAL_RCCEx_PeriphCLKConfig+0x376>
 800535e:	bf00      	nop
 8005360:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005364:	4ba2      	ldr	r3, [pc, #648]	@ (80055f0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005366:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005368:	4aa1      	ldr	r2, [pc, #644]	@ (80055f0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800536a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800536e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005370:	e01c      	b.n	80053ac <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005372:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005376:	3308      	adds	r3, #8
 8005378:	2100      	movs	r1, #0
 800537a:	4618      	mov	r0, r3
 800537c:	f001 fb1c 	bl	80069b8 <RCCEx_PLL2_Config>
 8005380:	4603      	mov	r3, r0
 8005382:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005386:	e011      	b.n	80053ac <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005388:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800538c:	3328      	adds	r3, #40	@ 0x28
 800538e:	2100      	movs	r1, #0
 8005390:	4618      	mov	r0, r3
 8005392:	f001 fbc3 	bl	8006b1c <RCCEx_PLL3_Config>
 8005396:	4603      	mov	r3, r0
 8005398:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800539c:	e006      	b.n	80053ac <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800539e:	2301      	movs	r3, #1
 80053a0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80053a4:	e002      	b.n	80053ac <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80053a6:	bf00      	nop
 80053a8:	e000      	b.n	80053ac <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80053aa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80053ac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d10b      	bne.n	80053cc <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80053b4:	4b8e      	ldr	r3, [pc, #568]	@ (80055f0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80053b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80053b8:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80053bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80053c0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80053c4:	4a8a      	ldr	r2, [pc, #552]	@ (80055f0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80053c6:	430b      	orrs	r3, r1
 80053c8:	6593      	str	r3, [r2, #88]	@ 0x58
 80053ca:	e003      	b.n	80053d4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053cc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80053d0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80053d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80053d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053dc:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80053e0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80053e4:	2300      	movs	r3, #0
 80053e6:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80053ea:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80053ee:	460b      	mov	r3, r1
 80053f0:	4313      	orrs	r3, r2
 80053f2:	d03a      	beq.n	800546a <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 80053f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80053f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80053fa:	2b30      	cmp	r3, #48	@ 0x30
 80053fc:	d01f      	beq.n	800543e <HAL_RCCEx_PeriphCLKConfig+0x416>
 80053fe:	2b30      	cmp	r3, #48	@ 0x30
 8005400:	d819      	bhi.n	8005436 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8005402:	2b20      	cmp	r3, #32
 8005404:	d00c      	beq.n	8005420 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8005406:	2b20      	cmp	r3, #32
 8005408:	d815      	bhi.n	8005436 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800540a:	2b00      	cmp	r3, #0
 800540c:	d019      	beq.n	8005442 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800540e:	2b10      	cmp	r3, #16
 8005410:	d111      	bne.n	8005436 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005412:	4b77      	ldr	r3, [pc, #476]	@ (80055f0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005414:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005416:	4a76      	ldr	r2, [pc, #472]	@ (80055f0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005418:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800541c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800541e:	e011      	b.n	8005444 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005420:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005424:	3308      	adds	r3, #8
 8005426:	2102      	movs	r1, #2
 8005428:	4618      	mov	r0, r3
 800542a:	f001 fac5 	bl	80069b8 <RCCEx_PLL2_Config>
 800542e:	4603      	mov	r3, r0
 8005430:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8005434:	e006      	b.n	8005444 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005436:	2301      	movs	r3, #1
 8005438:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800543c:	e002      	b.n	8005444 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800543e:	bf00      	nop
 8005440:	e000      	b.n	8005444 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8005442:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005444:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005448:	2b00      	cmp	r3, #0
 800544a:	d10a      	bne.n	8005462 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800544c:	4b68      	ldr	r3, [pc, #416]	@ (80055f0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800544e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005450:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8005454:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005458:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800545a:	4a65      	ldr	r2, [pc, #404]	@ (80055f0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800545c:	430b      	orrs	r3, r1
 800545e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005460:	e003      	b.n	800546a <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005462:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005466:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800546a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800546e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005472:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8005476:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800547a:	2300      	movs	r3, #0
 800547c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005480:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8005484:	460b      	mov	r3, r1
 8005486:	4313      	orrs	r3, r2
 8005488:	d051      	beq.n	800552e <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800548a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800548e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005490:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005494:	d035      	beq.n	8005502 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8005496:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800549a:	d82e      	bhi.n	80054fa <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800549c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80054a0:	d031      	beq.n	8005506 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80054a2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80054a6:	d828      	bhi.n	80054fa <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80054a8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80054ac:	d01a      	beq.n	80054e4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 80054ae:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80054b2:	d822      	bhi.n	80054fa <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d003      	beq.n	80054c0 <HAL_RCCEx_PeriphCLKConfig+0x498>
 80054b8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80054bc:	d007      	beq.n	80054ce <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 80054be:	e01c      	b.n	80054fa <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80054c0:	4b4b      	ldr	r3, [pc, #300]	@ (80055f0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80054c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054c4:	4a4a      	ldr	r2, [pc, #296]	@ (80055f0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80054c6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80054ca:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80054cc:	e01c      	b.n	8005508 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80054ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80054d2:	3308      	adds	r3, #8
 80054d4:	2100      	movs	r1, #0
 80054d6:	4618      	mov	r0, r3
 80054d8:	f001 fa6e 	bl	80069b8 <RCCEx_PLL2_Config>
 80054dc:	4603      	mov	r3, r0
 80054de:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80054e2:	e011      	b.n	8005508 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80054e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80054e8:	3328      	adds	r3, #40	@ 0x28
 80054ea:	2100      	movs	r1, #0
 80054ec:	4618      	mov	r0, r3
 80054ee:	f001 fb15 	bl	8006b1c <RCCEx_PLL3_Config>
 80054f2:	4603      	mov	r3, r0
 80054f4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80054f8:	e006      	b.n	8005508 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80054fa:	2301      	movs	r3, #1
 80054fc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005500:	e002      	b.n	8005508 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8005502:	bf00      	nop
 8005504:	e000      	b.n	8005508 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8005506:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005508:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800550c:	2b00      	cmp	r3, #0
 800550e:	d10a      	bne.n	8005526 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005510:	4b37      	ldr	r3, [pc, #220]	@ (80055f0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005512:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005514:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8005518:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800551c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800551e:	4a34      	ldr	r2, [pc, #208]	@ (80055f0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005520:	430b      	orrs	r3, r1
 8005522:	6513      	str	r3, [r2, #80]	@ 0x50
 8005524:	e003      	b.n	800552e <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005526:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800552a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800552e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005532:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005536:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800553a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800553e:	2300      	movs	r3, #0
 8005540:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005544:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8005548:	460b      	mov	r3, r1
 800554a:	4313      	orrs	r3, r2
 800554c:	d056      	beq.n	80055fc <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800554e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005552:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005554:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005558:	d033      	beq.n	80055c2 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800555a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800555e:	d82c      	bhi.n	80055ba <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005560:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005564:	d02f      	beq.n	80055c6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8005566:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800556a:	d826      	bhi.n	80055ba <HAL_RCCEx_PeriphCLKConfig+0x592>
 800556c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005570:	d02b      	beq.n	80055ca <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8005572:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005576:	d820      	bhi.n	80055ba <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005578:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800557c:	d012      	beq.n	80055a4 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800557e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005582:	d81a      	bhi.n	80055ba <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005584:	2b00      	cmp	r3, #0
 8005586:	d022      	beq.n	80055ce <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8005588:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800558c:	d115      	bne.n	80055ba <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800558e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005592:	3308      	adds	r3, #8
 8005594:	2101      	movs	r1, #1
 8005596:	4618      	mov	r0, r3
 8005598:	f001 fa0e 	bl	80069b8 <RCCEx_PLL2_Config>
 800559c:	4603      	mov	r3, r0
 800559e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80055a2:	e015      	b.n	80055d0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80055a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80055a8:	3328      	adds	r3, #40	@ 0x28
 80055aa:	2101      	movs	r1, #1
 80055ac:	4618      	mov	r0, r3
 80055ae:	f001 fab5 	bl	8006b1c <RCCEx_PLL3_Config>
 80055b2:	4603      	mov	r3, r0
 80055b4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80055b8:	e00a      	b.n	80055d0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80055ba:	2301      	movs	r3, #1
 80055bc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80055c0:	e006      	b.n	80055d0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80055c2:	bf00      	nop
 80055c4:	e004      	b.n	80055d0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80055c6:	bf00      	nop
 80055c8:	e002      	b.n	80055d0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80055ca:	bf00      	nop
 80055cc:	e000      	b.n	80055d0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80055ce:	bf00      	nop
    }

    if (ret == HAL_OK)
 80055d0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d10d      	bne.n	80055f4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80055d8:	4b05      	ldr	r3, [pc, #20]	@ (80055f0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80055da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80055dc:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80055e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80055e4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80055e6:	4a02      	ldr	r2, [pc, #8]	@ (80055f0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80055e8:	430b      	orrs	r3, r1
 80055ea:	6513      	str	r3, [r2, #80]	@ 0x50
 80055ec:	e006      	b.n	80055fc <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80055ee:	bf00      	nop
 80055f0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055f4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80055f8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80055fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005600:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005604:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8005608:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800560c:	2300      	movs	r3, #0
 800560e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005612:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8005616:	460b      	mov	r3, r1
 8005618:	4313      	orrs	r3, r2
 800561a:	d055      	beq.n	80056c8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800561c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005620:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005624:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005628:	d033      	beq.n	8005692 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800562a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800562e:	d82c      	bhi.n	800568a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005630:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005634:	d02f      	beq.n	8005696 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8005636:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800563a:	d826      	bhi.n	800568a <HAL_RCCEx_PeriphCLKConfig+0x662>
 800563c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005640:	d02b      	beq.n	800569a <HAL_RCCEx_PeriphCLKConfig+0x672>
 8005642:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005646:	d820      	bhi.n	800568a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005648:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800564c:	d012      	beq.n	8005674 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800564e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005652:	d81a      	bhi.n	800568a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005654:	2b00      	cmp	r3, #0
 8005656:	d022      	beq.n	800569e <HAL_RCCEx_PeriphCLKConfig+0x676>
 8005658:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800565c:	d115      	bne.n	800568a <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800565e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005662:	3308      	adds	r3, #8
 8005664:	2101      	movs	r1, #1
 8005666:	4618      	mov	r0, r3
 8005668:	f001 f9a6 	bl	80069b8 <RCCEx_PLL2_Config>
 800566c:	4603      	mov	r3, r0
 800566e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005672:	e015      	b.n	80056a0 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005674:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005678:	3328      	adds	r3, #40	@ 0x28
 800567a:	2101      	movs	r1, #1
 800567c:	4618      	mov	r0, r3
 800567e:	f001 fa4d 	bl	8006b1c <RCCEx_PLL3_Config>
 8005682:	4603      	mov	r3, r0
 8005684:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005688:	e00a      	b.n	80056a0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800568a:	2301      	movs	r3, #1
 800568c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005690:	e006      	b.n	80056a0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005692:	bf00      	nop
 8005694:	e004      	b.n	80056a0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005696:	bf00      	nop
 8005698:	e002      	b.n	80056a0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800569a:	bf00      	nop
 800569c:	e000      	b.n	80056a0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800569e:	bf00      	nop
    }

    if (ret == HAL_OK)
 80056a0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d10b      	bne.n	80056c0 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80056a8:	4ba3      	ldr	r3, [pc, #652]	@ (8005938 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80056aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80056ac:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80056b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056b4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80056b8:	4a9f      	ldr	r2, [pc, #636]	@ (8005938 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80056ba:	430b      	orrs	r3, r1
 80056bc:	6593      	str	r3, [r2, #88]	@ 0x58
 80056be:	e003      	b.n	80056c8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056c0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80056c4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80056c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056d0:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80056d4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80056d8:	2300      	movs	r3, #0
 80056da:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80056de:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80056e2:	460b      	mov	r3, r1
 80056e4:	4313      	orrs	r3, r2
 80056e6:	d037      	beq.n	8005758 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80056e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80056ee:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80056f2:	d00e      	beq.n	8005712 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 80056f4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80056f8:	d816      	bhi.n	8005728 <HAL_RCCEx_PeriphCLKConfig+0x700>
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d018      	beq.n	8005730 <HAL_RCCEx_PeriphCLKConfig+0x708>
 80056fe:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005702:	d111      	bne.n	8005728 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005704:	4b8c      	ldr	r3, [pc, #560]	@ (8005938 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005706:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005708:	4a8b      	ldr	r2, [pc, #556]	@ (8005938 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800570a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800570e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005710:	e00f      	b.n	8005732 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005712:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005716:	3308      	adds	r3, #8
 8005718:	2101      	movs	r1, #1
 800571a:	4618      	mov	r0, r3
 800571c:	f001 f94c 	bl	80069b8 <RCCEx_PLL2_Config>
 8005720:	4603      	mov	r3, r0
 8005722:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005726:	e004      	b.n	8005732 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005728:	2301      	movs	r3, #1
 800572a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800572e:	e000      	b.n	8005732 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8005730:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005732:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005736:	2b00      	cmp	r3, #0
 8005738:	d10a      	bne.n	8005750 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800573a:	4b7f      	ldr	r3, [pc, #508]	@ (8005938 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800573c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800573e:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8005742:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005746:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005748:	4a7b      	ldr	r2, [pc, #492]	@ (8005938 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800574a:	430b      	orrs	r3, r1
 800574c:	6513      	str	r3, [r2, #80]	@ 0x50
 800574e:	e003      	b.n	8005758 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005750:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005754:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005758:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800575c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005760:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8005764:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005768:	2300      	movs	r3, #0
 800576a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800576e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8005772:	460b      	mov	r3, r1
 8005774:	4313      	orrs	r3, r2
 8005776:	d039      	beq.n	80057ec <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8005778:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800577c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800577e:	2b03      	cmp	r3, #3
 8005780:	d81c      	bhi.n	80057bc <HAL_RCCEx_PeriphCLKConfig+0x794>
 8005782:	a201      	add	r2, pc, #4	@ (adr r2, 8005788 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8005784:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005788:	080057c5 	.word	0x080057c5
 800578c:	08005799 	.word	0x08005799
 8005790:	080057a7 	.word	0x080057a7
 8005794:	080057c5 	.word	0x080057c5
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005798:	4b67      	ldr	r3, [pc, #412]	@ (8005938 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800579a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800579c:	4a66      	ldr	r2, [pc, #408]	@ (8005938 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800579e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80057a2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80057a4:	e00f      	b.n	80057c6 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80057a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057aa:	3308      	adds	r3, #8
 80057ac:	2102      	movs	r1, #2
 80057ae:	4618      	mov	r0, r3
 80057b0:	f001 f902 	bl	80069b8 <RCCEx_PLL2_Config>
 80057b4:	4603      	mov	r3, r0
 80057b6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 80057ba:	e004      	b.n	80057c6 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80057bc:	2301      	movs	r3, #1
 80057be:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80057c2:	e000      	b.n	80057c6 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 80057c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80057c6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d10a      	bne.n	80057e4 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80057ce:	4b5a      	ldr	r3, [pc, #360]	@ (8005938 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80057d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80057d2:	f023 0103 	bic.w	r1, r3, #3
 80057d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057da:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80057dc:	4a56      	ldr	r2, [pc, #344]	@ (8005938 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80057de:	430b      	orrs	r3, r1
 80057e0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80057e2:	e003      	b.n	80057ec <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057e4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80057e8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80057ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057f4:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80057f8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80057fc:	2300      	movs	r3, #0
 80057fe:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005802:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8005806:	460b      	mov	r3, r1
 8005808:	4313      	orrs	r3, r2
 800580a:	f000 809f 	beq.w	800594c <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800580e:	4b4b      	ldr	r3, [pc, #300]	@ (800593c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	4a4a      	ldr	r2, [pc, #296]	@ (800593c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005814:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005818:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800581a:	f7fb fe31 	bl	8001480 <HAL_GetTick>
 800581e:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005822:	e00b      	b.n	800583c <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005824:	f7fb fe2c 	bl	8001480 <HAL_GetTick>
 8005828:	4602      	mov	r2, r0
 800582a:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800582e:	1ad3      	subs	r3, r2, r3
 8005830:	2b64      	cmp	r3, #100	@ 0x64
 8005832:	d903      	bls.n	800583c <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8005834:	2303      	movs	r3, #3
 8005836:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800583a:	e005      	b.n	8005848 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800583c:	4b3f      	ldr	r3, [pc, #252]	@ (800593c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005844:	2b00      	cmp	r3, #0
 8005846:	d0ed      	beq.n	8005824 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8005848:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800584c:	2b00      	cmp	r3, #0
 800584e:	d179      	bne.n	8005944 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8005850:	4b39      	ldr	r3, [pc, #228]	@ (8005938 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005852:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005854:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005858:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800585c:	4053      	eors	r3, r2
 800585e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005862:	2b00      	cmp	r3, #0
 8005864:	d015      	beq.n	8005892 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005866:	4b34      	ldr	r3, [pc, #208]	@ (8005938 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005868:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800586a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800586e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005872:	4b31      	ldr	r3, [pc, #196]	@ (8005938 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005874:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005876:	4a30      	ldr	r2, [pc, #192]	@ (8005938 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005878:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800587c:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800587e:	4b2e      	ldr	r3, [pc, #184]	@ (8005938 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005880:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005882:	4a2d      	ldr	r2, [pc, #180]	@ (8005938 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005884:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005888:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800588a:	4a2b      	ldr	r2, [pc, #172]	@ (8005938 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800588c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005890:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8005892:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005896:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800589a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800589e:	d118      	bne.n	80058d2 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058a0:	f7fb fdee 	bl	8001480 <HAL_GetTick>
 80058a4:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80058a8:	e00d      	b.n	80058c6 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80058aa:	f7fb fde9 	bl	8001480 <HAL_GetTick>
 80058ae:	4602      	mov	r2, r0
 80058b0:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80058b4:	1ad2      	subs	r2, r2, r3
 80058b6:	f241 3388 	movw	r3, #5000	@ 0x1388
 80058ba:	429a      	cmp	r2, r3
 80058bc:	d903      	bls.n	80058c6 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 80058be:	2303      	movs	r3, #3
 80058c0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 80058c4:	e005      	b.n	80058d2 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80058c6:	4b1c      	ldr	r3, [pc, #112]	@ (8005938 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80058c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80058ca:	f003 0302 	and.w	r3, r3, #2
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d0eb      	beq.n	80058aa <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 80058d2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d129      	bne.n	800592e <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80058da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058de:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80058e2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80058e6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80058ea:	d10e      	bne.n	800590a <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 80058ec:	4b12      	ldr	r3, [pc, #72]	@ (8005938 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80058ee:	691b      	ldr	r3, [r3, #16]
 80058f0:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80058f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058f8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80058fc:	091a      	lsrs	r2, r3, #4
 80058fe:	4b10      	ldr	r3, [pc, #64]	@ (8005940 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8005900:	4013      	ands	r3, r2
 8005902:	4a0d      	ldr	r2, [pc, #52]	@ (8005938 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005904:	430b      	orrs	r3, r1
 8005906:	6113      	str	r3, [r2, #16]
 8005908:	e005      	b.n	8005916 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800590a:	4b0b      	ldr	r3, [pc, #44]	@ (8005938 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800590c:	691b      	ldr	r3, [r3, #16]
 800590e:	4a0a      	ldr	r2, [pc, #40]	@ (8005938 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005910:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8005914:	6113      	str	r3, [r2, #16]
 8005916:	4b08      	ldr	r3, [pc, #32]	@ (8005938 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005918:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800591a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800591e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005922:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005926:	4a04      	ldr	r2, [pc, #16]	@ (8005938 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005928:	430b      	orrs	r3, r1
 800592a:	6713      	str	r3, [r2, #112]	@ 0x70
 800592c:	e00e      	b.n	800594c <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800592e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005932:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8005936:	e009      	b.n	800594c <HAL_RCCEx_PeriphCLKConfig+0x924>
 8005938:	58024400 	.word	0x58024400
 800593c:	58024800 	.word	0x58024800
 8005940:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005944:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005948:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800594c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005950:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005954:	f002 0301 	and.w	r3, r2, #1
 8005958:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800595c:	2300      	movs	r3, #0
 800595e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005962:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005966:	460b      	mov	r3, r1
 8005968:	4313      	orrs	r3, r2
 800596a:	f000 8089 	beq.w	8005a80 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800596e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005972:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005974:	2b28      	cmp	r3, #40	@ 0x28
 8005976:	d86b      	bhi.n	8005a50 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8005978:	a201      	add	r2, pc, #4	@ (adr r2, 8005980 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800597a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800597e:	bf00      	nop
 8005980:	08005a59 	.word	0x08005a59
 8005984:	08005a51 	.word	0x08005a51
 8005988:	08005a51 	.word	0x08005a51
 800598c:	08005a51 	.word	0x08005a51
 8005990:	08005a51 	.word	0x08005a51
 8005994:	08005a51 	.word	0x08005a51
 8005998:	08005a51 	.word	0x08005a51
 800599c:	08005a51 	.word	0x08005a51
 80059a0:	08005a25 	.word	0x08005a25
 80059a4:	08005a51 	.word	0x08005a51
 80059a8:	08005a51 	.word	0x08005a51
 80059ac:	08005a51 	.word	0x08005a51
 80059b0:	08005a51 	.word	0x08005a51
 80059b4:	08005a51 	.word	0x08005a51
 80059b8:	08005a51 	.word	0x08005a51
 80059bc:	08005a51 	.word	0x08005a51
 80059c0:	08005a3b 	.word	0x08005a3b
 80059c4:	08005a51 	.word	0x08005a51
 80059c8:	08005a51 	.word	0x08005a51
 80059cc:	08005a51 	.word	0x08005a51
 80059d0:	08005a51 	.word	0x08005a51
 80059d4:	08005a51 	.word	0x08005a51
 80059d8:	08005a51 	.word	0x08005a51
 80059dc:	08005a51 	.word	0x08005a51
 80059e0:	08005a59 	.word	0x08005a59
 80059e4:	08005a51 	.word	0x08005a51
 80059e8:	08005a51 	.word	0x08005a51
 80059ec:	08005a51 	.word	0x08005a51
 80059f0:	08005a51 	.word	0x08005a51
 80059f4:	08005a51 	.word	0x08005a51
 80059f8:	08005a51 	.word	0x08005a51
 80059fc:	08005a51 	.word	0x08005a51
 8005a00:	08005a59 	.word	0x08005a59
 8005a04:	08005a51 	.word	0x08005a51
 8005a08:	08005a51 	.word	0x08005a51
 8005a0c:	08005a51 	.word	0x08005a51
 8005a10:	08005a51 	.word	0x08005a51
 8005a14:	08005a51 	.word	0x08005a51
 8005a18:	08005a51 	.word	0x08005a51
 8005a1c:	08005a51 	.word	0x08005a51
 8005a20:	08005a59 	.word	0x08005a59
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005a24:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a28:	3308      	adds	r3, #8
 8005a2a:	2101      	movs	r1, #1
 8005a2c:	4618      	mov	r0, r3
 8005a2e:	f000 ffc3 	bl	80069b8 <RCCEx_PLL2_Config>
 8005a32:	4603      	mov	r3, r0
 8005a34:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005a38:	e00f      	b.n	8005a5a <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005a3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a3e:	3328      	adds	r3, #40	@ 0x28
 8005a40:	2101      	movs	r1, #1
 8005a42:	4618      	mov	r0, r3
 8005a44:	f001 f86a 	bl	8006b1c <RCCEx_PLL3_Config>
 8005a48:	4603      	mov	r3, r0
 8005a4a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005a4e:	e004      	b.n	8005a5a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005a50:	2301      	movs	r3, #1
 8005a52:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005a56:	e000      	b.n	8005a5a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8005a58:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005a5a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d10a      	bne.n	8005a78 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8005a62:	4bbf      	ldr	r3, [pc, #764]	@ (8005d60 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005a64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a66:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8005a6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a6e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005a70:	4abb      	ldr	r2, [pc, #748]	@ (8005d60 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005a72:	430b      	orrs	r3, r1
 8005a74:	6553      	str	r3, [r2, #84]	@ 0x54
 8005a76:	e003      	b.n	8005a80 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a78:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005a7c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8005a80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a88:	f002 0302 	and.w	r3, r2, #2
 8005a8c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005a90:	2300      	movs	r3, #0
 8005a92:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8005a96:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8005a9a:	460b      	mov	r3, r1
 8005a9c:	4313      	orrs	r3, r2
 8005a9e:	d041      	beq.n	8005b24 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8005aa0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005aa4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005aa6:	2b05      	cmp	r3, #5
 8005aa8:	d824      	bhi.n	8005af4 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8005aaa:	a201      	add	r2, pc, #4	@ (adr r2, 8005ab0 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8005aac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ab0:	08005afd 	.word	0x08005afd
 8005ab4:	08005ac9 	.word	0x08005ac9
 8005ab8:	08005adf 	.word	0x08005adf
 8005abc:	08005afd 	.word	0x08005afd
 8005ac0:	08005afd 	.word	0x08005afd
 8005ac4:	08005afd 	.word	0x08005afd
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005ac8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005acc:	3308      	adds	r3, #8
 8005ace:	2101      	movs	r1, #1
 8005ad0:	4618      	mov	r0, r3
 8005ad2:	f000 ff71 	bl	80069b8 <RCCEx_PLL2_Config>
 8005ad6:	4603      	mov	r3, r0
 8005ad8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005adc:	e00f      	b.n	8005afe <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005ade:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ae2:	3328      	adds	r3, #40	@ 0x28
 8005ae4:	2101      	movs	r1, #1
 8005ae6:	4618      	mov	r0, r3
 8005ae8:	f001 f818 	bl	8006b1c <RCCEx_PLL3_Config>
 8005aec:	4603      	mov	r3, r0
 8005aee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005af2:	e004      	b.n	8005afe <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005af4:	2301      	movs	r3, #1
 8005af6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005afa:	e000      	b.n	8005afe <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8005afc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005afe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d10a      	bne.n	8005b1c <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8005b06:	4b96      	ldr	r3, [pc, #600]	@ (8005d60 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005b08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b0a:	f023 0107 	bic.w	r1, r3, #7
 8005b0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b12:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005b14:	4a92      	ldr	r2, [pc, #584]	@ (8005d60 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005b16:	430b      	orrs	r3, r1
 8005b18:	6553      	str	r3, [r2, #84]	@ 0x54
 8005b1a:	e003      	b.n	8005b24 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b1c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005b20:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005b24:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b2c:	f002 0304 	and.w	r3, r2, #4
 8005b30:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005b34:	2300      	movs	r3, #0
 8005b36:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005b3a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8005b3e:	460b      	mov	r3, r1
 8005b40:	4313      	orrs	r3, r2
 8005b42:	d044      	beq.n	8005bce <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8005b44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b48:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005b4c:	2b05      	cmp	r3, #5
 8005b4e:	d825      	bhi.n	8005b9c <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8005b50:	a201      	add	r2, pc, #4	@ (adr r2, 8005b58 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8005b52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b56:	bf00      	nop
 8005b58:	08005ba5 	.word	0x08005ba5
 8005b5c:	08005b71 	.word	0x08005b71
 8005b60:	08005b87 	.word	0x08005b87
 8005b64:	08005ba5 	.word	0x08005ba5
 8005b68:	08005ba5 	.word	0x08005ba5
 8005b6c:	08005ba5 	.word	0x08005ba5
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005b70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b74:	3308      	adds	r3, #8
 8005b76:	2101      	movs	r1, #1
 8005b78:	4618      	mov	r0, r3
 8005b7a:	f000 ff1d 	bl	80069b8 <RCCEx_PLL2_Config>
 8005b7e:	4603      	mov	r3, r0
 8005b80:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005b84:	e00f      	b.n	8005ba6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005b86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b8a:	3328      	adds	r3, #40	@ 0x28
 8005b8c:	2101      	movs	r1, #1
 8005b8e:	4618      	mov	r0, r3
 8005b90:	f000 ffc4 	bl	8006b1c <RCCEx_PLL3_Config>
 8005b94:	4603      	mov	r3, r0
 8005b96:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005b9a:	e004      	b.n	8005ba6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005b9c:	2301      	movs	r3, #1
 8005b9e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005ba2:	e000      	b.n	8005ba6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8005ba4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005ba6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d10b      	bne.n	8005bc6 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005bae:	4b6c      	ldr	r3, [pc, #432]	@ (8005d60 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005bb0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005bb2:	f023 0107 	bic.w	r1, r3, #7
 8005bb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005bba:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005bbe:	4a68      	ldr	r2, [pc, #416]	@ (8005d60 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005bc0:	430b      	orrs	r3, r1
 8005bc2:	6593      	str	r3, [r2, #88]	@ 0x58
 8005bc4:	e003      	b.n	8005bce <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005bc6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005bca:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005bce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005bd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bd6:	f002 0320 	and.w	r3, r2, #32
 8005bda:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005bde:	2300      	movs	r3, #0
 8005be0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005be4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005be8:	460b      	mov	r3, r1
 8005bea:	4313      	orrs	r3, r2
 8005bec:	d055      	beq.n	8005c9a <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8005bee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005bf2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005bf6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005bfa:	d033      	beq.n	8005c64 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8005bfc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005c00:	d82c      	bhi.n	8005c5c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005c02:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005c06:	d02f      	beq.n	8005c68 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8005c08:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005c0c:	d826      	bhi.n	8005c5c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005c0e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005c12:	d02b      	beq.n	8005c6c <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8005c14:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005c18:	d820      	bhi.n	8005c5c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005c1a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005c1e:	d012      	beq.n	8005c46 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8005c20:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005c24:	d81a      	bhi.n	8005c5c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d022      	beq.n	8005c70 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8005c2a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005c2e:	d115      	bne.n	8005c5c <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005c30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c34:	3308      	adds	r3, #8
 8005c36:	2100      	movs	r1, #0
 8005c38:	4618      	mov	r0, r3
 8005c3a:	f000 febd 	bl	80069b8 <RCCEx_PLL2_Config>
 8005c3e:	4603      	mov	r3, r0
 8005c40:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005c44:	e015      	b.n	8005c72 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005c46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c4a:	3328      	adds	r3, #40	@ 0x28
 8005c4c:	2102      	movs	r1, #2
 8005c4e:	4618      	mov	r0, r3
 8005c50:	f000 ff64 	bl	8006b1c <RCCEx_PLL3_Config>
 8005c54:	4603      	mov	r3, r0
 8005c56:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005c5a:	e00a      	b.n	8005c72 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005c5c:	2301      	movs	r3, #1
 8005c5e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005c62:	e006      	b.n	8005c72 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005c64:	bf00      	nop
 8005c66:	e004      	b.n	8005c72 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005c68:	bf00      	nop
 8005c6a:	e002      	b.n	8005c72 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005c6c:	bf00      	nop
 8005c6e:	e000      	b.n	8005c72 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005c70:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005c72:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d10b      	bne.n	8005c92 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005c7a:	4b39      	ldr	r3, [pc, #228]	@ (8005d60 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005c7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c7e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8005c82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c86:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c8a:	4a35      	ldr	r2, [pc, #212]	@ (8005d60 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005c8c:	430b      	orrs	r3, r1
 8005c8e:	6553      	str	r3, [r2, #84]	@ 0x54
 8005c90:	e003      	b.n	8005c9a <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c92:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005c96:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8005c9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ca2:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8005ca6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005caa:	2300      	movs	r3, #0
 8005cac:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8005cb0:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8005cb4:	460b      	mov	r3, r1
 8005cb6:	4313      	orrs	r3, r2
 8005cb8:	d058      	beq.n	8005d6c <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8005cba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005cbe:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005cc2:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8005cc6:	d033      	beq.n	8005d30 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8005cc8:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8005ccc:	d82c      	bhi.n	8005d28 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8005cce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005cd2:	d02f      	beq.n	8005d34 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8005cd4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005cd8:	d826      	bhi.n	8005d28 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8005cda:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005cde:	d02b      	beq.n	8005d38 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8005ce0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005ce4:	d820      	bhi.n	8005d28 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8005ce6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005cea:	d012      	beq.n	8005d12 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8005cec:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005cf0:	d81a      	bhi.n	8005d28 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d022      	beq.n	8005d3c <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8005cf6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005cfa:	d115      	bne.n	8005d28 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005cfc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d00:	3308      	adds	r3, #8
 8005d02:	2100      	movs	r1, #0
 8005d04:	4618      	mov	r0, r3
 8005d06:	f000 fe57 	bl	80069b8 <RCCEx_PLL2_Config>
 8005d0a:	4603      	mov	r3, r0
 8005d0c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005d10:	e015      	b.n	8005d3e <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005d12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d16:	3328      	adds	r3, #40	@ 0x28
 8005d18:	2102      	movs	r1, #2
 8005d1a:	4618      	mov	r0, r3
 8005d1c:	f000 fefe 	bl	8006b1c <RCCEx_PLL3_Config>
 8005d20:	4603      	mov	r3, r0
 8005d22:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005d26:	e00a      	b.n	8005d3e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005d28:	2301      	movs	r3, #1
 8005d2a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005d2e:	e006      	b.n	8005d3e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005d30:	bf00      	nop
 8005d32:	e004      	b.n	8005d3e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005d34:	bf00      	nop
 8005d36:	e002      	b.n	8005d3e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005d38:	bf00      	nop
 8005d3a:	e000      	b.n	8005d3e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005d3c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005d3e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d10e      	bne.n	8005d64 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005d46:	4b06      	ldr	r3, [pc, #24]	@ (8005d60 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005d48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d4a:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8005d4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d52:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005d56:	4a02      	ldr	r2, [pc, #8]	@ (8005d60 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005d58:	430b      	orrs	r3, r1
 8005d5a:	6593      	str	r3, [r2, #88]	@ 0x58
 8005d5c:	e006      	b.n	8005d6c <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8005d5e:	bf00      	nop
 8005d60:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d64:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005d68:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8005d6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d74:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8005d78:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005d7c:	2300      	movs	r3, #0
 8005d7e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005d82:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8005d86:	460b      	mov	r3, r1
 8005d88:	4313      	orrs	r3, r2
 8005d8a:	d055      	beq.n	8005e38 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8005d8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d90:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005d94:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8005d98:	d033      	beq.n	8005e02 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8005d9a:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8005d9e:	d82c      	bhi.n	8005dfa <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005da0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005da4:	d02f      	beq.n	8005e06 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8005da6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005daa:	d826      	bhi.n	8005dfa <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005dac:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8005db0:	d02b      	beq.n	8005e0a <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8005db2:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8005db6:	d820      	bhi.n	8005dfa <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005db8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005dbc:	d012      	beq.n	8005de4 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8005dbe:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005dc2:	d81a      	bhi.n	8005dfa <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d022      	beq.n	8005e0e <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8005dc8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005dcc:	d115      	bne.n	8005dfa <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005dce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005dd2:	3308      	adds	r3, #8
 8005dd4:	2100      	movs	r1, #0
 8005dd6:	4618      	mov	r0, r3
 8005dd8:	f000 fdee 	bl	80069b8 <RCCEx_PLL2_Config>
 8005ddc:	4603      	mov	r3, r0
 8005dde:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8005de2:	e015      	b.n	8005e10 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005de4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005de8:	3328      	adds	r3, #40	@ 0x28
 8005dea:	2102      	movs	r1, #2
 8005dec:	4618      	mov	r0, r3
 8005dee:	f000 fe95 	bl	8006b1c <RCCEx_PLL3_Config>
 8005df2:	4603      	mov	r3, r0
 8005df4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8005df8:	e00a      	b.n	8005e10 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005dfa:	2301      	movs	r3, #1
 8005dfc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005e00:	e006      	b.n	8005e10 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8005e02:	bf00      	nop
 8005e04:	e004      	b.n	8005e10 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8005e06:	bf00      	nop
 8005e08:	e002      	b.n	8005e10 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8005e0a:	bf00      	nop
 8005e0c:	e000      	b.n	8005e10 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8005e0e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005e10:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d10b      	bne.n	8005e30 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8005e18:	4ba1      	ldr	r3, [pc, #644]	@ (80060a0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005e1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e1c:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8005e20:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e24:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005e28:	4a9d      	ldr	r2, [pc, #628]	@ (80060a0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005e2a:	430b      	orrs	r3, r1
 8005e2c:	6593      	str	r3, [r2, #88]	@ 0x58
 8005e2e:	e003      	b.n	8005e38 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e30:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005e34:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8005e38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e40:	f002 0308 	and.w	r3, r2, #8
 8005e44:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005e48:	2300      	movs	r3, #0
 8005e4a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005e4e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8005e52:	460b      	mov	r3, r1
 8005e54:	4313      	orrs	r3, r2
 8005e56:	d01e      	beq.n	8005e96 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8005e58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e5c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005e60:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005e64:	d10c      	bne.n	8005e80 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005e66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e6a:	3328      	adds	r3, #40	@ 0x28
 8005e6c:	2102      	movs	r1, #2
 8005e6e:	4618      	mov	r0, r3
 8005e70:	f000 fe54 	bl	8006b1c <RCCEx_PLL3_Config>
 8005e74:	4603      	mov	r3, r0
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d002      	beq.n	8005e80 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8005e7a:	2301      	movs	r3, #1
 8005e7c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8005e80:	4b87      	ldr	r3, [pc, #540]	@ (80060a0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005e82:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e84:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005e88:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e8c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005e90:	4a83      	ldr	r2, [pc, #524]	@ (80060a0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005e92:	430b      	orrs	r3, r1
 8005e94:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005e96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e9e:	f002 0310 	and.w	r3, r2, #16
 8005ea2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005ea6:	2300      	movs	r3, #0
 8005ea8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8005eac:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8005eb0:	460b      	mov	r3, r1
 8005eb2:	4313      	orrs	r3, r2
 8005eb4:	d01e      	beq.n	8005ef4 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8005eb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005eba:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005ebe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005ec2:	d10c      	bne.n	8005ede <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005ec4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ec8:	3328      	adds	r3, #40	@ 0x28
 8005eca:	2102      	movs	r1, #2
 8005ecc:	4618      	mov	r0, r3
 8005ece:	f000 fe25 	bl	8006b1c <RCCEx_PLL3_Config>
 8005ed2:	4603      	mov	r3, r0
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d002      	beq.n	8005ede <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8005ed8:	2301      	movs	r3, #1
 8005eda:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005ede:	4b70      	ldr	r3, [pc, #448]	@ (80060a0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005ee0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ee2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005ee6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005eea:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005eee:	4a6c      	ldr	r2, [pc, #432]	@ (80060a0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005ef0:	430b      	orrs	r3, r1
 8005ef2:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005ef4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ef8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005efc:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8005f00:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005f04:	2300      	movs	r3, #0
 8005f06:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005f0a:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8005f0e:	460b      	mov	r3, r1
 8005f10:	4313      	orrs	r3, r2
 8005f12:	d03e      	beq.n	8005f92 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8005f14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f18:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005f1c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005f20:	d022      	beq.n	8005f68 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8005f22:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005f26:	d81b      	bhi.n	8005f60 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d003      	beq.n	8005f34 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8005f2c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005f30:	d00b      	beq.n	8005f4a <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8005f32:	e015      	b.n	8005f60 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005f34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f38:	3308      	adds	r3, #8
 8005f3a:	2100      	movs	r1, #0
 8005f3c:	4618      	mov	r0, r3
 8005f3e:	f000 fd3b 	bl	80069b8 <RCCEx_PLL2_Config>
 8005f42:	4603      	mov	r3, r0
 8005f44:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8005f48:	e00f      	b.n	8005f6a <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005f4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f4e:	3328      	adds	r3, #40	@ 0x28
 8005f50:	2102      	movs	r1, #2
 8005f52:	4618      	mov	r0, r3
 8005f54:	f000 fde2 	bl	8006b1c <RCCEx_PLL3_Config>
 8005f58:	4603      	mov	r3, r0
 8005f5a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8005f5e:	e004      	b.n	8005f6a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005f60:	2301      	movs	r3, #1
 8005f62:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005f66:	e000      	b.n	8005f6a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8005f68:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005f6a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d10b      	bne.n	8005f8a <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005f72:	4b4b      	ldr	r3, [pc, #300]	@ (80060a0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005f74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f76:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8005f7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f7e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005f82:	4a47      	ldr	r2, [pc, #284]	@ (80060a0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005f84:	430b      	orrs	r3, r1
 8005f86:	6593      	str	r3, [r2, #88]	@ 0x58
 8005f88:	e003      	b.n	8005f92 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f8a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005f8e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005f92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f9a:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8005f9e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005fa0:	2300      	movs	r3, #0
 8005fa2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005fa4:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8005fa8:	460b      	mov	r3, r1
 8005faa:	4313      	orrs	r3, r2
 8005fac:	d03b      	beq.n	8006026 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8005fae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005fb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005fb6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005fba:	d01f      	beq.n	8005ffc <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8005fbc:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005fc0:	d818      	bhi.n	8005ff4 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8005fc2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005fc6:	d003      	beq.n	8005fd0 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8005fc8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005fcc:	d007      	beq.n	8005fde <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8005fce:	e011      	b.n	8005ff4 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005fd0:	4b33      	ldr	r3, [pc, #204]	@ (80060a0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005fd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fd4:	4a32      	ldr	r2, [pc, #200]	@ (80060a0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005fd6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005fda:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8005fdc:	e00f      	b.n	8005ffe <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005fde:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005fe2:	3328      	adds	r3, #40	@ 0x28
 8005fe4:	2101      	movs	r1, #1
 8005fe6:	4618      	mov	r0, r3
 8005fe8:	f000 fd98 	bl	8006b1c <RCCEx_PLL3_Config>
 8005fec:	4603      	mov	r3, r0
 8005fee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8005ff2:	e004      	b.n	8005ffe <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005ff4:	2301      	movs	r3, #1
 8005ff6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005ffa:	e000      	b.n	8005ffe <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8005ffc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005ffe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006002:	2b00      	cmp	r3, #0
 8006004:	d10b      	bne.n	800601e <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006006:	4b26      	ldr	r3, [pc, #152]	@ (80060a0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006008:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800600a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800600e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006012:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006016:	4a22      	ldr	r2, [pc, #136]	@ (80060a0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006018:	430b      	orrs	r3, r1
 800601a:	6553      	str	r3, [r2, #84]	@ 0x54
 800601c:	e003      	b.n	8006026 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800601e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006022:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8006026:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800602a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800602e:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8006032:	673b      	str	r3, [r7, #112]	@ 0x70
 8006034:	2300      	movs	r3, #0
 8006036:	677b      	str	r3, [r7, #116]	@ 0x74
 8006038:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800603c:	460b      	mov	r3, r1
 800603e:	4313      	orrs	r3, r2
 8006040:	d034      	beq.n	80060ac <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8006042:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006046:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006048:	2b00      	cmp	r3, #0
 800604a:	d003      	beq.n	8006054 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800604c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006050:	d007      	beq.n	8006062 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8006052:	e011      	b.n	8006078 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006054:	4b12      	ldr	r3, [pc, #72]	@ (80060a0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006056:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006058:	4a11      	ldr	r2, [pc, #68]	@ (80060a0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800605a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800605e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006060:	e00e      	b.n	8006080 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006062:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006066:	3308      	adds	r3, #8
 8006068:	2102      	movs	r1, #2
 800606a:	4618      	mov	r0, r3
 800606c:	f000 fca4 	bl	80069b8 <RCCEx_PLL2_Config>
 8006070:	4603      	mov	r3, r0
 8006072:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006076:	e003      	b.n	8006080 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8006078:	2301      	movs	r3, #1
 800607a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800607e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006080:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006084:	2b00      	cmp	r3, #0
 8006086:	d10d      	bne.n	80060a4 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006088:	4b05      	ldr	r3, [pc, #20]	@ (80060a0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800608a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800608c:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006090:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006094:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006096:	4a02      	ldr	r2, [pc, #8]	@ (80060a0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006098:	430b      	orrs	r3, r1
 800609a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800609c:	e006      	b.n	80060ac <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800609e:	bf00      	nop
 80060a0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060a4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80060a8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80060ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060b4:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80060b8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80060ba:	2300      	movs	r3, #0
 80060bc:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80060be:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80060c2:	460b      	mov	r3, r1
 80060c4:	4313      	orrs	r3, r2
 80060c6:	d00c      	beq.n	80060e2 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80060c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060cc:	3328      	adds	r3, #40	@ 0x28
 80060ce:	2102      	movs	r1, #2
 80060d0:	4618      	mov	r0, r3
 80060d2:	f000 fd23 	bl	8006b1c <RCCEx_PLL3_Config>
 80060d6:	4603      	mov	r3, r0
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d002      	beq.n	80060e2 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 80060dc:	2301      	movs	r3, #1
 80060de:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80060e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060ea:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80060ee:	663b      	str	r3, [r7, #96]	@ 0x60
 80060f0:	2300      	movs	r3, #0
 80060f2:	667b      	str	r3, [r7, #100]	@ 0x64
 80060f4:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80060f8:	460b      	mov	r3, r1
 80060fa:	4313      	orrs	r3, r2
 80060fc:	d038      	beq.n	8006170 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 80060fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006102:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006106:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800610a:	d018      	beq.n	800613e <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800610c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006110:	d811      	bhi.n	8006136 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8006112:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006116:	d014      	beq.n	8006142 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8006118:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800611c:	d80b      	bhi.n	8006136 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800611e:	2b00      	cmp	r3, #0
 8006120:	d011      	beq.n	8006146 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8006122:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006126:	d106      	bne.n	8006136 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006128:	4bc3      	ldr	r3, [pc, #780]	@ (8006438 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800612a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800612c:	4ac2      	ldr	r2, [pc, #776]	@ (8006438 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800612e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006132:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8006134:	e008      	b.n	8006148 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006136:	2301      	movs	r3, #1
 8006138:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800613c:	e004      	b.n	8006148 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800613e:	bf00      	nop
 8006140:	e002      	b.n	8006148 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8006142:	bf00      	nop
 8006144:	e000      	b.n	8006148 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8006146:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006148:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800614c:	2b00      	cmp	r3, #0
 800614e:	d10b      	bne.n	8006168 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006150:	4bb9      	ldr	r3, [pc, #740]	@ (8006438 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006152:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006154:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006158:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800615c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006160:	4ab5      	ldr	r2, [pc, #724]	@ (8006438 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006162:	430b      	orrs	r3, r1
 8006164:	6553      	str	r3, [r2, #84]	@ 0x54
 8006166:	e003      	b.n	8006170 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006168:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800616c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006170:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006174:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006178:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800617c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800617e:	2300      	movs	r3, #0
 8006180:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006182:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8006186:	460b      	mov	r3, r1
 8006188:	4313      	orrs	r3, r2
 800618a:	d009      	beq.n	80061a0 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800618c:	4baa      	ldr	r3, [pc, #680]	@ (8006438 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800618e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006190:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8006194:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006198:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800619a:	4aa7      	ldr	r2, [pc, #668]	@ (8006438 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800619c:	430b      	orrs	r3, r1
 800619e:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80061a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061a8:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 80061ac:	653b      	str	r3, [r7, #80]	@ 0x50
 80061ae:	2300      	movs	r3, #0
 80061b0:	657b      	str	r3, [r7, #84]	@ 0x54
 80061b2:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80061b6:	460b      	mov	r3, r1
 80061b8:	4313      	orrs	r3, r2
 80061ba:	d00a      	beq.n	80061d2 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80061bc:	4b9e      	ldr	r3, [pc, #632]	@ (8006438 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80061be:	691b      	ldr	r3, [r3, #16]
 80061c0:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 80061c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061c8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80061cc:	4a9a      	ldr	r2, [pc, #616]	@ (8006438 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80061ce:	430b      	orrs	r3, r1
 80061d0:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80061d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061da:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80061de:	64bb      	str	r3, [r7, #72]	@ 0x48
 80061e0:	2300      	movs	r3, #0
 80061e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80061e4:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80061e8:	460b      	mov	r3, r1
 80061ea:	4313      	orrs	r3, r2
 80061ec:	d009      	beq.n	8006202 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80061ee:	4b92      	ldr	r3, [pc, #584]	@ (8006438 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80061f0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80061f2:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 80061f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061fa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80061fc:	4a8e      	ldr	r2, [pc, #568]	@ (8006438 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80061fe:	430b      	orrs	r3, r1
 8006200:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8006202:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006206:	e9d3 2300 	ldrd	r2, r3, [r3]
 800620a:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800620e:	643b      	str	r3, [r7, #64]	@ 0x40
 8006210:	2300      	movs	r3, #0
 8006212:	647b      	str	r3, [r7, #68]	@ 0x44
 8006214:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8006218:	460b      	mov	r3, r1
 800621a:	4313      	orrs	r3, r2
 800621c:	d00e      	beq.n	800623c <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800621e:	4b86      	ldr	r3, [pc, #536]	@ (8006438 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006220:	691b      	ldr	r3, [r3, #16]
 8006222:	4a85      	ldr	r2, [pc, #532]	@ (8006438 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006224:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006228:	6113      	str	r3, [r2, #16]
 800622a:	4b83      	ldr	r3, [pc, #524]	@ (8006438 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800622c:	6919      	ldr	r1, [r3, #16]
 800622e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006232:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8006236:	4a80      	ldr	r2, [pc, #512]	@ (8006438 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006238:	430b      	orrs	r3, r1
 800623a:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800623c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006240:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006244:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8006248:	63bb      	str	r3, [r7, #56]	@ 0x38
 800624a:	2300      	movs	r3, #0
 800624c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800624e:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8006252:	460b      	mov	r3, r1
 8006254:	4313      	orrs	r3, r2
 8006256:	d009      	beq.n	800626c <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006258:	4b77      	ldr	r3, [pc, #476]	@ (8006438 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800625a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800625c:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8006260:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006264:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006266:	4a74      	ldr	r2, [pc, #464]	@ (8006438 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006268:	430b      	orrs	r3, r1
 800626a:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800626c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006270:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006274:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8006278:	633b      	str	r3, [r7, #48]	@ 0x30
 800627a:	2300      	movs	r3, #0
 800627c:	637b      	str	r3, [r7, #52]	@ 0x34
 800627e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8006282:	460b      	mov	r3, r1
 8006284:	4313      	orrs	r3, r2
 8006286:	d00a      	beq.n	800629e <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006288:	4b6b      	ldr	r3, [pc, #428]	@ (8006438 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800628a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800628c:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8006290:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006294:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006298:	4a67      	ldr	r2, [pc, #412]	@ (8006438 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800629a:	430b      	orrs	r3, r1
 800629c:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800629e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062a6:	2100      	movs	r1, #0
 80062a8:	62b9      	str	r1, [r7, #40]	@ 0x28
 80062aa:	f003 0301 	and.w	r3, r3, #1
 80062ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80062b0:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80062b4:	460b      	mov	r3, r1
 80062b6:	4313      	orrs	r3, r2
 80062b8:	d011      	beq.n	80062de <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80062ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062be:	3308      	adds	r3, #8
 80062c0:	2100      	movs	r1, #0
 80062c2:	4618      	mov	r0, r3
 80062c4:	f000 fb78 	bl	80069b8 <RCCEx_PLL2_Config>
 80062c8:	4603      	mov	r3, r0
 80062ca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80062ce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d003      	beq.n	80062de <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062d6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80062da:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80062de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062e6:	2100      	movs	r1, #0
 80062e8:	6239      	str	r1, [r7, #32]
 80062ea:	f003 0302 	and.w	r3, r3, #2
 80062ee:	627b      	str	r3, [r7, #36]	@ 0x24
 80062f0:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80062f4:	460b      	mov	r3, r1
 80062f6:	4313      	orrs	r3, r2
 80062f8:	d011      	beq.n	800631e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80062fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062fe:	3308      	adds	r3, #8
 8006300:	2101      	movs	r1, #1
 8006302:	4618      	mov	r0, r3
 8006304:	f000 fb58 	bl	80069b8 <RCCEx_PLL2_Config>
 8006308:	4603      	mov	r3, r0
 800630a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800630e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006312:	2b00      	cmp	r3, #0
 8006314:	d003      	beq.n	800631e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006316:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800631a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800631e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006322:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006326:	2100      	movs	r1, #0
 8006328:	61b9      	str	r1, [r7, #24]
 800632a:	f003 0304 	and.w	r3, r3, #4
 800632e:	61fb      	str	r3, [r7, #28]
 8006330:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8006334:	460b      	mov	r3, r1
 8006336:	4313      	orrs	r3, r2
 8006338:	d011      	beq.n	800635e <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800633a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800633e:	3308      	adds	r3, #8
 8006340:	2102      	movs	r1, #2
 8006342:	4618      	mov	r0, r3
 8006344:	f000 fb38 	bl	80069b8 <RCCEx_PLL2_Config>
 8006348:	4603      	mov	r3, r0
 800634a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800634e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006352:	2b00      	cmp	r3, #0
 8006354:	d003      	beq.n	800635e <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006356:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800635a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800635e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006362:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006366:	2100      	movs	r1, #0
 8006368:	6139      	str	r1, [r7, #16]
 800636a:	f003 0308 	and.w	r3, r3, #8
 800636e:	617b      	str	r3, [r7, #20]
 8006370:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8006374:	460b      	mov	r3, r1
 8006376:	4313      	orrs	r3, r2
 8006378:	d011      	beq.n	800639e <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800637a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800637e:	3328      	adds	r3, #40	@ 0x28
 8006380:	2100      	movs	r1, #0
 8006382:	4618      	mov	r0, r3
 8006384:	f000 fbca 	bl	8006b1c <RCCEx_PLL3_Config>
 8006388:	4603      	mov	r3, r0
 800638a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 800638e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006392:	2b00      	cmp	r3, #0
 8006394:	d003      	beq.n	800639e <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006396:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800639a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800639e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80063a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063a6:	2100      	movs	r1, #0
 80063a8:	60b9      	str	r1, [r7, #8]
 80063aa:	f003 0310 	and.w	r3, r3, #16
 80063ae:	60fb      	str	r3, [r7, #12]
 80063b0:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80063b4:	460b      	mov	r3, r1
 80063b6:	4313      	orrs	r3, r2
 80063b8:	d011      	beq.n	80063de <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80063ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80063be:	3328      	adds	r3, #40	@ 0x28
 80063c0:	2101      	movs	r1, #1
 80063c2:	4618      	mov	r0, r3
 80063c4:	f000 fbaa 	bl	8006b1c <RCCEx_PLL3_Config>
 80063c8:	4603      	mov	r3, r0
 80063ca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80063ce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d003      	beq.n	80063de <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063d6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80063da:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80063de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80063e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063e6:	2100      	movs	r1, #0
 80063e8:	6039      	str	r1, [r7, #0]
 80063ea:	f003 0320 	and.w	r3, r3, #32
 80063ee:	607b      	str	r3, [r7, #4]
 80063f0:	e9d7 1200 	ldrd	r1, r2, [r7]
 80063f4:	460b      	mov	r3, r1
 80063f6:	4313      	orrs	r3, r2
 80063f8:	d011      	beq.n	800641e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80063fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80063fe:	3328      	adds	r3, #40	@ 0x28
 8006400:	2102      	movs	r1, #2
 8006402:	4618      	mov	r0, r3
 8006404:	f000 fb8a 	bl	8006b1c <RCCEx_PLL3_Config>
 8006408:	4603      	mov	r3, r0
 800640a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800640e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006412:	2b00      	cmp	r3, #0
 8006414:	d003      	beq.n	800641e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006416:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800641a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 800641e:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8006422:	2b00      	cmp	r3, #0
 8006424:	d101      	bne.n	800642a <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8006426:	2300      	movs	r3, #0
 8006428:	e000      	b.n	800642c <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800642a:	2301      	movs	r3, #1
}
 800642c:	4618      	mov	r0, r3
 800642e:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8006432:	46bd      	mov	sp, r7
 8006434:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006438:	58024400 	.word	0x58024400

0800643c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800643c:	b580      	push	{r7, lr}
 800643e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8006440:	f7fe fd96 	bl	8004f70 <HAL_RCC_GetHCLKFreq>
 8006444:	4602      	mov	r2, r0
 8006446:	4b06      	ldr	r3, [pc, #24]	@ (8006460 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8006448:	6a1b      	ldr	r3, [r3, #32]
 800644a:	091b      	lsrs	r3, r3, #4
 800644c:	f003 0307 	and.w	r3, r3, #7
 8006450:	4904      	ldr	r1, [pc, #16]	@ (8006464 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8006452:	5ccb      	ldrb	r3, [r1, r3]
 8006454:	f003 031f 	and.w	r3, r3, #31
 8006458:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800645c:	4618      	mov	r0, r3
 800645e:	bd80      	pop	{r7, pc}
 8006460:	58024400 	.word	0x58024400
 8006464:	0800a130 	.word	0x0800a130

08006468 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8006468:	b480      	push	{r7}
 800646a:	b089      	sub	sp, #36	@ 0x24
 800646c:	af00      	add	r7, sp, #0
 800646e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006470:	4ba1      	ldr	r3, [pc, #644]	@ (80066f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006472:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006474:	f003 0303 	and.w	r3, r3, #3
 8006478:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800647a:	4b9f      	ldr	r3, [pc, #636]	@ (80066f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800647c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800647e:	0b1b      	lsrs	r3, r3, #12
 8006480:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006484:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8006486:	4b9c      	ldr	r3, [pc, #624]	@ (80066f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006488:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800648a:	091b      	lsrs	r3, r3, #4
 800648c:	f003 0301 	and.w	r3, r3, #1
 8006490:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8006492:	4b99      	ldr	r3, [pc, #612]	@ (80066f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006494:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006496:	08db      	lsrs	r3, r3, #3
 8006498:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800649c:	693a      	ldr	r2, [r7, #16]
 800649e:	fb02 f303 	mul.w	r3, r2, r3
 80064a2:	ee07 3a90 	vmov	s15, r3
 80064a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80064aa:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80064ae:	697b      	ldr	r3, [r7, #20]
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	f000 8111 	beq.w	80066d8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80064b6:	69bb      	ldr	r3, [r7, #24]
 80064b8:	2b02      	cmp	r3, #2
 80064ba:	f000 8083 	beq.w	80065c4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80064be:	69bb      	ldr	r3, [r7, #24]
 80064c0:	2b02      	cmp	r3, #2
 80064c2:	f200 80a1 	bhi.w	8006608 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80064c6:	69bb      	ldr	r3, [r7, #24]
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d003      	beq.n	80064d4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80064cc:	69bb      	ldr	r3, [r7, #24]
 80064ce:	2b01      	cmp	r3, #1
 80064d0:	d056      	beq.n	8006580 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80064d2:	e099      	b.n	8006608 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80064d4:	4b88      	ldr	r3, [pc, #544]	@ (80066f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	f003 0320 	and.w	r3, r3, #32
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d02d      	beq.n	800653c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80064e0:	4b85      	ldr	r3, [pc, #532]	@ (80066f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	08db      	lsrs	r3, r3, #3
 80064e6:	f003 0303 	and.w	r3, r3, #3
 80064ea:	4a84      	ldr	r2, [pc, #528]	@ (80066fc <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80064ec:	fa22 f303 	lsr.w	r3, r2, r3
 80064f0:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80064f2:	68bb      	ldr	r3, [r7, #8]
 80064f4:	ee07 3a90 	vmov	s15, r3
 80064f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80064fc:	697b      	ldr	r3, [r7, #20]
 80064fe:	ee07 3a90 	vmov	s15, r3
 8006502:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006506:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800650a:	4b7b      	ldr	r3, [pc, #492]	@ (80066f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800650c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800650e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006512:	ee07 3a90 	vmov	s15, r3
 8006516:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800651a:	ed97 6a03 	vldr	s12, [r7, #12]
 800651e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8006700 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006522:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006526:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800652a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800652e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006532:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006536:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800653a:	e087      	b.n	800664c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800653c:	697b      	ldr	r3, [r7, #20]
 800653e:	ee07 3a90 	vmov	s15, r3
 8006542:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006546:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8006704 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800654a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800654e:	4b6a      	ldr	r3, [pc, #424]	@ (80066f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006550:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006552:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006556:	ee07 3a90 	vmov	s15, r3
 800655a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800655e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006562:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8006700 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006566:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800656a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800656e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006572:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006576:	ee67 7a27 	vmul.f32	s15, s14, s15
 800657a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800657e:	e065      	b.n	800664c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006580:	697b      	ldr	r3, [r7, #20]
 8006582:	ee07 3a90 	vmov	s15, r3
 8006586:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800658a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8006708 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800658e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006592:	4b59      	ldr	r3, [pc, #356]	@ (80066f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006594:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006596:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800659a:	ee07 3a90 	vmov	s15, r3
 800659e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80065a2:	ed97 6a03 	vldr	s12, [r7, #12]
 80065a6:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8006700 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80065aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80065ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80065b2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80065b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80065ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80065be:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80065c2:	e043      	b.n	800664c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80065c4:	697b      	ldr	r3, [r7, #20]
 80065c6:	ee07 3a90 	vmov	s15, r3
 80065ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80065ce:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800670c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80065d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80065d6:	4b48      	ldr	r3, [pc, #288]	@ (80066f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80065d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80065de:	ee07 3a90 	vmov	s15, r3
 80065e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80065e6:	ed97 6a03 	vldr	s12, [r7, #12]
 80065ea:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8006700 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80065ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80065f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80065f6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80065fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80065fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006602:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006606:	e021      	b.n	800664c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006608:	697b      	ldr	r3, [r7, #20]
 800660a:	ee07 3a90 	vmov	s15, r3
 800660e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006612:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8006708 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006616:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800661a:	4b37      	ldr	r3, [pc, #220]	@ (80066f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800661c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800661e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006622:	ee07 3a90 	vmov	s15, r3
 8006626:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800662a:	ed97 6a03 	vldr	s12, [r7, #12]
 800662e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8006700 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006632:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006636:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800663a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800663e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006642:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006646:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800664a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800664c:	4b2a      	ldr	r3, [pc, #168]	@ (80066f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800664e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006650:	0a5b      	lsrs	r3, r3, #9
 8006652:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006656:	ee07 3a90 	vmov	s15, r3
 800665a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800665e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006662:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006666:	edd7 6a07 	vldr	s13, [r7, #28]
 800666a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800666e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006672:	ee17 2a90 	vmov	r2, s15
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800667a:	4b1f      	ldr	r3, [pc, #124]	@ (80066f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800667c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800667e:	0c1b      	lsrs	r3, r3, #16
 8006680:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006684:	ee07 3a90 	vmov	s15, r3
 8006688:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800668c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006690:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006694:	edd7 6a07 	vldr	s13, [r7, #28]
 8006698:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800669c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80066a0:	ee17 2a90 	vmov	r2, s15
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80066a8:	4b13      	ldr	r3, [pc, #76]	@ (80066f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80066aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80066ac:	0e1b      	lsrs	r3, r3, #24
 80066ae:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80066b2:	ee07 3a90 	vmov	s15, r3
 80066b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80066ba:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80066be:	ee37 7a87 	vadd.f32	s14, s15, s14
 80066c2:	edd7 6a07 	vldr	s13, [r7, #28]
 80066c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80066ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80066ce:	ee17 2a90 	vmov	r2, s15
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80066d6:	e008      	b.n	80066ea <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	2200      	movs	r2, #0
 80066dc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	2200      	movs	r2, #0
 80066e2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	2200      	movs	r2, #0
 80066e8:	609a      	str	r2, [r3, #8]
}
 80066ea:	bf00      	nop
 80066ec:	3724      	adds	r7, #36	@ 0x24
 80066ee:	46bd      	mov	sp, r7
 80066f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f4:	4770      	bx	lr
 80066f6:	bf00      	nop
 80066f8:	58024400 	.word	0x58024400
 80066fc:	03d09000 	.word	0x03d09000
 8006700:	46000000 	.word	0x46000000
 8006704:	4c742400 	.word	0x4c742400
 8006708:	4a742400 	.word	0x4a742400
 800670c:	4bbebc20 	.word	0x4bbebc20

08006710 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8006710:	b480      	push	{r7}
 8006712:	b089      	sub	sp, #36	@ 0x24
 8006714:	af00      	add	r7, sp, #0
 8006716:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006718:	4ba1      	ldr	r3, [pc, #644]	@ (80069a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800671a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800671c:	f003 0303 	and.w	r3, r3, #3
 8006720:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8006722:	4b9f      	ldr	r3, [pc, #636]	@ (80069a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006724:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006726:	0d1b      	lsrs	r3, r3, #20
 8006728:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800672c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800672e:	4b9c      	ldr	r3, [pc, #624]	@ (80069a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006730:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006732:	0a1b      	lsrs	r3, r3, #8
 8006734:	f003 0301 	and.w	r3, r3, #1
 8006738:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800673a:	4b99      	ldr	r3, [pc, #612]	@ (80069a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800673c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800673e:	08db      	lsrs	r3, r3, #3
 8006740:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006744:	693a      	ldr	r2, [r7, #16]
 8006746:	fb02 f303 	mul.w	r3, r2, r3
 800674a:	ee07 3a90 	vmov	s15, r3
 800674e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006752:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8006756:	697b      	ldr	r3, [r7, #20]
 8006758:	2b00      	cmp	r3, #0
 800675a:	f000 8111 	beq.w	8006980 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800675e:	69bb      	ldr	r3, [r7, #24]
 8006760:	2b02      	cmp	r3, #2
 8006762:	f000 8083 	beq.w	800686c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8006766:	69bb      	ldr	r3, [r7, #24]
 8006768:	2b02      	cmp	r3, #2
 800676a:	f200 80a1 	bhi.w	80068b0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800676e:	69bb      	ldr	r3, [r7, #24]
 8006770:	2b00      	cmp	r3, #0
 8006772:	d003      	beq.n	800677c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8006774:	69bb      	ldr	r3, [r7, #24]
 8006776:	2b01      	cmp	r3, #1
 8006778:	d056      	beq.n	8006828 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800677a:	e099      	b.n	80068b0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800677c:	4b88      	ldr	r3, [pc, #544]	@ (80069a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	f003 0320 	and.w	r3, r3, #32
 8006784:	2b00      	cmp	r3, #0
 8006786:	d02d      	beq.n	80067e4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006788:	4b85      	ldr	r3, [pc, #532]	@ (80069a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	08db      	lsrs	r3, r3, #3
 800678e:	f003 0303 	and.w	r3, r3, #3
 8006792:	4a84      	ldr	r2, [pc, #528]	@ (80069a4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8006794:	fa22 f303 	lsr.w	r3, r2, r3
 8006798:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800679a:	68bb      	ldr	r3, [r7, #8]
 800679c:	ee07 3a90 	vmov	s15, r3
 80067a0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80067a4:	697b      	ldr	r3, [r7, #20]
 80067a6:	ee07 3a90 	vmov	s15, r3
 80067aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80067ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80067b2:	4b7b      	ldr	r3, [pc, #492]	@ (80069a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80067b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80067ba:	ee07 3a90 	vmov	s15, r3
 80067be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80067c2:	ed97 6a03 	vldr	s12, [r7, #12]
 80067c6:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80069a8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80067ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80067ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80067d2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80067d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80067da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80067de:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80067e2:	e087      	b.n	80068f4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80067e4:	697b      	ldr	r3, [r7, #20]
 80067e6:	ee07 3a90 	vmov	s15, r3
 80067ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80067ee:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80069ac <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80067f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80067f6:	4b6a      	ldr	r3, [pc, #424]	@ (80069a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80067f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80067fe:	ee07 3a90 	vmov	s15, r3
 8006802:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006806:	ed97 6a03 	vldr	s12, [r7, #12]
 800680a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80069a8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800680e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006812:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006816:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800681a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800681e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006822:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006826:	e065      	b.n	80068f4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006828:	697b      	ldr	r3, [r7, #20]
 800682a:	ee07 3a90 	vmov	s15, r3
 800682e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006832:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80069b0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006836:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800683a:	4b59      	ldr	r3, [pc, #356]	@ (80069a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800683c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800683e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006842:	ee07 3a90 	vmov	s15, r3
 8006846:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800684a:	ed97 6a03 	vldr	s12, [r7, #12]
 800684e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80069a8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006852:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006856:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800685a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800685e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006862:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006866:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800686a:	e043      	b.n	80068f4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800686c:	697b      	ldr	r3, [r7, #20]
 800686e:	ee07 3a90 	vmov	s15, r3
 8006872:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006876:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80069b4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800687a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800687e:	4b48      	ldr	r3, [pc, #288]	@ (80069a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006880:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006882:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006886:	ee07 3a90 	vmov	s15, r3
 800688a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800688e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006892:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80069a8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006896:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800689a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800689e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80068a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80068a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80068aa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80068ae:	e021      	b.n	80068f4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80068b0:	697b      	ldr	r3, [r7, #20]
 80068b2:	ee07 3a90 	vmov	s15, r3
 80068b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80068ba:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80069b0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80068be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80068c2:	4b37      	ldr	r3, [pc, #220]	@ (80069a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80068c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80068ca:	ee07 3a90 	vmov	s15, r3
 80068ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80068d2:	ed97 6a03 	vldr	s12, [r7, #12]
 80068d6:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80069a8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80068da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80068de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80068e2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80068e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80068ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80068ee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80068f2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80068f4:	4b2a      	ldr	r3, [pc, #168]	@ (80069a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80068f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068f8:	0a5b      	lsrs	r3, r3, #9
 80068fa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80068fe:	ee07 3a90 	vmov	s15, r3
 8006902:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006906:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800690a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800690e:	edd7 6a07 	vldr	s13, [r7, #28]
 8006912:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006916:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800691a:	ee17 2a90 	vmov	r2, s15
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8006922:	4b1f      	ldr	r3, [pc, #124]	@ (80069a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006924:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006926:	0c1b      	lsrs	r3, r3, #16
 8006928:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800692c:	ee07 3a90 	vmov	s15, r3
 8006930:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006934:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006938:	ee37 7a87 	vadd.f32	s14, s15, s14
 800693c:	edd7 6a07 	vldr	s13, [r7, #28]
 8006940:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006944:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006948:	ee17 2a90 	vmov	r2, s15
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8006950:	4b13      	ldr	r3, [pc, #76]	@ (80069a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006952:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006954:	0e1b      	lsrs	r3, r3, #24
 8006956:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800695a:	ee07 3a90 	vmov	s15, r3
 800695e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006962:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006966:	ee37 7a87 	vadd.f32	s14, s15, s14
 800696a:	edd7 6a07 	vldr	s13, [r7, #28]
 800696e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006972:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006976:	ee17 2a90 	vmov	r2, s15
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800697e:	e008      	b.n	8006992 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	2200      	movs	r2, #0
 8006984:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	2200      	movs	r2, #0
 800698a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	2200      	movs	r2, #0
 8006990:	609a      	str	r2, [r3, #8]
}
 8006992:	bf00      	nop
 8006994:	3724      	adds	r7, #36	@ 0x24
 8006996:	46bd      	mov	sp, r7
 8006998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800699c:	4770      	bx	lr
 800699e:	bf00      	nop
 80069a0:	58024400 	.word	0x58024400
 80069a4:	03d09000 	.word	0x03d09000
 80069a8:	46000000 	.word	0x46000000
 80069ac:	4c742400 	.word	0x4c742400
 80069b0:	4a742400 	.word	0x4a742400
 80069b4:	4bbebc20 	.word	0x4bbebc20

080069b8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80069b8:	b580      	push	{r7, lr}
 80069ba:	b084      	sub	sp, #16
 80069bc:	af00      	add	r7, sp, #0
 80069be:	6078      	str	r0, [r7, #4]
 80069c0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80069c2:	2300      	movs	r3, #0
 80069c4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80069c6:	4b53      	ldr	r3, [pc, #332]	@ (8006b14 <RCCEx_PLL2_Config+0x15c>)
 80069c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069ca:	f003 0303 	and.w	r3, r3, #3
 80069ce:	2b03      	cmp	r3, #3
 80069d0:	d101      	bne.n	80069d6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80069d2:	2301      	movs	r3, #1
 80069d4:	e099      	b.n	8006b0a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80069d6:	4b4f      	ldr	r3, [pc, #316]	@ (8006b14 <RCCEx_PLL2_Config+0x15c>)
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	4a4e      	ldr	r2, [pc, #312]	@ (8006b14 <RCCEx_PLL2_Config+0x15c>)
 80069dc:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80069e0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80069e2:	f7fa fd4d 	bl	8001480 <HAL_GetTick>
 80069e6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80069e8:	e008      	b.n	80069fc <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80069ea:	f7fa fd49 	bl	8001480 <HAL_GetTick>
 80069ee:	4602      	mov	r2, r0
 80069f0:	68bb      	ldr	r3, [r7, #8]
 80069f2:	1ad3      	subs	r3, r2, r3
 80069f4:	2b02      	cmp	r3, #2
 80069f6:	d901      	bls.n	80069fc <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80069f8:	2303      	movs	r3, #3
 80069fa:	e086      	b.n	8006b0a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80069fc:	4b45      	ldr	r3, [pc, #276]	@ (8006b14 <RCCEx_PLL2_Config+0x15c>)
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d1f0      	bne.n	80069ea <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8006a08:	4b42      	ldr	r3, [pc, #264]	@ (8006b14 <RCCEx_PLL2_Config+0x15c>)
 8006a0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a0c:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	031b      	lsls	r3, r3, #12
 8006a16:	493f      	ldr	r1, [pc, #252]	@ (8006b14 <RCCEx_PLL2_Config+0x15c>)
 8006a18:	4313      	orrs	r3, r2
 8006a1a:	628b      	str	r3, [r1, #40]	@ 0x28
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	685b      	ldr	r3, [r3, #4]
 8006a20:	3b01      	subs	r3, #1
 8006a22:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	689b      	ldr	r3, [r3, #8]
 8006a2a:	3b01      	subs	r3, #1
 8006a2c:	025b      	lsls	r3, r3, #9
 8006a2e:	b29b      	uxth	r3, r3
 8006a30:	431a      	orrs	r2, r3
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	68db      	ldr	r3, [r3, #12]
 8006a36:	3b01      	subs	r3, #1
 8006a38:	041b      	lsls	r3, r3, #16
 8006a3a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006a3e:	431a      	orrs	r2, r3
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	691b      	ldr	r3, [r3, #16]
 8006a44:	3b01      	subs	r3, #1
 8006a46:	061b      	lsls	r3, r3, #24
 8006a48:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006a4c:	4931      	ldr	r1, [pc, #196]	@ (8006b14 <RCCEx_PLL2_Config+0x15c>)
 8006a4e:	4313      	orrs	r3, r2
 8006a50:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8006a52:	4b30      	ldr	r3, [pc, #192]	@ (8006b14 <RCCEx_PLL2_Config+0x15c>)
 8006a54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a56:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	695b      	ldr	r3, [r3, #20]
 8006a5e:	492d      	ldr	r1, [pc, #180]	@ (8006b14 <RCCEx_PLL2_Config+0x15c>)
 8006a60:	4313      	orrs	r3, r2
 8006a62:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8006a64:	4b2b      	ldr	r3, [pc, #172]	@ (8006b14 <RCCEx_PLL2_Config+0x15c>)
 8006a66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a68:	f023 0220 	bic.w	r2, r3, #32
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	699b      	ldr	r3, [r3, #24]
 8006a70:	4928      	ldr	r1, [pc, #160]	@ (8006b14 <RCCEx_PLL2_Config+0x15c>)
 8006a72:	4313      	orrs	r3, r2
 8006a74:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8006a76:	4b27      	ldr	r3, [pc, #156]	@ (8006b14 <RCCEx_PLL2_Config+0x15c>)
 8006a78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a7a:	4a26      	ldr	r2, [pc, #152]	@ (8006b14 <RCCEx_PLL2_Config+0x15c>)
 8006a7c:	f023 0310 	bic.w	r3, r3, #16
 8006a80:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8006a82:	4b24      	ldr	r3, [pc, #144]	@ (8006b14 <RCCEx_PLL2_Config+0x15c>)
 8006a84:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006a86:	4b24      	ldr	r3, [pc, #144]	@ (8006b18 <RCCEx_PLL2_Config+0x160>)
 8006a88:	4013      	ands	r3, r2
 8006a8a:	687a      	ldr	r2, [r7, #4]
 8006a8c:	69d2      	ldr	r2, [r2, #28]
 8006a8e:	00d2      	lsls	r2, r2, #3
 8006a90:	4920      	ldr	r1, [pc, #128]	@ (8006b14 <RCCEx_PLL2_Config+0x15c>)
 8006a92:	4313      	orrs	r3, r2
 8006a94:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8006a96:	4b1f      	ldr	r3, [pc, #124]	@ (8006b14 <RCCEx_PLL2_Config+0x15c>)
 8006a98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a9a:	4a1e      	ldr	r2, [pc, #120]	@ (8006b14 <RCCEx_PLL2_Config+0x15c>)
 8006a9c:	f043 0310 	orr.w	r3, r3, #16
 8006aa0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8006aa2:	683b      	ldr	r3, [r7, #0]
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d106      	bne.n	8006ab6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8006aa8:	4b1a      	ldr	r3, [pc, #104]	@ (8006b14 <RCCEx_PLL2_Config+0x15c>)
 8006aaa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006aac:	4a19      	ldr	r2, [pc, #100]	@ (8006b14 <RCCEx_PLL2_Config+0x15c>)
 8006aae:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006ab2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006ab4:	e00f      	b.n	8006ad6 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8006ab6:	683b      	ldr	r3, [r7, #0]
 8006ab8:	2b01      	cmp	r3, #1
 8006aba:	d106      	bne.n	8006aca <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8006abc:	4b15      	ldr	r3, [pc, #84]	@ (8006b14 <RCCEx_PLL2_Config+0x15c>)
 8006abe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ac0:	4a14      	ldr	r2, [pc, #80]	@ (8006b14 <RCCEx_PLL2_Config+0x15c>)
 8006ac2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006ac6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006ac8:	e005      	b.n	8006ad6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8006aca:	4b12      	ldr	r3, [pc, #72]	@ (8006b14 <RCCEx_PLL2_Config+0x15c>)
 8006acc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ace:	4a11      	ldr	r2, [pc, #68]	@ (8006b14 <RCCEx_PLL2_Config+0x15c>)
 8006ad0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006ad4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8006ad6:	4b0f      	ldr	r3, [pc, #60]	@ (8006b14 <RCCEx_PLL2_Config+0x15c>)
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	4a0e      	ldr	r2, [pc, #56]	@ (8006b14 <RCCEx_PLL2_Config+0x15c>)
 8006adc:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006ae0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006ae2:	f7fa fccd 	bl	8001480 <HAL_GetTick>
 8006ae6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006ae8:	e008      	b.n	8006afc <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006aea:	f7fa fcc9 	bl	8001480 <HAL_GetTick>
 8006aee:	4602      	mov	r2, r0
 8006af0:	68bb      	ldr	r3, [r7, #8]
 8006af2:	1ad3      	subs	r3, r2, r3
 8006af4:	2b02      	cmp	r3, #2
 8006af6:	d901      	bls.n	8006afc <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006af8:	2303      	movs	r3, #3
 8006afa:	e006      	b.n	8006b0a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006afc:	4b05      	ldr	r3, [pc, #20]	@ (8006b14 <RCCEx_PLL2_Config+0x15c>)
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d0f0      	beq.n	8006aea <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8006b08:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b0a:	4618      	mov	r0, r3
 8006b0c:	3710      	adds	r7, #16
 8006b0e:	46bd      	mov	sp, r7
 8006b10:	bd80      	pop	{r7, pc}
 8006b12:	bf00      	nop
 8006b14:	58024400 	.word	0x58024400
 8006b18:	ffff0007 	.word	0xffff0007

08006b1c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8006b1c:	b580      	push	{r7, lr}
 8006b1e:	b084      	sub	sp, #16
 8006b20:	af00      	add	r7, sp, #0
 8006b22:	6078      	str	r0, [r7, #4]
 8006b24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006b26:	2300      	movs	r3, #0
 8006b28:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006b2a:	4b53      	ldr	r3, [pc, #332]	@ (8006c78 <RCCEx_PLL3_Config+0x15c>)
 8006b2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b2e:	f003 0303 	and.w	r3, r3, #3
 8006b32:	2b03      	cmp	r3, #3
 8006b34:	d101      	bne.n	8006b3a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8006b36:	2301      	movs	r3, #1
 8006b38:	e099      	b.n	8006c6e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8006b3a:	4b4f      	ldr	r3, [pc, #316]	@ (8006c78 <RCCEx_PLL3_Config+0x15c>)
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	4a4e      	ldr	r2, [pc, #312]	@ (8006c78 <RCCEx_PLL3_Config+0x15c>)
 8006b40:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006b44:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006b46:	f7fa fc9b 	bl	8001480 <HAL_GetTick>
 8006b4a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006b4c:	e008      	b.n	8006b60 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006b4e:	f7fa fc97 	bl	8001480 <HAL_GetTick>
 8006b52:	4602      	mov	r2, r0
 8006b54:	68bb      	ldr	r3, [r7, #8]
 8006b56:	1ad3      	subs	r3, r2, r3
 8006b58:	2b02      	cmp	r3, #2
 8006b5a:	d901      	bls.n	8006b60 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006b5c:	2303      	movs	r3, #3
 8006b5e:	e086      	b.n	8006c6e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006b60:	4b45      	ldr	r3, [pc, #276]	@ (8006c78 <RCCEx_PLL3_Config+0x15c>)
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d1f0      	bne.n	8006b4e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8006b6c:	4b42      	ldr	r3, [pc, #264]	@ (8006c78 <RCCEx_PLL3_Config+0x15c>)
 8006b6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b70:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	051b      	lsls	r3, r3, #20
 8006b7a:	493f      	ldr	r1, [pc, #252]	@ (8006c78 <RCCEx_PLL3_Config+0x15c>)
 8006b7c:	4313      	orrs	r3, r2
 8006b7e:	628b      	str	r3, [r1, #40]	@ 0x28
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	685b      	ldr	r3, [r3, #4]
 8006b84:	3b01      	subs	r3, #1
 8006b86:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	689b      	ldr	r3, [r3, #8]
 8006b8e:	3b01      	subs	r3, #1
 8006b90:	025b      	lsls	r3, r3, #9
 8006b92:	b29b      	uxth	r3, r3
 8006b94:	431a      	orrs	r2, r3
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	68db      	ldr	r3, [r3, #12]
 8006b9a:	3b01      	subs	r3, #1
 8006b9c:	041b      	lsls	r3, r3, #16
 8006b9e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006ba2:	431a      	orrs	r2, r3
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	691b      	ldr	r3, [r3, #16]
 8006ba8:	3b01      	subs	r3, #1
 8006baa:	061b      	lsls	r3, r3, #24
 8006bac:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006bb0:	4931      	ldr	r1, [pc, #196]	@ (8006c78 <RCCEx_PLL3_Config+0x15c>)
 8006bb2:	4313      	orrs	r3, r2
 8006bb4:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8006bb6:	4b30      	ldr	r3, [pc, #192]	@ (8006c78 <RCCEx_PLL3_Config+0x15c>)
 8006bb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006bba:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	695b      	ldr	r3, [r3, #20]
 8006bc2:	492d      	ldr	r1, [pc, #180]	@ (8006c78 <RCCEx_PLL3_Config+0x15c>)
 8006bc4:	4313      	orrs	r3, r2
 8006bc6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8006bc8:	4b2b      	ldr	r3, [pc, #172]	@ (8006c78 <RCCEx_PLL3_Config+0x15c>)
 8006bca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006bcc:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	699b      	ldr	r3, [r3, #24]
 8006bd4:	4928      	ldr	r1, [pc, #160]	@ (8006c78 <RCCEx_PLL3_Config+0x15c>)
 8006bd6:	4313      	orrs	r3, r2
 8006bd8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8006bda:	4b27      	ldr	r3, [pc, #156]	@ (8006c78 <RCCEx_PLL3_Config+0x15c>)
 8006bdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006bde:	4a26      	ldr	r2, [pc, #152]	@ (8006c78 <RCCEx_PLL3_Config+0x15c>)
 8006be0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006be4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8006be6:	4b24      	ldr	r3, [pc, #144]	@ (8006c78 <RCCEx_PLL3_Config+0x15c>)
 8006be8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006bea:	4b24      	ldr	r3, [pc, #144]	@ (8006c7c <RCCEx_PLL3_Config+0x160>)
 8006bec:	4013      	ands	r3, r2
 8006bee:	687a      	ldr	r2, [r7, #4]
 8006bf0:	69d2      	ldr	r2, [r2, #28]
 8006bf2:	00d2      	lsls	r2, r2, #3
 8006bf4:	4920      	ldr	r1, [pc, #128]	@ (8006c78 <RCCEx_PLL3_Config+0x15c>)
 8006bf6:	4313      	orrs	r3, r2
 8006bf8:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8006bfa:	4b1f      	ldr	r3, [pc, #124]	@ (8006c78 <RCCEx_PLL3_Config+0x15c>)
 8006bfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006bfe:	4a1e      	ldr	r2, [pc, #120]	@ (8006c78 <RCCEx_PLL3_Config+0x15c>)
 8006c00:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006c04:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8006c06:	683b      	ldr	r3, [r7, #0]
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d106      	bne.n	8006c1a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8006c0c:	4b1a      	ldr	r3, [pc, #104]	@ (8006c78 <RCCEx_PLL3_Config+0x15c>)
 8006c0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c10:	4a19      	ldr	r2, [pc, #100]	@ (8006c78 <RCCEx_PLL3_Config+0x15c>)
 8006c12:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8006c16:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006c18:	e00f      	b.n	8006c3a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8006c1a:	683b      	ldr	r3, [r7, #0]
 8006c1c:	2b01      	cmp	r3, #1
 8006c1e:	d106      	bne.n	8006c2e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8006c20:	4b15      	ldr	r3, [pc, #84]	@ (8006c78 <RCCEx_PLL3_Config+0x15c>)
 8006c22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c24:	4a14      	ldr	r2, [pc, #80]	@ (8006c78 <RCCEx_PLL3_Config+0x15c>)
 8006c26:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8006c2a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006c2c:	e005      	b.n	8006c3a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8006c2e:	4b12      	ldr	r3, [pc, #72]	@ (8006c78 <RCCEx_PLL3_Config+0x15c>)
 8006c30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c32:	4a11      	ldr	r2, [pc, #68]	@ (8006c78 <RCCEx_PLL3_Config+0x15c>)
 8006c34:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006c38:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8006c3a:	4b0f      	ldr	r3, [pc, #60]	@ (8006c78 <RCCEx_PLL3_Config+0x15c>)
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	4a0e      	ldr	r2, [pc, #56]	@ (8006c78 <RCCEx_PLL3_Config+0x15c>)
 8006c40:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006c44:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006c46:	f7fa fc1b 	bl	8001480 <HAL_GetTick>
 8006c4a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006c4c:	e008      	b.n	8006c60 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006c4e:	f7fa fc17 	bl	8001480 <HAL_GetTick>
 8006c52:	4602      	mov	r2, r0
 8006c54:	68bb      	ldr	r3, [r7, #8]
 8006c56:	1ad3      	subs	r3, r2, r3
 8006c58:	2b02      	cmp	r3, #2
 8006c5a:	d901      	bls.n	8006c60 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006c5c:	2303      	movs	r3, #3
 8006c5e:	e006      	b.n	8006c6e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006c60:	4b05      	ldr	r3, [pc, #20]	@ (8006c78 <RCCEx_PLL3_Config+0x15c>)
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d0f0      	beq.n	8006c4e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8006c6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c6e:	4618      	mov	r0, r3
 8006c70:	3710      	adds	r7, #16
 8006c72:	46bd      	mov	sp, r7
 8006c74:	bd80      	pop	{r7, pc}
 8006c76:	bf00      	nop
 8006c78:	58024400 	.word	0x58024400
 8006c7c:	ffff0007 	.word	0xffff0007

08006c80 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006c80:	b580      	push	{r7, lr}
 8006c82:	b084      	sub	sp, #16
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d101      	bne.n	8006c92 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006c8e:	2301      	movs	r3, #1
 8006c90:	e10f      	b.n	8006eb2 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	2200      	movs	r2, #0
 8006c96:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	4a87      	ldr	r2, [pc, #540]	@ (8006ebc <HAL_SPI_Init+0x23c>)
 8006c9e:	4293      	cmp	r3, r2
 8006ca0:	d00f      	beq.n	8006cc2 <HAL_SPI_Init+0x42>
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	4a86      	ldr	r2, [pc, #536]	@ (8006ec0 <HAL_SPI_Init+0x240>)
 8006ca8:	4293      	cmp	r3, r2
 8006caa:	d00a      	beq.n	8006cc2 <HAL_SPI_Init+0x42>
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	4a84      	ldr	r2, [pc, #528]	@ (8006ec4 <HAL_SPI_Init+0x244>)
 8006cb2:	4293      	cmp	r3, r2
 8006cb4:	d005      	beq.n	8006cc2 <HAL_SPI_Init+0x42>
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	68db      	ldr	r3, [r3, #12]
 8006cba:	2b0f      	cmp	r3, #15
 8006cbc:	d901      	bls.n	8006cc2 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8006cbe:	2301      	movs	r3, #1
 8006cc0:	e0f7      	b.n	8006eb2 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8006cc2:	6878      	ldr	r0, [r7, #4]
 8006cc4:	f000 fd08 	bl	80076d8 <SPI_GetPacketSize>
 8006cc8:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	4a7b      	ldr	r2, [pc, #492]	@ (8006ebc <HAL_SPI_Init+0x23c>)
 8006cd0:	4293      	cmp	r3, r2
 8006cd2:	d00c      	beq.n	8006cee <HAL_SPI_Init+0x6e>
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	4a79      	ldr	r2, [pc, #484]	@ (8006ec0 <HAL_SPI_Init+0x240>)
 8006cda:	4293      	cmp	r3, r2
 8006cdc:	d007      	beq.n	8006cee <HAL_SPI_Init+0x6e>
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	4a78      	ldr	r2, [pc, #480]	@ (8006ec4 <HAL_SPI_Init+0x244>)
 8006ce4:	4293      	cmp	r3, r2
 8006ce6:	d002      	beq.n	8006cee <HAL_SPI_Init+0x6e>
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	2b08      	cmp	r3, #8
 8006cec:	d811      	bhi.n	8006d12 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8006cf2:	4a72      	ldr	r2, [pc, #456]	@ (8006ebc <HAL_SPI_Init+0x23c>)
 8006cf4:	4293      	cmp	r3, r2
 8006cf6:	d009      	beq.n	8006d0c <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	4a70      	ldr	r2, [pc, #448]	@ (8006ec0 <HAL_SPI_Init+0x240>)
 8006cfe:	4293      	cmp	r3, r2
 8006d00:	d004      	beq.n	8006d0c <HAL_SPI_Init+0x8c>
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	4a6f      	ldr	r2, [pc, #444]	@ (8006ec4 <HAL_SPI_Init+0x244>)
 8006d08:	4293      	cmp	r3, r2
 8006d0a:	d104      	bne.n	8006d16 <HAL_SPI_Init+0x96>
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	2b10      	cmp	r3, #16
 8006d10:	d901      	bls.n	8006d16 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8006d12:	2301      	movs	r3, #1
 8006d14:	e0cd      	b.n	8006eb2 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8006d1c:	b2db      	uxtb	r3, r3
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d106      	bne.n	8006d30 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	2200      	movs	r2, #0
 8006d26:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006d2a:	6878      	ldr	r0, [r7, #4]
 8006d2c:	f7f9 ffae 	bl	8000c8c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	2202      	movs	r2, #2
 8006d34:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	681a      	ldr	r2, [r3, #0]
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	f022 0201 	bic.w	r2, r2, #1
 8006d46:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	689b      	ldr	r3, [r3, #8]
 8006d4e:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 8006d52:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	699b      	ldr	r3, [r3, #24]
 8006d58:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006d5c:	d119      	bne.n	8006d92 <HAL_SPI_Init+0x112>
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	685b      	ldr	r3, [r3, #4]
 8006d62:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006d66:	d103      	bne.n	8006d70 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d008      	beq.n	8006d82 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d10c      	bne.n	8006d92 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8006d7c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006d80:	d107      	bne.n	8006d92 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	681a      	ldr	r2, [r3, #0]
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006d90:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	685b      	ldr	r3, [r3, #4]
 8006d96:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d00f      	beq.n	8006dbe <HAL_SPI_Init+0x13e>
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	68db      	ldr	r3, [r3, #12]
 8006da2:	2b06      	cmp	r3, #6
 8006da4:	d90b      	bls.n	8006dbe <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	430a      	orrs	r2, r1
 8006dba:	601a      	str	r2, [r3, #0]
 8006dbc:	e007      	b.n	8006dce <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	681a      	ldr	r2, [r3, #0]
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006dcc:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	69da      	ldr	r2, [r3, #28]
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006dd6:	431a      	orrs	r2, r3
 8006dd8:	68bb      	ldr	r3, [r7, #8]
 8006dda:	431a      	orrs	r2, r3
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006de0:	ea42 0103 	orr.w	r1, r2, r3
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	68da      	ldr	r2, [r3, #12]
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	430a      	orrs	r2, r1
 8006dee:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006df8:	431a      	orrs	r2, r3
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006dfe:	431a      	orrs	r2, r3
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	699b      	ldr	r3, [r3, #24]
 8006e04:	431a      	orrs	r2, r3
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	691b      	ldr	r3, [r3, #16]
 8006e0a:	431a      	orrs	r2, r3
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	695b      	ldr	r3, [r3, #20]
 8006e10:	431a      	orrs	r2, r3
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	6a1b      	ldr	r3, [r3, #32]
 8006e16:	431a      	orrs	r2, r3
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	685b      	ldr	r3, [r3, #4]
 8006e1c:	431a      	orrs	r2, r3
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006e22:	431a      	orrs	r2, r3
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	689b      	ldr	r3, [r3, #8]
 8006e28:	431a      	orrs	r2, r3
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006e2e:	ea42 0103 	orr.w	r1, r2, r3
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	430a      	orrs	r2, r1
 8006e3c:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	685b      	ldr	r3, [r3, #4]
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d113      	bne.n	8006e6e <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	689b      	ldr	r3, [r3, #8]
 8006e4c:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006e58:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	689b      	ldr	r3, [r3, #8]
 8006e60:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006e6c:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	f022 0201 	bic.w	r2, r2, #1
 8006e7c:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	685b      	ldr	r3, [r3, #4]
 8006e82:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d00a      	beq.n	8006ea0 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	68db      	ldr	r3, [r3, #12]
 8006e90:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	430a      	orrs	r2, r1
 8006e9e:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	2200      	movs	r2, #0
 8006ea4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	2201      	movs	r2, #1
 8006eac:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 8006eb0:	2300      	movs	r3, #0
}
 8006eb2:	4618      	mov	r0, r3
 8006eb4:	3710      	adds	r7, #16
 8006eb6:	46bd      	mov	sp, r7
 8006eb8:	bd80      	pop	{r7, pc}
 8006eba:	bf00      	nop
 8006ebc:	40013000 	.word	0x40013000
 8006ec0:	40003800 	.word	0x40003800
 8006ec4:	40003c00 	.word	0x40003c00

08006ec8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8006ec8:	b580      	push	{r7, lr}
 8006eca:	b08e      	sub	sp, #56	@ 0x38
 8006ecc:	af02      	add	r7, sp, #8
 8006ece:	60f8      	str	r0, [r7, #12]
 8006ed0:	60b9      	str	r1, [r7, #8]
 8006ed2:	607a      	str	r2, [r7, #4]
 8006ed4:	807b      	strh	r3, [r7, #2]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	3320      	adds	r3, #32
 8006edc:	627b      	str	r3, [r7, #36]	@ 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	3330      	adds	r3, #48	@ 0x30
 8006ee4:	623b      	str	r3, [r7, #32]
  uint32_t   fifo_length;
  uint32_t   temp_sr_reg;
  uint16_t   initial_TxXferCount;
  uint16_t   initial_RxXferCount;
  uint16_t   init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006eea:	095b      	lsrs	r3, r3, #5
 8006eec:	b29b      	uxth	r3, r3
 8006eee:	3301      	adds	r3, #1
 8006ef0:	83fb      	strh	r3, [r7, #30]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006ef2:	f7fa fac5 	bl	8001480 <HAL_GetTick>
 8006ef6:	61b8      	str	r0, [r7, #24]

  initial_TxXferCount = Size;
 8006ef8:	887b      	ldrh	r3, [r7, #2]
 8006efa:	857b      	strh	r3, [r7, #42]	@ 0x2a
  initial_RxXferCount = Size;
 8006efc:	887b      	ldrh	r3, [r7, #2]
 8006efe:	853b      	strh	r3, [r7, #40]	@ 0x28

  if (hspi->State != HAL_SPI_STATE_READY)
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8006f06:	b2db      	uxtb	r3, r3
 8006f08:	2b01      	cmp	r3, #1
 8006f0a:	d001      	beq.n	8006f10 <HAL_SPI_TransmitReceive+0x48>
  {
    return HAL_BUSY;
 8006f0c:	2302      	movs	r3, #2
 8006f0e:	e310      	b.n	8007532 <HAL_SPI_TransmitReceive+0x66a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 8006f10:	68bb      	ldr	r3, [r7, #8]
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d005      	beq.n	8006f22 <HAL_SPI_TransmitReceive+0x5a>
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d002      	beq.n	8006f22 <HAL_SPI_TransmitReceive+0x5a>
 8006f1c:	887b      	ldrh	r3, [r7, #2]
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d101      	bne.n	8006f26 <HAL_SPI_TransmitReceive+0x5e>
  {
    return HAL_ERROR;
 8006f22:	2301      	movs	r3, #1
 8006f24:	e305      	b.n	8007532 <HAL_SPI_TransmitReceive+0x66a>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8006f2c:	2b01      	cmp	r3, #1
 8006f2e:	d101      	bne.n	8006f34 <HAL_SPI_TransmitReceive+0x6c>
 8006f30:	2302      	movs	r3, #2
 8006f32:	e2fe      	b.n	8007532 <HAL_SPI_TransmitReceive+0x66a>
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	2201      	movs	r2, #1
 8006f38:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	2205      	movs	r2, #5
 8006f40:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	2200      	movs	r2, #0
 8006f48:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	687a      	ldr	r2, [r7, #4]
 8006f50:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferCount = Size;
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	887a      	ldrh	r2, [r7, #2]
 8006f56:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxXferSize  = Size;
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	887a      	ldrh	r2, [r7, #2]
 8006f5e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	68ba      	ldr	r2, [r7, #8]
 8006f66:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferCount = Size;
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	887a      	ldrh	r2, [r7, #2]
 8006f6c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->TxXferSize  = Size;
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	887a      	ldrh	r2, [r7, #2]
 8006f74:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	2200      	movs	r2, #0
 8006f7c:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	2200      	movs	r2, #0
 8006f82:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Set Full-Duplex mode */
  SPI_2LINES(hspi);
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	68da      	ldr	r2, [r3, #12]
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	f422 22c0 	bic.w	r2, r2, #393216	@ 0x60000
 8006f92:	60da      	str	r2, [r3, #12]

  /* Initialize FIFO length */
  if (IS_SPI_HIGHEND_INSTANCE(hspi->Instance))
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	4a70      	ldr	r2, [pc, #448]	@ (800715c <HAL_SPI_TransmitReceive+0x294>)
 8006f9a:	4293      	cmp	r3, r2
 8006f9c:	d009      	beq.n	8006fb2 <HAL_SPI_TransmitReceive+0xea>
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	4a6f      	ldr	r2, [pc, #444]	@ (8007160 <HAL_SPI_TransmitReceive+0x298>)
 8006fa4:	4293      	cmp	r3, r2
 8006fa6:	d004      	beq.n	8006fb2 <HAL_SPI_TransmitReceive+0xea>
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	4a6d      	ldr	r2, [pc, #436]	@ (8007164 <HAL_SPI_TransmitReceive+0x29c>)
 8006fae:	4293      	cmp	r3, r2
 8006fb0:	d102      	bne.n	8006fb8 <HAL_SPI_TransmitReceive+0xf0>
  {
    fifo_length = SPI_HIGHEND_FIFO_SIZE;
 8006fb2:	2310      	movs	r3, #16
 8006fb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006fb6:	e001      	b.n	8006fbc <HAL_SPI_TransmitReceive+0xf4>
  }
  else
  {
    fifo_length = SPI_LOWEND_FIFO_SIZE;
 8006fb8:	2308      	movs	r3, #8
 8006fba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	685a      	ldr	r2, [r3, #4]
 8006fc2:	4b69      	ldr	r3, [pc, #420]	@ (8007168 <HAL_SPI_TransmitReceive+0x2a0>)
 8006fc4:	4013      	ands	r3, r2
 8006fc6:	8879      	ldrh	r1, [r7, #2]
 8006fc8:	68fa      	ldr	r2, [r7, #12]
 8006fca:	6812      	ldr	r2, [r2, #0]
 8006fcc:	430b      	orrs	r3, r1
 8006fce:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	681a      	ldr	r2, [r3, #0]
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	f042 0201 	orr.w	r2, r2, #1
 8006fde:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	685b      	ldr	r3, [r3, #4]
 8006fe4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006fe8:	d107      	bne.n	8006ffa <HAL_SPI_TransmitReceive+0x132>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	681a      	ldr	r2, [r3, #0]
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006ff8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	68db      	ldr	r3, [r3, #12]
 8006ffe:	2b0f      	cmp	r3, #15
 8007000:	f240 80a2 	bls.w	8007148 <HAL_SPI_TransmitReceive+0x280>
  {
    /* Adapt fifo length to 32bits data width */
    fifo_length = (fifo_length / 4UL);
 8007004:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007006:	089b      	lsrs	r3, r3, #2
 8007008:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800700a:	e094      	b.n	8007136 <HAL_SPI_TransmitReceive+0x26e>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	695b      	ldr	r3, [r3, #20]
 8007012:	f003 0302 	and.w	r3, r3, #2
 8007016:	2b02      	cmp	r3, #2
 8007018:	d120      	bne.n	800705c <HAL_SPI_TransmitReceive+0x194>
 800701a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800701c:	2b00      	cmp	r3, #0
 800701e:	d01d      	beq.n	800705c <HAL_SPI_TransmitReceive+0x194>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 8007020:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8007022:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 8007024:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007026:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8007028:	429a      	cmp	r2, r3
 800702a:	d217      	bcs.n	800705c <HAL_SPI_TransmitReceive+0x194>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	6812      	ldr	r2, [r2, #0]
 8007036:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800703c:	1d1a      	adds	r2, r3, #4
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount --;
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8007048:	b29b      	uxth	r3, r3
 800704a:	3b01      	subs	r3, #1
 800704c:	b29a      	uxth	r2, r3
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800705a:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	695b      	ldr	r3, [r3, #20]
 8007062:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 8007064:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8007066:	2b00      	cmp	r3, #0
 8007068:	d065      	beq.n	8007136 <HAL_SPI_TransmitReceive+0x26e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	695b      	ldr	r3, [r3, #20]
 8007070:	f003 0301 	and.w	r3, r3, #1
 8007074:	2b01      	cmp	r3, #1
 8007076:	d118      	bne.n	80070aa <HAL_SPI_TransmitReceive+0x1e2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	681a      	ldr	r2, [r3, #0]
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007080:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8007082:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007088:	1d1a      	adds	r2, r3, #4
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007094:	b29b      	uxth	r3, r3
 8007096:	3b01      	subs	r3, #1
 8007098:	b29a      	uxth	r2, r3
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80070a6:	853b      	strh	r3, [r7, #40]	@ 0x28
 80070a8:	e045      	b.n	8007136 <HAL_SPI_TransmitReceive+0x26e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 80070aa:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80070ac:	8bfb      	ldrh	r3, [r7, #30]
 80070ae:	429a      	cmp	r2, r3
 80070b0:	d21d      	bcs.n	80070ee <HAL_SPI_TransmitReceive+0x226>
 80070b2:	697b      	ldr	r3, [r7, #20]
 80070b4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d018      	beq.n	80070ee <HAL_SPI_TransmitReceive+0x226>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	681a      	ldr	r2, [r3, #0]
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80070c4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80070c6:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80070cc:	1d1a      	adds	r2, r3, #4
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80070d8:	b29b      	uxth	r3, r3
 80070da:	3b01      	subs	r3, #1
 80070dc:	b29a      	uxth	r2, r3
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80070ea:	853b      	strh	r3, [r7, #40]	@ 0x28
 80070ec:	e023      	b.n	8007136 <HAL_SPI_TransmitReceive+0x26e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80070ee:	f7fa f9c7 	bl	8001480 <HAL_GetTick>
 80070f2:	4602      	mov	r2, r0
 80070f4:	69bb      	ldr	r3, [r7, #24]
 80070f6:	1ad3      	subs	r3, r2, r3
 80070f8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80070fa:	429a      	cmp	r2, r3
 80070fc:	d803      	bhi.n	8007106 <HAL_SPI_TransmitReceive+0x23e>
 80070fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007100:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007104:	d102      	bne.n	800710c <HAL_SPI_TransmitReceive+0x244>
 8007106:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007108:	2b00      	cmp	r3, #0
 800710a:	d114      	bne.n	8007136 <HAL_SPI_TransmitReceive+0x26e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 800710c:	68f8      	ldr	r0, [r7, #12]
 800710e:	f000 fa15 	bl	800753c <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007118:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	2201      	movs	r2, #1
 8007126:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	2200      	movs	r2, #0
 800712e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 8007132:	2303      	movs	r3, #3
 8007134:	e1fd      	b.n	8007532 <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8007136:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8007138:	2b00      	cmp	r3, #0
 800713a:	f47f af67 	bne.w	800700c <HAL_SPI_TransmitReceive+0x144>
 800713e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8007140:	2b00      	cmp	r3, #0
 8007142:	f47f af63 	bne.w	800700c <HAL_SPI_TransmitReceive+0x144>
 8007146:	e1ce      	b.n	80074e6 <HAL_SPI_TransmitReceive+0x61e>
        }
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	68db      	ldr	r3, [r3, #12]
 800714c:	2b07      	cmp	r3, #7
 800714e:	f240 81c2 	bls.w	80074d6 <HAL_SPI_TransmitReceive+0x60e>
  {
    /* Adapt fifo length to 16bits data width */
    fifo_length = (fifo_length / 2UL);
 8007152:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007154:	085b      	lsrs	r3, r3, #1
 8007156:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8007158:	e0c9      	b.n	80072ee <HAL_SPI_TransmitReceive+0x426>
 800715a:	bf00      	nop
 800715c:	40013000 	.word	0x40013000
 8007160:	40003800 	.word	0x40003800
 8007164:	40003c00 	.word	0x40003c00
 8007168:	ffff0000 	.word	0xffff0000
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	695b      	ldr	r3, [r3, #20]
 8007172:	f003 0302 	and.w	r3, r3, #2
 8007176:	2b02      	cmp	r3, #2
 8007178:	d11f      	bne.n	80071ba <HAL_SPI_TransmitReceive+0x2f2>
 800717a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800717c:	2b00      	cmp	r3, #0
 800717e:	d01c      	beq.n	80071ba <HAL_SPI_TransmitReceive+0x2f2>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 8007180:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8007182:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 8007184:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007186:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8007188:	429a      	cmp	r2, r3
 800718a:	d216      	bcs.n	80071ba <HAL_SPI_TransmitReceive+0x2f2>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007190:	881a      	ldrh	r2, [r3, #0]
 8007192:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007194:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800719a:	1c9a      	adds	r2, r3, #2
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80071a6:	b29b      	uxth	r3, r3
 80071a8:	3b01      	subs	r3, #1
 80071aa:	b29a      	uxth	r2, r3
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80071b8:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	695b      	ldr	r3, [r3, #20]
 80071c0:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 80071c2:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	f000 8092 	beq.w	80072ee <HAL_SPI_TransmitReceive+0x426>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	695b      	ldr	r3, [r3, #20]
 80071d0:	f003 0301 	and.w	r3, r3, #1
 80071d4:	2b01      	cmp	r3, #1
 80071d6:	d118      	bne.n	800720a <HAL_SPI_TransmitReceive+0x342>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80071dc:	6a3a      	ldr	r2, [r7, #32]
 80071de:	8812      	ldrh	r2, [r2, #0]
 80071e0:	b292      	uxth	r2, r2
 80071e2:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80071e8:	1c9a      	adds	r2, r3, #2
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80071f4:	b29b      	uxth	r3, r3
 80071f6:	3b01      	subs	r3, #1
 80071f8:	b29a      	uxth	r2, r3
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007206:	853b      	strh	r3, [r7, #40]	@ 0x28
 8007208:	e071      	b.n	80072ee <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800720a:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800720c:	8bfb      	ldrh	r3, [r7, #30]
 800720e:	429a      	cmp	r2, r3
 8007210:	d228      	bcs.n	8007264 <HAL_SPI_TransmitReceive+0x39c>
 8007212:	697b      	ldr	r3, [r7, #20]
 8007214:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007218:	2b00      	cmp	r3, #0
 800721a:	d023      	beq.n	8007264 <HAL_SPI_TransmitReceive+0x39c>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007220:	6a3a      	ldr	r2, [r7, #32]
 8007222:	8812      	ldrh	r2, [r2, #0]
 8007224:	b292      	uxth	r2, r2
 8007226:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800722c:	1c9a      	adds	r2, r3, #2
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007236:	6a3a      	ldr	r2, [r7, #32]
 8007238:	8812      	ldrh	r2, [r2, #0]
 800723a:	b292      	uxth	r2, r2
 800723c:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007242:	1c9a      	adds	r2, r3, #2
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800724e:	b29b      	uxth	r3, r3
 8007250:	3b02      	subs	r3, #2
 8007252:	b29a      	uxth	r2, r3
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007260:	853b      	strh	r3, [r7, #40]	@ 0x28
 8007262:	e044      	b.n	80072ee <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 8007264:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8007266:	2b01      	cmp	r3, #1
 8007268:	d11d      	bne.n	80072a6 <HAL_SPI_TransmitReceive+0x3de>
 800726a:	697b      	ldr	r3, [r7, #20]
 800726c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007270:	2b00      	cmp	r3, #0
 8007272:	d018      	beq.n	80072a6 <HAL_SPI_TransmitReceive+0x3de>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007278:	6a3a      	ldr	r2, [r7, #32]
 800727a:	8812      	ldrh	r2, [r2, #0]
 800727c:	b292      	uxth	r2, r2
 800727e:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007284:	1c9a      	adds	r2, r3, #2
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007290:	b29b      	uxth	r3, r3
 8007292:	3b01      	subs	r3, #1
 8007294:	b29a      	uxth	r2, r3
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80072a2:	853b      	strh	r3, [r7, #40]	@ 0x28
 80072a4:	e023      	b.n	80072ee <HAL_SPI_TransmitReceive+0x426>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80072a6:	f7fa f8eb 	bl	8001480 <HAL_GetTick>
 80072aa:	4602      	mov	r2, r0
 80072ac:	69bb      	ldr	r3, [r7, #24]
 80072ae:	1ad3      	subs	r3, r2, r3
 80072b0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80072b2:	429a      	cmp	r2, r3
 80072b4:	d803      	bhi.n	80072be <HAL_SPI_TransmitReceive+0x3f6>
 80072b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072bc:	d102      	bne.n	80072c4 <HAL_SPI_TransmitReceive+0x3fc>
 80072be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d114      	bne.n	80072ee <HAL_SPI_TransmitReceive+0x426>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 80072c4:	68f8      	ldr	r0, [r7, #12]
 80072c6:	f000 f939 	bl	800753c <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80072d0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	2201      	movs	r2, #1
 80072de:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	2200      	movs	r2, #0
 80072e6:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 80072ea:	2303      	movs	r3, #3
 80072ec:	e121      	b.n	8007532 <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80072ee:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	f47f af3b 	bne.w	800716c <HAL_SPI_TransmitReceive+0x2a4>
 80072f6:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	f47f af37 	bne.w	800716c <HAL_SPI_TransmitReceive+0x2a4>
 80072fe:	e0f2      	b.n	80074e6 <HAL_SPI_TransmitReceive+0x61e>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	695b      	ldr	r3, [r3, #20]
 8007306:	f003 0302 	and.w	r3, r3, #2
 800730a:	2b02      	cmp	r3, #2
 800730c:	d121      	bne.n	8007352 <HAL_SPI_TransmitReceive+0x48a>
 800730e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8007310:	2b00      	cmp	r3, #0
 8007312:	d01e      	beq.n	8007352 <HAL_SPI_TransmitReceive+0x48a>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 8007314:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8007316:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 8007318:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800731a:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800731c:	429a      	cmp	r2, r3
 800731e:	d218      	bcs.n	8007352 <HAL_SPI_TransmitReceive+0x48a>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	3320      	adds	r3, #32
 800732a:	7812      	ldrb	r2, [r2, #0]
 800732c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007332:	1c5a      	adds	r2, r3, #1
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800733e:	b29b      	uxth	r3, r3
 8007340:	3b01      	subs	r3, #1
 8007342:	b29a      	uxth	r2, r3
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8007350:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	695b      	ldr	r3, [r3, #20]
 8007358:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 800735a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800735c:	2b00      	cmp	r3, #0
 800735e:	f000 80ba 	beq.w	80074d6 <HAL_SPI_TransmitReceive+0x60e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	695b      	ldr	r3, [r3, #20]
 8007368:	f003 0301 	and.w	r3, r3, #1
 800736c:	2b01      	cmp	r3, #1
 800736e:	d11b      	bne.n	80073a8 <HAL_SPI_TransmitReceive+0x4e0>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800737c:	7812      	ldrb	r2, [r2, #0]
 800737e:	b2d2      	uxtb	r2, r2
 8007380:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007386:	1c5a      	adds	r2, r3, #1
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007392:	b29b      	uxth	r3, r3
 8007394:	3b01      	subs	r3, #1
 8007396:	b29a      	uxth	r2, r3
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80073a4:	853b      	strh	r3, [r7, #40]	@ 0x28
 80073a6:	e096      	b.n	80074d6 <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 80073a8:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80073aa:	8bfb      	ldrh	r3, [r7, #30]
 80073ac:	429a      	cmp	r2, r3
 80073ae:	d24a      	bcs.n	8007446 <HAL_SPI_TransmitReceive+0x57e>
 80073b0:	697b      	ldr	r3, [r7, #20]
 80073b2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d045      	beq.n	8007446 <HAL_SPI_TransmitReceive+0x57e>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80073c6:	7812      	ldrb	r2, [r2, #0]
 80073c8:	b2d2      	uxtb	r2, r2
 80073ca:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80073d0:	1c5a      	adds	r2, r3, #1
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80073e2:	7812      	ldrb	r2, [r2, #0]
 80073e4:	b2d2      	uxtb	r2, r2
 80073e6:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80073ec:	1c5a      	adds	r2, r3, #1
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80073fe:	7812      	ldrb	r2, [r2, #0]
 8007400:	b2d2      	uxtb	r2, r2
 8007402:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007408:	1c5a      	adds	r2, r3, #1
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800741a:	7812      	ldrb	r2, [r2, #0]
 800741c:	b2d2      	uxtb	r2, r2
 800741e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007424:	1c5a      	adds	r2, r3, #1
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007430:	b29b      	uxth	r3, r3
 8007432:	3b04      	subs	r3, #4
 8007434:	b29a      	uxth	r2, r3
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007442:	853b      	strh	r3, [r7, #40]	@ 0x28
 8007444:	e047      	b.n	80074d6 <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 8007446:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8007448:	2b03      	cmp	r3, #3
 800744a:	d820      	bhi.n	800748e <HAL_SPI_TransmitReceive+0x5c6>
 800744c:	697b      	ldr	r3, [r7, #20]
 800744e:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 8007452:	2b00      	cmp	r3, #0
 8007454:	d01b      	beq.n	800748e <HAL_SPI_TransmitReceive+0x5c6>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007462:	7812      	ldrb	r2, [r2, #0]
 8007464:	b2d2      	uxtb	r2, r2
 8007466:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800746c:	1c5a      	adds	r2, r3, #1
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007478:	b29b      	uxth	r3, r3
 800747a:	3b01      	subs	r3, #1
 800747c:	b29a      	uxth	r2, r3
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800748a:	853b      	strh	r3, [r7, #40]	@ 0x28
 800748c:	e023      	b.n	80074d6 <HAL_SPI_TransmitReceive+0x60e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800748e:	f7f9 fff7 	bl	8001480 <HAL_GetTick>
 8007492:	4602      	mov	r2, r0
 8007494:	69bb      	ldr	r3, [r7, #24]
 8007496:	1ad3      	subs	r3, r2, r3
 8007498:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800749a:	429a      	cmp	r2, r3
 800749c:	d803      	bhi.n	80074a6 <HAL_SPI_TransmitReceive+0x5de>
 800749e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074a4:	d102      	bne.n	80074ac <HAL_SPI_TransmitReceive+0x5e4>
 80074a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d114      	bne.n	80074d6 <HAL_SPI_TransmitReceive+0x60e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 80074ac:	68f8      	ldr	r0, [r7, #12]
 80074ae:	f000 f845 	bl	800753c <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80074b8:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	2201      	movs	r2, #1
 80074c6:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	2200      	movs	r2, #0
 80074ce:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 80074d2:	2303      	movs	r3, #3
 80074d4:	e02d      	b.n	8007532 <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80074d6:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80074d8:	2b00      	cmp	r3, #0
 80074da:	f47f af11 	bne.w	8007300 <HAL_SPI_TransmitReceive+0x438>
 80074de:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	f47f af0d 	bne.w	8007300 <HAL_SPI_TransmitReceive+0x438>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 80074e6:	69bb      	ldr	r3, [r7, #24]
 80074e8:	9300      	str	r3, [sp, #0]
 80074ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074ec:	2200      	movs	r2, #0
 80074ee:	2108      	movs	r1, #8
 80074f0:	68f8      	ldr	r0, [r7, #12]
 80074f2:	f000 f8c3 	bl	800767c <SPI_WaitOnFlagUntilTimeout>
 80074f6:	4603      	mov	r3, r0
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d007      	beq.n	800750c <HAL_SPI_TransmitReceive+0x644>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007502:	f043 0220 	orr.w	r2, r3, #32
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800750c:	68f8      	ldr	r0, [r7, #12]
 800750e:	f000 f815 	bl	800753c <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	2201      	movs	r2, #1
 8007516:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	2200      	movs	r2, #0
 800751e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007528:	2b00      	cmp	r3, #0
 800752a:	d001      	beq.n	8007530 <HAL_SPI_TransmitReceive+0x668>
  {
    return HAL_ERROR;
 800752c:	2301      	movs	r3, #1
 800752e:	e000      	b.n	8007532 <HAL_SPI_TransmitReceive+0x66a>
  }
  else
  {
    return HAL_OK;
 8007530:	2300      	movs	r3, #0
  }
}
 8007532:	4618      	mov	r0, r3
 8007534:	3730      	adds	r7, #48	@ 0x30
 8007536:	46bd      	mov	sp, r7
 8007538:	bd80      	pop	{r7, pc}
 800753a:	bf00      	nop

0800753c <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800753c:	b480      	push	{r7}
 800753e:	b085      	sub	sp, #20
 8007540:	af00      	add	r7, sp, #0
 8007542:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	695b      	ldr	r3, [r3, #20]
 800754a:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	699a      	ldr	r2, [r3, #24]
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	f042 0208 	orr.w	r2, r2, #8
 800755a:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	699a      	ldr	r2, [r3, #24]
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	f042 0210 	orr.w	r2, r2, #16
 800756a:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	681a      	ldr	r2, [r3, #0]
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	f022 0201 	bic.w	r2, r2, #1
 800757a:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	6919      	ldr	r1, [r3, #16]
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681a      	ldr	r2, [r3, #0]
 8007586:	4b3c      	ldr	r3, [pc, #240]	@ (8007678 <SPI_CloseTransfer+0x13c>)
 8007588:	400b      	ands	r3, r1
 800758a:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	689a      	ldr	r2, [r3, #8]
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800759a:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80075a2:	b2db      	uxtb	r3, r3
 80075a4:	2b04      	cmp	r3, #4
 80075a6:	d014      	beq.n	80075d2 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	f003 0320 	and.w	r3, r3, #32
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d00f      	beq.n	80075d2 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80075b8:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	699a      	ldr	r2, [r3, #24]
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	f042 0220 	orr.w	r2, r2, #32
 80075d0:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80075d8:	b2db      	uxtb	r3, r3
 80075da:	2b03      	cmp	r3, #3
 80075dc:	d014      	beq.n	8007608 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d00f      	beq.n	8007608 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80075ee:	f043 0204 	orr.w	r2, r3, #4
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	699a      	ldr	r2, [r3, #24]
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007606:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800760e:	2b00      	cmp	r3, #0
 8007610:	d00f      	beq.n	8007632 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007618:	f043 0201 	orr.w	r2, r3, #1
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	699a      	ldr	r2, [r3, #24]
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007630:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007638:	2b00      	cmp	r3, #0
 800763a:	d00f      	beq.n	800765c <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007642:	f043 0208 	orr.w	r2, r3, #8
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	699a      	ldr	r2, [r3, #24]
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800765a:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	2200      	movs	r2, #0
 8007660:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	2200      	movs	r2, #0
 8007668:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 800766c:	bf00      	nop
 800766e:	3714      	adds	r7, #20
 8007670:	46bd      	mov	sp, r7
 8007672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007676:	4770      	bx	lr
 8007678:	fffffc90 	.word	0xfffffc90

0800767c <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800767c:	b580      	push	{r7, lr}
 800767e:	b084      	sub	sp, #16
 8007680:	af00      	add	r7, sp, #0
 8007682:	60f8      	str	r0, [r7, #12]
 8007684:	60b9      	str	r1, [r7, #8]
 8007686:	603b      	str	r3, [r7, #0]
 8007688:	4613      	mov	r3, r2
 800768a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800768c:	e010      	b.n	80076b0 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800768e:	f7f9 fef7 	bl	8001480 <HAL_GetTick>
 8007692:	4602      	mov	r2, r0
 8007694:	69bb      	ldr	r3, [r7, #24]
 8007696:	1ad3      	subs	r3, r2, r3
 8007698:	683a      	ldr	r2, [r7, #0]
 800769a:	429a      	cmp	r2, r3
 800769c:	d803      	bhi.n	80076a6 <SPI_WaitOnFlagUntilTimeout+0x2a>
 800769e:	683b      	ldr	r3, [r7, #0]
 80076a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076a4:	d102      	bne.n	80076ac <SPI_WaitOnFlagUntilTimeout+0x30>
 80076a6:	683b      	ldr	r3, [r7, #0]
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d101      	bne.n	80076b0 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 80076ac:	2303      	movs	r3, #3
 80076ae:	e00f      	b.n	80076d0 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	695a      	ldr	r2, [r3, #20]
 80076b6:	68bb      	ldr	r3, [r7, #8]
 80076b8:	4013      	ands	r3, r2
 80076ba:	68ba      	ldr	r2, [r7, #8]
 80076bc:	429a      	cmp	r2, r3
 80076be:	bf0c      	ite	eq
 80076c0:	2301      	moveq	r3, #1
 80076c2:	2300      	movne	r3, #0
 80076c4:	b2db      	uxtb	r3, r3
 80076c6:	461a      	mov	r2, r3
 80076c8:	79fb      	ldrb	r3, [r7, #7]
 80076ca:	429a      	cmp	r2, r3
 80076cc:	d0df      	beq.n	800768e <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 80076ce:	2300      	movs	r3, #0
}
 80076d0:	4618      	mov	r0, r3
 80076d2:	3710      	adds	r7, #16
 80076d4:	46bd      	mov	sp, r7
 80076d6:	bd80      	pop	{r7, pc}

080076d8 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 80076d8:	b480      	push	{r7}
 80076da:	b085      	sub	sp, #20
 80076dc:	af00      	add	r7, sp, #0
 80076de:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80076e4:	095b      	lsrs	r3, r3, #5
 80076e6:	3301      	adds	r3, #1
 80076e8:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	68db      	ldr	r3, [r3, #12]
 80076ee:	3301      	adds	r3, #1
 80076f0:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 80076f2:	68bb      	ldr	r3, [r7, #8]
 80076f4:	3307      	adds	r3, #7
 80076f6:	08db      	lsrs	r3, r3, #3
 80076f8:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 80076fa:	68bb      	ldr	r3, [r7, #8]
 80076fc:	68fa      	ldr	r2, [r7, #12]
 80076fe:	fb02 f303 	mul.w	r3, r2, r3
}
 8007702:	4618      	mov	r0, r3
 8007704:	3714      	adds	r7, #20
 8007706:	46bd      	mov	sp, r7
 8007708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800770c:	4770      	bx	lr

0800770e <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800770e:	b580      	push	{r7, lr}
 8007710:	b082      	sub	sp, #8
 8007712:	af00      	add	r7, sp, #0
 8007714:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	2b00      	cmp	r3, #0
 800771a:	d101      	bne.n	8007720 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800771c:	2301      	movs	r3, #1
 800771e:	e042      	b.n	80077a6 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007726:	2b00      	cmp	r3, #0
 8007728:	d106      	bne.n	8007738 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	2200      	movs	r2, #0
 800772e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007732:	6878      	ldr	r0, [r7, #4]
 8007734:	f7f9 fd06 	bl	8001144 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	2224      	movs	r2, #36	@ 0x24
 800773c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	681a      	ldr	r2, [r3, #0]
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	f022 0201 	bic.w	r2, r2, #1
 800774e:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007754:	2b00      	cmp	r3, #0
 8007756:	d002      	beq.n	800775e <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8007758:	6878      	ldr	r0, [r7, #4]
 800775a:	f001 fa15 	bl	8008b88 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800775e:	6878      	ldr	r0, [r7, #4]
 8007760:	f000 fcaa 	bl	80080b8 <UART_SetConfig>
 8007764:	4603      	mov	r3, r0
 8007766:	2b01      	cmp	r3, #1
 8007768:	d101      	bne.n	800776e <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800776a:	2301      	movs	r3, #1
 800776c:	e01b      	b.n	80077a6 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	685a      	ldr	r2, [r3, #4]
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800777c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	689a      	ldr	r2, [r3, #8]
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800778c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	681a      	ldr	r2, [r3, #0]
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	f042 0201 	orr.w	r2, r2, #1
 800779c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800779e:	6878      	ldr	r0, [r7, #4]
 80077a0:	f001 fa94 	bl	8008ccc <UART_CheckIdleState>
 80077a4:	4603      	mov	r3, r0
}
 80077a6:	4618      	mov	r0, r3
 80077a8:	3708      	adds	r7, #8
 80077aa:	46bd      	mov	sp, r7
 80077ac:	bd80      	pop	{r7, pc}

080077ae <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80077ae:	b580      	push	{r7, lr}
 80077b0:	b08a      	sub	sp, #40	@ 0x28
 80077b2:	af02      	add	r7, sp, #8
 80077b4:	60f8      	str	r0, [r7, #12]
 80077b6:	60b9      	str	r1, [r7, #8]
 80077b8:	603b      	str	r3, [r7, #0]
 80077ba:	4613      	mov	r3, r2
 80077bc:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80077c4:	2b20      	cmp	r3, #32
 80077c6:	d17b      	bne.n	80078c0 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80077c8:	68bb      	ldr	r3, [r7, #8]
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d002      	beq.n	80077d4 <HAL_UART_Transmit+0x26>
 80077ce:	88fb      	ldrh	r3, [r7, #6]
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d101      	bne.n	80077d8 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80077d4:	2301      	movs	r3, #1
 80077d6:	e074      	b.n	80078c2 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	2200      	movs	r2, #0
 80077dc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	2221      	movs	r2, #33	@ 0x21
 80077e4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80077e8:	f7f9 fe4a 	bl	8001480 <HAL_GetTick>
 80077ec:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	88fa      	ldrh	r2, [r7, #6]
 80077f2:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	88fa      	ldrh	r2, [r7, #6]
 80077fa:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	689b      	ldr	r3, [r3, #8]
 8007802:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007806:	d108      	bne.n	800781a <HAL_UART_Transmit+0x6c>
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	691b      	ldr	r3, [r3, #16]
 800780c:	2b00      	cmp	r3, #0
 800780e:	d104      	bne.n	800781a <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8007810:	2300      	movs	r3, #0
 8007812:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007814:	68bb      	ldr	r3, [r7, #8]
 8007816:	61bb      	str	r3, [r7, #24]
 8007818:	e003      	b.n	8007822 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800781a:	68bb      	ldr	r3, [r7, #8]
 800781c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800781e:	2300      	movs	r3, #0
 8007820:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007822:	e030      	b.n	8007886 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007824:	683b      	ldr	r3, [r7, #0]
 8007826:	9300      	str	r3, [sp, #0]
 8007828:	697b      	ldr	r3, [r7, #20]
 800782a:	2200      	movs	r2, #0
 800782c:	2180      	movs	r1, #128	@ 0x80
 800782e:	68f8      	ldr	r0, [r7, #12]
 8007830:	f001 faf6 	bl	8008e20 <UART_WaitOnFlagUntilTimeout>
 8007834:	4603      	mov	r3, r0
 8007836:	2b00      	cmp	r3, #0
 8007838:	d005      	beq.n	8007846 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	2220      	movs	r2, #32
 800783e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8007842:	2303      	movs	r3, #3
 8007844:	e03d      	b.n	80078c2 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8007846:	69fb      	ldr	r3, [r7, #28]
 8007848:	2b00      	cmp	r3, #0
 800784a:	d10b      	bne.n	8007864 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800784c:	69bb      	ldr	r3, [r7, #24]
 800784e:	881b      	ldrh	r3, [r3, #0]
 8007850:	461a      	mov	r2, r3
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800785a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800785c:	69bb      	ldr	r3, [r7, #24]
 800785e:	3302      	adds	r3, #2
 8007860:	61bb      	str	r3, [r7, #24]
 8007862:	e007      	b.n	8007874 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007864:	69fb      	ldr	r3, [r7, #28]
 8007866:	781a      	ldrb	r2, [r3, #0]
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800786e:	69fb      	ldr	r3, [r7, #28]
 8007870:	3301      	adds	r3, #1
 8007872:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800787a:	b29b      	uxth	r3, r3
 800787c:	3b01      	subs	r3, #1
 800787e:	b29a      	uxth	r2, r3
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800788c:	b29b      	uxth	r3, r3
 800788e:	2b00      	cmp	r3, #0
 8007890:	d1c8      	bne.n	8007824 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007892:	683b      	ldr	r3, [r7, #0]
 8007894:	9300      	str	r3, [sp, #0]
 8007896:	697b      	ldr	r3, [r7, #20]
 8007898:	2200      	movs	r2, #0
 800789a:	2140      	movs	r1, #64	@ 0x40
 800789c:	68f8      	ldr	r0, [r7, #12]
 800789e:	f001 fabf 	bl	8008e20 <UART_WaitOnFlagUntilTimeout>
 80078a2:	4603      	mov	r3, r0
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d005      	beq.n	80078b4 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	2220      	movs	r2, #32
 80078ac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 80078b0:	2303      	movs	r3, #3
 80078b2:	e006      	b.n	80078c2 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	2220      	movs	r2, #32
 80078b8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80078bc:	2300      	movs	r3, #0
 80078be:	e000      	b.n	80078c2 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80078c0:	2302      	movs	r3, #2
  }
}
 80078c2:	4618      	mov	r0, r3
 80078c4:	3720      	adds	r7, #32
 80078c6:	46bd      	mov	sp, r7
 80078c8:	bd80      	pop	{r7, pc}
	...

080078cc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80078cc:	b580      	push	{r7, lr}
 80078ce:	b0ba      	sub	sp, #232	@ 0xe8
 80078d0:	af00      	add	r7, sp, #0
 80078d2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	69db      	ldr	r3, [r3, #28]
 80078da:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	689b      	ldr	r3, [r3, #8]
 80078ee:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80078f2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80078f6:	f640 030f 	movw	r3, #2063	@ 0x80f
 80078fa:	4013      	ands	r3, r2
 80078fc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8007900:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007904:	2b00      	cmp	r3, #0
 8007906:	d11b      	bne.n	8007940 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007908:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800790c:	f003 0320 	and.w	r3, r3, #32
 8007910:	2b00      	cmp	r3, #0
 8007912:	d015      	beq.n	8007940 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007914:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007918:	f003 0320 	and.w	r3, r3, #32
 800791c:	2b00      	cmp	r3, #0
 800791e:	d105      	bne.n	800792c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007920:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007924:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007928:	2b00      	cmp	r3, #0
 800792a:	d009      	beq.n	8007940 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007930:	2b00      	cmp	r3, #0
 8007932:	f000 8393 	beq.w	800805c <HAL_UART_IRQHandler+0x790>
      {
        huart->RxISR(huart);
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800793a:	6878      	ldr	r0, [r7, #4]
 800793c:	4798      	blx	r3
      }
      return;
 800793e:	e38d      	b.n	800805c <HAL_UART_IRQHandler+0x790>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007940:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007944:	2b00      	cmp	r3, #0
 8007946:	f000 8123 	beq.w	8007b90 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800794a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800794e:	4b8d      	ldr	r3, [pc, #564]	@ (8007b84 <HAL_UART_IRQHandler+0x2b8>)
 8007950:	4013      	ands	r3, r2
 8007952:	2b00      	cmp	r3, #0
 8007954:	d106      	bne.n	8007964 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8007956:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800795a:	4b8b      	ldr	r3, [pc, #556]	@ (8007b88 <HAL_UART_IRQHandler+0x2bc>)
 800795c:	4013      	ands	r3, r2
 800795e:	2b00      	cmp	r3, #0
 8007960:	f000 8116 	beq.w	8007b90 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007964:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007968:	f003 0301 	and.w	r3, r3, #1
 800796c:	2b00      	cmp	r3, #0
 800796e:	d011      	beq.n	8007994 <HAL_UART_IRQHandler+0xc8>
 8007970:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007974:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007978:	2b00      	cmp	r3, #0
 800797a:	d00b      	beq.n	8007994 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	2201      	movs	r2, #1
 8007982:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800798a:	f043 0201 	orr.w	r2, r3, #1
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007994:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007998:	f003 0302 	and.w	r3, r3, #2
 800799c:	2b00      	cmp	r3, #0
 800799e:	d011      	beq.n	80079c4 <HAL_UART_IRQHandler+0xf8>
 80079a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80079a4:	f003 0301 	and.w	r3, r3, #1
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d00b      	beq.n	80079c4 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	2202      	movs	r2, #2
 80079b2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80079ba:	f043 0204 	orr.w	r2, r3, #4
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80079c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80079c8:	f003 0304 	and.w	r3, r3, #4
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d011      	beq.n	80079f4 <HAL_UART_IRQHandler+0x128>
 80079d0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80079d4:	f003 0301 	and.w	r3, r3, #1
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d00b      	beq.n	80079f4 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	2204      	movs	r2, #4
 80079e2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80079ea:	f043 0202 	orr.w	r2, r3, #2
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80079f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80079f8:	f003 0308 	and.w	r3, r3, #8
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d017      	beq.n	8007a30 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007a00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007a04:	f003 0320 	and.w	r3, r3, #32
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d105      	bne.n	8007a18 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8007a0c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8007a10:	4b5c      	ldr	r3, [pc, #368]	@ (8007b84 <HAL_UART_IRQHandler+0x2b8>)
 8007a12:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d00b      	beq.n	8007a30 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	2208      	movs	r2, #8
 8007a1e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007a26:	f043 0208 	orr.w	r2, r3, #8
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007a30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007a34:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d012      	beq.n	8007a62 <HAL_UART_IRQHandler+0x196>
 8007a3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007a40:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d00c      	beq.n	8007a62 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007a50:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007a58:	f043 0220 	orr.w	r2, r3, #32
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	f000 82f9 	beq.w	8008060 <HAL_UART_IRQHandler+0x794>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007a6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007a72:	f003 0320 	and.w	r3, r3, #32
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d013      	beq.n	8007aa2 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007a7a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007a7e:	f003 0320 	and.w	r3, r3, #32
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d105      	bne.n	8007a92 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007a86:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007a8a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d007      	beq.n	8007aa2 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d003      	beq.n	8007aa2 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007a9e:	6878      	ldr	r0, [r7, #4]
 8007aa0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007aa8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	689b      	ldr	r3, [r3, #8]
 8007ab2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007ab6:	2b40      	cmp	r3, #64	@ 0x40
 8007ab8:	d005      	beq.n	8007ac6 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007aba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007abe:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d054      	beq.n	8007b70 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007ac6:	6878      	ldr	r0, [r7, #4]
 8007ac8:	f001 fa18 	bl	8008efc <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	689b      	ldr	r3, [r3, #8]
 8007ad2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007ad6:	2b40      	cmp	r3, #64	@ 0x40
 8007ad8:	d146      	bne.n	8007b68 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	3308      	adds	r3, #8
 8007ae0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ae4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007ae8:	e853 3f00 	ldrex	r3, [r3]
 8007aec:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8007af0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007af4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007af8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	3308      	adds	r3, #8
 8007b02:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8007b06:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8007b0a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b0e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8007b12:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8007b16:	e841 2300 	strex	r3, r2, [r1]
 8007b1a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8007b1e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d1d9      	bne.n	8007ada <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d017      	beq.n	8007b60 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007b36:	4a15      	ldr	r2, [pc, #84]	@ (8007b8c <HAL_UART_IRQHandler+0x2c0>)
 8007b38:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007b40:	4618      	mov	r0, r3
 8007b42:	f7fa fcdb 	bl	80024fc <HAL_DMA_Abort_IT>
 8007b46:	4603      	mov	r3, r0
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d019      	beq.n	8007b80 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007b52:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007b54:	687a      	ldr	r2, [r7, #4]
 8007b56:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8007b5a:	4610      	mov	r0, r2
 8007b5c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b5e:	e00f      	b.n	8007b80 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007b60:	6878      	ldr	r0, [r7, #4]
 8007b62:	f000 fa93 	bl	800808c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b66:	e00b      	b.n	8007b80 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007b68:	6878      	ldr	r0, [r7, #4]
 8007b6a:	f000 fa8f 	bl	800808c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b6e:	e007      	b.n	8007b80 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007b70:	6878      	ldr	r0, [r7, #4]
 8007b72:	f000 fa8b 	bl	800808c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	2200      	movs	r2, #0
 8007b7a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8007b7e:	e26f      	b.n	8008060 <HAL_UART_IRQHandler+0x794>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b80:	bf00      	nop
    return;
 8007b82:	e26d      	b.n	8008060 <HAL_UART_IRQHandler+0x794>
 8007b84:	10000001 	.word	0x10000001
 8007b88:	04000120 	.word	0x04000120
 8007b8c:	08008fc9 	.word	0x08008fc9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007b94:	2b01      	cmp	r3, #1
 8007b96:	f040 8203 	bne.w	8007fa0 <HAL_UART_IRQHandler+0x6d4>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007b9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007b9e:	f003 0310 	and.w	r3, r3, #16
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	f000 81fc 	beq.w	8007fa0 <HAL_UART_IRQHandler+0x6d4>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007ba8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007bac:	f003 0310 	and.w	r3, r3, #16
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	f000 81f5 	beq.w	8007fa0 <HAL_UART_IRQHandler+0x6d4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	2210      	movs	r2, #16
 8007bbc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	689b      	ldr	r3, [r3, #8]
 8007bc4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007bc8:	2b40      	cmp	r3, #64	@ 0x40
 8007bca:	f040 816d 	bne.w	8007ea8 <HAL_UART_IRQHandler+0x5dc>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	4aa4      	ldr	r2, [pc, #656]	@ (8007e68 <HAL_UART_IRQHandler+0x59c>)
 8007bd8:	4293      	cmp	r3, r2
 8007bda:	d068      	beq.n	8007cae <HAL_UART_IRQHandler+0x3e2>
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	4aa1      	ldr	r2, [pc, #644]	@ (8007e6c <HAL_UART_IRQHandler+0x5a0>)
 8007be6:	4293      	cmp	r3, r2
 8007be8:	d061      	beq.n	8007cae <HAL_UART_IRQHandler+0x3e2>
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	4a9f      	ldr	r2, [pc, #636]	@ (8007e70 <HAL_UART_IRQHandler+0x5a4>)
 8007bf4:	4293      	cmp	r3, r2
 8007bf6:	d05a      	beq.n	8007cae <HAL_UART_IRQHandler+0x3e2>
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	4a9c      	ldr	r2, [pc, #624]	@ (8007e74 <HAL_UART_IRQHandler+0x5a8>)
 8007c02:	4293      	cmp	r3, r2
 8007c04:	d053      	beq.n	8007cae <HAL_UART_IRQHandler+0x3e2>
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	4a9a      	ldr	r2, [pc, #616]	@ (8007e78 <HAL_UART_IRQHandler+0x5ac>)
 8007c10:	4293      	cmp	r3, r2
 8007c12:	d04c      	beq.n	8007cae <HAL_UART_IRQHandler+0x3e2>
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	4a97      	ldr	r2, [pc, #604]	@ (8007e7c <HAL_UART_IRQHandler+0x5b0>)
 8007c1e:	4293      	cmp	r3, r2
 8007c20:	d045      	beq.n	8007cae <HAL_UART_IRQHandler+0x3e2>
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	4a95      	ldr	r2, [pc, #596]	@ (8007e80 <HAL_UART_IRQHandler+0x5b4>)
 8007c2c:	4293      	cmp	r3, r2
 8007c2e:	d03e      	beq.n	8007cae <HAL_UART_IRQHandler+0x3e2>
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	4a92      	ldr	r2, [pc, #584]	@ (8007e84 <HAL_UART_IRQHandler+0x5b8>)
 8007c3a:	4293      	cmp	r3, r2
 8007c3c:	d037      	beq.n	8007cae <HAL_UART_IRQHandler+0x3e2>
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	4a90      	ldr	r2, [pc, #576]	@ (8007e88 <HAL_UART_IRQHandler+0x5bc>)
 8007c48:	4293      	cmp	r3, r2
 8007c4a:	d030      	beq.n	8007cae <HAL_UART_IRQHandler+0x3e2>
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	4a8d      	ldr	r2, [pc, #564]	@ (8007e8c <HAL_UART_IRQHandler+0x5c0>)
 8007c56:	4293      	cmp	r3, r2
 8007c58:	d029      	beq.n	8007cae <HAL_UART_IRQHandler+0x3e2>
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	4a8b      	ldr	r2, [pc, #556]	@ (8007e90 <HAL_UART_IRQHandler+0x5c4>)
 8007c64:	4293      	cmp	r3, r2
 8007c66:	d022      	beq.n	8007cae <HAL_UART_IRQHandler+0x3e2>
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	4a88      	ldr	r2, [pc, #544]	@ (8007e94 <HAL_UART_IRQHandler+0x5c8>)
 8007c72:	4293      	cmp	r3, r2
 8007c74:	d01b      	beq.n	8007cae <HAL_UART_IRQHandler+0x3e2>
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	4a86      	ldr	r2, [pc, #536]	@ (8007e98 <HAL_UART_IRQHandler+0x5cc>)
 8007c80:	4293      	cmp	r3, r2
 8007c82:	d014      	beq.n	8007cae <HAL_UART_IRQHandler+0x3e2>
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	4a83      	ldr	r2, [pc, #524]	@ (8007e9c <HAL_UART_IRQHandler+0x5d0>)
 8007c8e:	4293      	cmp	r3, r2
 8007c90:	d00d      	beq.n	8007cae <HAL_UART_IRQHandler+0x3e2>
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	4a81      	ldr	r2, [pc, #516]	@ (8007ea0 <HAL_UART_IRQHandler+0x5d4>)
 8007c9c:	4293      	cmp	r3, r2
 8007c9e:	d006      	beq.n	8007cae <HAL_UART_IRQHandler+0x3e2>
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	4a7e      	ldr	r2, [pc, #504]	@ (8007ea4 <HAL_UART_IRQHandler+0x5d8>)
 8007caa:	4293      	cmp	r3, r2
 8007cac:	d106      	bne.n	8007cbc <HAL_UART_IRQHandler+0x3f0>
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	685b      	ldr	r3, [r3, #4]
 8007cb8:	b29b      	uxth	r3, r3
 8007cba:	e005      	b.n	8007cc8 <HAL_UART_IRQHandler+0x3fc>
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	685b      	ldr	r3, [r3, #4]
 8007cc6:	b29b      	uxth	r3, r3
 8007cc8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007ccc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	f000 80ad 	beq.w	8007e30 <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007cdc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007ce0:	429a      	cmp	r2, r3
 8007ce2:	f080 80a5 	bcs.w	8007e30 <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007cec:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007cf6:	69db      	ldr	r3, [r3, #28]
 8007cf8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007cfc:	f000 8087 	beq.w	8007e0e <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d08:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007d0c:	e853 3f00 	ldrex	r3, [r3]
 8007d10:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8007d14:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007d18:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007d1c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	461a      	mov	r2, r3
 8007d26:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007d2a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007d2e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d32:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8007d36:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8007d3a:	e841 2300 	strex	r3, r2, [r1]
 8007d3e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8007d42:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d1da      	bne.n	8007d00 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	3308      	adds	r3, #8
 8007d50:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d52:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007d54:	e853 3f00 	ldrex	r3, [r3]
 8007d58:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8007d5a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007d5c:	f023 0301 	bic.w	r3, r3, #1
 8007d60:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	3308      	adds	r3, #8
 8007d6a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8007d6e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8007d72:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d74:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8007d76:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007d7a:	e841 2300 	strex	r3, r2, [r1]
 8007d7e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007d80:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d1e1      	bne.n	8007d4a <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	3308      	adds	r3, #8
 8007d8c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d8e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007d90:	e853 3f00 	ldrex	r3, [r3]
 8007d94:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007d96:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007d98:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007d9c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	3308      	adds	r3, #8
 8007da6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8007daa:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007dac:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dae:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007db0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007db2:	e841 2300 	strex	r3, r2, [r1]
 8007db6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007db8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d1e3      	bne.n	8007d86 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	2220      	movs	r2, #32
 8007dc2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	2200      	movs	r2, #0
 8007dca:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dd2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007dd4:	e853 3f00 	ldrex	r3, [r3]
 8007dd8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007dda:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007ddc:	f023 0310 	bic.w	r3, r3, #16
 8007de0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	461a      	mov	r2, r3
 8007dea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007dee:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007df0:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007df2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007df4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007df6:	e841 2300 	strex	r3, r2, [r1]
 8007dfa:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007dfc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d1e4      	bne.n	8007dcc <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007e08:	4618      	mov	r0, r3
 8007e0a:	f7fa f859 	bl	8001ec0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	2202      	movs	r2, #2
 8007e12:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007e20:	b29b      	uxth	r3, r3
 8007e22:	1ad3      	subs	r3, r2, r3
 8007e24:	b29b      	uxth	r3, r3
 8007e26:	4619      	mov	r1, r3
 8007e28:	6878      	ldr	r0, [r7, #4]
 8007e2a:	f000 f939 	bl	80080a0 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8007e2e:	e119      	b.n	8008064 <HAL_UART_IRQHandler+0x798>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007e36:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007e3a:	429a      	cmp	r2, r3
 8007e3c:	f040 8112 	bne.w	8008064 <HAL_UART_IRQHandler+0x798>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007e46:	69db      	ldr	r3, [r3, #28]
 8007e48:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007e4c:	f040 810a 	bne.w	8008064 <HAL_UART_IRQHandler+0x798>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	2202      	movs	r2, #2
 8007e54:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007e5c:	4619      	mov	r1, r3
 8007e5e:	6878      	ldr	r0, [r7, #4]
 8007e60:	f000 f91e 	bl	80080a0 <HAL_UARTEx_RxEventCallback>
      return;
 8007e64:	e0fe      	b.n	8008064 <HAL_UART_IRQHandler+0x798>
 8007e66:	bf00      	nop
 8007e68:	40020010 	.word	0x40020010
 8007e6c:	40020028 	.word	0x40020028
 8007e70:	40020040 	.word	0x40020040
 8007e74:	40020058 	.word	0x40020058
 8007e78:	40020070 	.word	0x40020070
 8007e7c:	40020088 	.word	0x40020088
 8007e80:	400200a0 	.word	0x400200a0
 8007e84:	400200b8 	.word	0x400200b8
 8007e88:	40020410 	.word	0x40020410
 8007e8c:	40020428 	.word	0x40020428
 8007e90:	40020440 	.word	0x40020440
 8007e94:	40020458 	.word	0x40020458
 8007e98:	40020470 	.word	0x40020470
 8007e9c:	40020488 	.word	0x40020488
 8007ea0:	400204a0 	.word	0x400204a0
 8007ea4:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007eb4:	b29b      	uxth	r3, r3
 8007eb6:	1ad3      	subs	r3, r2, r3
 8007eb8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007ec2:	b29b      	uxth	r3, r3
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	f000 80cf 	beq.w	8008068 <HAL_UART_IRQHandler+0x79c>
          && (nb_rx_data > 0U))
 8007eca:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	f000 80ca 	beq.w	8008068 <HAL_UART_IRQHandler+0x79c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007eda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007edc:	e853 3f00 	ldrex	r3, [r3]
 8007ee0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007ee2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007ee4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007ee8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	461a      	mov	r2, r3
 8007ef2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007ef6:	647b      	str	r3, [r7, #68]	@ 0x44
 8007ef8:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007efa:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007efc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007efe:	e841 2300 	strex	r3, r2, [r1]
 8007f02:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007f04:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d1e4      	bne.n	8007ed4 <HAL_UART_IRQHandler+0x608>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	3308      	adds	r3, #8
 8007f10:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f14:	e853 3f00 	ldrex	r3, [r3]
 8007f18:	623b      	str	r3, [r7, #32]
   return(result);
 8007f1a:	6a3a      	ldr	r2, [r7, #32]
 8007f1c:	4b55      	ldr	r3, [pc, #340]	@ (8008074 <HAL_UART_IRQHandler+0x7a8>)
 8007f1e:	4013      	ands	r3, r2
 8007f20:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	3308      	adds	r3, #8
 8007f2a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8007f2e:	633a      	str	r2, [r7, #48]	@ 0x30
 8007f30:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f32:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007f34:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007f36:	e841 2300 	strex	r3, r2, [r1]
 8007f3a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007f3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d1e3      	bne.n	8007f0a <HAL_UART_IRQHandler+0x63e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	2220      	movs	r2, #32
 8007f46:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	2200      	movs	r2, #0
 8007f4e:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	2200      	movs	r2, #0
 8007f54:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f5c:	693b      	ldr	r3, [r7, #16]
 8007f5e:	e853 3f00 	ldrex	r3, [r3]
 8007f62:	60fb      	str	r3, [r7, #12]
   return(result);
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	f023 0310 	bic.w	r3, r3, #16
 8007f6a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	461a      	mov	r2, r3
 8007f74:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8007f78:	61fb      	str	r3, [r7, #28]
 8007f7a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f7c:	69b9      	ldr	r1, [r7, #24]
 8007f7e:	69fa      	ldr	r2, [r7, #28]
 8007f80:	e841 2300 	strex	r3, r2, [r1]
 8007f84:	617b      	str	r3, [r7, #20]
   return(result);
 8007f86:	697b      	ldr	r3, [r7, #20]
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d1e4      	bne.n	8007f56 <HAL_UART_IRQHandler+0x68a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	2202      	movs	r2, #2
 8007f90:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007f92:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007f96:	4619      	mov	r1, r3
 8007f98:	6878      	ldr	r0, [r7, #4]
 8007f9a:	f000 f881 	bl	80080a0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007f9e:	e063      	b.n	8008068 <HAL_UART_IRQHandler+0x79c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007fa0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007fa4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d00e      	beq.n	8007fca <HAL_UART_IRQHandler+0x6fe>
 8007fac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007fb0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d008      	beq.n	8007fca <HAL_UART_IRQHandler+0x6fe>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8007fc0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007fc2:	6878      	ldr	r0, [r7, #4]
 8007fc4:	f001 f83d 	bl	8009042 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007fc8:	e051      	b.n	800806e <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8007fca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007fce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d014      	beq.n	8008000 <HAL_UART_IRQHandler+0x734>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8007fd6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007fda:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d105      	bne.n	8007fee <HAL_UART_IRQHandler+0x722>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8007fe2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007fe6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d008      	beq.n	8008000 <HAL_UART_IRQHandler+0x734>
  {
    if (huart->TxISR != NULL)
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d03a      	beq.n	800806c <HAL_UART_IRQHandler+0x7a0>
    {
      huart->TxISR(huart);
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007ffa:	6878      	ldr	r0, [r7, #4]
 8007ffc:	4798      	blx	r3
    }
    return;
 8007ffe:	e035      	b.n	800806c <HAL_UART_IRQHandler+0x7a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008000:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008004:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008008:	2b00      	cmp	r3, #0
 800800a:	d009      	beq.n	8008020 <HAL_UART_IRQHandler+0x754>
 800800c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008010:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008014:	2b00      	cmp	r3, #0
 8008016:	d003      	beq.n	8008020 <HAL_UART_IRQHandler+0x754>
  {
    UART_EndTransmit_IT(huart);
 8008018:	6878      	ldr	r0, [r7, #4]
 800801a:	f000 ffe7 	bl	8008fec <UART_EndTransmit_IT>
    return;
 800801e:	e026      	b.n	800806e <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8008020:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008024:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008028:	2b00      	cmp	r3, #0
 800802a:	d009      	beq.n	8008040 <HAL_UART_IRQHandler+0x774>
 800802c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008030:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8008034:	2b00      	cmp	r3, #0
 8008036:	d003      	beq.n	8008040 <HAL_UART_IRQHandler+0x774>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8008038:	6878      	ldr	r0, [r7, #4]
 800803a:	f001 f816 	bl	800906a <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800803e:	e016      	b.n	800806e <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8008040:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008044:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008048:	2b00      	cmp	r3, #0
 800804a:	d010      	beq.n	800806e <HAL_UART_IRQHandler+0x7a2>
 800804c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008050:	2b00      	cmp	r3, #0
 8008052:	da0c      	bge.n	800806e <HAL_UART_IRQHandler+0x7a2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8008054:	6878      	ldr	r0, [r7, #4]
 8008056:	f000 fffe 	bl	8009056 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800805a:	e008      	b.n	800806e <HAL_UART_IRQHandler+0x7a2>
      return;
 800805c:	bf00      	nop
 800805e:	e006      	b.n	800806e <HAL_UART_IRQHandler+0x7a2>
    return;
 8008060:	bf00      	nop
 8008062:	e004      	b.n	800806e <HAL_UART_IRQHandler+0x7a2>
      return;
 8008064:	bf00      	nop
 8008066:	e002      	b.n	800806e <HAL_UART_IRQHandler+0x7a2>
      return;
 8008068:	bf00      	nop
 800806a:	e000      	b.n	800806e <HAL_UART_IRQHandler+0x7a2>
    return;
 800806c:	bf00      	nop
  }
}
 800806e:	37e8      	adds	r7, #232	@ 0xe8
 8008070:	46bd      	mov	sp, r7
 8008072:	bd80      	pop	{r7, pc}
 8008074:	effffffe 	.word	0xeffffffe

08008078 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008078:	b480      	push	{r7}
 800807a:	b083      	sub	sp, #12
 800807c:	af00      	add	r7, sp, #0
 800807e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8008080:	bf00      	nop
 8008082:	370c      	adds	r7, #12
 8008084:	46bd      	mov	sp, r7
 8008086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800808a:	4770      	bx	lr

0800808c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800808c:	b480      	push	{r7}
 800808e:	b083      	sub	sp, #12
 8008090:	af00      	add	r7, sp, #0
 8008092:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008094:	bf00      	nop
 8008096:	370c      	adds	r7, #12
 8008098:	46bd      	mov	sp, r7
 800809a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800809e:	4770      	bx	lr

080080a0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80080a0:	b480      	push	{r7}
 80080a2:	b083      	sub	sp, #12
 80080a4:	af00      	add	r7, sp, #0
 80080a6:	6078      	str	r0, [r7, #4]
 80080a8:	460b      	mov	r3, r1
 80080aa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80080ac:	bf00      	nop
 80080ae:	370c      	adds	r7, #12
 80080b0:	46bd      	mov	sp, r7
 80080b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b6:	4770      	bx	lr

080080b8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80080b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80080bc:	b092      	sub	sp, #72	@ 0x48
 80080be:	af00      	add	r7, sp, #0
 80080c0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80080c2:	2300      	movs	r3, #0
 80080c4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80080c8:	697b      	ldr	r3, [r7, #20]
 80080ca:	689a      	ldr	r2, [r3, #8]
 80080cc:	697b      	ldr	r3, [r7, #20]
 80080ce:	691b      	ldr	r3, [r3, #16]
 80080d0:	431a      	orrs	r2, r3
 80080d2:	697b      	ldr	r3, [r7, #20]
 80080d4:	695b      	ldr	r3, [r3, #20]
 80080d6:	431a      	orrs	r2, r3
 80080d8:	697b      	ldr	r3, [r7, #20]
 80080da:	69db      	ldr	r3, [r3, #28]
 80080dc:	4313      	orrs	r3, r2
 80080de:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80080e0:	697b      	ldr	r3, [r7, #20]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	681a      	ldr	r2, [r3, #0]
 80080e6:	4bbe      	ldr	r3, [pc, #760]	@ (80083e0 <UART_SetConfig+0x328>)
 80080e8:	4013      	ands	r3, r2
 80080ea:	697a      	ldr	r2, [r7, #20]
 80080ec:	6812      	ldr	r2, [r2, #0]
 80080ee:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80080f0:	430b      	orrs	r3, r1
 80080f2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80080f4:	697b      	ldr	r3, [r7, #20]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	685b      	ldr	r3, [r3, #4]
 80080fa:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80080fe:	697b      	ldr	r3, [r7, #20]
 8008100:	68da      	ldr	r2, [r3, #12]
 8008102:	697b      	ldr	r3, [r7, #20]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	430a      	orrs	r2, r1
 8008108:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800810a:	697b      	ldr	r3, [r7, #20]
 800810c:	699b      	ldr	r3, [r3, #24]
 800810e:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008110:	697b      	ldr	r3, [r7, #20]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	4ab3      	ldr	r2, [pc, #716]	@ (80083e4 <UART_SetConfig+0x32c>)
 8008116:	4293      	cmp	r3, r2
 8008118:	d004      	beq.n	8008124 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800811a:	697b      	ldr	r3, [r7, #20]
 800811c:	6a1b      	ldr	r3, [r3, #32]
 800811e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008120:	4313      	orrs	r3, r2
 8008122:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008124:	697b      	ldr	r3, [r7, #20]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	689a      	ldr	r2, [r3, #8]
 800812a:	4baf      	ldr	r3, [pc, #700]	@ (80083e8 <UART_SetConfig+0x330>)
 800812c:	4013      	ands	r3, r2
 800812e:	697a      	ldr	r2, [r7, #20]
 8008130:	6812      	ldr	r2, [r2, #0]
 8008132:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8008134:	430b      	orrs	r3, r1
 8008136:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008138:	697b      	ldr	r3, [r7, #20]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800813e:	f023 010f 	bic.w	r1, r3, #15
 8008142:	697b      	ldr	r3, [r7, #20]
 8008144:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008146:	697b      	ldr	r3, [r7, #20]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	430a      	orrs	r2, r1
 800814c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800814e:	697b      	ldr	r3, [r7, #20]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	4aa6      	ldr	r2, [pc, #664]	@ (80083ec <UART_SetConfig+0x334>)
 8008154:	4293      	cmp	r3, r2
 8008156:	d177      	bne.n	8008248 <UART_SetConfig+0x190>
 8008158:	4ba5      	ldr	r3, [pc, #660]	@ (80083f0 <UART_SetConfig+0x338>)
 800815a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800815c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008160:	2b28      	cmp	r3, #40	@ 0x28
 8008162:	d86d      	bhi.n	8008240 <UART_SetConfig+0x188>
 8008164:	a201      	add	r2, pc, #4	@ (adr r2, 800816c <UART_SetConfig+0xb4>)
 8008166:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800816a:	bf00      	nop
 800816c:	08008211 	.word	0x08008211
 8008170:	08008241 	.word	0x08008241
 8008174:	08008241 	.word	0x08008241
 8008178:	08008241 	.word	0x08008241
 800817c:	08008241 	.word	0x08008241
 8008180:	08008241 	.word	0x08008241
 8008184:	08008241 	.word	0x08008241
 8008188:	08008241 	.word	0x08008241
 800818c:	08008219 	.word	0x08008219
 8008190:	08008241 	.word	0x08008241
 8008194:	08008241 	.word	0x08008241
 8008198:	08008241 	.word	0x08008241
 800819c:	08008241 	.word	0x08008241
 80081a0:	08008241 	.word	0x08008241
 80081a4:	08008241 	.word	0x08008241
 80081a8:	08008241 	.word	0x08008241
 80081ac:	08008221 	.word	0x08008221
 80081b0:	08008241 	.word	0x08008241
 80081b4:	08008241 	.word	0x08008241
 80081b8:	08008241 	.word	0x08008241
 80081bc:	08008241 	.word	0x08008241
 80081c0:	08008241 	.word	0x08008241
 80081c4:	08008241 	.word	0x08008241
 80081c8:	08008241 	.word	0x08008241
 80081cc:	08008229 	.word	0x08008229
 80081d0:	08008241 	.word	0x08008241
 80081d4:	08008241 	.word	0x08008241
 80081d8:	08008241 	.word	0x08008241
 80081dc:	08008241 	.word	0x08008241
 80081e0:	08008241 	.word	0x08008241
 80081e4:	08008241 	.word	0x08008241
 80081e8:	08008241 	.word	0x08008241
 80081ec:	08008231 	.word	0x08008231
 80081f0:	08008241 	.word	0x08008241
 80081f4:	08008241 	.word	0x08008241
 80081f8:	08008241 	.word	0x08008241
 80081fc:	08008241 	.word	0x08008241
 8008200:	08008241 	.word	0x08008241
 8008204:	08008241 	.word	0x08008241
 8008208:	08008241 	.word	0x08008241
 800820c:	08008239 	.word	0x08008239
 8008210:	2301      	movs	r3, #1
 8008212:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008216:	e222      	b.n	800865e <UART_SetConfig+0x5a6>
 8008218:	2304      	movs	r3, #4
 800821a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800821e:	e21e      	b.n	800865e <UART_SetConfig+0x5a6>
 8008220:	2308      	movs	r3, #8
 8008222:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008226:	e21a      	b.n	800865e <UART_SetConfig+0x5a6>
 8008228:	2310      	movs	r3, #16
 800822a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800822e:	e216      	b.n	800865e <UART_SetConfig+0x5a6>
 8008230:	2320      	movs	r3, #32
 8008232:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008236:	e212      	b.n	800865e <UART_SetConfig+0x5a6>
 8008238:	2340      	movs	r3, #64	@ 0x40
 800823a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800823e:	e20e      	b.n	800865e <UART_SetConfig+0x5a6>
 8008240:	2380      	movs	r3, #128	@ 0x80
 8008242:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008246:	e20a      	b.n	800865e <UART_SetConfig+0x5a6>
 8008248:	697b      	ldr	r3, [r7, #20]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	4a69      	ldr	r2, [pc, #420]	@ (80083f4 <UART_SetConfig+0x33c>)
 800824e:	4293      	cmp	r3, r2
 8008250:	d130      	bne.n	80082b4 <UART_SetConfig+0x1fc>
 8008252:	4b67      	ldr	r3, [pc, #412]	@ (80083f0 <UART_SetConfig+0x338>)
 8008254:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008256:	f003 0307 	and.w	r3, r3, #7
 800825a:	2b05      	cmp	r3, #5
 800825c:	d826      	bhi.n	80082ac <UART_SetConfig+0x1f4>
 800825e:	a201      	add	r2, pc, #4	@ (adr r2, 8008264 <UART_SetConfig+0x1ac>)
 8008260:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008264:	0800827d 	.word	0x0800827d
 8008268:	08008285 	.word	0x08008285
 800826c:	0800828d 	.word	0x0800828d
 8008270:	08008295 	.word	0x08008295
 8008274:	0800829d 	.word	0x0800829d
 8008278:	080082a5 	.word	0x080082a5
 800827c:	2300      	movs	r3, #0
 800827e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008282:	e1ec      	b.n	800865e <UART_SetConfig+0x5a6>
 8008284:	2304      	movs	r3, #4
 8008286:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800828a:	e1e8      	b.n	800865e <UART_SetConfig+0x5a6>
 800828c:	2308      	movs	r3, #8
 800828e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008292:	e1e4      	b.n	800865e <UART_SetConfig+0x5a6>
 8008294:	2310      	movs	r3, #16
 8008296:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800829a:	e1e0      	b.n	800865e <UART_SetConfig+0x5a6>
 800829c:	2320      	movs	r3, #32
 800829e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80082a2:	e1dc      	b.n	800865e <UART_SetConfig+0x5a6>
 80082a4:	2340      	movs	r3, #64	@ 0x40
 80082a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80082aa:	e1d8      	b.n	800865e <UART_SetConfig+0x5a6>
 80082ac:	2380      	movs	r3, #128	@ 0x80
 80082ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80082b2:	e1d4      	b.n	800865e <UART_SetConfig+0x5a6>
 80082b4:	697b      	ldr	r3, [r7, #20]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	4a4f      	ldr	r2, [pc, #316]	@ (80083f8 <UART_SetConfig+0x340>)
 80082ba:	4293      	cmp	r3, r2
 80082bc:	d130      	bne.n	8008320 <UART_SetConfig+0x268>
 80082be:	4b4c      	ldr	r3, [pc, #304]	@ (80083f0 <UART_SetConfig+0x338>)
 80082c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80082c2:	f003 0307 	and.w	r3, r3, #7
 80082c6:	2b05      	cmp	r3, #5
 80082c8:	d826      	bhi.n	8008318 <UART_SetConfig+0x260>
 80082ca:	a201      	add	r2, pc, #4	@ (adr r2, 80082d0 <UART_SetConfig+0x218>)
 80082cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082d0:	080082e9 	.word	0x080082e9
 80082d4:	080082f1 	.word	0x080082f1
 80082d8:	080082f9 	.word	0x080082f9
 80082dc:	08008301 	.word	0x08008301
 80082e0:	08008309 	.word	0x08008309
 80082e4:	08008311 	.word	0x08008311
 80082e8:	2300      	movs	r3, #0
 80082ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80082ee:	e1b6      	b.n	800865e <UART_SetConfig+0x5a6>
 80082f0:	2304      	movs	r3, #4
 80082f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80082f6:	e1b2      	b.n	800865e <UART_SetConfig+0x5a6>
 80082f8:	2308      	movs	r3, #8
 80082fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80082fe:	e1ae      	b.n	800865e <UART_SetConfig+0x5a6>
 8008300:	2310      	movs	r3, #16
 8008302:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008306:	e1aa      	b.n	800865e <UART_SetConfig+0x5a6>
 8008308:	2320      	movs	r3, #32
 800830a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800830e:	e1a6      	b.n	800865e <UART_SetConfig+0x5a6>
 8008310:	2340      	movs	r3, #64	@ 0x40
 8008312:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008316:	e1a2      	b.n	800865e <UART_SetConfig+0x5a6>
 8008318:	2380      	movs	r3, #128	@ 0x80
 800831a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800831e:	e19e      	b.n	800865e <UART_SetConfig+0x5a6>
 8008320:	697b      	ldr	r3, [r7, #20]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	4a35      	ldr	r2, [pc, #212]	@ (80083fc <UART_SetConfig+0x344>)
 8008326:	4293      	cmp	r3, r2
 8008328:	d130      	bne.n	800838c <UART_SetConfig+0x2d4>
 800832a:	4b31      	ldr	r3, [pc, #196]	@ (80083f0 <UART_SetConfig+0x338>)
 800832c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800832e:	f003 0307 	and.w	r3, r3, #7
 8008332:	2b05      	cmp	r3, #5
 8008334:	d826      	bhi.n	8008384 <UART_SetConfig+0x2cc>
 8008336:	a201      	add	r2, pc, #4	@ (adr r2, 800833c <UART_SetConfig+0x284>)
 8008338:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800833c:	08008355 	.word	0x08008355
 8008340:	0800835d 	.word	0x0800835d
 8008344:	08008365 	.word	0x08008365
 8008348:	0800836d 	.word	0x0800836d
 800834c:	08008375 	.word	0x08008375
 8008350:	0800837d 	.word	0x0800837d
 8008354:	2300      	movs	r3, #0
 8008356:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800835a:	e180      	b.n	800865e <UART_SetConfig+0x5a6>
 800835c:	2304      	movs	r3, #4
 800835e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008362:	e17c      	b.n	800865e <UART_SetConfig+0x5a6>
 8008364:	2308      	movs	r3, #8
 8008366:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800836a:	e178      	b.n	800865e <UART_SetConfig+0x5a6>
 800836c:	2310      	movs	r3, #16
 800836e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008372:	e174      	b.n	800865e <UART_SetConfig+0x5a6>
 8008374:	2320      	movs	r3, #32
 8008376:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800837a:	e170      	b.n	800865e <UART_SetConfig+0x5a6>
 800837c:	2340      	movs	r3, #64	@ 0x40
 800837e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008382:	e16c      	b.n	800865e <UART_SetConfig+0x5a6>
 8008384:	2380      	movs	r3, #128	@ 0x80
 8008386:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800838a:	e168      	b.n	800865e <UART_SetConfig+0x5a6>
 800838c:	697b      	ldr	r3, [r7, #20]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	4a1b      	ldr	r2, [pc, #108]	@ (8008400 <UART_SetConfig+0x348>)
 8008392:	4293      	cmp	r3, r2
 8008394:	d142      	bne.n	800841c <UART_SetConfig+0x364>
 8008396:	4b16      	ldr	r3, [pc, #88]	@ (80083f0 <UART_SetConfig+0x338>)
 8008398:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800839a:	f003 0307 	and.w	r3, r3, #7
 800839e:	2b05      	cmp	r3, #5
 80083a0:	d838      	bhi.n	8008414 <UART_SetConfig+0x35c>
 80083a2:	a201      	add	r2, pc, #4	@ (adr r2, 80083a8 <UART_SetConfig+0x2f0>)
 80083a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083a8:	080083c1 	.word	0x080083c1
 80083ac:	080083c9 	.word	0x080083c9
 80083b0:	080083d1 	.word	0x080083d1
 80083b4:	080083d9 	.word	0x080083d9
 80083b8:	08008405 	.word	0x08008405
 80083bc:	0800840d 	.word	0x0800840d
 80083c0:	2300      	movs	r3, #0
 80083c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80083c6:	e14a      	b.n	800865e <UART_SetConfig+0x5a6>
 80083c8:	2304      	movs	r3, #4
 80083ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80083ce:	e146      	b.n	800865e <UART_SetConfig+0x5a6>
 80083d0:	2308      	movs	r3, #8
 80083d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80083d6:	e142      	b.n	800865e <UART_SetConfig+0x5a6>
 80083d8:	2310      	movs	r3, #16
 80083da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80083de:	e13e      	b.n	800865e <UART_SetConfig+0x5a6>
 80083e0:	cfff69f3 	.word	0xcfff69f3
 80083e4:	58000c00 	.word	0x58000c00
 80083e8:	11fff4ff 	.word	0x11fff4ff
 80083ec:	40011000 	.word	0x40011000
 80083f0:	58024400 	.word	0x58024400
 80083f4:	40004400 	.word	0x40004400
 80083f8:	40004800 	.word	0x40004800
 80083fc:	40004c00 	.word	0x40004c00
 8008400:	40005000 	.word	0x40005000
 8008404:	2320      	movs	r3, #32
 8008406:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800840a:	e128      	b.n	800865e <UART_SetConfig+0x5a6>
 800840c:	2340      	movs	r3, #64	@ 0x40
 800840e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008412:	e124      	b.n	800865e <UART_SetConfig+0x5a6>
 8008414:	2380      	movs	r3, #128	@ 0x80
 8008416:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800841a:	e120      	b.n	800865e <UART_SetConfig+0x5a6>
 800841c:	697b      	ldr	r3, [r7, #20]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	4acb      	ldr	r2, [pc, #812]	@ (8008750 <UART_SetConfig+0x698>)
 8008422:	4293      	cmp	r3, r2
 8008424:	d176      	bne.n	8008514 <UART_SetConfig+0x45c>
 8008426:	4bcb      	ldr	r3, [pc, #812]	@ (8008754 <UART_SetConfig+0x69c>)
 8008428:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800842a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800842e:	2b28      	cmp	r3, #40	@ 0x28
 8008430:	d86c      	bhi.n	800850c <UART_SetConfig+0x454>
 8008432:	a201      	add	r2, pc, #4	@ (adr r2, 8008438 <UART_SetConfig+0x380>)
 8008434:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008438:	080084dd 	.word	0x080084dd
 800843c:	0800850d 	.word	0x0800850d
 8008440:	0800850d 	.word	0x0800850d
 8008444:	0800850d 	.word	0x0800850d
 8008448:	0800850d 	.word	0x0800850d
 800844c:	0800850d 	.word	0x0800850d
 8008450:	0800850d 	.word	0x0800850d
 8008454:	0800850d 	.word	0x0800850d
 8008458:	080084e5 	.word	0x080084e5
 800845c:	0800850d 	.word	0x0800850d
 8008460:	0800850d 	.word	0x0800850d
 8008464:	0800850d 	.word	0x0800850d
 8008468:	0800850d 	.word	0x0800850d
 800846c:	0800850d 	.word	0x0800850d
 8008470:	0800850d 	.word	0x0800850d
 8008474:	0800850d 	.word	0x0800850d
 8008478:	080084ed 	.word	0x080084ed
 800847c:	0800850d 	.word	0x0800850d
 8008480:	0800850d 	.word	0x0800850d
 8008484:	0800850d 	.word	0x0800850d
 8008488:	0800850d 	.word	0x0800850d
 800848c:	0800850d 	.word	0x0800850d
 8008490:	0800850d 	.word	0x0800850d
 8008494:	0800850d 	.word	0x0800850d
 8008498:	080084f5 	.word	0x080084f5
 800849c:	0800850d 	.word	0x0800850d
 80084a0:	0800850d 	.word	0x0800850d
 80084a4:	0800850d 	.word	0x0800850d
 80084a8:	0800850d 	.word	0x0800850d
 80084ac:	0800850d 	.word	0x0800850d
 80084b0:	0800850d 	.word	0x0800850d
 80084b4:	0800850d 	.word	0x0800850d
 80084b8:	080084fd 	.word	0x080084fd
 80084bc:	0800850d 	.word	0x0800850d
 80084c0:	0800850d 	.word	0x0800850d
 80084c4:	0800850d 	.word	0x0800850d
 80084c8:	0800850d 	.word	0x0800850d
 80084cc:	0800850d 	.word	0x0800850d
 80084d0:	0800850d 	.word	0x0800850d
 80084d4:	0800850d 	.word	0x0800850d
 80084d8:	08008505 	.word	0x08008505
 80084dc:	2301      	movs	r3, #1
 80084de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80084e2:	e0bc      	b.n	800865e <UART_SetConfig+0x5a6>
 80084e4:	2304      	movs	r3, #4
 80084e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80084ea:	e0b8      	b.n	800865e <UART_SetConfig+0x5a6>
 80084ec:	2308      	movs	r3, #8
 80084ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80084f2:	e0b4      	b.n	800865e <UART_SetConfig+0x5a6>
 80084f4:	2310      	movs	r3, #16
 80084f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80084fa:	e0b0      	b.n	800865e <UART_SetConfig+0x5a6>
 80084fc:	2320      	movs	r3, #32
 80084fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008502:	e0ac      	b.n	800865e <UART_SetConfig+0x5a6>
 8008504:	2340      	movs	r3, #64	@ 0x40
 8008506:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800850a:	e0a8      	b.n	800865e <UART_SetConfig+0x5a6>
 800850c:	2380      	movs	r3, #128	@ 0x80
 800850e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008512:	e0a4      	b.n	800865e <UART_SetConfig+0x5a6>
 8008514:	697b      	ldr	r3, [r7, #20]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	4a8f      	ldr	r2, [pc, #572]	@ (8008758 <UART_SetConfig+0x6a0>)
 800851a:	4293      	cmp	r3, r2
 800851c:	d130      	bne.n	8008580 <UART_SetConfig+0x4c8>
 800851e:	4b8d      	ldr	r3, [pc, #564]	@ (8008754 <UART_SetConfig+0x69c>)
 8008520:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008522:	f003 0307 	and.w	r3, r3, #7
 8008526:	2b05      	cmp	r3, #5
 8008528:	d826      	bhi.n	8008578 <UART_SetConfig+0x4c0>
 800852a:	a201      	add	r2, pc, #4	@ (adr r2, 8008530 <UART_SetConfig+0x478>)
 800852c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008530:	08008549 	.word	0x08008549
 8008534:	08008551 	.word	0x08008551
 8008538:	08008559 	.word	0x08008559
 800853c:	08008561 	.word	0x08008561
 8008540:	08008569 	.word	0x08008569
 8008544:	08008571 	.word	0x08008571
 8008548:	2300      	movs	r3, #0
 800854a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800854e:	e086      	b.n	800865e <UART_SetConfig+0x5a6>
 8008550:	2304      	movs	r3, #4
 8008552:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008556:	e082      	b.n	800865e <UART_SetConfig+0x5a6>
 8008558:	2308      	movs	r3, #8
 800855a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800855e:	e07e      	b.n	800865e <UART_SetConfig+0x5a6>
 8008560:	2310      	movs	r3, #16
 8008562:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008566:	e07a      	b.n	800865e <UART_SetConfig+0x5a6>
 8008568:	2320      	movs	r3, #32
 800856a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800856e:	e076      	b.n	800865e <UART_SetConfig+0x5a6>
 8008570:	2340      	movs	r3, #64	@ 0x40
 8008572:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008576:	e072      	b.n	800865e <UART_SetConfig+0x5a6>
 8008578:	2380      	movs	r3, #128	@ 0x80
 800857a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800857e:	e06e      	b.n	800865e <UART_SetConfig+0x5a6>
 8008580:	697b      	ldr	r3, [r7, #20]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	4a75      	ldr	r2, [pc, #468]	@ (800875c <UART_SetConfig+0x6a4>)
 8008586:	4293      	cmp	r3, r2
 8008588:	d130      	bne.n	80085ec <UART_SetConfig+0x534>
 800858a:	4b72      	ldr	r3, [pc, #456]	@ (8008754 <UART_SetConfig+0x69c>)
 800858c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800858e:	f003 0307 	and.w	r3, r3, #7
 8008592:	2b05      	cmp	r3, #5
 8008594:	d826      	bhi.n	80085e4 <UART_SetConfig+0x52c>
 8008596:	a201      	add	r2, pc, #4	@ (adr r2, 800859c <UART_SetConfig+0x4e4>)
 8008598:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800859c:	080085b5 	.word	0x080085b5
 80085a0:	080085bd 	.word	0x080085bd
 80085a4:	080085c5 	.word	0x080085c5
 80085a8:	080085cd 	.word	0x080085cd
 80085ac:	080085d5 	.word	0x080085d5
 80085b0:	080085dd 	.word	0x080085dd
 80085b4:	2300      	movs	r3, #0
 80085b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80085ba:	e050      	b.n	800865e <UART_SetConfig+0x5a6>
 80085bc:	2304      	movs	r3, #4
 80085be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80085c2:	e04c      	b.n	800865e <UART_SetConfig+0x5a6>
 80085c4:	2308      	movs	r3, #8
 80085c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80085ca:	e048      	b.n	800865e <UART_SetConfig+0x5a6>
 80085cc:	2310      	movs	r3, #16
 80085ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80085d2:	e044      	b.n	800865e <UART_SetConfig+0x5a6>
 80085d4:	2320      	movs	r3, #32
 80085d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80085da:	e040      	b.n	800865e <UART_SetConfig+0x5a6>
 80085dc:	2340      	movs	r3, #64	@ 0x40
 80085de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80085e2:	e03c      	b.n	800865e <UART_SetConfig+0x5a6>
 80085e4:	2380      	movs	r3, #128	@ 0x80
 80085e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80085ea:	e038      	b.n	800865e <UART_SetConfig+0x5a6>
 80085ec:	697b      	ldr	r3, [r7, #20]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	4a5b      	ldr	r2, [pc, #364]	@ (8008760 <UART_SetConfig+0x6a8>)
 80085f2:	4293      	cmp	r3, r2
 80085f4:	d130      	bne.n	8008658 <UART_SetConfig+0x5a0>
 80085f6:	4b57      	ldr	r3, [pc, #348]	@ (8008754 <UART_SetConfig+0x69c>)
 80085f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80085fa:	f003 0307 	and.w	r3, r3, #7
 80085fe:	2b05      	cmp	r3, #5
 8008600:	d826      	bhi.n	8008650 <UART_SetConfig+0x598>
 8008602:	a201      	add	r2, pc, #4	@ (adr r2, 8008608 <UART_SetConfig+0x550>)
 8008604:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008608:	08008621 	.word	0x08008621
 800860c:	08008629 	.word	0x08008629
 8008610:	08008631 	.word	0x08008631
 8008614:	08008639 	.word	0x08008639
 8008618:	08008641 	.word	0x08008641
 800861c:	08008649 	.word	0x08008649
 8008620:	2302      	movs	r3, #2
 8008622:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008626:	e01a      	b.n	800865e <UART_SetConfig+0x5a6>
 8008628:	2304      	movs	r3, #4
 800862a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800862e:	e016      	b.n	800865e <UART_SetConfig+0x5a6>
 8008630:	2308      	movs	r3, #8
 8008632:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008636:	e012      	b.n	800865e <UART_SetConfig+0x5a6>
 8008638:	2310      	movs	r3, #16
 800863a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800863e:	e00e      	b.n	800865e <UART_SetConfig+0x5a6>
 8008640:	2320      	movs	r3, #32
 8008642:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008646:	e00a      	b.n	800865e <UART_SetConfig+0x5a6>
 8008648:	2340      	movs	r3, #64	@ 0x40
 800864a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800864e:	e006      	b.n	800865e <UART_SetConfig+0x5a6>
 8008650:	2380      	movs	r3, #128	@ 0x80
 8008652:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008656:	e002      	b.n	800865e <UART_SetConfig+0x5a6>
 8008658:	2380      	movs	r3, #128	@ 0x80
 800865a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800865e:	697b      	ldr	r3, [r7, #20]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	4a3f      	ldr	r2, [pc, #252]	@ (8008760 <UART_SetConfig+0x6a8>)
 8008664:	4293      	cmp	r3, r2
 8008666:	f040 80f8 	bne.w	800885a <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800866a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800866e:	2b20      	cmp	r3, #32
 8008670:	dc46      	bgt.n	8008700 <UART_SetConfig+0x648>
 8008672:	2b02      	cmp	r3, #2
 8008674:	f2c0 8082 	blt.w	800877c <UART_SetConfig+0x6c4>
 8008678:	3b02      	subs	r3, #2
 800867a:	2b1e      	cmp	r3, #30
 800867c:	d87e      	bhi.n	800877c <UART_SetConfig+0x6c4>
 800867e:	a201      	add	r2, pc, #4	@ (adr r2, 8008684 <UART_SetConfig+0x5cc>)
 8008680:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008684:	08008707 	.word	0x08008707
 8008688:	0800877d 	.word	0x0800877d
 800868c:	0800870f 	.word	0x0800870f
 8008690:	0800877d 	.word	0x0800877d
 8008694:	0800877d 	.word	0x0800877d
 8008698:	0800877d 	.word	0x0800877d
 800869c:	0800871f 	.word	0x0800871f
 80086a0:	0800877d 	.word	0x0800877d
 80086a4:	0800877d 	.word	0x0800877d
 80086a8:	0800877d 	.word	0x0800877d
 80086ac:	0800877d 	.word	0x0800877d
 80086b0:	0800877d 	.word	0x0800877d
 80086b4:	0800877d 	.word	0x0800877d
 80086b8:	0800877d 	.word	0x0800877d
 80086bc:	0800872f 	.word	0x0800872f
 80086c0:	0800877d 	.word	0x0800877d
 80086c4:	0800877d 	.word	0x0800877d
 80086c8:	0800877d 	.word	0x0800877d
 80086cc:	0800877d 	.word	0x0800877d
 80086d0:	0800877d 	.word	0x0800877d
 80086d4:	0800877d 	.word	0x0800877d
 80086d8:	0800877d 	.word	0x0800877d
 80086dc:	0800877d 	.word	0x0800877d
 80086e0:	0800877d 	.word	0x0800877d
 80086e4:	0800877d 	.word	0x0800877d
 80086e8:	0800877d 	.word	0x0800877d
 80086ec:	0800877d 	.word	0x0800877d
 80086f0:	0800877d 	.word	0x0800877d
 80086f4:	0800877d 	.word	0x0800877d
 80086f8:	0800877d 	.word	0x0800877d
 80086fc:	0800876f 	.word	0x0800876f
 8008700:	2b40      	cmp	r3, #64	@ 0x40
 8008702:	d037      	beq.n	8008774 <UART_SetConfig+0x6bc>
 8008704:	e03a      	b.n	800877c <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8008706:	f7fd fe99 	bl	800643c <HAL_RCCEx_GetD3PCLK1Freq>
 800870a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800870c:	e03c      	b.n	8008788 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800870e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008712:	4618      	mov	r0, r3
 8008714:	f7fd fea8 	bl	8006468 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008718:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800871a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800871c:	e034      	b.n	8008788 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800871e:	f107 0318 	add.w	r3, r7, #24
 8008722:	4618      	mov	r0, r3
 8008724:	f7fd fff4 	bl	8006710 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008728:	69fb      	ldr	r3, [r7, #28]
 800872a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800872c:	e02c      	b.n	8008788 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800872e:	4b09      	ldr	r3, [pc, #36]	@ (8008754 <UART_SetConfig+0x69c>)
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	f003 0320 	and.w	r3, r3, #32
 8008736:	2b00      	cmp	r3, #0
 8008738:	d016      	beq.n	8008768 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800873a:	4b06      	ldr	r3, [pc, #24]	@ (8008754 <UART_SetConfig+0x69c>)
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	08db      	lsrs	r3, r3, #3
 8008740:	f003 0303 	and.w	r3, r3, #3
 8008744:	4a07      	ldr	r2, [pc, #28]	@ (8008764 <UART_SetConfig+0x6ac>)
 8008746:	fa22 f303 	lsr.w	r3, r2, r3
 800874a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800874c:	e01c      	b.n	8008788 <UART_SetConfig+0x6d0>
 800874e:	bf00      	nop
 8008750:	40011400 	.word	0x40011400
 8008754:	58024400 	.word	0x58024400
 8008758:	40007800 	.word	0x40007800
 800875c:	40007c00 	.word	0x40007c00
 8008760:	58000c00 	.word	0x58000c00
 8008764:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8008768:	4b9d      	ldr	r3, [pc, #628]	@ (80089e0 <UART_SetConfig+0x928>)
 800876a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800876c:	e00c      	b.n	8008788 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800876e:	4b9d      	ldr	r3, [pc, #628]	@ (80089e4 <UART_SetConfig+0x92c>)
 8008770:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008772:	e009      	b.n	8008788 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008774:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008778:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800877a:	e005      	b.n	8008788 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800877c:	2300      	movs	r3, #0
 800877e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8008780:	2301      	movs	r3, #1
 8008782:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8008786:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008788:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800878a:	2b00      	cmp	r3, #0
 800878c:	f000 81de 	beq.w	8008b4c <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008790:	697b      	ldr	r3, [r7, #20]
 8008792:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008794:	4a94      	ldr	r2, [pc, #592]	@ (80089e8 <UART_SetConfig+0x930>)
 8008796:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800879a:	461a      	mov	r2, r3
 800879c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800879e:	fbb3 f3f2 	udiv	r3, r3, r2
 80087a2:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80087a4:	697b      	ldr	r3, [r7, #20]
 80087a6:	685a      	ldr	r2, [r3, #4]
 80087a8:	4613      	mov	r3, r2
 80087aa:	005b      	lsls	r3, r3, #1
 80087ac:	4413      	add	r3, r2
 80087ae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80087b0:	429a      	cmp	r2, r3
 80087b2:	d305      	bcc.n	80087c0 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80087b4:	697b      	ldr	r3, [r7, #20]
 80087b6:	685b      	ldr	r3, [r3, #4]
 80087b8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80087ba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80087bc:	429a      	cmp	r2, r3
 80087be:	d903      	bls.n	80087c8 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 80087c0:	2301      	movs	r3, #1
 80087c2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80087c6:	e1c1      	b.n	8008b4c <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80087c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80087ca:	2200      	movs	r2, #0
 80087cc:	60bb      	str	r3, [r7, #8]
 80087ce:	60fa      	str	r2, [r7, #12]
 80087d0:	697b      	ldr	r3, [r7, #20]
 80087d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80087d4:	4a84      	ldr	r2, [pc, #528]	@ (80089e8 <UART_SetConfig+0x930>)
 80087d6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80087da:	b29b      	uxth	r3, r3
 80087dc:	2200      	movs	r2, #0
 80087de:	603b      	str	r3, [r7, #0]
 80087e0:	607a      	str	r2, [r7, #4]
 80087e2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80087e6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80087ea:	f7f7 fdd1 	bl	8000390 <__aeabi_uldivmod>
 80087ee:	4602      	mov	r2, r0
 80087f0:	460b      	mov	r3, r1
 80087f2:	4610      	mov	r0, r2
 80087f4:	4619      	mov	r1, r3
 80087f6:	f04f 0200 	mov.w	r2, #0
 80087fa:	f04f 0300 	mov.w	r3, #0
 80087fe:	020b      	lsls	r3, r1, #8
 8008800:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008804:	0202      	lsls	r2, r0, #8
 8008806:	6979      	ldr	r1, [r7, #20]
 8008808:	6849      	ldr	r1, [r1, #4]
 800880a:	0849      	lsrs	r1, r1, #1
 800880c:	2000      	movs	r0, #0
 800880e:	460c      	mov	r4, r1
 8008810:	4605      	mov	r5, r0
 8008812:	eb12 0804 	adds.w	r8, r2, r4
 8008816:	eb43 0905 	adc.w	r9, r3, r5
 800881a:	697b      	ldr	r3, [r7, #20]
 800881c:	685b      	ldr	r3, [r3, #4]
 800881e:	2200      	movs	r2, #0
 8008820:	469a      	mov	sl, r3
 8008822:	4693      	mov	fp, r2
 8008824:	4652      	mov	r2, sl
 8008826:	465b      	mov	r3, fp
 8008828:	4640      	mov	r0, r8
 800882a:	4649      	mov	r1, r9
 800882c:	f7f7 fdb0 	bl	8000390 <__aeabi_uldivmod>
 8008830:	4602      	mov	r2, r0
 8008832:	460b      	mov	r3, r1
 8008834:	4613      	mov	r3, r2
 8008836:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008838:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800883a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800883e:	d308      	bcc.n	8008852 <UART_SetConfig+0x79a>
 8008840:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008842:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008846:	d204      	bcs.n	8008852 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8008848:	697b      	ldr	r3, [r7, #20]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800884e:	60da      	str	r2, [r3, #12]
 8008850:	e17c      	b.n	8008b4c <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8008852:	2301      	movs	r3, #1
 8008854:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8008858:	e178      	b.n	8008b4c <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800885a:	697b      	ldr	r3, [r7, #20]
 800885c:	69db      	ldr	r3, [r3, #28]
 800885e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008862:	f040 80c5 	bne.w	80089f0 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8008866:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800886a:	2b20      	cmp	r3, #32
 800886c:	dc48      	bgt.n	8008900 <UART_SetConfig+0x848>
 800886e:	2b00      	cmp	r3, #0
 8008870:	db7b      	blt.n	800896a <UART_SetConfig+0x8b2>
 8008872:	2b20      	cmp	r3, #32
 8008874:	d879      	bhi.n	800896a <UART_SetConfig+0x8b2>
 8008876:	a201      	add	r2, pc, #4	@ (adr r2, 800887c <UART_SetConfig+0x7c4>)
 8008878:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800887c:	08008907 	.word	0x08008907
 8008880:	0800890f 	.word	0x0800890f
 8008884:	0800896b 	.word	0x0800896b
 8008888:	0800896b 	.word	0x0800896b
 800888c:	08008917 	.word	0x08008917
 8008890:	0800896b 	.word	0x0800896b
 8008894:	0800896b 	.word	0x0800896b
 8008898:	0800896b 	.word	0x0800896b
 800889c:	08008927 	.word	0x08008927
 80088a0:	0800896b 	.word	0x0800896b
 80088a4:	0800896b 	.word	0x0800896b
 80088a8:	0800896b 	.word	0x0800896b
 80088ac:	0800896b 	.word	0x0800896b
 80088b0:	0800896b 	.word	0x0800896b
 80088b4:	0800896b 	.word	0x0800896b
 80088b8:	0800896b 	.word	0x0800896b
 80088bc:	08008937 	.word	0x08008937
 80088c0:	0800896b 	.word	0x0800896b
 80088c4:	0800896b 	.word	0x0800896b
 80088c8:	0800896b 	.word	0x0800896b
 80088cc:	0800896b 	.word	0x0800896b
 80088d0:	0800896b 	.word	0x0800896b
 80088d4:	0800896b 	.word	0x0800896b
 80088d8:	0800896b 	.word	0x0800896b
 80088dc:	0800896b 	.word	0x0800896b
 80088e0:	0800896b 	.word	0x0800896b
 80088e4:	0800896b 	.word	0x0800896b
 80088e8:	0800896b 	.word	0x0800896b
 80088ec:	0800896b 	.word	0x0800896b
 80088f0:	0800896b 	.word	0x0800896b
 80088f4:	0800896b 	.word	0x0800896b
 80088f8:	0800896b 	.word	0x0800896b
 80088fc:	0800895d 	.word	0x0800895d
 8008900:	2b40      	cmp	r3, #64	@ 0x40
 8008902:	d02e      	beq.n	8008962 <UART_SetConfig+0x8aa>
 8008904:	e031      	b.n	800896a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008906:	f7fc fb63 	bl	8004fd0 <HAL_RCC_GetPCLK1Freq>
 800890a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800890c:	e033      	b.n	8008976 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800890e:	f7fc fb75 	bl	8004ffc <HAL_RCC_GetPCLK2Freq>
 8008912:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008914:	e02f      	b.n	8008976 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008916:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800891a:	4618      	mov	r0, r3
 800891c:	f7fd fda4 	bl	8006468 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008920:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008922:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008924:	e027      	b.n	8008976 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008926:	f107 0318 	add.w	r3, r7, #24
 800892a:	4618      	mov	r0, r3
 800892c:	f7fd fef0 	bl	8006710 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008930:	69fb      	ldr	r3, [r7, #28]
 8008932:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008934:	e01f      	b.n	8008976 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008936:	4b2d      	ldr	r3, [pc, #180]	@ (80089ec <UART_SetConfig+0x934>)
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	f003 0320 	and.w	r3, r3, #32
 800893e:	2b00      	cmp	r3, #0
 8008940:	d009      	beq.n	8008956 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008942:	4b2a      	ldr	r3, [pc, #168]	@ (80089ec <UART_SetConfig+0x934>)
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	08db      	lsrs	r3, r3, #3
 8008948:	f003 0303 	and.w	r3, r3, #3
 800894c:	4a24      	ldr	r2, [pc, #144]	@ (80089e0 <UART_SetConfig+0x928>)
 800894e:	fa22 f303 	lsr.w	r3, r2, r3
 8008952:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008954:	e00f      	b.n	8008976 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8008956:	4b22      	ldr	r3, [pc, #136]	@ (80089e0 <UART_SetConfig+0x928>)
 8008958:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800895a:	e00c      	b.n	8008976 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800895c:	4b21      	ldr	r3, [pc, #132]	@ (80089e4 <UART_SetConfig+0x92c>)
 800895e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008960:	e009      	b.n	8008976 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008962:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008966:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008968:	e005      	b.n	8008976 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800896a:	2300      	movs	r3, #0
 800896c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800896e:	2301      	movs	r3, #1
 8008970:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8008974:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008976:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008978:	2b00      	cmp	r3, #0
 800897a:	f000 80e7 	beq.w	8008b4c <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800897e:	697b      	ldr	r3, [r7, #20]
 8008980:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008982:	4a19      	ldr	r2, [pc, #100]	@ (80089e8 <UART_SetConfig+0x930>)
 8008984:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008988:	461a      	mov	r2, r3
 800898a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800898c:	fbb3 f3f2 	udiv	r3, r3, r2
 8008990:	005a      	lsls	r2, r3, #1
 8008992:	697b      	ldr	r3, [r7, #20]
 8008994:	685b      	ldr	r3, [r3, #4]
 8008996:	085b      	lsrs	r3, r3, #1
 8008998:	441a      	add	r2, r3
 800899a:	697b      	ldr	r3, [r7, #20]
 800899c:	685b      	ldr	r3, [r3, #4]
 800899e:	fbb2 f3f3 	udiv	r3, r2, r3
 80089a2:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80089a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089a6:	2b0f      	cmp	r3, #15
 80089a8:	d916      	bls.n	80089d8 <UART_SetConfig+0x920>
 80089aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80089b0:	d212      	bcs.n	80089d8 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80089b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089b4:	b29b      	uxth	r3, r3
 80089b6:	f023 030f 	bic.w	r3, r3, #15
 80089ba:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80089bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089be:	085b      	lsrs	r3, r3, #1
 80089c0:	b29b      	uxth	r3, r3
 80089c2:	f003 0307 	and.w	r3, r3, #7
 80089c6:	b29a      	uxth	r2, r3
 80089c8:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80089ca:	4313      	orrs	r3, r2
 80089cc:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 80089ce:	697b      	ldr	r3, [r7, #20]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80089d4:	60da      	str	r2, [r3, #12]
 80089d6:	e0b9      	b.n	8008b4c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80089d8:	2301      	movs	r3, #1
 80089da:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80089de:	e0b5      	b.n	8008b4c <UART_SetConfig+0xa94>
 80089e0:	03d09000 	.word	0x03d09000
 80089e4:	003d0900 	.word	0x003d0900
 80089e8:	0800a148 	.word	0x0800a148
 80089ec:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 80089f0:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80089f4:	2b20      	cmp	r3, #32
 80089f6:	dc49      	bgt.n	8008a8c <UART_SetConfig+0x9d4>
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	db7c      	blt.n	8008af6 <UART_SetConfig+0xa3e>
 80089fc:	2b20      	cmp	r3, #32
 80089fe:	d87a      	bhi.n	8008af6 <UART_SetConfig+0xa3e>
 8008a00:	a201      	add	r2, pc, #4	@ (adr r2, 8008a08 <UART_SetConfig+0x950>)
 8008a02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a06:	bf00      	nop
 8008a08:	08008a93 	.word	0x08008a93
 8008a0c:	08008a9b 	.word	0x08008a9b
 8008a10:	08008af7 	.word	0x08008af7
 8008a14:	08008af7 	.word	0x08008af7
 8008a18:	08008aa3 	.word	0x08008aa3
 8008a1c:	08008af7 	.word	0x08008af7
 8008a20:	08008af7 	.word	0x08008af7
 8008a24:	08008af7 	.word	0x08008af7
 8008a28:	08008ab3 	.word	0x08008ab3
 8008a2c:	08008af7 	.word	0x08008af7
 8008a30:	08008af7 	.word	0x08008af7
 8008a34:	08008af7 	.word	0x08008af7
 8008a38:	08008af7 	.word	0x08008af7
 8008a3c:	08008af7 	.word	0x08008af7
 8008a40:	08008af7 	.word	0x08008af7
 8008a44:	08008af7 	.word	0x08008af7
 8008a48:	08008ac3 	.word	0x08008ac3
 8008a4c:	08008af7 	.word	0x08008af7
 8008a50:	08008af7 	.word	0x08008af7
 8008a54:	08008af7 	.word	0x08008af7
 8008a58:	08008af7 	.word	0x08008af7
 8008a5c:	08008af7 	.word	0x08008af7
 8008a60:	08008af7 	.word	0x08008af7
 8008a64:	08008af7 	.word	0x08008af7
 8008a68:	08008af7 	.word	0x08008af7
 8008a6c:	08008af7 	.word	0x08008af7
 8008a70:	08008af7 	.word	0x08008af7
 8008a74:	08008af7 	.word	0x08008af7
 8008a78:	08008af7 	.word	0x08008af7
 8008a7c:	08008af7 	.word	0x08008af7
 8008a80:	08008af7 	.word	0x08008af7
 8008a84:	08008af7 	.word	0x08008af7
 8008a88:	08008ae9 	.word	0x08008ae9
 8008a8c:	2b40      	cmp	r3, #64	@ 0x40
 8008a8e:	d02e      	beq.n	8008aee <UART_SetConfig+0xa36>
 8008a90:	e031      	b.n	8008af6 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008a92:	f7fc fa9d 	bl	8004fd0 <HAL_RCC_GetPCLK1Freq>
 8008a96:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008a98:	e033      	b.n	8008b02 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008a9a:	f7fc faaf 	bl	8004ffc <HAL_RCC_GetPCLK2Freq>
 8008a9e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008aa0:	e02f      	b.n	8008b02 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008aa2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008aa6:	4618      	mov	r0, r3
 8008aa8:	f7fd fcde 	bl	8006468 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008aac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008aae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008ab0:	e027      	b.n	8008b02 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008ab2:	f107 0318 	add.w	r3, r7, #24
 8008ab6:	4618      	mov	r0, r3
 8008ab8:	f7fd fe2a 	bl	8006710 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008abc:	69fb      	ldr	r3, [r7, #28]
 8008abe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008ac0:	e01f      	b.n	8008b02 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008ac2:	4b2d      	ldr	r3, [pc, #180]	@ (8008b78 <UART_SetConfig+0xac0>)
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	f003 0320 	and.w	r3, r3, #32
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d009      	beq.n	8008ae2 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008ace:	4b2a      	ldr	r3, [pc, #168]	@ (8008b78 <UART_SetConfig+0xac0>)
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	08db      	lsrs	r3, r3, #3
 8008ad4:	f003 0303 	and.w	r3, r3, #3
 8008ad8:	4a28      	ldr	r2, [pc, #160]	@ (8008b7c <UART_SetConfig+0xac4>)
 8008ada:	fa22 f303 	lsr.w	r3, r2, r3
 8008ade:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008ae0:	e00f      	b.n	8008b02 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8008ae2:	4b26      	ldr	r3, [pc, #152]	@ (8008b7c <UART_SetConfig+0xac4>)
 8008ae4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008ae6:	e00c      	b.n	8008b02 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008ae8:	4b25      	ldr	r3, [pc, #148]	@ (8008b80 <UART_SetConfig+0xac8>)
 8008aea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008aec:	e009      	b.n	8008b02 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008aee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008af2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008af4:	e005      	b.n	8008b02 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8008af6:	2300      	movs	r3, #0
 8008af8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8008afa:	2301      	movs	r3, #1
 8008afc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8008b00:	bf00      	nop
    }

    if (pclk != 0U)
 8008b02:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d021      	beq.n	8008b4c <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008b08:	697b      	ldr	r3, [r7, #20]
 8008b0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b0c:	4a1d      	ldr	r2, [pc, #116]	@ (8008b84 <UART_SetConfig+0xacc>)
 8008b0e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008b12:	461a      	mov	r2, r3
 8008b14:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008b16:	fbb3 f2f2 	udiv	r2, r3, r2
 8008b1a:	697b      	ldr	r3, [r7, #20]
 8008b1c:	685b      	ldr	r3, [r3, #4]
 8008b1e:	085b      	lsrs	r3, r3, #1
 8008b20:	441a      	add	r2, r3
 8008b22:	697b      	ldr	r3, [r7, #20]
 8008b24:	685b      	ldr	r3, [r3, #4]
 8008b26:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b2a:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008b2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b2e:	2b0f      	cmp	r3, #15
 8008b30:	d909      	bls.n	8008b46 <UART_SetConfig+0xa8e>
 8008b32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b34:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008b38:	d205      	bcs.n	8008b46 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008b3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b3c:	b29a      	uxth	r2, r3
 8008b3e:	697b      	ldr	r3, [r7, #20]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	60da      	str	r2, [r3, #12]
 8008b44:	e002      	b.n	8008b4c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8008b46:	2301      	movs	r3, #1
 8008b48:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008b4c:	697b      	ldr	r3, [r7, #20]
 8008b4e:	2201      	movs	r2, #1
 8008b50:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8008b54:	697b      	ldr	r3, [r7, #20]
 8008b56:	2201      	movs	r2, #1
 8008b58:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008b5c:	697b      	ldr	r3, [r7, #20]
 8008b5e:	2200      	movs	r2, #0
 8008b60:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8008b62:	697b      	ldr	r3, [r7, #20]
 8008b64:	2200      	movs	r2, #0
 8008b66:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8008b68:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8008b6c:	4618      	mov	r0, r3
 8008b6e:	3748      	adds	r7, #72	@ 0x48
 8008b70:	46bd      	mov	sp, r7
 8008b72:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008b76:	bf00      	nop
 8008b78:	58024400 	.word	0x58024400
 8008b7c:	03d09000 	.word	0x03d09000
 8008b80:	003d0900 	.word	0x003d0900
 8008b84:	0800a148 	.word	0x0800a148

08008b88 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008b88:	b480      	push	{r7}
 8008b8a:	b083      	sub	sp, #12
 8008b8c:	af00      	add	r7, sp, #0
 8008b8e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b94:	f003 0308 	and.w	r3, r3, #8
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d00a      	beq.n	8008bb2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	685b      	ldr	r3, [r3, #4]
 8008ba2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	430a      	orrs	r2, r1
 8008bb0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008bb6:	f003 0301 	and.w	r3, r3, #1
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d00a      	beq.n	8008bd4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	685b      	ldr	r3, [r3, #4]
 8008bc4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	430a      	orrs	r2, r1
 8008bd2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008bd8:	f003 0302 	and.w	r3, r3, #2
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d00a      	beq.n	8008bf6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	685b      	ldr	r3, [r3, #4]
 8008be6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	430a      	orrs	r2, r1
 8008bf4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008bfa:	f003 0304 	and.w	r3, r3, #4
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d00a      	beq.n	8008c18 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	685b      	ldr	r3, [r3, #4]
 8008c08:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	430a      	orrs	r2, r1
 8008c16:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c1c:	f003 0310 	and.w	r3, r3, #16
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d00a      	beq.n	8008c3a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	689b      	ldr	r3, [r3, #8]
 8008c2a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	430a      	orrs	r2, r1
 8008c38:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c3e:	f003 0320 	and.w	r3, r3, #32
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d00a      	beq.n	8008c5c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	689b      	ldr	r3, [r3, #8]
 8008c4c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	430a      	orrs	r2, r1
 8008c5a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d01a      	beq.n	8008c9e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	685b      	ldr	r3, [r3, #4]
 8008c6e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	430a      	orrs	r2, r1
 8008c7c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008c82:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008c86:	d10a      	bne.n	8008c9e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	685b      	ldr	r3, [r3, #4]
 8008c8e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	430a      	orrs	r2, r1
 8008c9c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ca2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d00a      	beq.n	8008cc0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	685b      	ldr	r3, [r3, #4]
 8008cb0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	430a      	orrs	r2, r1
 8008cbe:	605a      	str	r2, [r3, #4]
  }
}
 8008cc0:	bf00      	nop
 8008cc2:	370c      	adds	r7, #12
 8008cc4:	46bd      	mov	sp, r7
 8008cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cca:	4770      	bx	lr

08008ccc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008ccc:	b580      	push	{r7, lr}
 8008cce:	b098      	sub	sp, #96	@ 0x60
 8008cd0:	af02      	add	r7, sp, #8
 8008cd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	2200      	movs	r2, #0
 8008cd8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008cdc:	f7f8 fbd0 	bl	8001480 <HAL_GetTick>
 8008ce0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	f003 0308 	and.w	r3, r3, #8
 8008cec:	2b08      	cmp	r3, #8
 8008cee:	d12f      	bne.n	8008d50 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008cf0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008cf4:	9300      	str	r3, [sp, #0]
 8008cf6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008cf8:	2200      	movs	r2, #0
 8008cfa:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8008cfe:	6878      	ldr	r0, [r7, #4]
 8008d00:	f000 f88e 	bl	8008e20 <UART_WaitOnFlagUntilTimeout>
 8008d04:	4603      	mov	r3, r0
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d022      	beq.n	8008d50 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d12:	e853 3f00 	ldrex	r3, [r3]
 8008d16:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008d18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008d1a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008d1e:	653b      	str	r3, [r7, #80]	@ 0x50
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	461a      	mov	r2, r3
 8008d26:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008d28:	647b      	str	r3, [r7, #68]	@ 0x44
 8008d2a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d2c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008d2e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008d30:	e841 2300 	strex	r3, r2, [r1]
 8008d34:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008d36:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d1e6      	bne.n	8008d0a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	2220      	movs	r2, #32
 8008d40:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	2200      	movs	r2, #0
 8008d48:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008d4c:	2303      	movs	r3, #3
 8008d4e:	e063      	b.n	8008e18 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	f003 0304 	and.w	r3, r3, #4
 8008d5a:	2b04      	cmp	r3, #4
 8008d5c:	d149      	bne.n	8008df2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008d5e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008d62:	9300      	str	r3, [sp, #0]
 8008d64:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008d66:	2200      	movs	r2, #0
 8008d68:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8008d6c:	6878      	ldr	r0, [r7, #4]
 8008d6e:	f000 f857 	bl	8008e20 <UART_WaitOnFlagUntilTimeout>
 8008d72:	4603      	mov	r3, r0
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d03c      	beq.n	8008df2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d80:	e853 3f00 	ldrex	r3, [r3]
 8008d84:	623b      	str	r3, [r7, #32]
   return(result);
 8008d86:	6a3b      	ldr	r3, [r7, #32]
 8008d88:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008d8c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	461a      	mov	r2, r3
 8008d94:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008d96:	633b      	str	r3, [r7, #48]	@ 0x30
 8008d98:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d9a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008d9c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008d9e:	e841 2300 	strex	r3, r2, [r1]
 8008da2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008da4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d1e6      	bne.n	8008d78 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	3308      	adds	r3, #8
 8008db0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008db2:	693b      	ldr	r3, [r7, #16]
 8008db4:	e853 3f00 	ldrex	r3, [r3]
 8008db8:	60fb      	str	r3, [r7, #12]
   return(result);
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	f023 0301 	bic.w	r3, r3, #1
 8008dc0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	3308      	adds	r3, #8
 8008dc8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008dca:	61fa      	str	r2, [r7, #28]
 8008dcc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008dce:	69b9      	ldr	r1, [r7, #24]
 8008dd0:	69fa      	ldr	r2, [r7, #28]
 8008dd2:	e841 2300 	strex	r3, r2, [r1]
 8008dd6:	617b      	str	r3, [r7, #20]
   return(result);
 8008dd8:	697b      	ldr	r3, [r7, #20]
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d1e5      	bne.n	8008daa <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	2220      	movs	r2, #32
 8008de2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	2200      	movs	r2, #0
 8008dea:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008dee:	2303      	movs	r3, #3
 8008df0:	e012      	b.n	8008e18 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	2220      	movs	r2, #32
 8008df6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	2220      	movs	r2, #32
 8008dfe:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	2200      	movs	r2, #0
 8008e06:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	2200      	movs	r2, #0
 8008e0c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	2200      	movs	r2, #0
 8008e12:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008e16:	2300      	movs	r3, #0
}
 8008e18:	4618      	mov	r0, r3
 8008e1a:	3758      	adds	r7, #88	@ 0x58
 8008e1c:	46bd      	mov	sp, r7
 8008e1e:	bd80      	pop	{r7, pc}

08008e20 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008e20:	b580      	push	{r7, lr}
 8008e22:	b084      	sub	sp, #16
 8008e24:	af00      	add	r7, sp, #0
 8008e26:	60f8      	str	r0, [r7, #12]
 8008e28:	60b9      	str	r1, [r7, #8]
 8008e2a:	603b      	str	r3, [r7, #0]
 8008e2c:	4613      	mov	r3, r2
 8008e2e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008e30:	e04f      	b.n	8008ed2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008e32:	69bb      	ldr	r3, [r7, #24]
 8008e34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e38:	d04b      	beq.n	8008ed2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008e3a:	f7f8 fb21 	bl	8001480 <HAL_GetTick>
 8008e3e:	4602      	mov	r2, r0
 8008e40:	683b      	ldr	r3, [r7, #0]
 8008e42:	1ad3      	subs	r3, r2, r3
 8008e44:	69ba      	ldr	r2, [r7, #24]
 8008e46:	429a      	cmp	r2, r3
 8008e48:	d302      	bcc.n	8008e50 <UART_WaitOnFlagUntilTimeout+0x30>
 8008e4a:	69bb      	ldr	r3, [r7, #24]
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d101      	bne.n	8008e54 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008e50:	2303      	movs	r3, #3
 8008e52:	e04e      	b.n	8008ef2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	f003 0304 	and.w	r3, r3, #4
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d037      	beq.n	8008ed2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8008e62:	68bb      	ldr	r3, [r7, #8]
 8008e64:	2b80      	cmp	r3, #128	@ 0x80
 8008e66:	d034      	beq.n	8008ed2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8008e68:	68bb      	ldr	r3, [r7, #8]
 8008e6a:	2b40      	cmp	r3, #64	@ 0x40
 8008e6c:	d031      	beq.n	8008ed2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	69db      	ldr	r3, [r3, #28]
 8008e74:	f003 0308 	and.w	r3, r3, #8
 8008e78:	2b08      	cmp	r3, #8
 8008e7a:	d110      	bne.n	8008e9e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	2208      	movs	r2, #8
 8008e82:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008e84:	68f8      	ldr	r0, [r7, #12]
 8008e86:	f000 f839 	bl	8008efc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	2208      	movs	r2, #8
 8008e8e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	2200      	movs	r2, #0
 8008e96:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8008e9a:	2301      	movs	r3, #1
 8008e9c:	e029      	b.n	8008ef2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	69db      	ldr	r3, [r3, #28]
 8008ea4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008ea8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008eac:	d111      	bne.n	8008ed2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008eb6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008eb8:	68f8      	ldr	r0, [r7, #12]
 8008eba:	f000 f81f 	bl	8008efc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	2220      	movs	r2, #32
 8008ec2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	2200      	movs	r2, #0
 8008eca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8008ece:	2303      	movs	r3, #3
 8008ed0:	e00f      	b.n	8008ef2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	69da      	ldr	r2, [r3, #28]
 8008ed8:	68bb      	ldr	r3, [r7, #8]
 8008eda:	4013      	ands	r3, r2
 8008edc:	68ba      	ldr	r2, [r7, #8]
 8008ede:	429a      	cmp	r2, r3
 8008ee0:	bf0c      	ite	eq
 8008ee2:	2301      	moveq	r3, #1
 8008ee4:	2300      	movne	r3, #0
 8008ee6:	b2db      	uxtb	r3, r3
 8008ee8:	461a      	mov	r2, r3
 8008eea:	79fb      	ldrb	r3, [r7, #7]
 8008eec:	429a      	cmp	r2, r3
 8008eee:	d0a0      	beq.n	8008e32 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008ef0:	2300      	movs	r3, #0
}
 8008ef2:	4618      	mov	r0, r3
 8008ef4:	3710      	adds	r7, #16
 8008ef6:	46bd      	mov	sp, r7
 8008ef8:	bd80      	pop	{r7, pc}
	...

08008efc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008efc:	b480      	push	{r7}
 8008efe:	b095      	sub	sp, #84	@ 0x54
 8008f00:	af00      	add	r7, sp, #0
 8008f02:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008f0c:	e853 3f00 	ldrex	r3, [r3]
 8008f10:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008f12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f14:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008f18:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	461a      	mov	r2, r3
 8008f20:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008f22:	643b      	str	r3, [r7, #64]	@ 0x40
 8008f24:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f26:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008f28:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008f2a:	e841 2300 	strex	r3, r2, [r1]
 8008f2e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008f30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d1e6      	bne.n	8008f04 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	3308      	adds	r3, #8
 8008f3c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f3e:	6a3b      	ldr	r3, [r7, #32]
 8008f40:	e853 3f00 	ldrex	r3, [r3]
 8008f44:	61fb      	str	r3, [r7, #28]
   return(result);
 8008f46:	69fa      	ldr	r2, [r7, #28]
 8008f48:	4b1e      	ldr	r3, [pc, #120]	@ (8008fc4 <UART_EndRxTransfer+0xc8>)
 8008f4a:	4013      	ands	r3, r2
 8008f4c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	3308      	adds	r3, #8
 8008f54:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008f56:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008f58:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f5a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008f5c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008f5e:	e841 2300 	strex	r3, r2, [r1]
 8008f62:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008f64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d1e5      	bne.n	8008f36 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008f6e:	2b01      	cmp	r3, #1
 8008f70:	d118      	bne.n	8008fa4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	e853 3f00 	ldrex	r3, [r3]
 8008f7e:	60bb      	str	r3, [r7, #8]
   return(result);
 8008f80:	68bb      	ldr	r3, [r7, #8]
 8008f82:	f023 0310 	bic.w	r3, r3, #16
 8008f86:	647b      	str	r3, [r7, #68]	@ 0x44
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	461a      	mov	r2, r3
 8008f8e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008f90:	61bb      	str	r3, [r7, #24]
 8008f92:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f94:	6979      	ldr	r1, [r7, #20]
 8008f96:	69ba      	ldr	r2, [r7, #24]
 8008f98:	e841 2300 	strex	r3, r2, [r1]
 8008f9c:	613b      	str	r3, [r7, #16]
   return(result);
 8008f9e:	693b      	ldr	r3, [r7, #16]
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d1e6      	bne.n	8008f72 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	2220      	movs	r2, #32
 8008fa8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	2200      	movs	r2, #0
 8008fb0:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	2200      	movs	r2, #0
 8008fb6:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8008fb8:	bf00      	nop
 8008fba:	3754      	adds	r7, #84	@ 0x54
 8008fbc:	46bd      	mov	sp, r7
 8008fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fc2:	4770      	bx	lr
 8008fc4:	effffffe 	.word	0xeffffffe

08008fc8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008fc8:	b580      	push	{r7, lr}
 8008fca:	b084      	sub	sp, #16
 8008fcc:	af00      	add	r7, sp, #0
 8008fce:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008fd4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	2200      	movs	r2, #0
 8008fda:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008fde:	68f8      	ldr	r0, [r7, #12]
 8008fe0:	f7ff f854 	bl	800808c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008fe4:	bf00      	nop
 8008fe6:	3710      	adds	r7, #16
 8008fe8:	46bd      	mov	sp, r7
 8008fea:	bd80      	pop	{r7, pc}

08008fec <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008fec:	b580      	push	{r7, lr}
 8008fee:	b088      	sub	sp, #32
 8008ff0:	af00      	add	r7, sp, #0
 8008ff2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	e853 3f00 	ldrex	r3, [r3]
 8009000:	60bb      	str	r3, [r7, #8]
   return(result);
 8009002:	68bb      	ldr	r3, [r7, #8]
 8009004:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009008:	61fb      	str	r3, [r7, #28]
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	461a      	mov	r2, r3
 8009010:	69fb      	ldr	r3, [r7, #28]
 8009012:	61bb      	str	r3, [r7, #24]
 8009014:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009016:	6979      	ldr	r1, [r7, #20]
 8009018:	69ba      	ldr	r2, [r7, #24]
 800901a:	e841 2300 	strex	r3, r2, [r1]
 800901e:	613b      	str	r3, [r7, #16]
   return(result);
 8009020:	693b      	ldr	r3, [r7, #16]
 8009022:	2b00      	cmp	r3, #0
 8009024:	d1e6      	bne.n	8008ff4 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	2220      	movs	r2, #32
 800902a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	2200      	movs	r2, #0
 8009032:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009034:	6878      	ldr	r0, [r7, #4]
 8009036:	f7ff f81f 	bl	8008078 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800903a:	bf00      	nop
 800903c:	3720      	adds	r7, #32
 800903e:	46bd      	mov	sp, r7
 8009040:	bd80      	pop	{r7, pc}

08009042 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009042:	b480      	push	{r7}
 8009044:	b083      	sub	sp, #12
 8009046:	af00      	add	r7, sp, #0
 8009048:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800904a:	bf00      	nop
 800904c:	370c      	adds	r7, #12
 800904e:	46bd      	mov	sp, r7
 8009050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009054:	4770      	bx	lr

08009056 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8009056:	b480      	push	{r7}
 8009058:	b083      	sub	sp, #12
 800905a:	af00      	add	r7, sp, #0
 800905c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800905e:	bf00      	nop
 8009060:	370c      	adds	r7, #12
 8009062:	46bd      	mov	sp, r7
 8009064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009068:	4770      	bx	lr

0800906a <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800906a:	b480      	push	{r7}
 800906c:	b083      	sub	sp, #12
 800906e:	af00      	add	r7, sp, #0
 8009070:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8009072:	bf00      	nop
 8009074:	370c      	adds	r7, #12
 8009076:	46bd      	mov	sp, r7
 8009078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800907c:	4770      	bx	lr

0800907e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800907e:	b480      	push	{r7}
 8009080:	b085      	sub	sp, #20
 8009082:	af00      	add	r7, sp, #0
 8009084:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800908c:	2b01      	cmp	r3, #1
 800908e:	d101      	bne.n	8009094 <HAL_UARTEx_DisableFifoMode+0x16>
 8009090:	2302      	movs	r3, #2
 8009092:	e027      	b.n	80090e4 <HAL_UARTEx_DisableFifoMode+0x66>
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	2201      	movs	r2, #1
 8009098:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	2224      	movs	r2, #36	@ 0x24
 80090a0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	681a      	ldr	r2, [r3, #0]
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	f022 0201 	bic.w	r2, r2, #1
 80090ba:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80090c2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	2200      	movs	r2, #0
 80090c8:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	68fa      	ldr	r2, [r7, #12]
 80090d0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	2220      	movs	r2, #32
 80090d6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	2200      	movs	r2, #0
 80090de:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80090e2:	2300      	movs	r3, #0
}
 80090e4:	4618      	mov	r0, r3
 80090e6:	3714      	adds	r7, #20
 80090e8:	46bd      	mov	sp, r7
 80090ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ee:	4770      	bx	lr

080090f0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80090f0:	b580      	push	{r7, lr}
 80090f2:	b084      	sub	sp, #16
 80090f4:	af00      	add	r7, sp, #0
 80090f6:	6078      	str	r0, [r7, #4]
 80090f8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009100:	2b01      	cmp	r3, #1
 8009102:	d101      	bne.n	8009108 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009104:	2302      	movs	r3, #2
 8009106:	e02d      	b.n	8009164 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	2201      	movs	r2, #1
 800910c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	2224      	movs	r2, #36	@ 0x24
 8009114:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	681a      	ldr	r2, [r3, #0]
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	f022 0201 	bic.w	r2, r2, #1
 800912e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	689b      	ldr	r3, [r3, #8]
 8009136:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	683a      	ldr	r2, [r7, #0]
 8009140:	430a      	orrs	r2, r1
 8009142:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009144:	6878      	ldr	r0, [r7, #4]
 8009146:	f000 f84f 	bl	80091e8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	68fa      	ldr	r2, [r7, #12]
 8009150:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	2220      	movs	r2, #32
 8009156:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	2200      	movs	r2, #0
 800915e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009162:	2300      	movs	r3, #0
}
 8009164:	4618      	mov	r0, r3
 8009166:	3710      	adds	r7, #16
 8009168:	46bd      	mov	sp, r7
 800916a:	bd80      	pop	{r7, pc}

0800916c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800916c:	b580      	push	{r7, lr}
 800916e:	b084      	sub	sp, #16
 8009170:	af00      	add	r7, sp, #0
 8009172:	6078      	str	r0, [r7, #4]
 8009174:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800917c:	2b01      	cmp	r3, #1
 800917e:	d101      	bne.n	8009184 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009180:	2302      	movs	r3, #2
 8009182:	e02d      	b.n	80091e0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	2201      	movs	r2, #1
 8009188:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	2224      	movs	r2, #36	@ 0x24
 8009190:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	681a      	ldr	r2, [r3, #0]
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	f022 0201 	bic.w	r2, r2, #1
 80091aa:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	689b      	ldr	r3, [r3, #8]
 80091b2:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	683a      	ldr	r2, [r7, #0]
 80091bc:	430a      	orrs	r2, r1
 80091be:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80091c0:	6878      	ldr	r0, [r7, #4]
 80091c2:	f000 f811 	bl	80091e8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	68fa      	ldr	r2, [r7, #12]
 80091cc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	2220      	movs	r2, #32
 80091d2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	2200      	movs	r2, #0
 80091da:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80091de:	2300      	movs	r3, #0
}
 80091e0:	4618      	mov	r0, r3
 80091e2:	3710      	adds	r7, #16
 80091e4:	46bd      	mov	sp, r7
 80091e6:	bd80      	pop	{r7, pc}

080091e8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80091e8:	b480      	push	{r7}
 80091ea:	b085      	sub	sp, #20
 80091ec:	af00      	add	r7, sp, #0
 80091ee:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d108      	bne.n	800920a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	2201      	movs	r2, #1
 80091fc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	2201      	movs	r2, #1
 8009204:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009208:	e031      	b.n	800926e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800920a:	2310      	movs	r3, #16
 800920c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800920e:	2310      	movs	r3, #16
 8009210:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	689b      	ldr	r3, [r3, #8]
 8009218:	0e5b      	lsrs	r3, r3, #25
 800921a:	b2db      	uxtb	r3, r3
 800921c:	f003 0307 	and.w	r3, r3, #7
 8009220:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	689b      	ldr	r3, [r3, #8]
 8009228:	0f5b      	lsrs	r3, r3, #29
 800922a:	b2db      	uxtb	r3, r3
 800922c:	f003 0307 	and.w	r3, r3, #7
 8009230:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009232:	7bbb      	ldrb	r3, [r7, #14]
 8009234:	7b3a      	ldrb	r2, [r7, #12]
 8009236:	4911      	ldr	r1, [pc, #68]	@ (800927c <UARTEx_SetNbDataToProcess+0x94>)
 8009238:	5c8a      	ldrb	r2, [r1, r2]
 800923a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800923e:	7b3a      	ldrb	r2, [r7, #12]
 8009240:	490f      	ldr	r1, [pc, #60]	@ (8009280 <UARTEx_SetNbDataToProcess+0x98>)
 8009242:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009244:	fb93 f3f2 	sdiv	r3, r3, r2
 8009248:	b29a      	uxth	r2, r3
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009250:	7bfb      	ldrb	r3, [r7, #15]
 8009252:	7b7a      	ldrb	r2, [r7, #13]
 8009254:	4909      	ldr	r1, [pc, #36]	@ (800927c <UARTEx_SetNbDataToProcess+0x94>)
 8009256:	5c8a      	ldrb	r2, [r1, r2]
 8009258:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800925c:	7b7a      	ldrb	r2, [r7, #13]
 800925e:	4908      	ldr	r1, [pc, #32]	@ (8009280 <UARTEx_SetNbDataToProcess+0x98>)
 8009260:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009262:	fb93 f3f2 	sdiv	r3, r3, r2
 8009266:	b29a      	uxth	r2, r3
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800926e:	bf00      	nop
 8009270:	3714      	adds	r7, #20
 8009272:	46bd      	mov	sp, r7
 8009274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009278:	4770      	bx	lr
 800927a:	bf00      	nop
 800927c:	0800a160 	.word	0x0800a160
 8009280:	0800a168 	.word	0x0800a168

08009284 <std>:
 8009284:	2300      	movs	r3, #0
 8009286:	b510      	push	{r4, lr}
 8009288:	4604      	mov	r4, r0
 800928a:	e9c0 3300 	strd	r3, r3, [r0]
 800928e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009292:	6083      	str	r3, [r0, #8]
 8009294:	8181      	strh	r1, [r0, #12]
 8009296:	6643      	str	r3, [r0, #100]	@ 0x64
 8009298:	81c2      	strh	r2, [r0, #14]
 800929a:	6183      	str	r3, [r0, #24]
 800929c:	4619      	mov	r1, r3
 800929e:	2208      	movs	r2, #8
 80092a0:	305c      	adds	r0, #92	@ 0x5c
 80092a2:	f000 f906 	bl	80094b2 <memset>
 80092a6:	4b0d      	ldr	r3, [pc, #52]	@ (80092dc <std+0x58>)
 80092a8:	6263      	str	r3, [r4, #36]	@ 0x24
 80092aa:	4b0d      	ldr	r3, [pc, #52]	@ (80092e0 <std+0x5c>)
 80092ac:	62a3      	str	r3, [r4, #40]	@ 0x28
 80092ae:	4b0d      	ldr	r3, [pc, #52]	@ (80092e4 <std+0x60>)
 80092b0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80092b2:	4b0d      	ldr	r3, [pc, #52]	@ (80092e8 <std+0x64>)
 80092b4:	6323      	str	r3, [r4, #48]	@ 0x30
 80092b6:	4b0d      	ldr	r3, [pc, #52]	@ (80092ec <std+0x68>)
 80092b8:	6224      	str	r4, [r4, #32]
 80092ba:	429c      	cmp	r4, r3
 80092bc:	d006      	beq.n	80092cc <std+0x48>
 80092be:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80092c2:	4294      	cmp	r4, r2
 80092c4:	d002      	beq.n	80092cc <std+0x48>
 80092c6:	33d0      	adds	r3, #208	@ 0xd0
 80092c8:	429c      	cmp	r4, r3
 80092ca:	d105      	bne.n	80092d8 <std+0x54>
 80092cc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80092d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80092d4:	f000 b966 	b.w	80095a4 <__retarget_lock_init_recursive>
 80092d8:	bd10      	pop	{r4, pc}
 80092da:	bf00      	nop
 80092dc:	0800942d 	.word	0x0800942d
 80092e0:	0800944f 	.word	0x0800944f
 80092e4:	08009487 	.word	0x08009487
 80092e8:	080094ab 	.word	0x080094ab
 80092ec:	24000304 	.word	0x24000304

080092f0 <stdio_exit_handler>:
 80092f0:	4a02      	ldr	r2, [pc, #8]	@ (80092fc <stdio_exit_handler+0xc>)
 80092f2:	4903      	ldr	r1, [pc, #12]	@ (8009300 <stdio_exit_handler+0x10>)
 80092f4:	4803      	ldr	r0, [pc, #12]	@ (8009304 <stdio_exit_handler+0x14>)
 80092f6:	f000 b869 	b.w	80093cc <_fwalk_sglue>
 80092fa:	bf00      	nop
 80092fc:	24000010 	.word	0x24000010
 8009300:	08009e41 	.word	0x08009e41
 8009304:	24000020 	.word	0x24000020

08009308 <cleanup_stdio>:
 8009308:	6841      	ldr	r1, [r0, #4]
 800930a:	4b0c      	ldr	r3, [pc, #48]	@ (800933c <cleanup_stdio+0x34>)
 800930c:	4299      	cmp	r1, r3
 800930e:	b510      	push	{r4, lr}
 8009310:	4604      	mov	r4, r0
 8009312:	d001      	beq.n	8009318 <cleanup_stdio+0x10>
 8009314:	f000 fd94 	bl	8009e40 <_fflush_r>
 8009318:	68a1      	ldr	r1, [r4, #8]
 800931a:	4b09      	ldr	r3, [pc, #36]	@ (8009340 <cleanup_stdio+0x38>)
 800931c:	4299      	cmp	r1, r3
 800931e:	d002      	beq.n	8009326 <cleanup_stdio+0x1e>
 8009320:	4620      	mov	r0, r4
 8009322:	f000 fd8d 	bl	8009e40 <_fflush_r>
 8009326:	68e1      	ldr	r1, [r4, #12]
 8009328:	4b06      	ldr	r3, [pc, #24]	@ (8009344 <cleanup_stdio+0x3c>)
 800932a:	4299      	cmp	r1, r3
 800932c:	d004      	beq.n	8009338 <cleanup_stdio+0x30>
 800932e:	4620      	mov	r0, r4
 8009330:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009334:	f000 bd84 	b.w	8009e40 <_fflush_r>
 8009338:	bd10      	pop	{r4, pc}
 800933a:	bf00      	nop
 800933c:	24000304 	.word	0x24000304
 8009340:	2400036c 	.word	0x2400036c
 8009344:	240003d4 	.word	0x240003d4

08009348 <global_stdio_init.part.0>:
 8009348:	b510      	push	{r4, lr}
 800934a:	4b0b      	ldr	r3, [pc, #44]	@ (8009378 <global_stdio_init.part.0+0x30>)
 800934c:	4c0b      	ldr	r4, [pc, #44]	@ (800937c <global_stdio_init.part.0+0x34>)
 800934e:	4a0c      	ldr	r2, [pc, #48]	@ (8009380 <global_stdio_init.part.0+0x38>)
 8009350:	601a      	str	r2, [r3, #0]
 8009352:	4620      	mov	r0, r4
 8009354:	2200      	movs	r2, #0
 8009356:	2104      	movs	r1, #4
 8009358:	f7ff ff94 	bl	8009284 <std>
 800935c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8009360:	2201      	movs	r2, #1
 8009362:	2109      	movs	r1, #9
 8009364:	f7ff ff8e 	bl	8009284 <std>
 8009368:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800936c:	2202      	movs	r2, #2
 800936e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009372:	2112      	movs	r1, #18
 8009374:	f7ff bf86 	b.w	8009284 <std>
 8009378:	2400043c 	.word	0x2400043c
 800937c:	24000304 	.word	0x24000304
 8009380:	080092f1 	.word	0x080092f1

08009384 <__sfp_lock_acquire>:
 8009384:	4801      	ldr	r0, [pc, #4]	@ (800938c <__sfp_lock_acquire+0x8>)
 8009386:	f000 b90e 	b.w	80095a6 <__retarget_lock_acquire_recursive>
 800938a:	bf00      	nop
 800938c:	24000445 	.word	0x24000445

08009390 <__sfp_lock_release>:
 8009390:	4801      	ldr	r0, [pc, #4]	@ (8009398 <__sfp_lock_release+0x8>)
 8009392:	f000 b909 	b.w	80095a8 <__retarget_lock_release_recursive>
 8009396:	bf00      	nop
 8009398:	24000445 	.word	0x24000445

0800939c <__sinit>:
 800939c:	b510      	push	{r4, lr}
 800939e:	4604      	mov	r4, r0
 80093a0:	f7ff fff0 	bl	8009384 <__sfp_lock_acquire>
 80093a4:	6a23      	ldr	r3, [r4, #32]
 80093a6:	b11b      	cbz	r3, 80093b0 <__sinit+0x14>
 80093a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80093ac:	f7ff bff0 	b.w	8009390 <__sfp_lock_release>
 80093b0:	4b04      	ldr	r3, [pc, #16]	@ (80093c4 <__sinit+0x28>)
 80093b2:	6223      	str	r3, [r4, #32]
 80093b4:	4b04      	ldr	r3, [pc, #16]	@ (80093c8 <__sinit+0x2c>)
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d1f5      	bne.n	80093a8 <__sinit+0xc>
 80093bc:	f7ff ffc4 	bl	8009348 <global_stdio_init.part.0>
 80093c0:	e7f2      	b.n	80093a8 <__sinit+0xc>
 80093c2:	bf00      	nop
 80093c4:	08009309 	.word	0x08009309
 80093c8:	2400043c 	.word	0x2400043c

080093cc <_fwalk_sglue>:
 80093cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80093d0:	4607      	mov	r7, r0
 80093d2:	4688      	mov	r8, r1
 80093d4:	4614      	mov	r4, r2
 80093d6:	2600      	movs	r6, #0
 80093d8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80093dc:	f1b9 0901 	subs.w	r9, r9, #1
 80093e0:	d505      	bpl.n	80093ee <_fwalk_sglue+0x22>
 80093e2:	6824      	ldr	r4, [r4, #0]
 80093e4:	2c00      	cmp	r4, #0
 80093e6:	d1f7      	bne.n	80093d8 <_fwalk_sglue+0xc>
 80093e8:	4630      	mov	r0, r6
 80093ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80093ee:	89ab      	ldrh	r3, [r5, #12]
 80093f0:	2b01      	cmp	r3, #1
 80093f2:	d907      	bls.n	8009404 <_fwalk_sglue+0x38>
 80093f4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80093f8:	3301      	adds	r3, #1
 80093fa:	d003      	beq.n	8009404 <_fwalk_sglue+0x38>
 80093fc:	4629      	mov	r1, r5
 80093fe:	4638      	mov	r0, r7
 8009400:	47c0      	blx	r8
 8009402:	4306      	orrs	r6, r0
 8009404:	3568      	adds	r5, #104	@ 0x68
 8009406:	e7e9      	b.n	80093dc <_fwalk_sglue+0x10>

08009408 <iprintf>:
 8009408:	b40f      	push	{r0, r1, r2, r3}
 800940a:	b507      	push	{r0, r1, r2, lr}
 800940c:	4906      	ldr	r1, [pc, #24]	@ (8009428 <iprintf+0x20>)
 800940e:	ab04      	add	r3, sp, #16
 8009410:	6808      	ldr	r0, [r1, #0]
 8009412:	f853 2b04 	ldr.w	r2, [r3], #4
 8009416:	6881      	ldr	r1, [r0, #8]
 8009418:	9301      	str	r3, [sp, #4]
 800941a:	f000 f9e9 	bl	80097f0 <_vfiprintf_r>
 800941e:	b003      	add	sp, #12
 8009420:	f85d eb04 	ldr.w	lr, [sp], #4
 8009424:	b004      	add	sp, #16
 8009426:	4770      	bx	lr
 8009428:	2400001c 	.word	0x2400001c

0800942c <__sread>:
 800942c:	b510      	push	{r4, lr}
 800942e:	460c      	mov	r4, r1
 8009430:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009434:	f000 f868 	bl	8009508 <_read_r>
 8009438:	2800      	cmp	r0, #0
 800943a:	bfab      	itete	ge
 800943c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800943e:	89a3      	ldrhlt	r3, [r4, #12]
 8009440:	181b      	addge	r3, r3, r0
 8009442:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8009446:	bfac      	ite	ge
 8009448:	6563      	strge	r3, [r4, #84]	@ 0x54
 800944a:	81a3      	strhlt	r3, [r4, #12]
 800944c:	bd10      	pop	{r4, pc}

0800944e <__swrite>:
 800944e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009452:	461f      	mov	r7, r3
 8009454:	898b      	ldrh	r3, [r1, #12]
 8009456:	05db      	lsls	r3, r3, #23
 8009458:	4605      	mov	r5, r0
 800945a:	460c      	mov	r4, r1
 800945c:	4616      	mov	r6, r2
 800945e:	d505      	bpl.n	800946c <__swrite+0x1e>
 8009460:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009464:	2302      	movs	r3, #2
 8009466:	2200      	movs	r2, #0
 8009468:	f000 f83c 	bl	80094e4 <_lseek_r>
 800946c:	89a3      	ldrh	r3, [r4, #12]
 800946e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009472:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009476:	81a3      	strh	r3, [r4, #12]
 8009478:	4632      	mov	r2, r6
 800947a:	463b      	mov	r3, r7
 800947c:	4628      	mov	r0, r5
 800947e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009482:	f000 b853 	b.w	800952c <_write_r>

08009486 <__sseek>:
 8009486:	b510      	push	{r4, lr}
 8009488:	460c      	mov	r4, r1
 800948a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800948e:	f000 f829 	bl	80094e4 <_lseek_r>
 8009492:	1c43      	adds	r3, r0, #1
 8009494:	89a3      	ldrh	r3, [r4, #12]
 8009496:	bf15      	itete	ne
 8009498:	6560      	strne	r0, [r4, #84]	@ 0x54
 800949a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800949e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80094a2:	81a3      	strheq	r3, [r4, #12]
 80094a4:	bf18      	it	ne
 80094a6:	81a3      	strhne	r3, [r4, #12]
 80094a8:	bd10      	pop	{r4, pc}

080094aa <__sclose>:
 80094aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80094ae:	f000 b809 	b.w	80094c4 <_close_r>

080094b2 <memset>:
 80094b2:	4402      	add	r2, r0
 80094b4:	4603      	mov	r3, r0
 80094b6:	4293      	cmp	r3, r2
 80094b8:	d100      	bne.n	80094bc <memset+0xa>
 80094ba:	4770      	bx	lr
 80094bc:	f803 1b01 	strb.w	r1, [r3], #1
 80094c0:	e7f9      	b.n	80094b6 <memset+0x4>
	...

080094c4 <_close_r>:
 80094c4:	b538      	push	{r3, r4, r5, lr}
 80094c6:	4d06      	ldr	r5, [pc, #24]	@ (80094e0 <_close_r+0x1c>)
 80094c8:	2300      	movs	r3, #0
 80094ca:	4604      	mov	r4, r0
 80094cc:	4608      	mov	r0, r1
 80094ce:	602b      	str	r3, [r5, #0]
 80094d0:	f7f7 fcc9 	bl	8000e66 <_close>
 80094d4:	1c43      	adds	r3, r0, #1
 80094d6:	d102      	bne.n	80094de <_close_r+0x1a>
 80094d8:	682b      	ldr	r3, [r5, #0]
 80094da:	b103      	cbz	r3, 80094de <_close_r+0x1a>
 80094dc:	6023      	str	r3, [r4, #0]
 80094de:	bd38      	pop	{r3, r4, r5, pc}
 80094e0:	24000440 	.word	0x24000440

080094e4 <_lseek_r>:
 80094e4:	b538      	push	{r3, r4, r5, lr}
 80094e6:	4d07      	ldr	r5, [pc, #28]	@ (8009504 <_lseek_r+0x20>)
 80094e8:	4604      	mov	r4, r0
 80094ea:	4608      	mov	r0, r1
 80094ec:	4611      	mov	r1, r2
 80094ee:	2200      	movs	r2, #0
 80094f0:	602a      	str	r2, [r5, #0]
 80094f2:	461a      	mov	r2, r3
 80094f4:	f7f7 fcde 	bl	8000eb4 <_lseek>
 80094f8:	1c43      	adds	r3, r0, #1
 80094fa:	d102      	bne.n	8009502 <_lseek_r+0x1e>
 80094fc:	682b      	ldr	r3, [r5, #0]
 80094fe:	b103      	cbz	r3, 8009502 <_lseek_r+0x1e>
 8009500:	6023      	str	r3, [r4, #0]
 8009502:	bd38      	pop	{r3, r4, r5, pc}
 8009504:	24000440 	.word	0x24000440

08009508 <_read_r>:
 8009508:	b538      	push	{r3, r4, r5, lr}
 800950a:	4d07      	ldr	r5, [pc, #28]	@ (8009528 <_read_r+0x20>)
 800950c:	4604      	mov	r4, r0
 800950e:	4608      	mov	r0, r1
 8009510:	4611      	mov	r1, r2
 8009512:	2200      	movs	r2, #0
 8009514:	602a      	str	r2, [r5, #0]
 8009516:	461a      	mov	r2, r3
 8009518:	f7f7 fc88 	bl	8000e2c <_read>
 800951c:	1c43      	adds	r3, r0, #1
 800951e:	d102      	bne.n	8009526 <_read_r+0x1e>
 8009520:	682b      	ldr	r3, [r5, #0]
 8009522:	b103      	cbz	r3, 8009526 <_read_r+0x1e>
 8009524:	6023      	str	r3, [r4, #0]
 8009526:	bd38      	pop	{r3, r4, r5, pc}
 8009528:	24000440 	.word	0x24000440

0800952c <_write_r>:
 800952c:	b538      	push	{r3, r4, r5, lr}
 800952e:	4d07      	ldr	r5, [pc, #28]	@ (800954c <_write_r+0x20>)
 8009530:	4604      	mov	r4, r0
 8009532:	4608      	mov	r0, r1
 8009534:	4611      	mov	r1, r2
 8009536:	2200      	movs	r2, #0
 8009538:	602a      	str	r2, [r5, #0]
 800953a:	461a      	mov	r2, r3
 800953c:	f7f7 fed8 	bl	80012f0 <_write>
 8009540:	1c43      	adds	r3, r0, #1
 8009542:	d102      	bne.n	800954a <_write_r+0x1e>
 8009544:	682b      	ldr	r3, [r5, #0]
 8009546:	b103      	cbz	r3, 800954a <_write_r+0x1e>
 8009548:	6023      	str	r3, [r4, #0]
 800954a:	bd38      	pop	{r3, r4, r5, pc}
 800954c:	24000440 	.word	0x24000440

08009550 <__errno>:
 8009550:	4b01      	ldr	r3, [pc, #4]	@ (8009558 <__errno+0x8>)
 8009552:	6818      	ldr	r0, [r3, #0]
 8009554:	4770      	bx	lr
 8009556:	bf00      	nop
 8009558:	2400001c 	.word	0x2400001c

0800955c <__libc_init_array>:
 800955c:	b570      	push	{r4, r5, r6, lr}
 800955e:	4d0d      	ldr	r5, [pc, #52]	@ (8009594 <__libc_init_array+0x38>)
 8009560:	4c0d      	ldr	r4, [pc, #52]	@ (8009598 <__libc_init_array+0x3c>)
 8009562:	1b64      	subs	r4, r4, r5
 8009564:	10a4      	asrs	r4, r4, #2
 8009566:	2600      	movs	r6, #0
 8009568:	42a6      	cmp	r6, r4
 800956a:	d109      	bne.n	8009580 <__libc_init_array+0x24>
 800956c:	4d0b      	ldr	r5, [pc, #44]	@ (800959c <__libc_init_array+0x40>)
 800956e:	4c0c      	ldr	r4, [pc, #48]	@ (80095a0 <__libc_init_array+0x44>)
 8009570:	f000 fdb6 	bl	800a0e0 <_init>
 8009574:	1b64      	subs	r4, r4, r5
 8009576:	10a4      	asrs	r4, r4, #2
 8009578:	2600      	movs	r6, #0
 800957a:	42a6      	cmp	r6, r4
 800957c:	d105      	bne.n	800958a <__libc_init_array+0x2e>
 800957e:	bd70      	pop	{r4, r5, r6, pc}
 8009580:	f855 3b04 	ldr.w	r3, [r5], #4
 8009584:	4798      	blx	r3
 8009586:	3601      	adds	r6, #1
 8009588:	e7ee      	b.n	8009568 <__libc_init_array+0xc>
 800958a:	f855 3b04 	ldr.w	r3, [r5], #4
 800958e:	4798      	blx	r3
 8009590:	3601      	adds	r6, #1
 8009592:	e7f2      	b.n	800957a <__libc_init_array+0x1e>
 8009594:	0800a1ac 	.word	0x0800a1ac
 8009598:	0800a1ac 	.word	0x0800a1ac
 800959c:	0800a1ac 	.word	0x0800a1ac
 80095a0:	0800a1b0 	.word	0x0800a1b0

080095a4 <__retarget_lock_init_recursive>:
 80095a4:	4770      	bx	lr

080095a6 <__retarget_lock_acquire_recursive>:
 80095a6:	4770      	bx	lr

080095a8 <__retarget_lock_release_recursive>:
 80095a8:	4770      	bx	lr
	...

080095ac <_free_r>:
 80095ac:	b538      	push	{r3, r4, r5, lr}
 80095ae:	4605      	mov	r5, r0
 80095b0:	2900      	cmp	r1, #0
 80095b2:	d041      	beq.n	8009638 <_free_r+0x8c>
 80095b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80095b8:	1f0c      	subs	r4, r1, #4
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	bfb8      	it	lt
 80095be:	18e4      	addlt	r4, r4, r3
 80095c0:	f000 f8e0 	bl	8009784 <__malloc_lock>
 80095c4:	4a1d      	ldr	r2, [pc, #116]	@ (800963c <_free_r+0x90>)
 80095c6:	6813      	ldr	r3, [r2, #0]
 80095c8:	b933      	cbnz	r3, 80095d8 <_free_r+0x2c>
 80095ca:	6063      	str	r3, [r4, #4]
 80095cc:	6014      	str	r4, [r2, #0]
 80095ce:	4628      	mov	r0, r5
 80095d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80095d4:	f000 b8dc 	b.w	8009790 <__malloc_unlock>
 80095d8:	42a3      	cmp	r3, r4
 80095da:	d908      	bls.n	80095ee <_free_r+0x42>
 80095dc:	6820      	ldr	r0, [r4, #0]
 80095de:	1821      	adds	r1, r4, r0
 80095e0:	428b      	cmp	r3, r1
 80095e2:	bf01      	itttt	eq
 80095e4:	6819      	ldreq	r1, [r3, #0]
 80095e6:	685b      	ldreq	r3, [r3, #4]
 80095e8:	1809      	addeq	r1, r1, r0
 80095ea:	6021      	streq	r1, [r4, #0]
 80095ec:	e7ed      	b.n	80095ca <_free_r+0x1e>
 80095ee:	461a      	mov	r2, r3
 80095f0:	685b      	ldr	r3, [r3, #4]
 80095f2:	b10b      	cbz	r3, 80095f8 <_free_r+0x4c>
 80095f4:	42a3      	cmp	r3, r4
 80095f6:	d9fa      	bls.n	80095ee <_free_r+0x42>
 80095f8:	6811      	ldr	r1, [r2, #0]
 80095fa:	1850      	adds	r0, r2, r1
 80095fc:	42a0      	cmp	r0, r4
 80095fe:	d10b      	bne.n	8009618 <_free_r+0x6c>
 8009600:	6820      	ldr	r0, [r4, #0]
 8009602:	4401      	add	r1, r0
 8009604:	1850      	adds	r0, r2, r1
 8009606:	4283      	cmp	r3, r0
 8009608:	6011      	str	r1, [r2, #0]
 800960a:	d1e0      	bne.n	80095ce <_free_r+0x22>
 800960c:	6818      	ldr	r0, [r3, #0]
 800960e:	685b      	ldr	r3, [r3, #4]
 8009610:	6053      	str	r3, [r2, #4]
 8009612:	4408      	add	r0, r1
 8009614:	6010      	str	r0, [r2, #0]
 8009616:	e7da      	b.n	80095ce <_free_r+0x22>
 8009618:	d902      	bls.n	8009620 <_free_r+0x74>
 800961a:	230c      	movs	r3, #12
 800961c:	602b      	str	r3, [r5, #0]
 800961e:	e7d6      	b.n	80095ce <_free_r+0x22>
 8009620:	6820      	ldr	r0, [r4, #0]
 8009622:	1821      	adds	r1, r4, r0
 8009624:	428b      	cmp	r3, r1
 8009626:	bf04      	itt	eq
 8009628:	6819      	ldreq	r1, [r3, #0]
 800962a:	685b      	ldreq	r3, [r3, #4]
 800962c:	6063      	str	r3, [r4, #4]
 800962e:	bf04      	itt	eq
 8009630:	1809      	addeq	r1, r1, r0
 8009632:	6021      	streq	r1, [r4, #0]
 8009634:	6054      	str	r4, [r2, #4]
 8009636:	e7ca      	b.n	80095ce <_free_r+0x22>
 8009638:	bd38      	pop	{r3, r4, r5, pc}
 800963a:	bf00      	nop
 800963c:	2400044c 	.word	0x2400044c

08009640 <sbrk_aligned>:
 8009640:	b570      	push	{r4, r5, r6, lr}
 8009642:	4e0f      	ldr	r6, [pc, #60]	@ (8009680 <sbrk_aligned+0x40>)
 8009644:	460c      	mov	r4, r1
 8009646:	6831      	ldr	r1, [r6, #0]
 8009648:	4605      	mov	r5, r0
 800964a:	b911      	cbnz	r1, 8009652 <sbrk_aligned+0x12>
 800964c:	f000 fcb4 	bl	8009fb8 <_sbrk_r>
 8009650:	6030      	str	r0, [r6, #0]
 8009652:	4621      	mov	r1, r4
 8009654:	4628      	mov	r0, r5
 8009656:	f000 fcaf 	bl	8009fb8 <_sbrk_r>
 800965a:	1c43      	adds	r3, r0, #1
 800965c:	d103      	bne.n	8009666 <sbrk_aligned+0x26>
 800965e:	f04f 34ff 	mov.w	r4, #4294967295
 8009662:	4620      	mov	r0, r4
 8009664:	bd70      	pop	{r4, r5, r6, pc}
 8009666:	1cc4      	adds	r4, r0, #3
 8009668:	f024 0403 	bic.w	r4, r4, #3
 800966c:	42a0      	cmp	r0, r4
 800966e:	d0f8      	beq.n	8009662 <sbrk_aligned+0x22>
 8009670:	1a21      	subs	r1, r4, r0
 8009672:	4628      	mov	r0, r5
 8009674:	f000 fca0 	bl	8009fb8 <_sbrk_r>
 8009678:	3001      	adds	r0, #1
 800967a:	d1f2      	bne.n	8009662 <sbrk_aligned+0x22>
 800967c:	e7ef      	b.n	800965e <sbrk_aligned+0x1e>
 800967e:	bf00      	nop
 8009680:	24000448 	.word	0x24000448

08009684 <_malloc_r>:
 8009684:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009688:	1ccd      	adds	r5, r1, #3
 800968a:	f025 0503 	bic.w	r5, r5, #3
 800968e:	3508      	adds	r5, #8
 8009690:	2d0c      	cmp	r5, #12
 8009692:	bf38      	it	cc
 8009694:	250c      	movcc	r5, #12
 8009696:	2d00      	cmp	r5, #0
 8009698:	4606      	mov	r6, r0
 800969a:	db01      	blt.n	80096a0 <_malloc_r+0x1c>
 800969c:	42a9      	cmp	r1, r5
 800969e:	d904      	bls.n	80096aa <_malloc_r+0x26>
 80096a0:	230c      	movs	r3, #12
 80096a2:	6033      	str	r3, [r6, #0]
 80096a4:	2000      	movs	r0, #0
 80096a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80096aa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009780 <_malloc_r+0xfc>
 80096ae:	f000 f869 	bl	8009784 <__malloc_lock>
 80096b2:	f8d8 3000 	ldr.w	r3, [r8]
 80096b6:	461c      	mov	r4, r3
 80096b8:	bb44      	cbnz	r4, 800970c <_malloc_r+0x88>
 80096ba:	4629      	mov	r1, r5
 80096bc:	4630      	mov	r0, r6
 80096be:	f7ff ffbf 	bl	8009640 <sbrk_aligned>
 80096c2:	1c43      	adds	r3, r0, #1
 80096c4:	4604      	mov	r4, r0
 80096c6:	d158      	bne.n	800977a <_malloc_r+0xf6>
 80096c8:	f8d8 4000 	ldr.w	r4, [r8]
 80096cc:	4627      	mov	r7, r4
 80096ce:	2f00      	cmp	r7, #0
 80096d0:	d143      	bne.n	800975a <_malloc_r+0xd6>
 80096d2:	2c00      	cmp	r4, #0
 80096d4:	d04b      	beq.n	800976e <_malloc_r+0xea>
 80096d6:	6823      	ldr	r3, [r4, #0]
 80096d8:	4639      	mov	r1, r7
 80096da:	4630      	mov	r0, r6
 80096dc:	eb04 0903 	add.w	r9, r4, r3
 80096e0:	f000 fc6a 	bl	8009fb8 <_sbrk_r>
 80096e4:	4581      	cmp	r9, r0
 80096e6:	d142      	bne.n	800976e <_malloc_r+0xea>
 80096e8:	6821      	ldr	r1, [r4, #0]
 80096ea:	1a6d      	subs	r5, r5, r1
 80096ec:	4629      	mov	r1, r5
 80096ee:	4630      	mov	r0, r6
 80096f0:	f7ff ffa6 	bl	8009640 <sbrk_aligned>
 80096f4:	3001      	adds	r0, #1
 80096f6:	d03a      	beq.n	800976e <_malloc_r+0xea>
 80096f8:	6823      	ldr	r3, [r4, #0]
 80096fa:	442b      	add	r3, r5
 80096fc:	6023      	str	r3, [r4, #0]
 80096fe:	f8d8 3000 	ldr.w	r3, [r8]
 8009702:	685a      	ldr	r2, [r3, #4]
 8009704:	bb62      	cbnz	r2, 8009760 <_malloc_r+0xdc>
 8009706:	f8c8 7000 	str.w	r7, [r8]
 800970a:	e00f      	b.n	800972c <_malloc_r+0xa8>
 800970c:	6822      	ldr	r2, [r4, #0]
 800970e:	1b52      	subs	r2, r2, r5
 8009710:	d420      	bmi.n	8009754 <_malloc_r+0xd0>
 8009712:	2a0b      	cmp	r2, #11
 8009714:	d917      	bls.n	8009746 <_malloc_r+0xc2>
 8009716:	1961      	adds	r1, r4, r5
 8009718:	42a3      	cmp	r3, r4
 800971a:	6025      	str	r5, [r4, #0]
 800971c:	bf18      	it	ne
 800971e:	6059      	strne	r1, [r3, #4]
 8009720:	6863      	ldr	r3, [r4, #4]
 8009722:	bf08      	it	eq
 8009724:	f8c8 1000 	streq.w	r1, [r8]
 8009728:	5162      	str	r2, [r4, r5]
 800972a:	604b      	str	r3, [r1, #4]
 800972c:	4630      	mov	r0, r6
 800972e:	f000 f82f 	bl	8009790 <__malloc_unlock>
 8009732:	f104 000b 	add.w	r0, r4, #11
 8009736:	1d23      	adds	r3, r4, #4
 8009738:	f020 0007 	bic.w	r0, r0, #7
 800973c:	1ac2      	subs	r2, r0, r3
 800973e:	bf1c      	itt	ne
 8009740:	1a1b      	subne	r3, r3, r0
 8009742:	50a3      	strne	r3, [r4, r2]
 8009744:	e7af      	b.n	80096a6 <_malloc_r+0x22>
 8009746:	6862      	ldr	r2, [r4, #4]
 8009748:	42a3      	cmp	r3, r4
 800974a:	bf0c      	ite	eq
 800974c:	f8c8 2000 	streq.w	r2, [r8]
 8009750:	605a      	strne	r2, [r3, #4]
 8009752:	e7eb      	b.n	800972c <_malloc_r+0xa8>
 8009754:	4623      	mov	r3, r4
 8009756:	6864      	ldr	r4, [r4, #4]
 8009758:	e7ae      	b.n	80096b8 <_malloc_r+0x34>
 800975a:	463c      	mov	r4, r7
 800975c:	687f      	ldr	r7, [r7, #4]
 800975e:	e7b6      	b.n	80096ce <_malloc_r+0x4a>
 8009760:	461a      	mov	r2, r3
 8009762:	685b      	ldr	r3, [r3, #4]
 8009764:	42a3      	cmp	r3, r4
 8009766:	d1fb      	bne.n	8009760 <_malloc_r+0xdc>
 8009768:	2300      	movs	r3, #0
 800976a:	6053      	str	r3, [r2, #4]
 800976c:	e7de      	b.n	800972c <_malloc_r+0xa8>
 800976e:	230c      	movs	r3, #12
 8009770:	6033      	str	r3, [r6, #0]
 8009772:	4630      	mov	r0, r6
 8009774:	f000 f80c 	bl	8009790 <__malloc_unlock>
 8009778:	e794      	b.n	80096a4 <_malloc_r+0x20>
 800977a:	6005      	str	r5, [r0, #0]
 800977c:	e7d6      	b.n	800972c <_malloc_r+0xa8>
 800977e:	bf00      	nop
 8009780:	2400044c 	.word	0x2400044c

08009784 <__malloc_lock>:
 8009784:	4801      	ldr	r0, [pc, #4]	@ (800978c <__malloc_lock+0x8>)
 8009786:	f7ff bf0e 	b.w	80095a6 <__retarget_lock_acquire_recursive>
 800978a:	bf00      	nop
 800978c:	24000444 	.word	0x24000444

08009790 <__malloc_unlock>:
 8009790:	4801      	ldr	r0, [pc, #4]	@ (8009798 <__malloc_unlock+0x8>)
 8009792:	f7ff bf09 	b.w	80095a8 <__retarget_lock_release_recursive>
 8009796:	bf00      	nop
 8009798:	24000444 	.word	0x24000444

0800979c <__sfputc_r>:
 800979c:	6893      	ldr	r3, [r2, #8]
 800979e:	3b01      	subs	r3, #1
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	b410      	push	{r4}
 80097a4:	6093      	str	r3, [r2, #8]
 80097a6:	da08      	bge.n	80097ba <__sfputc_r+0x1e>
 80097a8:	6994      	ldr	r4, [r2, #24]
 80097aa:	42a3      	cmp	r3, r4
 80097ac:	db01      	blt.n	80097b2 <__sfputc_r+0x16>
 80097ae:	290a      	cmp	r1, #10
 80097b0:	d103      	bne.n	80097ba <__sfputc_r+0x1e>
 80097b2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80097b6:	f000 bb6b 	b.w	8009e90 <__swbuf_r>
 80097ba:	6813      	ldr	r3, [r2, #0]
 80097bc:	1c58      	adds	r0, r3, #1
 80097be:	6010      	str	r0, [r2, #0]
 80097c0:	7019      	strb	r1, [r3, #0]
 80097c2:	4608      	mov	r0, r1
 80097c4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80097c8:	4770      	bx	lr

080097ca <__sfputs_r>:
 80097ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097cc:	4606      	mov	r6, r0
 80097ce:	460f      	mov	r7, r1
 80097d0:	4614      	mov	r4, r2
 80097d2:	18d5      	adds	r5, r2, r3
 80097d4:	42ac      	cmp	r4, r5
 80097d6:	d101      	bne.n	80097dc <__sfputs_r+0x12>
 80097d8:	2000      	movs	r0, #0
 80097da:	e007      	b.n	80097ec <__sfputs_r+0x22>
 80097dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80097e0:	463a      	mov	r2, r7
 80097e2:	4630      	mov	r0, r6
 80097e4:	f7ff ffda 	bl	800979c <__sfputc_r>
 80097e8:	1c43      	adds	r3, r0, #1
 80097ea:	d1f3      	bne.n	80097d4 <__sfputs_r+0xa>
 80097ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080097f0 <_vfiprintf_r>:
 80097f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097f4:	460d      	mov	r5, r1
 80097f6:	b09d      	sub	sp, #116	@ 0x74
 80097f8:	4614      	mov	r4, r2
 80097fa:	4698      	mov	r8, r3
 80097fc:	4606      	mov	r6, r0
 80097fe:	b118      	cbz	r0, 8009808 <_vfiprintf_r+0x18>
 8009800:	6a03      	ldr	r3, [r0, #32]
 8009802:	b90b      	cbnz	r3, 8009808 <_vfiprintf_r+0x18>
 8009804:	f7ff fdca 	bl	800939c <__sinit>
 8009808:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800980a:	07d9      	lsls	r1, r3, #31
 800980c:	d405      	bmi.n	800981a <_vfiprintf_r+0x2a>
 800980e:	89ab      	ldrh	r3, [r5, #12]
 8009810:	059a      	lsls	r2, r3, #22
 8009812:	d402      	bmi.n	800981a <_vfiprintf_r+0x2a>
 8009814:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009816:	f7ff fec6 	bl	80095a6 <__retarget_lock_acquire_recursive>
 800981a:	89ab      	ldrh	r3, [r5, #12]
 800981c:	071b      	lsls	r3, r3, #28
 800981e:	d501      	bpl.n	8009824 <_vfiprintf_r+0x34>
 8009820:	692b      	ldr	r3, [r5, #16]
 8009822:	b99b      	cbnz	r3, 800984c <_vfiprintf_r+0x5c>
 8009824:	4629      	mov	r1, r5
 8009826:	4630      	mov	r0, r6
 8009828:	f000 fb70 	bl	8009f0c <__swsetup_r>
 800982c:	b170      	cbz	r0, 800984c <_vfiprintf_r+0x5c>
 800982e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009830:	07dc      	lsls	r4, r3, #31
 8009832:	d504      	bpl.n	800983e <_vfiprintf_r+0x4e>
 8009834:	f04f 30ff 	mov.w	r0, #4294967295
 8009838:	b01d      	add	sp, #116	@ 0x74
 800983a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800983e:	89ab      	ldrh	r3, [r5, #12]
 8009840:	0598      	lsls	r0, r3, #22
 8009842:	d4f7      	bmi.n	8009834 <_vfiprintf_r+0x44>
 8009844:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009846:	f7ff feaf 	bl	80095a8 <__retarget_lock_release_recursive>
 800984a:	e7f3      	b.n	8009834 <_vfiprintf_r+0x44>
 800984c:	2300      	movs	r3, #0
 800984e:	9309      	str	r3, [sp, #36]	@ 0x24
 8009850:	2320      	movs	r3, #32
 8009852:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009856:	f8cd 800c 	str.w	r8, [sp, #12]
 800985a:	2330      	movs	r3, #48	@ 0x30
 800985c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8009a0c <_vfiprintf_r+0x21c>
 8009860:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009864:	f04f 0901 	mov.w	r9, #1
 8009868:	4623      	mov	r3, r4
 800986a:	469a      	mov	sl, r3
 800986c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009870:	b10a      	cbz	r2, 8009876 <_vfiprintf_r+0x86>
 8009872:	2a25      	cmp	r2, #37	@ 0x25
 8009874:	d1f9      	bne.n	800986a <_vfiprintf_r+0x7a>
 8009876:	ebba 0b04 	subs.w	fp, sl, r4
 800987a:	d00b      	beq.n	8009894 <_vfiprintf_r+0xa4>
 800987c:	465b      	mov	r3, fp
 800987e:	4622      	mov	r2, r4
 8009880:	4629      	mov	r1, r5
 8009882:	4630      	mov	r0, r6
 8009884:	f7ff ffa1 	bl	80097ca <__sfputs_r>
 8009888:	3001      	adds	r0, #1
 800988a:	f000 80a7 	beq.w	80099dc <_vfiprintf_r+0x1ec>
 800988e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009890:	445a      	add	r2, fp
 8009892:	9209      	str	r2, [sp, #36]	@ 0x24
 8009894:	f89a 3000 	ldrb.w	r3, [sl]
 8009898:	2b00      	cmp	r3, #0
 800989a:	f000 809f 	beq.w	80099dc <_vfiprintf_r+0x1ec>
 800989e:	2300      	movs	r3, #0
 80098a0:	f04f 32ff 	mov.w	r2, #4294967295
 80098a4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80098a8:	f10a 0a01 	add.w	sl, sl, #1
 80098ac:	9304      	str	r3, [sp, #16]
 80098ae:	9307      	str	r3, [sp, #28]
 80098b0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80098b4:	931a      	str	r3, [sp, #104]	@ 0x68
 80098b6:	4654      	mov	r4, sl
 80098b8:	2205      	movs	r2, #5
 80098ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 80098be:	4853      	ldr	r0, [pc, #332]	@ (8009a0c <_vfiprintf_r+0x21c>)
 80098c0:	f7f6 fd16 	bl	80002f0 <memchr>
 80098c4:	9a04      	ldr	r2, [sp, #16]
 80098c6:	b9d8      	cbnz	r0, 8009900 <_vfiprintf_r+0x110>
 80098c8:	06d1      	lsls	r1, r2, #27
 80098ca:	bf44      	itt	mi
 80098cc:	2320      	movmi	r3, #32
 80098ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80098d2:	0713      	lsls	r3, r2, #28
 80098d4:	bf44      	itt	mi
 80098d6:	232b      	movmi	r3, #43	@ 0x2b
 80098d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80098dc:	f89a 3000 	ldrb.w	r3, [sl]
 80098e0:	2b2a      	cmp	r3, #42	@ 0x2a
 80098e2:	d015      	beq.n	8009910 <_vfiprintf_r+0x120>
 80098e4:	9a07      	ldr	r2, [sp, #28]
 80098e6:	4654      	mov	r4, sl
 80098e8:	2000      	movs	r0, #0
 80098ea:	f04f 0c0a 	mov.w	ip, #10
 80098ee:	4621      	mov	r1, r4
 80098f0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80098f4:	3b30      	subs	r3, #48	@ 0x30
 80098f6:	2b09      	cmp	r3, #9
 80098f8:	d94b      	bls.n	8009992 <_vfiprintf_r+0x1a2>
 80098fa:	b1b0      	cbz	r0, 800992a <_vfiprintf_r+0x13a>
 80098fc:	9207      	str	r2, [sp, #28]
 80098fe:	e014      	b.n	800992a <_vfiprintf_r+0x13a>
 8009900:	eba0 0308 	sub.w	r3, r0, r8
 8009904:	fa09 f303 	lsl.w	r3, r9, r3
 8009908:	4313      	orrs	r3, r2
 800990a:	9304      	str	r3, [sp, #16]
 800990c:	46a2      	mov	sl, r4
 800990e:	e7d2      	b.n	80098b6 <_vfiprintf_r+0xc6>
 8009910:	9b03      	ldr	r3, [sp, #12]
 8009912:	1d19      	adds	r1, r3, #4
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	9103      	str	r1, [sp, #12]
 8009918:	2b00      	cmp	r3, #0
 800991a:	bfbb      	ittet	lt
 800991c:	425b      	neglt	r3, r3
 800991e:	f042 0202 	orrlt.w	r2, r2, #2
 8009922:	9307      	strge	r3, [sp, #28]
 8009924:	9307      	strlt	r3, [sp, #28]
 8009926:	bfb8      	it	lt
 8009928:	9204      	strlt	r2, [sp, #16]
 800992a:	7823      	ldrb	r3, [r4, #0]
 800992c:	2b2e      	cmp	r3, #46	@ 0x2e
 800992e:	d10a      	bne.n	8009946 <_vfiprintf_r+0x156>
 8009930:	7863      	ldrb	r3, [r4, #1]
 8009932:	2b2a      	cmp	r3, #42	@ 0x2a
 8009934:	d132      	bne.n	800999c <_vfiprintf_r+0x1ac>
 8009936:	9b03      	ldr	r3, [sp, #12]
 8009938:	1d1a      	adds	r2, r3, #4
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	9203      	str	r2, [sp, #12]
 800993e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009942:	3402      	adds	r4, #2
 8009944:	9305      	str	r3, [sp, #20]
 8009946:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8009a1c <_vfiprintf_r+0x22c>
 800994a:	7821      	ldrb	r1, [r4, #0]
 800994c:	2203      	movs	r2, #3
 800994e:	4650      	mov	r0, sl
 8009950:	f7f6 fcce 	bl	80002f0 <memchr>
 8009954:	b138      	cbz	r0, 8009966 <_vfiprintf_r+0x176>
 8009956:	9b04      	ldr	r3, [sp, #16]
 8009958:	eba0 000a 	sub.w	r0, r0, sl
 800995c:	2240      	movs	r2, #64	@ 0x40
 800995e:	4082      	lsls	r2, r0
 8009960:	4313      	orrs	r3, r2
 8009962:	3401      	adds	r4, #1
 8009964:	9304      	str	r3, [sp, #16]
 8009966:	f814 1b01 	ldrb.w	r1, [r4], #1
 800996a:	4829      	ldr	r0, [pc, #164]	@ (8009a10 <_vfiprintf_r+0x220>)
 800996c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009970:	2206      	movs	r2, #6
 8009972:	f7f6 fcbd 	bl	80002f0 <memchr>
 8009976:	2800      	cmp	r0, #0
 8009978:	d03f      	beq.n	80099fa <_vfiprintf_r+0x20a>
 800997a:	4b26      	ldr	r3, [pc, #152]	@ (8009a14 <_vfiprintf_r+0x224>)
 800997c:	bb1b      	cbnz	r3, 80099c6 <_vfiprintf_r+0x1d6>
 800997e:	9b03      	ldr	r3, [sp, #12]
 8009980:	3307      	adds	r3, #7
 8009982:	f023 0307 	bic.w	r3, r3, #7
 8009986:	3308      	adds	r3, #8
 8009988:	9303      	str	r3, [sp, #12]
 800998a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800998c:	443b      	add	r3, r7
 800998e:	9309      	str	r3, [sp, #36]	@ 0x24
 8009990:	e76a      	b.n	8009868 <_vfiprintf_r+0x78>
 8009992:	fb0c 3202 	mla	r2, ip, r2, r3
 8009996:	460c      	mov	r4, r1
 8009998:	2001      	movs	r0, #1
 800999a:	e7a8      	b.n	80098ee <_vfiprintf_r+0xfe>
 800999c:	2300      	movs	r3, #0
 800999e:	3401      	adds	r4, #1
 80099a0:	9305      	str	r3, [sp, #20]
 80099a2:	4619      	mov	r1, r3
 80099a4:	f04f 0c0a 	mov.w	ip, #10
 80099a8:	4620      	mov	r0, r4
 80099aa:	f810 2b01 	ldrb.w	r2, [r0], #1
 80099ae:	3a30      	subs	r2, #48	@ 0x30
 80099b0:	2a09      	cmp	r2, #9
 80099b2:	d903      	bls.n	80099bc <_vfiprintf_r+0x1cc>
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	d0c6      	beq.n	8009946 <_vfiprintf_r+0x156>
 80099b8:	9105      	str	r1, [sp, #20]
 80099ba:	e7c4      	b.n	8009946 <_vfiprintf_r+0x156>
 80099bc:	fb0c 2101 	mla	r1, ip, r1, r2
 80099c0:	4604      	mov	r4, r0
 80099c2:	2301      	movs	r3, #1
 80099c4:	e7f0      	b.n	80099a8 <_vfiprintf_r+0x1b8>
 80099c6:	ab03      	add	r3, sp, #12
 80099c8:	9300      	str	r3, [sp, #0]
 80099ca:	462a      	mov	r2, r5
 80099cc:	4b12      	ldr	r3, [pc, #72]	@ (8009a18 <_vfiprintf_r+0x228>)
 80099ce:	a904      	add	r1, sp, #16
 80099d0:	4630      	mov	r0, r6
 80099d2:	f3af 8000 	nop.w
 80099d6:	4607      	mov	r7, r0
 80099d8:	1c78      	adds	r0, r7, #1
 80099da:	d1d6      	bne.n	800998a <_vfiprintf_r+0x19a>
 80099dc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80099de:	07d9      	lsls	r1, r3, #31
 80099e0:	d405      	bmi.n	80099ee <_vfiprintf_r+0x1fe>
 80099e2:	89ab      	ldrh	r3, [r5, #12]
 80099e4:	059a      	lsls	r2, r3, #22
 80099e6:	d402      	bmi.n	80099ee <_vfiprintf_r+0x1fe>
 80099e8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80099ea:	f7ff fddd 	bl	80095a8 <__retarget_lock_release_recursive>
 80099ee:	89ab      	ldrh	r3, [r5, #12]
 80099f0:	065b      	lsls	r3, r3, #25
 80099f2:	f53f af1f 	bmi.w	8009834 <_vfiprintf_r+0x44>
 80099f6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80099f8:	e71e      	b.n	8009838 <_vfiprintf_r+0x48>
 80099fa:	ab03      	add	r3, sp, #12
 80099fc:	9300      	str	r3, [sp, #0]
 80099fe:	462a      	mov	r2, r5
 8009a00:	4b05      	ldr	r3, [pc, #20]	@ (8009a18 <_vfiprintf_r+0x228>)
 8009a02:	a904      	add	r1, sp, #16
 8009a04:	4630      	mov	r0, r6
 8009a06:	f000 f879 	bl	8009afc <_printf_i>
 8009a0a:	e7e4      	b.n	80099d6 <_vfiprintf_r+0x1e6>
 8009a0c:	0800a170 	.word	0x0800a170
 8009a10:	0800a17a 	.word	0x0800a17a
 8009a14:	00000000 	.word	0x00000000
 8009a18:	080097cb 	.word	0x080097cb
 8009a1c:	0800a176 	.word	0x0800a176

08009a20 <_printf_common>:
 8009a20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009a24:	4616      	mov	r6, r2
 8009a26:	4698      	mov	r8, r3
 8009a28:	688a      	ldr	r2, [r1, #8]
 8009a2a:	690b      	ldr	r3, [r1, #16]
 8009a2c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009a30:	4293      	cmp	r3, r2
 8009a32:	bfb8      	it	lt
 8009a34:	4613      	movlt	r3, r2
 8009a36:	6033      	str	r3, [r6, #0]
 8009a38:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009a3c:	4607      	mov	r7, r0
 8009a3e:	460c      	mov	r4, r1
 8009a40:	b10a      	cbz	r2, 8009a46 <_printf_common+0x26>
 8009a42:	3301      	adds	r3, #1
 8009a44:	6033      	str	r3, [r6, #0]
 8009a46:	6823      	ldr	r3, [r4, #0]
 8009a48:	0699      	lsls	r1, r3, #26
 8009a4a:	bf42      	ittt	mi
 8009a4c:	6833      	ldrmi	r3, [r6, #0]
 8009a4e:	3302      	addmi	r3, #2
 8009a50:	6033      	strmi	r3, [r6, #0]
 8009a52:	6825      	ldr	r5, [r4, #0]
 8009a54:	f015 0506 	ands.w	r5, r5, #6
 8009a58:	d106      	bne.n	8009a68 <_printf_common+0x48>
 8009a5a:	f104 0a19 	add.w	sl, r4, #25
 8009a5e:	68e3      	ldr	r3, [r4, #12]
 8009a60:	6832      	ldr	r2, [r6, #0]
 8009a62:	1a9b      	subs	r3, r3, r2
 8009a64:	42ab      	cmp	r3, r5
 8009a66:	dc26      	bgt.n	8009ab6 <_printf_common+0x96>
 8009a68:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009a6c:	6822      	ldr	r2, [r4, #0]
 8009a6e:	3b00      	subs	r3, #0
 8009a70:	bf18      	it	ne
 8009a72:	2301      	movne	r3, #1
 8009a74:	0692      	lsls	r2, r2, #26
 8009a76:	d42b      	bmi.n	8009ad0 <_printf_common+0xb0>
 8009a78:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009a7c:	4641      	mov	r1, r8
 8009a7e:	4638      	mov	r0, r7
 8009a80:	47c8      	blx	r9
 8009a82:	3001      	adds	r0, #1
 8009a84:	d01e      	beq.n	8009ac4 <_printf_common+0xa4>
 8009a86:	6823      	ldr	r3, [r4, #0]
 8009a88:	6922      	ldr	r2, [r4, #16]
 8009a8a:	f003 0306 	and.w	r3, r3, #6
 8009a8e:	2b04      	cmp	r3, #4
 8009a90:	bf02      	ittt	eq
 8009a92:	68e5      	ldreq	r5, [r4, #12]
 8009a94:	6833      	ldreq	r3, [r6, #0]
 8009a96:	1aed      	subeq	r5, r5, r3
 8009a98:	68a3      	ldr	r3, [r4, #8]
 8009a9a:	bf0c      	ite	eq
 8009a9c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009aa0:	2500      	movne	r5, #0
 8009aa2:	4293      	cmp	r3, r2
 8009aa4:	bfc4      	itt	gt
 8009aa6:	1a9b      	subgt	r3, r3, r2
 8009aa8:	18ed      	addgt	r5, r5, r3
 8009aaa:	2600      	movs	r6, #0
 8009aac:	341a      	adds	r4, #26
 8009aae:	42b5      	cmp	r5, r6
 8009ab0:	d11a      	bne.n	8009ae8 <_printf_common+0xc8>
 8009ab2:	2000      	movs	r0, #0
 8009ab4:	e008      	b.n	8009ac8 <_printf_common+0xa8>
 8009ab6:	2301      	movs	r3, #1
 8009ab8:	4652      	mov	r2, sl
 8009aba:	4641      	mov	r1, r8
 8009abc:	4638      	mov	r0, r7
 8009abe:	47c8      	blx	r9
 8009ac0:	3001      	adds	r0, #1
 8009ac2:	d103      	bne.n	8009acc <_printf_common+0xac>
 8009ac4:	f04f 30ff 	mov.w	r0, #4294967295
 8009ac8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009acc:	3501      	adds	r5, #1
 8009ace:	e7c6      	b.n	8009a5e <_printf_common+0x3e>
 8009ad0:	18e1      	adds	r1, r4, r3
 8009ad2:	1c5a      	adds	r2, r3, #1
 8009ad4:	2030      	movs	r0, #48	@ 0x30
 8009ad6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009ada:	4422      	add	r2, r4
 8009adc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009ae0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009ae4:	3302      	adds	r3, #2
 8009ae6:	e7c7      	b.n	8009a78 <_printf_common+0x58>
 8009ae8:	2301      	movs	r3, #1
 8009aea:	4622      	mov	r2, r4
 8009aec:	4641      	mov	r1, r8
 8009aee:	4638      	mov	r0, r7
 8009af0:	47c8      	blx	r9
 8009af2:	3001      	adds	r0, #1
 8009af4:	d0e6      	beq.n	8009ac4 <_printf_common+0xa4>
 8009af6:	3601      	adds	r6, #1
 8009af8:	e7d9      	b.n	8009aae <_printf_common+0x8e>
	...

08009afc <_printf_i>:
 8009afc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009b00:	7e0f      	ldrb	r7, [r1, #24]
 8009b02:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009b04:	2f78      	cmp	r7, #120	@ 0x78
 8009b06:	4691      	mov	r9, r2
 8009b08:	4680      	mov	r8, r0
 8009b0a:	460c      	mov	r4, r1
 8009b0c:	469a      	mov	sl, r3
 8009b0e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8009b12:	d807      	bhi.n	8009b24 <_printf_i+0x28>
 8009b14:	2f62      	cmp	r7, #98	@ 0x62
 8009b16:	d80a      	bhi.n	8009b2e <_printf_i+0x32>
 8009b18:	2f00      	cmp	r7, #0
 8009b1a:	f000 80d1 	beq.w	8009cc0 <_printf_i+0x1c4>
 8009b1e:	2f58      	cmp	r7, #88	@ 0x58
 8009b20:	f000 80b8 	beq.w	8009c94 <_printf_i+0x198>
 8009b24:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009b28:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009b2c:	e03a      	b.n	8009ba4 <_printf_i+0xa8>
 8009b2e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8009b32:	2b15      	cmp	r3, #21
 8009b34:	d8f6      	bhi.n	8009b24 <_printf_i+0x28>
 8009b36:	a101      	add	r1, pc, #4	@ (adr r1, 8009b3c <_printf_i+0x40>)
 8009b38:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009b3c:	08009b95 	.word	0x08009b95
 8009b40:	08009ba9 	.word	0x08009ba9
 8009b44:	08009b25 	.word	0x08009b25
 8009b48:	08009b25 	.word	0x08009b25
 8009b4c:	08009b25 	.word	0x08009b25
 8009b50:	08009b25 	.word	0x08009b25
 8009b54:	08009ba9 	.word	0x08009ba9
 8009b58:	08009b25 	.word	0x08009b25
 8009b5c:	08009b25 	.word	0x08009b25
 8009b60:	08009b25 	.word	0x08009b25
 8009b64:	08009b25 	.word	0x08009b25
 8009b68:	08009ca7 	.word	0x08009ca7
 8009b6c:	08009bd3 	.word	0x08009bd3
 8009b70:	08009c61 	.word	0x08009c61
 8009b74:	08009b25 	.word	0x08009b25
 8009b78:	08009b25 	.word	0x08009b25
 8009b7c:	08009cc9 	.word	0x08009cc9
 8009b80:	08009b25 	.word	0x08009b25
 8009b84:	08009bd3 	.word	0x08009bd3
 8009b88:	08009b25 	.word	0x08009b25
 8009b8c:	08009b25 	.word	0x08009b25
 8009b90:	08009c69 	.word	0x08009c69
 8009b94:	6833      	ldr	r3, [r6, #0]
 8009b96:	1d1a      	adds	r2, r3, #4
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	6032      	str	r2, [r6, #0]
 8009b9c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009ba0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009ba4:	2301      	movs	r3, #1
 8009ba6:	e09c      	b.n	8009ce2 <_printf_i+0x1e6>
 8009ba8:	6833      	ldr	r3, [r6, #0]
 8009baa:	6820      	ldr	r0, [r4, #0]
 8009bac:	1d19      	adds	r1, r3, #4
 8009bae:	6031      	str	r1, [r6, #0]
 8009bb0:	0606      	lsls	r6, r0, #24
 8009bb2:	d501      	bpl.n	8009bb8 <_printf_i+0xbc>
 8009bb4:	681d      	ldr	r5, [r3, #0]
 8009bb6:	e003      	b.n	8009bc0 <_printf_i+0xc4>
 8009bb8:	0645      	lsls	r5, r0, #25
 8009bba:	d5fb      	bpl.n	8009bb4 <_printf_i+0xb8>
 8009bbc:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009bc0:	2d00      	cmp	r5, #0
 8009bc2:	da03      	bge.n	8009bcc <_printf_i+0xd0>
 8009bc4:	232d      	movs	r3, #45	@ 0x2d
 8009bc6:	426d      	negs	r5, r5
 8009bc8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009bcc:	4858      	ldr	r0, [pc, #352]	@ (8009d30 <_printf_i+0x234>)
 8009bce:	230a      	movs	r3, #10
 8009bd0:	e011      	b.n	8009bf6 <_printf_i+0xfa>
 8009bd2:	6821      	ldr	r1, [r4, #0]
 8009bd4:	6833      	ldr	r3, [r6, #0]
 8009bd6:	0608      	lsls	r0, r1, #24
 8009bd8:	f853 5b04 	ldr.w	r5, [r3], #4
 8009bdc:	d402      	bmi.n	8009be4 <_printf_i+0xe8>
 8009bde:	0649      	lsls	r1, r1, #25
 8009be0:	bf48      	it	mi
 8009be2:	b2ad      	uxthmi	r5, r5
 8009be4:	2f6f      	cmp	r7, #111	@ 0x6f
 8009be6:	4852      	ldr	r0, [pc, #328]	@ (8009d30 <_printf_i+0x234>)
 8009be8:	6033      	str	r3, [r6, #0]
 8009bea:	bf14      	ite	ne
 8009bec:	230a      	movne	r3, #10
 8009bee:	2308      	moveq	r3, #8
 8009bf0:	2100      	movs	r1, #0
 8009bf2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009bf6:	6866      	ldr	r6, [r4, #4]
 8009bf8:	60a6      	str	r6, [r4, #8]
 8009bfa:	2e00      	cmp	r6, #0
 8009bfc:	db05      	blt.n	8009c0a <_printf_i+0x10e>
 8009bfe:	6821      	ldr	r1, [r4, #0]
 8009c00:	432e      	orrs	r6, r5
 8009c02:	f021 0104 	bic.w	r1, r1, #4
 8009c06:	6021      	str	r1, [r4, #0]
 8009c08:	d04b      	beq.n	8009ca2 <_printf_i+0x1a6>
 8009c0a:	4616      	mov	r6, r2
 8009c0c:	fbb5 f1f3 	udiv	r1, r5, r3
 8009c10:	fb03 5711 	mls	r7, r3, r1, r5
 8009c14:	5dc7      	ldrb	r7, [r0, r7]
 8009c16:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009c1a:	462f      	mov	r7, r5
 8009c1c:	42bb      	cmp	r3, r7
 8009c1e:	460d      	mov	r5, r1
 8009c20:	d9f4      	bls.n	8009c0c <_printf_i+0x110>
 8009c22:	2b08      	cmp	r3, #8
 8009c24:	d10b      	bne.n	8009c3e <_printf_i+0x142>
 8009c26:	6823      	ldr	r3, [r4, #0]
 8009c28:	07df      	lsls	r7, r3, #31
 8009c2a:	d508      	bpl.n	8009c3e <_printf_i+0x142>
 8009c2c:	6923      	ldr	r3, [r4, #16]
 8009c2e:	6861      	ldr	r1, [r4, #4]
 8009c30:	4299      	cmp	r1, r3
 8009c32:	bfde      	ittt	le
 8009c34:	2330      	movle	r3, #48	@ 0x30
 8009c36:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009c3a:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009c3e:	1b92      	subs	r2, r2, r6
 8009c40:	6122      	str	r2, [r4, #16]
 8009c42:	f8cd a000 	str.w	sl, [sp]
 8009c46:	464b      	mov	r3, r9
 8009c48:	aa03      	add	r2, sp, #12
 8009c4a:	4621      	mov	r1, r4
 8009c4c:	4640      	mov	r0, r8
 8009c4e:	f7ff fee7 	bl	8009a20 <_printf_common>
 8009c52:	3001      	adds	r0, #1
 8009c54:	d14a      	bne.n	8009cec <_printf_i+0x1f0>
 8009c56:	f04f 30ff 	mov.w	r0, #4294967295
 8009c5a:	b004      	add	sp, #16
 8009c5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c60:	6823      	ldr	r3, [r4, #0]
 8009c62:	f043 0320 	orr.w	r3, r3, #32
 8009c66:	6023      	str	r3, [r4, #0]
 8009c68:	4832      	ldr	r0, [pc, #200]	@ (8009d34 <_printf_i+0x238>)
 8009c6a:	2778      	movs	r7, #120	@ 0x78
 8009c6c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009c70:	6823      	ldr	r3, [r4, #0]
 8009c72:	6831      	ldr	r1, [r6, #0]
 8009c74:	061f      	lsls	r7, r3, #24
 8009c76:	f851 5b04 	ldr.w	r5, [r1], #4
 8009c7a:	d402      	bmi.n	8009c82 <_printf_i+0x186>
 8009c7c:	065f      	lsls	r7, r3, #25
 8009c7e:	bf48      	it	mi
 8009c80:	b2ad      	uxthmi	r5, r5
 8009c82:	6031      	str	r1, [r6, #0]
 8009c84:	07d9      	lsls	r1, r3, #31
 8009c86:	bf44      	itt	mi
 8009c88:	f043 0320 	orrmi.w	r3, r3, #32
 8009c8c:	6023      	strmi	r3, [r4, #0]
 8009c8e:	b11d      	cbz	r5, 8009c98 <_printf_i+0x19c>
 8009c90:	2310      	movs	r3, #16
 8009c92:	e7ad      	b.n	8009bf0 <_printf_i+0xf4>
 8009c94:	4826      	ldr	r0, [pc, #152]	@ (8009d30 <_printf_i+0x234>)
 8009c96:	e7e9      	b.n	8009c6c <_printf_i+0x170>
 8009c98:	6823      	ldr	r3, [r4, #0]
 8009c9a:	f023 0320 	bic.w	r3, r3, #32
 8009c9e:	6023      	str	r3, [r4, #0]
 8009ca0:	e7f6      	b.n	8009c90 <_printf_i+0x194>
 8009ca2:	4616      	mov	r6, r2
 8009ca4:	e7bd      	b.n	8009c22 <_printf_i+0x126>
 8009ca6:	6833      	ldr	r3, [r6, #0]
 8009ca8:	6825      	ldr	r5, [r4, #0]
 8009caa:	6961      	ldr	r1, [r4, #20]
 8009cac:	1d18      	adds	r0, r3, #4
 8009cae:	6030      	str	r0, [r6, #0]
 8009cb0:	062e      	lsls	r6, r5, #24
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	d501      	bpl.n	8009cba <_printf_i+0x1be>
 8009cb6:	6019      	str	r1, [r3, #0]
 8009cb8:	e002      	b.n	8009cc0 <_printf_i+0x1c4>
 8009cba:	0668      	lsls	r0, r5, #25
 8009cbc:	d5fb      	bpl.n	8009cb6 <_printf_i+0x1ba>
 8009cbe:	8019      	strh	r1, [r3, #0]
 8009cc0:	2300      	movs	r3, #0
 8009cc2:	6123      	str	r3, [r4, #16]
 8009cc4:	4616      	mov	r6, r2
 8009cc6:	e7bc      	b.n	8009c42 <_printf_i+0x146>
 8009cc8:	6833      	ldr	r3, [r6, #0]
 8009cca:	1d1a      	adds	r2, r3, #4
 8009ccc:	6032      	str	r2, [r6, #0]
 8009cce:	681e      	ldr	r6, [r3, #0]
 8009cd0:	6862      	ldr	r2, [r4, #4]
 8009cd2:	2100      	movs	r1, #0
 8009cd4:	4630      	mov	r0, r6
 8009cd6:	f7f6 fb0b 	bl	80002f0 <memchr>
 8009cda:	b108      	cbz	r0, 8009ce0 <_printf_i+0x1e4>
 8009cdc:	1b80      	subs	r0, r0, r6
 8009cde:	6060      	str	r0, [r4, #4]
 8009ce0:	6863      	ldr	r3, [r4, #4]
 8009ce2:	6123      	str	r3, [r4, #16]
 8009ce4:	2300      	movs	r3, #0
 8009ce6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009cea:	e7aa      	b.n	8009c42 <_printf_i+0x146>
 8009cec:	6923      	ldr	r3, [r4, #16]
 8009cee:	4632      	mov	r2, r6
 8009cf0:	4649      	mov	r1, r9
 8009cf2:	4640      	mov	r0, r8
 8009cf4:	47d0      	blx	sl
 8009cf6:	3001      	adds	r0, #1
 8009cf8:	d0ad      	beq.n	8009c56 <_printf_i+0x15a>
 8009cfa:	6823      	ldr	r3, [r4, #0]
 8009cfc:	079b      	lsls	r3, r3, #30
 8009cfe:	d413      	bmi.n	8009d28 <_printf_i+0x22c>
 8009d00:	68e0      	ldr	r0, [r4, #12]
 8009d02:	9b03      	ldr	r3, [sp, #12]
 8009d04:	4298      	cmp	r0, r3
 8009d06:	bfb8      	it	lt
 8009d08:	4618      	movlt	r0, r3
 8009d0a:	e7a6      	b.n	8009c5a <_printf_i+0x15e>
 8009d0c:	2301      	movs	r3, #1
 8009d0e:	4632      	mov	r2, r6
 8009d10:	4649      	mov	r1, r9
 8009d12:	4640      	mov	r0, r8
 8009d14:	47d0      	blx	sl
 8009d16:	3001      	adds	r0, #1
 8009d18:	d09d      	beq.n	8009c56 <_printf_i+0x15a>
 8009d1a:	3501      	adds	r5, #1
 8009d1c:	68e3      	ldr	r3, [r4, #12]
 8009d1e:	9903      	ldr	r1, [sp, #12]
 8009d20:	1a5b      	subs	r3, r3, r1
 8009d22:	42ab      	cmp	r3, r5
 8009d24:	dcf2      	bgt.n	8009d0c <_printf_i+0x210>
 8009d26:	e7eb      	b.n	8009d00 <_printf_i+0x204>
 8009d28:	2500      	movs	r5, #0
 8009d2a:	f104 0619 	add.w	r6, r4, #25
 8009d2e:	e7f5      	b.n	8009d1c <_printf_i+0x220>
 8009d30:	0800a181 	.word	0x0800a181
 8009d34:	0800a192 	.word	0x0800a192

08009d38 <__sflush_r>:
 8009d38:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009d3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009d40:	0716      	lsls	r6, r2, #28
 8009d42:	4605      	mov	r5, r0
 8009d44:	460c      	mov	r4, r1
 8009d46:	d454      	bmi.n	8009df2 <__sflush_r+0xba>
 8009d48:	684b      	ldr	r3, [r1, #4]
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	dc02      	bgt.n	8009d54 <__sflush_r+0x1c>
 8009d4e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	dd48      	ble.n	8009de6 <__sflush_r+0xae>
 8009d54:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009d56:	2e00      	cmp	r6, #0
 8009d58:	d045      	beq.n	8009de6 <__sflush_r+0xae>
 8009d5a:	2300      	movs	r3, #0
 8009d5c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009d60:	682f      	ldr	r7, [r5, #0]
 8009d62:	6a21      	ldr	r1, [r4, #32]
 8009d64:	602b      	str	r3, [r5, #0]
 8009d66:	d030      	beq.n	8009dca <__sflush_r+0x92>
 8009d68:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8009d6a:	89a3      	ldrh	r3, [r4, #12]
 8009d6c:	0759      	lsls	r1, r3, #29
 8009d6e:	d505      	bpl.n	8009d7c <__sflush_r+0x44>
 8009d70:	6863      	ldr	r3, [r4, #4]
 8009d72:	1ad2      	subs	r2, r2, r3
 8009d74:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009d76:	b10b      	cbz	r3, 8009d7c <__sflush_r+0x44>
 8009d78:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009d7a:	1ad2      	subs	r2, r2, r3
 8009d7c:	2300      	movs	r3, #0
 8009d7e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009d80:	6a21      	ldr	r1, [r4, #32]
 8009d82:	4628      	mov	r0, r5
 8009d84:	47b0      	blx	r6
 8009d86:	1c43      	adds	r3, r0, #1
 8009d88:	89a3      	ldrh	r3, [r4, #12]
 8009d8a:	d106      	bne.n	8009d9a <__sflush_r+0x62>
 8009d8c:	6829      	ldr	r1, [r5, #0]
 8009d8e:	291d      	cmp	r1, #29
 8009d90:	d82b      	bhi.n	8009dea <__sflush_r+0xb2>
 8009d92:	4a2a      	ldr	r2, [pc, #168]	@ (8009e3c <__sflush_r+0x104>)
 8009d94:	40ca      	lsrs	r2, r1
 8009d96:	07d6      	lsls	r6, r2, #31
 8009d98:	d527      	bpl.n	8009dea <__sflush_r+0xb2>
 8009d9a:	2200      	movs	r2, #0
 8009d9c:	6062      	str	r2, [r4, #4]
 8009d9e:	04d9      	lsls	r1, r3, #19
 8009da0:	6922      	ldr	r2, [r4, #16]
 8009da2:	6022      	str	r2, [r4, #0]
 8009da4:	d504      	bpl.n	8009db0 <__sflush_r+0x78>
 8009da6:	1c42      	adds	r2, r0, #1
 8009da8:	d101      	bne.n	8009dae <__sflush_r+0x76>
 8009daa:	682b      	ldr	r3, [r5, #0]
 8009dac:	b903      	cbnz	r3, 8009db0 <__sflush_r+0x78>
 8009dae:	6560      	str	r0, [r4, #84]	@ 0x54
 8009db0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009db2:	602f      	str	r7, [r5, #0]
 8009db4:	b1b9      	cbz	r1, 8009de6 <__sflush_r+0xae>
 8009db6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009dba:	4299      	cmp	r1, r3
 8009dbc:	d002      	beq.n	8009dc4 <__sflush_r+0x8c>
 8009dbe:	4628      	mov	r0, r5
 8009dc0:	f7ff fbf4 	bl	80095ac <_free_r>
 8009dc4:	2300      	movs	r3, #0
 8009dc6:	6363      	str	r3, [r4, #52]	@ 0x34
 8009dc8:	e00d      	b.n	8009de6 <__sflush_r+0xae>
 8009dca:	2301      	movs	r3, #1
 8009dcc:	4628      	mov	r0, r5
 8009dce:	47b0      	blx	r6
 8009dd0:	4602      	mov	r2, r0
 8009dd2:	1c50      	adds	r0, r2, #1
 8009dd4:	d1c9      	bne.n	8009d6a <__sflush_r+0x32>
 8009dd6:	682b      	ldr	r3, [r5, #0]
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	d0c6      	beq.n	8009d6a <__sflush_r+0x32>
 8009ddc:	2b1d      	cmp	r3, #29
 8009dde:	d001      	beq.n	8009de4 <__sflush_r+0xac>
 8009de0:	2b16      	cmp	r3, #22
 8009de2:	d11e      	bne.n	8009e22 <__sflush_r+0xea>
 8009de4:	602f      	str	r7, [r5, #0]
 8009de6:	2000      	movs	r0, #0
 8009de8:	e022      	b.n	8009e30 <__sflush_r+0xf8>
 8009dea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009dee:	b21b      	sxth	r3, r3
 8009df0:	e01b      	b.n	8009e2a <__sflush_r+0xf2>
 8009df2:	690f      	ldr	r7, [r1, #16]
 8009df4:	2f00      	cmp	r7, #0
 8009df6:	d0f6      	beq.n	8009de6 <__sflush_r+0xae>
 8009df8:	0793      	lsls	r3, r2, #30
 8009dfa:	680e      	ldr	r6, [r1, #0]
 8009dfc:	bf08      	it	eq
 8009dfe:	694b      	ldreq	r3, [r1, #20]
 8009e00:	600f      	str	r7, [r1, #0]
 8009e02:	bf18      	it	ne
 8009e04:	2300      	movne	r3, #0
 8009e06:	eba6 0807 	sub.w	r8, r6, r7
 8009e0a:	608b      	str	r3, [r1, #8]
 8009e0c:	f1b8 0f00 	cmp.w	r8, #0
 8009e10:	dde9      	ble.n	8009de6 <__sflush_r+0xae>
 8009e12:	6a21      	ldr	r1, [r4, #32]
 8009e14:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8009e16:	4643      	mov	r3, r8
 8009e18:	463a      	mov	r2, r7
 8009e1a:	4628      	mov	r0, r5
 8009e1c:	47b0      	blx	r6
 8009e1e:	2800      	cmp	r0, #0
 8009e20:	dc08      	bgt.n	8009e34 <__sflush_r+0xfc>
 8009e22:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009e26:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009e2a:	81a3      	strh	r3, [r4, #12]
 8009e2c:	f04f 30ff 	mov.w	r0, #4294967295
 8009e30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009e34:	4407      	add	r7, r0
 8009e36:	eba8 0800 	sub.w	r8, r8, r0
 8009e3a:	e7e7      	b.n	8009e0c <__sflush_r+0xd4>
 8009e3c:	20400001 	.word	0x20400001

08009e40 <_fflush_r>:
 8009e40:	b538      	push	{r3, r4, r5, lr}
 8009e42:	690b      	ldr	r3, [r1, #16]
 8009e44:	4605      	mov	r5, r0
 8009e46:	460c      	mov	r4, r1
 8009e48:	b913      	cbnz	r3, 8009e50 <_fflush_r+0x10>
 8009e4a:	2500      	movs	r5, #0
 8009e4c:	4628      	mov	r0, r5
 8009e4e:	bd38      	pop	{r3, r4, r5, pc}
 8009e50:	b118      	cbz	r0, 8009e5a <_fflush_r+0x1a>
 8009e52:	6a03      	ldr	r3, [r0, #32]
 8009e54:	b90b      	cbnz	r3, 8009e5a <_fflush_r+0x1a>
 8009e56:	f7ff faa1 	bl	800939c <__sinit>
 8009e5a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	d0f3      	beq.n	8009e4a <_fflush_r+0xa>
 8009e62:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009e64:	07d0      	lsls	r0, r2, #31
 8009e66:	d404      	bmi.n	8009e72 <_fflush_r+0x32>
 8009e68:	0599      	lsls	r1, r3, #22
 8009e6a:	d402      	bmi.n	8009e72 <_fflush_r+0x32>
 8009e6c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009e6e:	f7ff fb9a 	bl	80095a6 <__retarget_lock_acquire_recursive>
 8009e72:	4628      	mov	r0, r5
 8009e74:	4621      	mov	r1, r4
 8009e76:	f7ff ff5f 	bl	8009d38 <__sflush_r>
 8009e7a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009e7c:	07da      	lsls	r2, r3, #31
 8009e7e:	4605      	mov	r5, r0
 8009e80:	d4e4      	bmi.n	8009e4c <_fflush_r+0xc>
 8009e82:	89a3      	ldrh	r3, [r4, #12]
 8009e84:	059b      	lsls	r3, r3, #22
 8009e86:	d4e1      	bmi.n	8009e4c <_fflush_r+0xc>
 8009e88:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009e8a:	f7ff fb8d 	bl	80095a8 <__retarget_lock_release_recursive>
 8009e8e:	e7dd      	b.n	8009e4c <_fflush_r+0xc>

08009e90 <__swbuf_r>:
 8009e90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e92:	460e      	mov	r6, r1
 8009e94:	4614      	mov	r4, r2
 8009e96:	4605      	mov	r5, r0
 8009e98:	b118      	cbz	r0, 8009ea2 <__swbuf_r+0x12>
 8009e9a:	6a03      	ldr	r3, [r0, #32]
 8009e9c:	b90b      	cbnz	r3, 8009ea2 <__swbuf_r+0x12>
 8009e9e:	f7ff fa7d 	bl	800939c <__sinit>
 8009ea2:	69a3      	ldr	r3, [r4, #24]
 8009ea4:	60a3      	str	r3, [r4, #8]
 8009ea6:	89a3      	ldrh	r3, [r4, #12]
 8009ea8:	071a      	lsls	r2, r3, #28
 8009eaa:	d501      	bpl.n	8009eb0 <__swbuf_r+0x20>
 8009eac:	6923      	ldr	r3, [r4, #16]
 8009eae:	b943      	cbnz	r3, 8009ec2 <__swbuf_r+0x32>
 8009eb0:	4621      	mov	r1, r4
 8009eb2:	4628      	mov	r0, r5
 8009eb4:	f000 f82a 	bl	8009f0c <__swsetup_r>
 8009eb8:	b118      	cbz	r0, 8009ec2 <__swbuf_r+0x32>
 8009eba:	f04f 37ff 	mov.w	r7, #4294967295
 8009ebe:	4638      	mov	r0, r7
 8009ec0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009ec2:	6823      	ldr	r3, [r4, #0]
 8009ec4:	6922      	ldr	r2, [r4, #16]
 8009ec6:	1a98      	subs	r0, r3, r2
 8009ec8:	6963      	ldr	r3, [r4, #20]
 8009eca:	b2f6      	uxtb	r6, r6
 8009ecc:	4283      	cmp	r3, r0
 8009ece:	4637      	mov	r7, r6
 8009ed0:	dc05      	bgt.n	8009ede <__swbuf_r+0x4e>
 8009ed2:	4621      	mov	r1, r4
 8009ed4:	4628      	mov	r0, r5
 8009ed6:	f7ff ffb3 	bl	8009e40 <_fflush_r>
 8009eda:	2800      	cmp	r0, #0
 8009edc:	d1ed      	bne.n	8009eba <__swbuf_r+0x2a>
 8009ede:	68a3      	ldr	r3, [r4, #8]
 8009ee0:	3b01      	subs	r3, #1
 8009ee2:	60a3      	str	r3, [r4, #8]
 8009ee4:	6823      	ldr	r3, [r4, #0]
 8009ee6:	1c5a      	adds	r2, r3, #1
 8009ee8:	6022      	str	r2, [r4, #0]
 8009eea:	701e      	strb	r6, [r3, #0]
 8009eec:	6962      	ldr	r2, [r4, #20]
 8009eee:	1c43      	adds	r3, r0, #1
 8009ef0:	429a      	cmp	r2, r3
 8009ef2:	d004      	beq.n	8009efe <__swbuf_r+0x6e>
 8009ef4:	89a3      	ldrh	r3, [r4, #12]
 8009ef6:	07db      	lsls	r3, r3, #31
 8009ef8:	d5e1      	bpl.n	8009ebe <__swbuf_r+0x2e>
 8009efa:	2e0a      	cmp	r6, #10
 8009efc:	d1df      	bne.n	8009ebe <__swbuf_r+0x2e>
 8009efe:	4621      	mov	r1, r4
 8009f00:	4628      	mov	r0, r5
 8009f02:	f7ff ff9d 	bl	8009e40 <_fflush_r>
 8009f06:	2800      	cmp	r0, #0
 8009f08:	d0d9      	beq.n	8009ebe <__swbuf_r+0x2e>
 8009f0a:	e7d6      	b.n	8009eba <__swbuf_r+0x2a>

08009f0c <__swsetup_r>:
 8009f0c:	b538      	push	{r3, r4, r5, lr}
 8009f0e:	4b29      	ldr	r3, [pc, #164]	@ (8009fb4 <__swsetup_r+0xa8>)
 8009f10:	4605      	mov	r5, r0
 8009f12:	6818      	ldr	r0, [r3, #0]
 8009f14:	460c      	mov	r4, r1
 8009f16:	b118      	cbz	r0, 8009f20 <__swsetup_r+0x14>
 8009f18:	6a03      	ldr	r3, [r0, #32]
 8009f1a:	b90b      	cbnz	r3, 8009f20 <__swsetup_r+0x14>
 8009f1c:	f7ff fa3e 	bl	800939c <__sinit>
 8009f20:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009f24:	0719      	lsls	r1, r3, #28
 8009f26:	d422      	bmi.n	8009f6e <__swsetup_r+0x62>
 8009f28:	06da      	lsls	r2, r3, #27
 8009f2a:	d407      	bmi.n	8009f3c <__swsetup_r+0x30>
 8009f2c:	2209      	movs	r2, #9
 8009f2e:	602a      	str	r2, [r5, #0]
 8009f30:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009f34:	81a3      	strh	r3, [r4, #12]
 8009f36:	f04f 30ff 	mov.w	r0, #4294967295
 8009f3a:	e033      	b.n	8009fa4 <__swsetup_r+0x98>
 8009f3c:	0758      	lsls	r0, r3, #29
 8009f3e:	d512      	bpl.n	8009f66 <__swsetup_r+0x5a>
 8009f40:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009f42:	b141      	cbz	r1, 8009f56 <__swsetup_r+0x4a>
 8009f44:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009f48:	4299      	cmp	r1, r3
 8009f4a:	d002      	beq.n	8009f52 <__swsetup_r+0x46>
 8009f4c:	4628      	mov	r0, r5
 8009f4e:	f7ff fb2d 	bl	80095ac <_free_r>
 8009f52:	2300      	movs	r3, #0
 8009f54:	6363      	str	r3, [r4, #52]	@ 0x34
 8009f56:	89a3      	ldrh	r3, [r4, #12]
 8009f58:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009f5c:	81a3      	strh	r3, [r4, #12]
 8009f5e:	2300      	movs	r3, #0
 8009f60:	6063      	str	r3, [r4, #4]
 8009f62:	6923      	ldr	r3, [r4, #16]
 8009f64:	6023      	str	r3, [r4, #0]
 8009f66:	89a3      	ldrh	r3, [r4, #12]
 8009f68:	f043 0308 	orr.w	r3, r3, #8
 8009f6c:	81a3      	strh	r3, [r4, #12]
 8009f6e:	6923      	ldr	r3, [r4, #16]
 8009f70:	b94b      	cbnz	r3, 8009f86 <__swsetup_r+0x7a>
 8009f72:	89a3      	ldrh	r3, [r4, #12]
 8009f74:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009f78:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009f7c:	d003      	beq.n	8009f86 <__swsetup_r+0x7a>
 8009f7e:	4621      	mov	r1, r4
 8009f80:	4628      	mov	r0, r5
 8009f82:	f000 f84f 	bl	800a024 <__smakebuf_r>
 8009f86:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009f8a:	f013 0201 	ands.w	r2, r3, #1
 8009f8e:	d00a      	beq.n	8009fa6 <__swsetup_r+0x9a>
 8009f90:	2200      	movs	r2, #0
 8009f92:	60a2      	str	r2, [r4, #8]
 8009f94:	6962      	ldr	r2, [r4, #20]
 8009f96:	4252      	negs	r2, r2
 8009f98:	61a2      	str	r2, [r4, #24]
 8009f9a:	6922      	ldr	r2, [r4, #16]
 8009f9c:	b942      	cbnz	r2, 8009fb0 <__swsetup_r+0xa4>
 8009f9e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009fa2:	d1c5      	bne.n	8009f30 <__swsetup_r+0x24>
 8009fa4:	bd38      	pop	{r3, r4, r5, pc}
 8009fa6:	0799      	lsls	r1, r3, #30
 8009fa8:	bf58      	it	pl
 8009faa:	6962      	ldrpl	r2, [r4, #20]
 8009fac:	60a2      	str	r2, [r4, #8]
 8009fae:	e7f4      	b.n	8009f9a <__swsetup_r+0x8e>
 8009fb0:	2000      	movs	r0, #0
 8009fb2:	e7f7      	b.n	8009fa4 <__swsetup_r+0x98>
 8009fb4:	2400001c 	.word	0x2400001c

08009fb8 <_sbrk_r>:
 8009fb8:	b538      	push	{r3, r4, r5, lr}
 8009fba:	4d06      	ldr	r5, [pc, #24]	@ (8009fd4 <_sbrk_r+0x1c>)
 8009fbc:	2300      	movs	r3, #0
 8009fbe:	4604      	mov	r4, r0
 8009fc0:	4608      	mov	r0, r1
 8009fc2:	602b      	str	r3, [r5, #0]
 8009fc4:	f7f6 ff84 	bl	8000ed0 <_sbrk>
 8009fc8:	1c43      	adds	r3, r0, #1
 8009fca:	d102      	bne.n	8009fd2 <_sbrk_r+0x1a>
 8009fcc:	682b      	ldr	r3, [r5, #0]
 8009fce:	b103      	cbz	r3, 8009fd2 <_sbrk_r+0x1a>
 8009fd0:	6023      	str	r3, [r4, #0]
 8009fd2:	bd38      	pop	{r3, r4, r5, pc}
 8009fd4:	24000440 	.word	0x24000440

08009fd8 <__swhatbuf_r>:
 8009fd8:	b570      	push	{r4, r5, r6, lr}
 8009fda:	460c      	mov	r4, r1
 8009fdc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009fe0:	2900      	cmp	r1, #0
 8009fe2:	b096      	sub	sp, #88	@ 0x58
 8009fe4:	4615      	mov	r5, r2
 8009fe6:	461e      	mov	r6, r3
 8009fe8:	da0d      	bge.n	800a006 <__swhatbuf_r+0x2e>
 8009fea:	89a3      	ldrh	r3, [r4, #12]
 8009fec:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009ff0:	f04f 0100 	mov.w	r1, #0
 8009ff4:	bf14      	ite	ne
 8009ff6:	2340      	movne	r3, #64	@ 0x40
 8009ff8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009ffc:	2000      	movs	r0, #0
 8009ffe:	6031      	str	r1, [r6, #0]
 800a000:	602b      	str	r3, [r5, #0]
 800a002:	b016      	add	sp, #88	@ 0x58
 800a004:	bd70      	pop	{r4, r5, r6, pc}
 800a006:	466a      	mov	r2, sp
 800a008:	f000 f848 	bl	800a09c <_fstat_r>
 800a00c:	2800      	cmp	r0, #0
 800a00e:	dbec      	blt.n	8009fea <__swhatbuf_r+0x12>
 800a010:	9901      	ldr	r1, [sp, #4]
 800a012:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800a016:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800a01a:	4259      	negs	r1, r3
 800a01c:	4159      	adcs	r1, r3
 800a01e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a022:	e7eb      	b.n	8009ffc <__swhatbuf_r+0x24>

0800a024 <__smakebuf_r>:
 800a024:	898b      	ldrh	r3, [r1, #12]
 800a026:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a028:	079d      	lsls	r5, r3, #30
 800a02a:	4606      	mov	r6, r0
 800a02c:	460c      	mov	r4, r1
 800a02e:	d507      	bpl.n	800a040 <__smakebuf_r+0x1c>
 800a030:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800a034:	6023      	str	r3, [r4, #0]
 800a036:	6123      	str	r3, [r4, #16]
 800a038:	2301      	movs	r3, #1
 800a03a:	6163      	str	r3, [r4, #20]
 800a03c:	b003      	add	sp, #12
 800a03e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a040:	ab01      	add	r3, sp, #4
 800a042:	466a      	mov	r2, sp
 800a044:	f7ff ffc8 	bl	8009fd8 <__swhatbuf_r>
 800a048:	9f00      	ldr	r7, [sp, #0]
 800a04a:	4605      	mov	r5, r0
 800a04c:	4639      	mov	r1, r7
 800a04e:	4630      	mov	r0, r6
 800a050:	f7ff fb18 	bl	8009684 <_malloc_r>
 800a054:	b948      	cbnz	r0, 800a06a <__smakebuf_r+0x46>
 800a056:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a05a:	059a      	lsls	r2, r3, #22
 800a05c:	d4ee      	bmi.n	800a03c <__smakebuf_r+0x18>
 800a05e:	f023 0303 	bic.w	r3, r3, #3
 800a062:	f043 0302 	orr.w	r3, r3, #2
 800a066:	81a3      	strh	r3, [r4, #12]
 800a068:	e7e2      	b.n	800a030 <__smakebuf_r+0xc>
 800a06a:	89a3      	ldrh	r3, [r4, #12]
 800a06c:	6020      	str	r0, [r4, #0]
 800a06e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a072:	81a3      	strh	r3, [r4, #12]
 800a074:	9b01      	ldr	r3, [sp, #4]
 800a076:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800a07a:	b15b      	cbz	r3, 800a094 <__smakebuf_r+0x70>
 800a07c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a080:	4630      	mov	r0, r6
 800a082:	f000 f81d 	bl	800a0c0 <_isatty_r>
 800a086:	b128      	cbz	r0, 800a094 <__smakebuf_r+0x70>
 800a088:	89a3      	ldrh	r3, [r4, #12]
 800a08a:	f023 0303 	bic.w	r3, r3, #3
 800a08e:	f043 0301 	orr.w	r3, r3, #1
 800a092:	81a3      	strh	r3, [r4, #12]
 800a094:	89a3      	ldrh	r3, [r4, #12]
 800a096:	431d      	orrs	r5, r3
 800a098:	81a5      	strh	r5, [r4, #12]
 800a09a:	e7cf      	b.n	800a03c <__smakebuf_r+0x18>

0800a09c <_fstat_r>:
 800a09c:	b538      	push	{r3, r4, r5, lr}
 800a09e:	4d07      	ldr	r5, [pc, #28]	@ (800a0bc <_fstat_r+0x20>)
 800a0a0:	2300      	movs	r3, #0
 800a0a2:	4604      	mov	r4, r0
 800a0a4:	4608      	mov	r0, r1
 800a0a6:	4611      	mov	r1, r2
 800a0a8:	602b      	str	r3, [r5, #0]
 800a0aa:	f7f6 fee8 	bl	8000e7e <_fstat>
 800a0ae:	1c43      	adds	r3, r0, #1
 800a0b0:	d102      	bne.n	800a0b8 <_fstat_r+0x1c>
 800a0b2:	682b      	ldr	r3, [r5, #0]
 800a0b4:	b103      	cbz	r3, 800a0b8 <_fstat_r+0x1c>
 800a0b6:	6023      	str	r3, [r4, #0]
 800a0b8:	bd38      	pop	{r3, r4, r5, pc}
 800a0ba:	bf00      	nop
 800a0bc:	24000440 	.word	0x24000440

0800a0c0 <_isatty_r>:
 800a0c0:	b538      	push	{r3, r4, r5, lr}
 800a0c2:	4d06      	ldr	r5, [pc, #24]	@ (800a0dc <_isatty_r+0x1c>)
 800a0c4:	2300      	movs	r3, #0
 800a0c6:	4604      	mov	r4, r0
 800a0c8:	4608      	mov	r0, r1
 800a0ca:	602b      	str	r3, [r5, #0]
 800a0cc:	f7f6 fee7 	bl	8000e9e <_isatty>
 800a0d0:	1c43      	adds	r3, r0, #1
 800a0d2:	d102      	bne.n	800a0da <_isatty_r+0x1a>
 800a0d4:	682b      	ldr	r3, [r5, #0]
 800a0d6:	b103      	cbz	r3, 800a0da <_isatty_r+0x1a>
 800a0d8:	6023      	str	r3, [r4, #0]
 800a0da:	bd38      	pop	{r3, r4, r5, pc}
 800a0dc:	24000440 	.word	0x24000440

0800a0e0 <_init>:
 800a0e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a0e2:	bf00      	nop
 800a0e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a0e6:	bc08      	pop	{r3}
 800a0e8:	469e      	mov	lr, r3
 800a0ea:	4770      	bx	lr

0800a0ec <_fini>:
 800a0ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a0ee:	bf00      	nop
 800a0f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a0f2:	bc08      	pop	{r3}
 800a0f4:	469e      	mov	lr, r3
 800a0f6:	4770      	bx	lr
