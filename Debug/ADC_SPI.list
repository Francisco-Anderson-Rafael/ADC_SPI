
ADC_SPI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007fe8  08000298  08000298  00001298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  08008280  08008280  00009280  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080082d0  080082d0  000092d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080082d8  080082d8  000092d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  080082dc  080082dc  000092dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000014  24000000  080082e0  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000001a4  24000014  080082f4  0000a014  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  240001b8  080082f4  0000a1b8  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000a014  2**0
                  CONTENTS, READONLY
 10 .debug_info   000117f5  00000000  00000000  0000a042  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002398  00000000  00000000  0001b837  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000b28  00000000  00000000  0001dbd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 0000088c  00000000  00000000  0001e6f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00036b2b  00000000  00000000  0001ef84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00011ee4  00000000  00000000  00055aaf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001598b8  00000000  00000000  00067993  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001c124b  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00002cc0  00000000  00000000  001c1290  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000063  00000000  00000000  001c3f50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	@ (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	@ (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	@ (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000014 	.word	0x24000014
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08008268 	.word	0x08008268

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	@ (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	@ (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	@ (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000018 	.word	0x24000018
 80002d4:	08008268 	.word	0x08008268

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b988 	b.w	8000600 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	468e      	mov	lr, r1
 8000310:	4604      	mov	r4, r0
 8000312:	4688      	mov	r8, r1
 8000314:	2b00      	cmp	r3, #0
 8000316:	d14a      	bne.n	80003ae <__udivmoddi4+0xa6>
 8000318:	428a      	cmp	r2, r1
 800031a:	4617      	mov	r7, r2
 800031c:	d962      	bls.n	80003e4 <__udivmoddi4+0xdc>
 800031e:	fab2 f682 	clz	r6, r2
 8000322:	b14e      	cbz	r6, 8000338 <__udivmoddi4+0x30>
 8000324:	f1c6 0320 	rsb	r3, r6, #32
 8000328:	fa01 f806 	lsl.w	r8, r1, r6
 800032c:	fa20 f303 	lsr.w	r3, r0, r3
 8000330:	40b7      	lsls	r7, r6
 8000332:	ea43 0808 	orr.w	r8, r3, r8
 8000336:	40b4      	lsls	r4, r6
 8000338:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800033c:	fa1f fc87 	uxth.w	ip, r7
 8000340:	fbb8 f1fe 	udiv	r1, r8, lr
 8000344:	0c23      	lsrs	r3, r4, #16
 8000346:	fb0e 8811 	mls	r8, lr, r1, r8
 800034a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800034e:	fb01 f20c 	mul.w	r2, r1, ip
 8000352:	429a      	cmp	r2, r3
 8000354:	d909      	bls.n	800036a <__udivmoddi4+0x62>
 8000356:	18fb      	adds	r3, r7, r3
 8000358:	f101 30ff 	add.w	r0, r1, #4294967295
 800035c:	f080 80ea 	bcs.w	8000534 <__udivmoddi4+0x22c>
 8000360:	429a      	cmp	r2, r3
 8000362:	f240 80e7 	bls.w	8000534 <__udivmoddi4+0x22c>
 8000366:	3902      	subs	r1, #2
 8000368:	443b      	add	r3, r7
 800036a:	1a9a      	subs	r2, r3, r2
 800036c:	b2a3      	uxth	r3, r4
 800036e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000372:	fb0e 2210 	mls	r2, lr, r0, r2
 8000376:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800037a:	fb00 fc0c 	mul.w	ip, r0, ip
 800037e:	459c      	cmp	ip, r3
 8000380:	d909      	bls.n	8000396 <__udivmoddi4+0x8e>
 8000382:	18fb      	adds	r3, r7, r3
 8000384:	f100 32ff 	add.w	r2, r0, #4294967295
 8000388:	f080 80d6 	bcs.w	8000538 <__udivmoddi4+0x230>
 800038c:	459c      	cmp	ip, r3
 800038e:	f240 80d3 	bls.w	8000538 <__udivmoddi4+0x230>
 8000392:	443b      	add	r3, r7
 8000394:	3802      	subs	r0, #2
 8000396:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800039a:	eba3 030c 	sub.w	r3, r3, ip
 800039e:	2100      	movs	r1, #0
 80003a0:	b11d      	cbz	r5, 80003aa <__udivmoddi4+0xa2>
 80003a2:	40f3      	lsrs	r3, r6
 80003a4:	2200      	movs	r2, #0
 80003a6:	e9c5 3200 	strd	r3, r2, [r5]
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d905      	bls.n	80003be <__udivmoddi4+0xb6>
 80003b2:	b10d      	cbz	r5, 80003b8 <__udivmoddi4+0xb0>
 80003b4:	e9c5 0100 	strd	r0, r1, [r5]
 80003b8:	2100      	movs	r1, #0
 80003ba:	4608      	mov	r0, r1
 80003bc:	e7f5      	b.n	80003aa <__udivmoddi4+0xa2>
 80003be:	fab3 f183 	clz	r1, r3
 80003c2:	2900      	cmp	r1, #0
 80003c4:	d146      	bne.n	8000454 <__udivmoddi4+0x14c>
 80003c6:	4573      	cmp	r3, lr
 80003c8:	d302      	bcc.n	80003d0 <__udivmoddi4+0xc8>
 80003ca:	4282      	cmp	r2, r0
 80003cc:	f200 8105 	bhi.w	80005da <__udivmoddi4+0x2d2>
 80003d0:	1a84      	subs	r4, r0, r2
 80003d2:	eb6e 0203 	sbc.w	r2, lr, r3
 80003d6:	2001      	movs	r0, #1
 80003d8:	4690      	mov	r8, r2
 80003da:	2d00      	cmp	r5, #0
 80003dc:	d0e5      	beq.n	80003aa <__udivmoddi4+0xa2>
 80003de:	e9c5 4800 	strd	r4, r8, [r5]
 80003e2:	e7e2      	b.n	80003aa <__udivmoddi4+0xa2>
 80003e4:	2a00      	cmp	r2, #0
 80003e6:	f000 8090 	beq.w	800050a <__udivmoddi4+0x202>
 80003ea:	fab2 f682 	clz	r6, r2
 80003ee:	2e00      	cmp	r6, #0
 80003f0:	f040 80a4 	bne.w	800053c <__udivmoddi4+0x234>
 80003f4:	1a8a      	subs	r2, r1, r2
 80003f6:	0c03      	lsrs	r3, r0, #16
 80003f8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003fc:	b280      	uxth	r0, r0
 80003fe:	b2bc      	uxth	r4, r7
 8000400:	2101      	movs	r1, #1
 8000402:	fbb2 fcfe 	udiv	ip, r2, lr
 8000406:	fb0e 221c 	mls	r2, lr, ip, r2
 800040a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800040e:	fb04 f20c 	mul.w	r2, r4, ip
 8000412:	429a      	cmp	r2, r3
 8000414:	d907      	bls.n	8000426 <__udivmoddi4+0x11e>
 8000416:	18fb      	adds	r3, r7, r3
 8000418:	f10c 38ff 	add.w	r8, ip, #4294967295
 800041c:	d202      	bcs.n	8000424 <__udivmoddi4+0x11c>
 800041e:	429a      	cmp	r2, r3
 8000420:	f200 80e0 	bhi.w	80005e4 <__udivmoddi4+0x2dc>
 8000424:	46c4      	mov	ip, r8
 8000426:	1a9b      	subs	r3, r3, r2
 8000428:	fbb3 f2fe 	udiv	r2, r3, lr
 800042c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000430:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000434:	fb02 f404 	mul.w	r4, r2, r4
 8000438:	429c      	cmp	r4, r3
 800043a:	d907      	bls.n	800044c <__udivmoddi4+0x144>
 800043c:	18fb      	adds	r3, r7, r3
 800043e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000442:	d202      	bcs.n	800044a <__udivmoddi4+0x142>
 8000444:	429c      	cmp	r4, r3
 8000446:	f200 80ca 	bhi.w	80005de <__udivmoddi4+0x2d6>
 800044a:	4602      	mov	r2, r0
 800044c:	1b1b      	subs	r3, r3, r4
 800044e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000452:	e7a5      	b.n	80003a0 <__udivmoddi4+0x98>
 8000454:	f1c1 0620 	rsb	r6, r1, #32
 8000458:	408b      	lsls	r3, r1
 800045a:	fa22 f706 	lsr.w	r7, r2, r6
 800045e:	431f      	orrs	r7, r3
 8000460:	fa0e f401 	lsl.w	r4, lr, r1
 8000464:	fa20 f306 	lsr.w	r3, r0, r6
 8000468:	fa2e fe06 	lsr.w	lr, lr, r6
 800046c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000470:	4323      	orrs	r3, r4
 8000472:	fa00 f801 	lsl.w	r8, r0, r1
 8000476:	fa1f fc87 	uxth.w	ip, r7
 800047a:	fbbe f0f9 	udiv	r0, lr, r9
 800047e:	0c1c      	lsrs	r4, r3, #16
 8000480:	fb09 ee10 	mls	lr, r9, r0, lr
 8000484:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000488:	fb00 fe0c 	mul.w	lr, r0, ip
 800048c:	45a6      	cmp	lr, r4
 800048e:	fa02 f201 	lsl.w	r2, r2, r1
 8000492:	d909      	bls.n	80004a8 <__udivmoddi4+0x1a0>
 8000494:	193c      	adds	r4, r7, r4
 8000496:	f100 3aff 	add.w	sl, r0, #4294967295
 800049a:	f080 809c 	bcs.w	80005d6 <__udivmoddi4+0x2ce>
 800049e:	45a6      	cmp	lr, r4
 80004a0:	f240 8099 	bls.w	80005d6 <__udivmoddi4+0x2ce>
 80004a4:	3802      	subs	r0, #2
 80004a6:	443c      	add	r4, r7
 80004a8:	eba4 040e 	sub.w	r4, r4, lr
 80004ac:	fa1f fe83 	uxth.w	lr, r3
 80004b0:	fbb4 f3f9 	udiv	r3, r4, r9
 80004b4:	fb09 4413 	mls	r4, r9, r3, r4
 80004b8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80004bc:	fb03 fc0c 	mul.w	ip, r3, ip
 80004c0:	45a4      	cmp	ip, r4
 80004c2:	d908      	bls.n	80004d6 <__udivmoddi4+0x1ce>
 80004c4:	193c      	adds	r4, r7, r4
 80004c6:	f103 3eff 	add.w	lr, r3, #4294967295
 80004ca:	f080 8082 	bcs.w	80005d2 <__udivmoddi4+0x2ca>
 80004ce:	45a4      	cmp	ip, r4
 80004d0:	d97f      	bls.n	80005d2 <__udivmoddi4+0x2ca>
 80004d2:	3b02      	subs	r3, #2
 80004d4:	443c      	add	r4, r7
 80004d6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004da:	eba4 040c 	sub.w	r4, r4, ip
 80004de:	fba0 ec02 	umull	lr, ip, r0, r2
 80004e2:	4564      	cmp	r4, ip
 80004e4:	4673      	mov	r3, lr
 80004e6:	46e1      	mov	r9, ip
 80004e8:	d362      	bcc.n	80005b0 <__udivmoddi4+0x2a8>
 80004ea:	d05f      	beq.n	80005ac <__udivmoddi4+0x2a4>
 80004ec:	b15d      	cbz	r5, 8000506 <__udivmoddi4+0x1fe>
 80004ee:	ebb8 0203 	subs.w	r2, r8, r3
 80004f2:	eb64 0409 	sbc.w	r4, r4, r9
 80004f6:	fa04 f606 	lsl.w	r6, r4, r6
 80004fa:	fa22 f301 	lsr.w	r3, r2, r1
 80004fe:	431e      	orrs	r6, r3
 8000500:	40cc      	lsrs	r4, r1
 8000502:	e9c5 6400 	strd	r6, r4, [r5]
 8000506:	2100      	movs	r1, #0
 8000508:	e74f      	b.n	80003aa <__udivmoddi4+0xa2>
 800050a:	fbb1 fcf2 	udiv	ip, r1, r2
 800050e:	0c01      	lsrs	r1, r0, #16
 8000510:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000514:	b280      	uxth	r0, r0
 8000516:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800051a:	463b      	mov	r3, r7
 800051c:	4638      	mov	r0, r7
 800051e:	463c      	mov	r4, r7
 8000520:	46b8      	mov	r8, r7
 8000522:	46be      	mov	lr, r7
 8000524:	2620      	movs	r6, #32
 8000526:	fbb1 f1f7 	udiv	r1, r1, r7
 800052a:	eba2 0208 	sub.w	r2, r2, r8
 800052e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000532:	e766      	b.n	8000402 <__udivmoddi4+0xfa>
 8000534:	4601      	mov	r1, r0
 8000536:	e718      	b.n	800036a <__udivmoddi4+0x62>
 8000538:	4610      	mov	r0, r2
 800053a:	e72c      	b.n	8000396 <__udivmoddi4+0x8e>
 800053c:	f1c6 0220 	rsb	r2, r6, #32
 8000540:	fa2e f302 	lsr.w	r3, lr, r2
 8000544:	40b7      	lsls	r7, r6
 8000546:	40b1      	lsls	r1, r6
 8000548:	fa20 f202 	lsr.w	r2, r0, r2
 800054c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000550:	430a      	orrs	r2, r1
 8000552:	fbb3 f8fe 	udiv	r8, r3, lr
 8000556:	b2bc      	uxth	r4, r7
 8000558:	fb0e 3318 	mls	r3, lr, r8, r3
 800055c:	0c11      	lsrs	r1, r2, #16
 800055e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000562:	fb08 f904 	mul.w	r9, r8, r4
 8000566:	40b0      	lsls	r0, r6
 8000568:	4589      	cmp	r9, r1
 800056a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800056e:	b280      	uxth	r0, r0
 8000570:	d93e      	bls.n	80005f0 <__udivmoddi4+0x2e8>
 8000572:	1879      	adds	r1, r7, r1
 8000574:	f108 3cff 	add.w	ip, r8, #4294967295
 8000578:	d201      	bcs.n	800057e <__udivmoddi4+0x276>
 800057a:	4589      	cmp	r9, r1
 800057c:	d81f      	bhi.n	80005be <__udivmoddi4+0x2b6>
 800057e:	eba1 0109 	sub.w	r1, r1, r9
 8000582:	fbb1 f9fe 	udiv	r9, r1, lr
 8000586:	fb09 f804 	mul.w	r8, r9, r4
 800058a:	fb0e 1119 	mls	r1, lr, r9, r1
 800058e:	b292      	uxth	r2, r2
 8000590:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000594:	4542      	cmp	r2, r8
 8000596:	d229      	bcs.n	80005ec <__udivmoddi4+0x2e4>
 8000598:	18ba      	adds	r2, r7, r2
 800059a:	f109 31ff 	add.w	r1, r9, #4294967295
 800059e:	d2c4      	bcs.n	800052a <__udivmoddi4+0x222>
 80005a0:	4542      	cmp	r2, r8
 80005a2:	d2c2      	bcs.n	800052a <__udivmoddi4+0x222>
 80005a4:	f1a9 0102 	sub.w	r1, r9, #2
 80005a8:	443a      	add	r2, r7
 80005aa:	e7be      	b.n	800052a <__udivmoddi4+0x222>
 80005ac:	45f0      	cmp	r8, lr
 80005ae:	d29d      	bcs.n	80004ec <__udivmoddi4+0x1e4>
 80005b0:	ebbe 0302 	subs.w	r3, lr, r2
 80005b4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80005b8:	3801      	subs	r0, #1
 80005ba:	46e1      	mov	r9, ip
 80005bc:	e796      	b.n	80004ec <__udivmoddi4+0x1e4>
 80005be:	eba7 0909 	sub.w	r9, r7, r9
 80005c2:	4449      	add	r1, r9
 80005c4:	f1a8 0c02 	sub.w	ip, r8, #2
 80005c8:	fbb1 f9fe 	udiv	r9, r1, lr
 80005cc:	fb09 f804 	mul.w	r8, r9, r4
 80005d0:	e7db      	b.n	800058a <__udivmoddi4+0x282>
 80005d2:	4673      	mov	r3, lr
 80005d4:	e77f      	b.n	80004d6 <__udivmoddi4+0x1ce>
 80005d6:	4650      	mov	r0, sl
 80005d8:	e766      	b.n	80004a8 <__udivmoddi4+0x1a0>
 80005da:	4608      	mov	r0, r1
 80005dc:	e6fd      	b.n	80003da <__udivmoddi4+0xd2>
 80005de:	443b      	add	r3, r7
 80005e0:	3a02      	subs	r2, #2
 80005e2:	e733      	b.n	800044c <__udivmoddi4+0x144>
 80005e4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005e8:	443b      	add	r3, r7
 80005ea:	e71c      	b.n	8000426 <__udivmoddi4+0x11e>
 80005ec:	4649      	mov	r1, r9
 80005ee:	e79c      	b.n	800052a <__udivmoddi4+0x222>
 80005f0:	eba1 0109 	sub.w	r1, r1, r9
 80005f4:	46c4      	mov	ip, r8
 80005f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80005fa:	fb09 f804 	mul.w	r8, r9, r4
 80005fe:	e7c4      	b.n	800058a <__udivmoddi4+0x282>

08000600 <__aeabi_idiv0>:
 8000600:	4770      	bx	lr
 8000602:	bf00      	nop

08000604 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b082      	sub	sp, #8
 8000608:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800060a:	4b11      	ldr	r3, [pc, #68]	@ (8000650 <MX_DMA_Init+0x4c>)
 800060c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000610:	4a0f      	ldr	r2, [pc, #60]	@ (8000650 <MX_DMA_Init+0x4c>)
 8000612:	f043 0301 	orr.w	r3, r3, #1
 8000616:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800061a:	4b0d      	ldr	r3, [pc, #52]	@ (8000650 <MX_DMA_Init+0x4c>)
 800061c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000620:	f003 0301 	and.w	r3, r3, #1
 8000624:	607b      	str	r3, [r7, #4]
 8000626:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000628:	2200      	movs	r2, #0
 800062a:	2100      	movs	r1, #0
 800062c:	200b      	movs	r0, #11
 800062e:	f000 fd34 	bl	800109a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000632:	200b      	movs	r0, #11
 8000634:	f000 fd4b 	bl	80010ce <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000638:	2200      	movs	r2, #0
 800063a:	2100      	movs	r1, #0
 800063c:	200c      	movs	r0, #12
 800063e:	f000 fd2c 	bl	800109a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000642:	200c      	movs	r0, #12
 8000644:	f000 fd43 	bl	80010ce <HAL_NVIC_EnableIRQ>

}
 8000648:	bf00      	nop
 800064a:	3708      	adds	r7, #8
 800064c:	46bd      	mov	sp, r7
 800064e:	bd80      	pop	{r7, pc}
 8000650:	58024400 	.word	0x58024400

08000654 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b088      	sub	sp, #32
 8000658:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800065a:	f107 030c 	add.w	r3, r7, #12
 800065e:	2200      	movs	r2, #0
 8000660:	601a      	str	r2, [r3, #0]
 8000662:	605a      	str	r2, [r3, #4]
 8000664:	609a      	str	r2, [r3, #8]
 8000666:	60da      	str	r2, [r3, #12]
 8000668:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800066a:	4b1b      	ldr	r3, [pc, #108]	@ (80006d8 <MX_GPIO_Init+0x84>)
 800066c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000670:	4a19      	ldr	r2, [pc, #100]	@ (80006d8 <MX_GPIO_Init+0x84>)
 8000672:	f043 0304 	orr.w	r3, r3, #4
 8000676:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800067a:	4b17      	ldr	r3, [pc, #92]	@ (80006d8 <MX_GPIO_Init+0x84>)
 800067c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000680:	f003 0304 	and.w	r3, r3, #4
 8000684:	60bb      	str	r3, [r7, #8]
 8000686:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000688:	4b13      	ldr	r3, [pc, #76]	@ (80006d8 <MX_GPIO_Init+0x84>)
 800068a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800068e:	4a12      	ldr	r2, [pc, #72]	@ (80006d8 <MX_GPIO_Init+0x84>)
 8000690:	f043 0308 	orr.w	r3, r3, #8
 8000694:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000698:	4b0f      	ldr	r3, [pc, #60]	@ (80006d8 <MX_GPIO_Init+0x84>)
 800069a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800069e:	f003 0308 	and.w	r3, r3, #8
 80006a2:	607b      	str	r3, [r7, #4]
 80006a4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(btn_GPIO_Port, btn_Pin, GPIO_PIN_RESET);
 80006a6:	2200      	movs	r2, #0
 80006a8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80006ac:	480b      	ldr	r0, [pc, #44]	@ (80006dc <MX_GPIO_Init+0x88>)
 80006ae:	f003 f98f 	bl	80039d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : btn_Pin */
  GPIO_InitStruct.Pin = btn_Pin;
 80006b2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80006b6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006b8:	2301      	movs	r3, #1
 80006ba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006bc:	2300      	movs	r3, #0
 80006be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006c0:	2300      	movs	r3, #0
 80006c2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(btn_GPIO_Port, &GPIO_InitStruct);
 80006c4:	f107 030c 	add.w	r3, r7, #12
 80006c8:	4619      	mov	r1, r3
 80006ca:	4804      	ldr	r0, [pc, #16]	@ (80006dc <MX_GPIO_Init+0x88>)
 80006cc:	f002 ffb8 	bl	8003640 <HAL_GPIO_Init>

}
 80006d0:	bf00      	nop
 80006d2:	3720      	adds	r7, #32
 80006d4:	46bd      	mov	sp, r7
 80006d6:	bd80      	pop	{r7, pc}
 80006d8:	58024400 	.word	0x58024400
 80006dc:	58020800 	.word	0x58020800

080006e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b082      	sub	sp, #8
 80006e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80006e6:	f000 f89b 	bl	8000820 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006ea:	f000 fb39 	bl	8000d60 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006ee:	f000 f82d 	bl	800074c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006f2:	f7ff ffaf 	bl	8000654 <MX_GPIO_Init>
  MX_DMA_Init();
 80006f6:	f7ff ff85 	bl	8000604 <MX_DMA_Init>
  MX_USART3_UART_Init();
 80006fa:	f000 f9e3 	bl	8000ac4 <MX_USART3_UART_Init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  // Lógica para o botão PC13 (BUTTON_B1)
	    GPIO_PinState currentButtonState = HAL_GPIO_ReadPin(btn_GPIO_Port, btn_Pin);
 80006fe:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000702:	480e      	ldr	r0, [pc, #56]	@ (800073c <main+0x5c>)
 8000704:	f003 f94c 	bl	80039a0 <HAL_GPIO_ReadPin>
 8000708:	4603      	mov	r3, r0
 800070a:	71fb      	strb	r3, [r7, #7]

	    // Verifica se o botão foi pressionado (transição de HIGH para LOW)
	    // e se o estado anterior era solto para evitar múltiplos prints enquanto pressionado
	    if (currentButtonState == GPIO_PIN_RESET && prevButtonState == GPIO_PIN_SET) {
 800070c:	79fb      	ldrb	r3, [r7, #7]
 800070e:	2b00      	cmp	r3, #0
 8000710:	d10d      	bne.n	800072e <main+0x4e>
 8000712:	4b0b      	ldr	r3, [pc, #44]	@ (8000740 <main+0x60>)
 8000714:	781b      	ldrb	r3, [r3, #0]
 8000716:	2b01      	cmp	r3, #1
 8000718:	d109      	bne.n	800072e <main+0x4e>
	        // Botão foi pressionado
	        HAL_UART_Transmit(&huart3, (uint8_t*)"Hello World!\r\n", 14, HAL_MAX_DELAY);
 800071a:	f04f 33ff 	mov.w	r3, #4294967295
 800071e:	220e      	movs	r2, #14
 8000720:	4908      	ldr	r1, [pc, #32]	@ (8000744 <main+0x64>)
 8000722:	4809      	ldr	r0, [pc, #36]	@ (8000748 <main+0x68>)
 8000724:	f006 f80a 	bl	800673c <HAL_UART_Transmit>
	        HAL_Delay(100); // Pequeno atraso para "debounce" simples
 8000728:	2064      	movs	r0, #100	@ 0x64
 800072a:	f000 fbab 	bl	8000e84 <HAL_Delay>
	    }

	    // Atualiza o estado anterior do botão
	    prevButtonState = currentButtonState;
 800072e:	4a04      	ldr	r2, [pc, #16]	@ (8000740 <main+0x60>)
 8000730:	79fb      	ldrb	r3, [r7, #7]
 8000732:	7013      	strb	r3, [r2, #0]

	    // Adicione um pequeno atraso para não sobrecarregar o processador
	    // Pode ser ajustado ou removido se sua aplicação precisar de máxima reatividade
	    HAL_Delay(10);
 8000734:	200a      	movs	r0, #10
 8000736:	f000 fba5 	bl	8000e84 <HAL_Delay>
  {
 800073a:	e7e0      	b.n	80006fe <main+0x1e>
 800073c:	58020800 	.word	0x58020800
 8000740:	24000000 	.word	0x24000000
 8000744:	08008280 	.word	0x08008280
 8000748:	24000030 	.word	0x24000030

0800074c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b09c      	sub	sp, #112	@ 0x70
 8000750:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000752:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000756:	224c      	movs	r2, #76	@ 0x4c
 8000758:	2100      	movs	r1, #0
 800075a:	4618      	mov	r0, r3
 800075c:	f007 fd58 	bl	8008210 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000760:	1d3b      	adds	r3, r7, #4
 8000762:	2220      	movs	r2, #32
 8000764:	2100      	movs	r1, #0
 8000766:	4618      	mov	r0, r3
 8000768:	f007 fd52 	bl	8008210 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800076c:	2002      	movs	r0, #2
 800076e:	f003 f949 	bl	8003a04 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000772:	2300      	movs	r3, #0
 8000774:	603b      	str	r3, [r7, #0]
 8000776:	4b28      	ldr	r3, [pc, #160]	@ (8000818 <SystemClock_Config+0xcc>)
 8000778:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800077a:	4a27      	ldr	r2, [pc, #156]	@ (8000818 <SystemClock_Config+0xcc>)
 800077c:	f023 0301 	bic.w	r3, r3, #1
 8000780:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000782:	4b25      	ldr	r3, [pc, #148]	@ (8000818 <SystemClock_Config+0xcc>)
 8000784:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000786:	f003 0301 	and.w	r3, r3, #1
 800078a:	603b      	str	r3, [r7, #0]
 800078c:	4b23      	ldr	r3, [pc, #140]	@ (800081c <SystemClock_Config+0xd0>)
 800078e:	699b      	ldr	r3, [r3, #24]
 8000790:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000794:	4a21      	ldr	r2, [pc, #132]	@ (800081c <SystemClock_Config+0xd0>)
 8000796:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800079a:	6193      	str	r3, [r2, #24]
 800079c:	4b1f      	ldr	r3, [pc, #124]	@ (800081c <SystemClock_Config+0xd0>)
 800079e:	699b      	ldr	r3, [r3, #24]
 80007a0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80007a4:	603b      	str	r3, [r7, #0]
 80007a6:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80007a8:	bf00      	nop
 80007aa:	4b1c      	ldr	r3, [pc, #112]	@ (800081c <SystemClock_Config+0xd0>)
 80007ac:	699b      	ldr	r3, [r3, #24]
 80007ae:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80007b2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80007b6:	d1f8      	bne.n	80007aa <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007b8:	2302      	movs	r3, #2
 80007ba:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80007bc:	2301      	movs	r3, #1
 80007be:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007c0:	2340      	movs	r3, #64	@ 0x40
 80007c2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80007c4:	2300      	movs	r3, #0
 80007c6:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007c8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80007cc:	4618      	mov	r0, r3
 80007ce:	f003 f953 	bl	8003a78 <HAL_RCC_OscConfig>
 80007d2:	4603      	mov	r3, r0
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d001      	beq.n	80007dc <SystemClock_Config+0x90>
  {
    Error_Handler();
 80007d8:	f000 f84e 	bl	8000878 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007dc:	233f      	movs	r3, #63	@ 0x3f
 80007de:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80007e0:	2300      	movs	r3, #0
 80007e2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80007e4:	2300      	movs	r3, #0
 80007e6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80007e8:	2300      	movs	r3, #0
 80007ea:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80007ec:	2300      	movs	r3, #0
 80007ee:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80007f0:	2340      	movs	r3, #64	@ 0x40
 80007f2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80007f4:	2300      	movs	r3, #0
 80007f6:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80007f8:	2300      	movs	r3, #0
 80007fa:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80007fc:	1d3b      	adds	r3, r7, #4
 80007fe:	2101      	movs	r1, #1
 8000800:	4618      	mov	r0, r3
 8000802:	f003 fd93 	bl	800432c <HAL_RCC_ClockConfig>
 8000806:	4603      	mov	r3, r0
 8000808:	2b00      	cmp	r3, #0
 800080a:	d001      	beq.n	8000810 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800080c:	f000 f834 	bl	8000878 <Error_Handler>
  }
}
 8000810:	bf00      	nop
 8000812:	3770      	adds	r7, #112	@ 0x70
 8000814:	46bd      	mov	sp, r7
 8000816:	bd80      	pop	{r7, pc}
 8000818:	58000400 	.word	0x58000400
 800081c:	58024800 	.word	0x58024800

08000820 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b084      	sub	sp, #16
 8000824:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000826:	463b      	mov	r3, r7
 8000828:	2200      	movs	r2, #0
 800082a:	601a      	str	r2, [r3, #0]
 800082c:	605a      	str	r2, [r3, #4]
 800082e:	609a      	str	r2, [r3, #8]
 8000830:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000832:	f000 fc67 	bl	8001104 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000836:	2301      	movs	r3, #1
 8000838:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 800083a:	2300      	movs	r3, #0
 800083c:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 800083e:	2300      	movs	r3, #0
 8000840:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000842:	231f      	movs	r3, #31
 8000844:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000846:	2387      	movs	r3, #135	@ 0x87
 8000848:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 800084a:	2300      	movs	r3, #0
 800084c:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 800084e:	2300      	movs	r3, #0
 8000850:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000852:	2301      	movs	r3, #1
 8000854:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000856:	2301      	movs	r3, #1
 8000858:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 800085a:	2300      	movs	r3, #0
 800085c:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 800085e:	2300      	movs	r3, #0
 8000860:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000862:	463b      	mov	r3, r7
 8000864:	4618      	mov	r0, r3
 8000866:	f000 fc85 	bl	8001174 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 800086a:	2004      	movs	r0, #4
 800086c:	f000 fc62 	bl	8001134 <HAL_MPU_Enable>

}
 8000870:	bf00      	nop
 8000872:	3710      	adds	r7, #16
 8000874:	46bd      	mov	sp, r7
 8000876:	bd80      	pop	{r7, pc}

08000878 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000878:	b480      	push	{r7}
 800087a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800087c:	b672      	cpsid	i
}
 800087e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000880:	bf00      	nop
 8000882:	e7fd      	b.n	8000880 <Error_Handler+0x8>

08000884 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000884:	b480      	push	{r7}
 8000886:	b083      	sub	sp, #12
 8000888:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800088a:	4b0a      	ldr	r3, [pc, #40]	@ (80008b4 <HAL_MspInit+0x30>)
 800088c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000890:	4a08      	ldr	r2, [pc, #32]	@ (80008b4 <HAL_MspInit+0x30>)
 8000892:	f043 0302 	orr.w	r3, r3, #2
 8000896:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800089a:	4b06      	ldr	r3, [pc, #24]	@ (80008b4 <HAL_MspInit+0x30>)
 800089c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80008a0:	f003 0302 	and.w	r3, r3, #2
 80008a4:	607b      	str	r3, [r7, #4]
 80008a6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008a8:	bf00      	nop
 80008aa:	370c      	adds	r7, #12
 80008ac:	46bd      	mov	sp, r7
 80008ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b2:	4770      	bx	lr
 80008b4:	58024400 	.word	0x58024400

080008b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008b8:	b480      	push	{r7}
 80008ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80008bc:	bf00      	nop
 80008be:	e7fd      	b.n	80008bc <NMI_Handler+0x4>

080008c0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008c0:	b480      	push	{r7}
 80008c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008c4:	bf00      	nop
 80008c6:	e7fd      	b.n	80008c4 <HardFault_Handler+0x4>

080008c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008c8:	b480      	push	{r7}
 80008ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008cc:	bf00      	nop
 80008ce:	e7fd      	b.n	80008cc <MemManage_Handler+0x4>

080008d0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008d0:	b480      	push	{r7}
 80008d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008d4:	bf00      	nop
 80008d6:	e7fd      	b.n	80008d4 <BusFault_Handler+0x4>

080008d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008d8:	b480      	push	{r7}
 80008da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008dc:	bf00      	nop
 80008de:	e7fd      	b.n	80008dc <UsageFault_Handler+0x4>

080008e0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008e0:	b480      	push	{r7}
 80008e2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008e4:	bf00      	nop
 80008e6:	46bd      	mov	sp, r7
 80008e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ec:	4770      	bx	lr

080008ee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008ee:	b480      	push	{r7}
 80008f0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008f2:	bf00      	nop
 80008f4:	46bd      	mov	sp, r7
 80008f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fa:	4770      	bx	lr

080008fc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008fc:	b480      	push	{r7}
 80008fe:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000900:	bf00      	nop
 8000902:	46bd      	mov	sp, r7
 8000904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000908:	4770      	bx	lr

0800090a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800090a:	b580      	push	{r7, lr}
 800090c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800090e:	f000 fa99 	bl	8000e44 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000912:	bf00      	nop
 8000914:	bd80      	pop	{r7, pc}
	...

08000918 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 800091c:	4802      	ldr	r0, [pc, #8]	@ (8000928 <DMA1_Stream0_IRQHandler+0x10>)
 800091e:	f001 fd29 	bl	8002374 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8000922:	bf00      	nop
 8000924:	bd80      	pop	{r7, pc}
 8000926:	bf00      	nop
 8000928:	240000c4 	.word	0x240000c4

0800092c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8000930:	4802      	ldr	r0, [pc, #8]	@ (800093c <DMA1_Stream1_IRQHandler+0x10>)
 8000932:	f001 fd1f 	bl	8002374 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8000936:	bf00      	nop
 8000938:	bd80      	pop	{r7, pc}
 800093a:	bf00      	nop
 800093c:	2400013c 	.word	0x2400013c

08000940 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000944:	4802      	ldr	r0, [pc, #8]	@ (8000950 <USART3_IRQHandler+0x10>)
 8000946:	f005 ff87 	bl	8006858 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800094a:	bf00      	nop
 800094c:	bd80      	pop	{r7, pc}
 800094e:	bf00      	nop
 8000950:	24000030 	.word	0x24000030

08000954 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000954:	b480      	push	{r7}
 8000956:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000958:	4b43      	ldr	r3, [pc, #268]	@ (8000a68 <SystemInit+0x114>)
 800095a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800095e:	4a42      	ldr	r2, [pc, #264]	@ (8000a68 <SystemInit+0x114>)
 8000960:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000964:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000968:	4b40      	ldr	r3, [pc, #256]	@ (8000a6c <SystemInit+0x118>)
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	f003 030f 	and.w	r3, r3, #15
 8000970:	2b06      	cmp	r3, #6
 8000972:	d807      	bhi.n	8000984 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000974:	4b3d      	ldr	r3, [pc, #244]	@ (8000a6c <SystemInit+0x118>)
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	f023 030f 	bic.w	r3, r3, #15
 800097c:	4a3b      	ldr	r2, [pc, #236]	@ (8000a6c <SystemInit+0x118>)
 800097e:	f043 0307 	orr.w	r3, r3, #7
 8000982:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000984:	4b3a      	ldr	r3, [pc, #232]	@ (8000a70 <SystemInit+0x11c>)
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	4a39      	ldr	r2, [pc, #228]	@ (8000a70 <SystemInit+0x11c>)
 800098a:	f043 0301 	orr.w	r3, r3, #1
 800098e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000990:	4b37      	ldr	r3, [pc, #220]	@ (8000a70 <SystemInit+0x11c>)
 8000992:	2200      	movs	r2, #0
 8000994:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000996:	4b36      	ldr	r3, [pc, #216]	@ (8000a70 <SystemInit+0x11c>)
 8000998:	681a      	ldr	r2, [r3, #0]
 800099a:	4935      	ldr	r1, [pc, #212]	@ (8000a70 <SystemInit+0x11c>)
 800099c:	4b35      	ldr	r3, [pc, #212]	@ (8000a74 <SystemInit+0x120>)
 800099e:	4013      	ands	r3, r2
 80009a0:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80009a2:	4b32      	ldr	r3, [pc, #200]	@ (8000a6c <SystemInit+0x118>)
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	f003 0308 	and.w	r3, r3, #8
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d007      	beq.n	80009be <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80009ae:	4b2f      	ldr	r3, [pc, #188]	@ (8000a6c <SystemInit+0x118>)
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	f023 030f 	bic.w	r3, r3, #15
 80009b6:	4a2d      	ldr	r2, [pc, #180]	@ (8000a6c <SystemInit+0x118>)
 80009b8:	f043 0307 	orr.w	r3, r3, #7
 80009bc:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80009be:	4b2c      	ldr	r3, [pc, #176]	@ (8000a70 <SystemInit+0x11c>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80009c4:	4b2a      	ldr	r3, [pc, #168]	@ (8000a70 <SystemInit+0x11c>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80009ca:	4b29      	ldr	r3, [pc, #164]	@ (8000a70 <SystemInit+0x11c>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80009d0:	4b27      	ldr	r3, [pc, #156]	@ (8000a70 <SystemInit+0x11c>)
 80009d2:	4a29      	ldr	r2, [pc, #164]	@ (8000a78 <SystemInit+0x124>)
 80009d4:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80009d6:	4b26      	ldr	r3, [pc, #152]	@ (8000a70 <SystemInit+0x11c>)
 80009d8:	4a28      	ldr	r2, [pc, #160]	@ (8000a7c <SystemInit+0x128>)
 80009da:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80009dc:	4b24      	ldr	r3, [pc, #144]	@ (8000a70 <SystemInit+0x11c>)
 80009de:	4a28      	ldr	r2, [pc, #160]	@ (8000a80 <SystemInit+0x12c>)
 80009e0:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80009e2:	4b23      	ldr	r3, [pc, #140]	@ (8000a70 <SystemInit+0x11c>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80009e8:	4b21      	ldr	r3, [pc, #132]	@ (8000a70 <SystemInit+0x11c>)
 80009ea:	4a25      	ldr	r2, [pc, #148]	@ (8000a80 <SystemInit+0x12c>)
 80009ec:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80009ee:	4b20      	ldr	r3, [pc, #128]	@ (8000a70 <SystemInit+0x11c>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80009f4:	4b1e      	ldr	r3, [pc, #120]	@ (8000a70 <SystemInit+0x11c>)
 80009f6:	4a22      	ldr	r2, [pc, #136]	@ (8000a80 <SystemInit+0x12c>)
 80009f8:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80009fa:	4b1d      	ldr	r3, [pc, #116]	@ (8000a70 <SystemInit+0x11c>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000a00:	4b1b      	ldr	r3, [pc, #108]	@ (8000a70 <SystemInit+0x11c>)
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	4a1a      	ldr	r2, [pc, #104]	@ (8000a70 <SystemInit+0x11c>)
 8000a06:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000a0a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000a0c:	4b18      	ldr	r3, [pc, #96]	@ (8000a70 <SystemInit+0x11c>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000a12:	4b1c      	ldr	r3, [pc, #112]	@ (8000a84 <SystemInit+0x130>)
 8000a14:	681a      	ldr	r2, [r3, #0]
 8000a16:	4b1c      	ldr	r3, [pc, #112]	@ (8000a88 <SystemInit+0x134>)
 8000a18:	4013      	ands	r3, r2
 8000a1a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000a1e:	d202      	bcs.n	8000a26 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000a20:	4b1a      	ldr	r3, [pc, #104]	@ (8000a8c <SystemInit+0x138>)
 8000a22:	2201      	movs	r2, #1
 8000a24:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 8000a26:	4b12      	ldr	r3, [pc, #72]	@ (8000a70 <SystemInit+0x11c>)
 8000a28:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000a2c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d113      	bne.n	8000a5c <SystemInit+0x108>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8000a34:	4b0e      	ldr	r3, [pc, #56]	@ (8000a70 <SystemInit+0x11c>)
 8000a36:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000a3a:	4a0d      	ldr	r2, [pc, #52]	@ (8000a70 <SystemInit+0x11c>)
 8000a3c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000a40:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000a44:	4b12      	ldr	r3, [pc, #72]	@ (8000a90 <SystemInit+0x13c>)
 8000a46:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000a4a:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8000a4c:	4b08      	ldr	r3, [pc, #32]	@ (8000a70 <SystemInit+0x11c>)
 8000a4e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000a52:	4a07      	ldr	r2, [pc, #28]	@ (8000a70 <SystemInit+0x11c>)
 8000a54:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000a58:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000a5c:	bf00      	nop
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a64:	4770      	bx	lr
 8000a66:	bf00      	nop
 8000a68:	e000ed00 	.word	0xe000ed00
 8000a6c:	52002000 	.word	0x52002000
 8000a70:	58024400 	.word	0x58024400
 8000a74:	eaf6ed7f 	.word	0xeaf6ed7f
 8000a78:	02020200 	.word	0x02020200
 8000a7c:	01ff0000 	.word	0x01ff0000
 8000a80:	01010280 	.word	0x01010280
 8000a84:	5c001000 	.word	0x5c001000
 8000a88:	ffff0000 	.word	0xffff0000
 8000a8c:	51008108 	.word	0x51008108
 8000a90:	52004000 	.word	0x52004000

08000a94 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8000a94:	b480      	push	{r7}
 8000a96:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 8000a98:	4b09      	ldr	r3, [pc, #36]	@ (8000ac0 <ExitRun0Mode+0x2c>)
 8000a9a:	68db      	ldr	r3, [r3, #12]
 8000a9c:	4a08      	ldr	r2, [pc, #32]	@ (8000ac0 <ExitRun0Mode+0x2c>)
 8000a9e:	f043 0302 	orr.w	r3, r3, #2
 8000aa2:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8000aa4:	bf00      	nop
 8000aa6:	4b06      	ldr	r3, [pc, #24]	@ (8000ac0 <ExitRun0Mode+0x2c>)
 8000aa8:	685b      	ldr	r3, [r3, #4]
 8000aaa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d0f9      	beq.n	8000aa6 <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8000ab2:	bf00      	nop
 8000ab4:	bf00      	nop
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000abc:	4770      	bx	lr
 8000abe:	bf00      	nop
 8000ac0:	58024800 	.word	0x58024800

08000ac4 <MX_USART3_UART_Init>:
DMA_HandleTypeDef hdma_usart3_tx;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000ac8:	4b22      	ldr	r3, [pc, #136]	@ (8000b54 <MX_USART3_UART_Init+0x90>)
 8000aca:	4a23      	ldr	r2, [pc, #140]	@ (8000b58 <MX_USART3_UART_Init+0x94>)
 8000acc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000ace:	4b21      	ldr	r3, [pc, #132]	@ (8000b54 <MX_USART3_UART_Init+0x90>)
 8000ad0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000ad4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000ad6:	4b1f      	ldr	r3, [pc, #124]	@ (8000b54 <MX_USART3_UART_Init+0x90>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000adc:	4b1d      	ldr	r3, [pc, #116]	@ (8000b54 <MX_USART3_UART_Init+0x90>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000ae2:	4b1c      	ldr	r3, [pc, #112]	@ (8000b54 <MX_USART3_UART_Init+0x90>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000ae8:	4b1a      	ldr	r3, [pc, #104]	@ (8000b54 <MX_USART3_UART_Init+0x90>)
 8000aea:	220c      	movs	r2, #12
 8000aec:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000aee:	4b19      	ldr	r3, [pc, #100]	@ (8000b54 <MX_USART3_UART_Init+0x90>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000af4:	4b17      	ldr	r3, [pc, #92]	@ (8000b54 <MX_USART3_UART_Init+0x90>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000afa:	4b16      	ldr	r3, [pc, #88]	@ (8000b54 <MX_USART3_UART_Init+0x90>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b00:	4b14      	ldr	r3, [pc, #80]	@ (8000b54 <MX_USART3_UART_Init+0x90>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b06:	4b13      	ldr	r3, [pc, #76]	@ (8000b54 <MX_USART3_UART_Init+0x90>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000b0c:	4811      	ldr	r0, [pc, #68]	@ (8000b54 <MX_USART3_UART_Init+0x90>)
 8000b0e:	f005 fdc5 	bl	800669c <HAL_UART_Init>
 8000b12:	4603      	mov	r3, r0
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d001      	beq.n	8000b1c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000b18:	f7ff feae 	bl	8000878 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b1c:	2100      	movs	r1, #0
 8000b1e:	480d      	ldr	r0, [pc, #52]	@ (8000b54 <MX_USART3_UART_Init+0x90>)
 8000b20:	f007 faac 	bl	800807c <HAL_UARTEx_SetTxFifoThreshold>
 8000b24:	4603      	mov	r3, r0
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d001      	beq.n	8000b2e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000b2a:	f7ff fea5 	bl	8000878 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b2e:	2100      	movs	r1, #0
 8000b30:	4808      	ldr	r0, [pc, #32]	@ (8000b54 <MX_USART3_UART_Init+0x90>)
 8000b32:	f007 fae1 	bl	80080f8 <HAL_UARTEx_SetRxFifoThreshold>
 8000b36:	4603      	mov	r3, r0
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d001      	beq.n	8000b40 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000b3c:	f7ff fe9c 	bl	8000878 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000b40:	4804      	ldr	r0, [pc, #16]	@ (8000b54 <MX_USART3_UART_Init+0x90>)
 8000b42:	f007 fa62 	bl	800800a <HAL_UARTEx_DisableFifoMode>
 8000b46:	4603      	mov	r3, r0
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d001      	beq.n	8000b50 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000b4c:	f7ff fe94 	bl	8000878 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000b50:	bf00      	nop
 8000b52:	bd80      	pop	{r7, pc}
 8000b54:	24000030 	.word	0x24000030
 8000b58:	40004800 	.word	0x40004800

08000b5c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b0ba      	sub	sp, #232	@ 0xe8
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b64:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000b68:	2200      	movs	r2, #0
 8000b6a:	601a      	str	r2, [r3, #0]
 8000b6c:	605a      	str	r2, [r3, #4]
 8000b6e:	609a      	str	r2, [r3, #8]
 8000b70:	60da      	str	r2, [r3, #12]
 8000b72:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b74:	f107 0310 	add.w	r3, r7, #16
 8000b78:	22c0      	movs	r2, #192	@ 0xc0
 8000b7a:	2100      	movs	r1, #0
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	f007 fb47 	bl	8008210 <memset>
  if(uartHandle->Instance==USART3)
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	4a59      	ldr	r2, [pc, #356]	@ (8000cec <HAL_UART_MspInit+0x190>)
 8000b88:	4293      	cmp	r3, r2
 8000b8a:	f040 80aa 	bne.w	8000ce2 <HAL_UART_MspInit+0x186>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000b8e:	f04f 0202 	mov.w	r2, #2
 8000b92:	f04f 0300 	mov.w	r3, #0
 8000b96:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ba0:	f107 0310 	add.w	r3, r7, #16
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	f003 ff4d 	bl	8004a44 <HAL_RCCEx_PeriphCLKConfig>
 8000baa:	4603      	mov	r3, r0
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d001      	beq.n	8000bb4 <HAL_UART_MspInit+0x58>
    {
      Error_Handler();
 8000bb0:	f7ff fe62 	bl	8000878 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000bb4:	4b4e      	ldr	r3, [pc, #312]	@ (8000cf0 <HAL_UART_MspInit+0x194>)
 8000bb6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000bba:	4a4d      	ldr	r2, [pc, #308]	@ (8000cf0 <HAL_UART_MspInit+0x194>)
 8000bbc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000bc0:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000bc4:	4b4a      	ldr	r3, [pc, #296]	@ (8000cf0 <HAL_UART_MspInit+0x194>)
 8000bc6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000bca:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000bce:	60fb      	str	r3, [r7, #12]
 8000bd0:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bd2:	4b47      	ldr	r3, [pc, #284]	@ (8000cf0 <HAL_UART_MspInit+0x194>)
 8000bd4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bd8:	4a45      	ldr	r2, [pc, #276]	@ (8000cf0 <HAL_UART_MspInit+0x194>)
 8000bda:	f043 0308 	orr.w	r3, r3, #8
 8000bde:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000be2:	4b43      	ldr	r3, [pc, #268]	@ (8000cf0 <HAL_UART_MspInit+0x194>)
 8000be4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000be8:	f003 0308 	and.w	r3, r3, #8
 8000bec:	60bb      	str	r3, [r7, #8]
 8000bee:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000bf0:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000bf4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bf8:	2302      	movs	r3, #2
 8000bfa:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c04:	2300      	movs	r3, #0
 8000c06:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000c0a:	2307      	movs	r3, #7
 8000c0c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c10:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000c14:	4619      	mov	r1, r3
 8000c16:	4837      	ldr	r0, [pc, #220]	@ (8000cf4 <HAL_UART_MspInit+0x198>)
 8000c18:	f002 fd12 	bl	8003640 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream0;
 8000c1c:	4b36      	ldr	r3, [pc, #216]	@ (8000cf8 <HAL_UART_MspInit+0x19c>)
 8000c1e:	4a37      	ldr	r2, [pc, #220]	@ (8000cfc <HAL_UART_MspInit+0x1a0>)
 8000c20:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8000c22:	4b35      	ldr	r3, [pc, #212]	@ (8000cf8 <HAL_UART_MspInit+0x19c>)
 8000c24:	222d      	movs	r2, #45	@ 0x2d
 8000c26:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000c28:	4b33      	ldr	r3, [pc, #204]	@ (8000cf8 <HAL_UART_MspInit+0x19c>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c2e:	4b32      	ldr	r3, [pc, #200]	@ (8000cf8 <HAL_UART_MspInit+0x19c>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000c34:	4b30      	ldr	r3, [pc, #192]	@ (8000cf8 <HAL_UART_MspInit+0x19c>)
 8000c36:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000c3a:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000c3c:	4b2e      	ldr	r3, [pc, #184]	@ (8000cf8 <HAL_UART_MspInit+0x19c>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000c42:	4b2d      	ldr	r3, [pc, #180]	@ (8000cf8 <HAL_UART_MspInit+0x19c>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8000c48:	4b2b      	ldr	r3, [pc, #172]	@ (8000cf8 <HAL_UART_MspInit+0x19c>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000c4e:	4b2a      	ldr	r3, [pc, #168]	@ (8000cf8 <HAL_UART_MspInit+0x19c>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000c54:	4b28      	ldr	r3, [pc, #160]	@ (8000cf8 <HAL_UART_MspInit+0x19c>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8000c5a:	4827      	ldr	r0, [pc, #156]	@ (8000cf8 <HAL_UART_MspInit+0x19c>)
 8000c5c:	f000 faca 	bl	80011f4 <HAL_DMA_Init>
 8000c60:	4603      	mov	r3, r0
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d001      	beq.n	8000c6a <HAL_UART_MspInit+0x10e>
    {
      Error_Handler();
 8000c66:	f7ff fe07 	bl	8000878 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	4a22      	ldr	r2, [pc, #136]	@ (8000cf8 <HAL_UART_MspInit+0x19c>)
 8000c6e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8000c72:	4a21      	ldr	r2, [pc, #132]	@ (8000cf8 <HAL_UART_MspInit+0x19c>)
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream1;
 8000c78:	4b21      	ldr	r3, [pc, #132]	@ (8000d00 <HAL_UART_MspInit+0x1a4>)
 8000c7a:	4a22      	ldr	r2, [pc, #136]	@ (8000d04 <HAL_UART_MspInit+0x1a8>)
 8000c7c:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 8000c7e:	4b20      	ldr	r3, [pc, #128]	@ (8000d00 <HAL_UART_MspInit+0x1a4>)
 8000c80:	222e      	movs	r2, #46	@ 0x2e
 8000c82:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000c84:	4b1e      	ldr	r3, [pc, #120]	@ (8000d00 <HAL_UART_MspInit+0x1a4>)
 8000c86:	2240      	movs	r2, #64	@ 0x40
 8000c88:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c8a:	4b1d      	ldr	r3, [pc, #116]	@ (8000d00 <HAL_UART_MspInit+0x1a4>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000c90:	4b1b      	ldr	r3, [pc, #108]	@ (8000d00 <HAL_UART_MspInit+0x1a4>)
 8000c92:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000c96:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000c98:	4b19      	ldr	r3, [pc, #100]	@ (8000d00 <HAL_UART_MspInit+0x1a4>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000c9e:	4b18      	ldr	r3, [pc, #96]	@ (8000d00 <HAL_UART_MspInit+0x1a4>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8000ca4:	4b16      	ldr	r3, [pc, #88]	@ (8000d00 <HAL_UART_MspInit+0x1a4>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000caa:	4b15      	ldr	r3, [pc, #84]	@ (8000d00 <HAL_UART_MspInit+0x1a4>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000cb0:	4b13      	ldr	r3, [pc, #76]	@ (8000d00 <HAL_UART_MspInit+0x1a4>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8000cb6:	4812      	ldr	r0, [pc, #72]	@ (8000d00 <HAL_UART_MspInit+0x1a4>)
 8000cb8:	f000 fa9c 	bl	80011f4 <HAL_DMA_Init>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d001      	beq.n	8000cc6 <HAL_UART_MspInit+0x16a>
    {
      Error_Handler();
 8000cc2:	f7ff fdd9 	bl	8000878 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	4a0d      	ldr	r2, [pc, #52]	@ (8000d00 <HAL_UART_MspInit+0x1a4>)
 8000cca:	67da      	str	r2, [r3, #124]	@ 0x7c
 8000ccc:	4a0c      	ldr	r2, [pc, #48]	@ (8000d00 <HAL_UART_MspInit+0x1a4>)
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	2100      	movs	r1, #0
 8000cd6:	2027      	movs	r0, #39	@ 0x27
 8000cd8:	f000 f9df 	bl	800109a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000cdc:	2027      	movs	r0, #39	@ 0x27
 8000cde:	f000 f9f6 	bl	80010ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000ce2:	bf00      	nop
 8000ce4:	37e8      	adds	r7, #232	@ 0xe8
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	bf00      	nop
 8000cec:	40004800 	.word	0x40004800
 8000cf0:	58024400 	.word	0x58024400
 8000cf4:	58020c00 	.word	0x58020c00
 8000cf8:	240000c4 	.word	0x240000c4
 8000cfc:	40020010 	.word	0x40020010
 8000d00:	2400013c 	.word	0x2400013c
 8000d04:	40020028 	.word	0x40020028

08000d08 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000d08:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8000d44 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8000d0c:	f7ff fec2 	bl	8000a94 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000d10:	f7ff fe20 	bl	8000954 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d14:	480c      	ldr	r0, [pc, #48]	@ (8000d48 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000d16:	490d      	ldr	r1, [pc, #52]	@ (8000d4c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000d18:	4a0d      	ldr	r2, [pc, #52]	@ (8000d50 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000d1a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d1c:	e002      	b.n	8000d24 <LoopCopyDataInit>

08000d1e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d1e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d20:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d22:	3304      	adds	r3, #4

08000d24 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d24:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d26:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d28:	d3f9      	bcc.n	8000d1e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d2a:	4a0a      	ldr	r2, [pc, #40]	@ (8000d54 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000d2c:	4c0a      	ldr	r4, [pc, #40]	@ (8000d58 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000d2e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d30:	e001      	b.n	8000d36 <LoopFillZerobss>

08000d32 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d32:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d34:	3204      	adds	r2, #4

08000d36 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d36:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d38:	d3fb      	bcc.n	8000d32 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d3a:	f007 fa71 	bl	8008220 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d3e:	f7ff fccf 	bl	80006e0 <main>
  bx  lr
 8000d42:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000d44:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000d48:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000d4c:	24000014 	.word	0x24000014
  ldr r2, =_sidata
 8000d50:	080082e0 	.word	0x080082e0
  ldr r2, =_sbss
 8000d54:	24000014 	.word	0x24000014
  ldr r4, =_ebss
 8000d58:	240001b8 	.word	0x240001b8

08000d5c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d5c:	e7fe      	b.n	8000d5c <ADC3_IRQHandler>
	...

08000d60 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b082      	sub	sp, #8
 8000d64:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d66:	2003      	movs	r0, #3
 8000d68:	f000 f98c 	bl	8001084 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000d6c:	f003 fc94 	bl	8004698 <HAL_RCC_GetSysClockFreq>
 8000d70:	4602      	mov	r2, r0
 8000d72:	4b15      	ldr	r3, [pc, #84]	@ (8000dc8 <HAL_Init+0x68>)
 8000d74:	699b      	ldr	r3, [r3, #24]
 8000d76:	0a1b      	lsrs	r3, r3, #8
 8000d78:	f003 030f 	and.w	r3, r3, #15
 8000d7c:	4913      	ldr	r1, [pc, #76]	@ (8000dcc <HAL_Init+0x6c>)
 8000d7e:	5ccb      	ldrb	r3, [r1, r3]
 8000d80:	f003 031f 	and.w	r3, r3, #31
 8000d84:	fa22 f303 	lsr.w	r3, r2, r3
 8000d88:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000d8a:	4b0f      	ldr	r3, [pc, #60]	@ (8000dc8 <HAL_Init+0x68>)
 8000d8c:	699b      	ldr	r3, [r3, #24]
 8000d8e:	f003 030f 	and.w	r3, r3, #15
 8000d92:	4a0e      	ldr	r2, [pc, #56]	@ (8000dcc <HAL_Init+0x6c>)
 8000d94:	5cd3      	ldrb	r3, [r2, r3]
 8000d96:	f003 031f 	and.w	r3, r3, #31
 8000d9a:	687a      	ldr	r2, [r7, #4]
 8000d9c:	fa22 f303 	lsr.w	r3, r2, r3
 8000da0:	4a0b      	ldr	r2, [pc, #44]	@ (8000dd0 <HAL_Init+0x70>)
 8000da2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000da4:	4a0b      	ldr	r2, [pc, #44]	@ (8000dd4 <HAL_Init+0x74>)
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000daa:	200f      	movs	r0, #15
 8000dac:	f000 f814 	bl	8000dd8 <HAL_InitTick>
 8000db0:	4603      	mov	r3, r0
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d001      	beq.n	8000dba <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000db6:	2301      	movs	r3, #1
 8000db8:	e002      	b.n	8000dc0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000dba:	f7ff fd63 	bl	8000884 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000dbe:	2300      	movs	r3, #0
}
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	3708      	adds	r7, #8
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	bd80      	pop	{r7, pc}
 8000dc8:	58024400 	.word	0x58024400
 8000dcc:	08008290 	.word	0x08008290
 8000dd0:	24000008 	.word	0x24000008
 8000dd4:	24000004 	.word	0x24000004

08000dd8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b082      	sub	sp, #8
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000de0:	4b15      	ldr	r3, [pc, #84]	@ (8000e38 <HAL_InitTick+0x60>)
 8000de2:	781b      	ldrb	r3, [r3, #0]
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d101      	bne.n	8000dec <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000de8:	2301      	movs	r3, #1
 8000dea:	e021      	b.n	8000e30 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000dec:	4b13      	ldr	r3, [pc, #76]	@ (8000e3c <HAL_InitTick+0x64>)
 8000dee:	681a      	ldr	r2, [r3, #0]
 8000df0:	4b11      	ldr	r3, [pc, #68]	@ (8000e38 <HAL_InitTick+0x60>)
 8000df2:	781b      	ldrb	r3, [r3, #0]
 8000df4:	4619      	mov	r1, r3
 8000df6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000dfa:	fbb3 f3f1 	udiv	r3, r3, r1
 8000dfe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e02:	4618      	mov	r0, r3
 8000e04:	f000 f971 	bl	80010ea <HAL_SYSTICK_Config>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d001      	beq.n	8000e12 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000e0e:	2301      	movs	r3, #1
 8000e10:	e00e      	b.n	8000e30 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	2b0f      	cmp	r3, #15
 8000e16:	d80a      	bhi.n	8000e2e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e18:	2200      	movs	r2, #0
 8000e1a:	6879      	ldr	r1, [r7, #4]
 8000e1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000e20:	f000 f93b 	bl	800109a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e24:	4a06      	ldr	r2, [pc, #24]	@ (8000e40 <HAL_InitTick+0x68>)
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	e000      	b.n	8000e30 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000e2e:	2301      	movs	r3, #1
}
 8000e30:	4618      	mov	r0, r3
 8000e32:	3708      	adds	r7, #8
 8000e34:	46bd      	mov	sp, r7
 8000e36:	bd80      	pop	{r7, pc}
 8000e38:	24000010 	.word	0x24000010
 8000e3c:	24000004 	.word	0x24000004
 8000e40:	2400000c 	.word	0x2400000c

08000e44 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e44:	b480      	push	{r7}
 8000e46:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000e48:	4b06      	ldr	r3, [pc, #24]	@ (8000e64 <HAL_IncTick+0x20>)
 8000e4a:	781b      	ldrb	r3, [r3, #0]
 8000e4c:	461a      	mov	r2, r3
 8000e4e:	4b06      	ldr	r3, [pc, #24]	@ (8000e68 <HAL_IncTick+0x24>)
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	4413      	add	r3, r2
 8000e54:	4a04      	ldr	r2, [pc, #16]	@ (8000e68 <HAL_IncTick+0x24>)
 8000e56:	6013      	str	r3, [r2, #0]
}
 8000e58:	bf00      	nop
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e60:	4770      	bx	lr
 8000e62:	bf00      	nop
 8000e64:	24000010 	.word	0x24000010
 8000e68:	240001b4 	.word	0x240001b4

08000e6c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	af00      	add	r7, sp, #0
  return uwTick;
 8000e70:	4b03      	ldr	r3, [pc, #12]	@ (8000e80 <HAL_GetTick+0x14>)
 8000e72:	681b      	ldr	r3, [r3, #0]
}
 8000e74:	4618      	mov	r0, r3
 8000e76:	46bd      	mov	sp, r7
 8000e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7c:	4770      	bx	lr
 8000e7e:	bf00      	nop
 8000e80:	240001b4 	.word	0x240001b4

08000e84 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b084      	sub	sp, #16
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e8c:	f7ff ffee 	bl	8000e6c <HAL_GetTick>
 8000e90:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e96:	68fb      	ldr	r3, [r7, #12]
 8000e98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e9c:	d005      	beq.n	8000eaa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e9e:	4b0a      	ldr	r3, [pc, #40]	@ (8000ec8 <HAL_Delay+0x44>)
 8000ea0:	781b      	ldrb	r3, [r3, #0]
 8000ea2:	461a      	mov	r2, r3
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	4413      	add	r3, r2
 8000ea8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000eaa:	bf00      	nop
 8000eac:	f7ff ffde 	bl	8000e6c <HAL_GetTick>
 8000eb0:	4602      	mov	r2, r0
 8000eb2:	68bb      	ldr	r3, [r7, #8]
 8000eb4:	1ad3      	subs	r3, r2, r3
 8000eb6:	68fa      	ldr	r2, [r7, #12]
 8000eb8:	429a      	cmp	r2, r3
 8000eba:	d8f7      	bhi.n	8000eac <HAL_Delay+0x28>
  {
  }
}
 8000ebc:	bf00      	nop
 8000ebe:	bf00      	nop
 8000ec0:	3710      	adds	r7, #16
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	24000010 	.word	0x24000010

08000ecc <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000ed0:	4b03      	ldr	r3, [pc, #12]	@ (8000ee0 <HAL_GetREVID+0x14>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	0c1b      	lsrs	r3, r3, #16
}
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ede:	4770      	bx	lr
 8000ee0:	5c001000 	.word	0x5c001000

08000ee4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	b085      	sub	sp, #20
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	f003 0307 	and.w	r3, r3, #7
 8000ef2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ef4:	4b0b      	ldr	r3, [pc, #44]	@ (8000f24 <__NVIC_SetPriorityGrouping+0x40>)
 8000ef6:	68db      	ldr	r3, [r3, #12]
 8000ef8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000efa:	68ba      	ldr	r2, [r7, #8]
 8000efc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000f00:	4013      	ands	r3, r2
 8000f02:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f08:	68bb      	ldr	r3, [r7, #8]
 8000f0a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000f0c:	4b06      	ldr	r3, [pc, #24]	@ (8000f28 <__NVIC_SetPriorityGrouping+0x44>)
 8000f0e:	4313      	orrs	r3, r2
 8000f10:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f12:	4a04      	ldr	r2, [pc, #16]	@ (8000f24 <__NVIC_SetPriorityGrouping+0x40>)
 8000f14:	68bb      	ldr	r3, [r7, #8]
 8000f16:	60d3      	str	r3, [r2, #12]
}
 8000f18:	bf00      	nop
 8000f1a:	3714      	adds	r7, #20
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f22:	4770      	bx	lr
 8000f24:	e000ed00 	.word	0xe000ed00
 8000f28:	05fa0000 	.word	0x05fa0000

08000f2c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f30:	4b04      	ldr	r3, [pc, #16]	@ (8000f44 <__NVIC_GetPriorityGrouping+0x18>)
 8000f32:	68db      	ldr	r3, [r3, #12]
 8000f34:	0a1b      	lsrs	r3, r3, #8
 8000f36:	f003 0307 	and.w	r3, r3, #7
}
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f42:	4770      	bx	lr
 8000f44:	e000ed00 	.word	0xe000ed00

08000f48 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	b083      	sub	sp, #12
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	4603      	mov	r3, r0
 8000f50:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000f52:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	db0b      	blt.n	8000f72 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f5a:	88fb      	ldrh	r3, [r7, #6]
 8000f5c:	f003 021f 	and.w	r2, r3, #31
 8000f60:	4907      	ldr	r1, [pc, #28]	@ (8000f80 <__NVIC_EnableIRQ+0x38>)
 8000f62:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f66:	095b      	lsrs	r3, r3, #5
 8000f68:	2001      	movs	r0, #1
 8000f6a:	fa00 f202 	lsl.w	r2, r0, r2
 8000f6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000f72:	bf00      	nop
 8000f74:	370c      	adds	r7, #12
 8000f76:	46bd      	mov	sp, r7
 8000f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7c:	4770      	bx	lr
 8000f7e:	bf00      	nop
 8000f80:	e000e100 	.word	0xe000e100

08000f84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f84:	b480      	push	{r7}
 8000f86:	b083      	sub	sp, #12
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	6039      	str	r1, [r7, #0]
 8000f8e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000f90:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	db0a      	blt.n	8000fae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f98:	683b      	ldr	r3, [r7, #0]
 8000f9a:	b2da      	uxtb	r2, r3
 8000f9c:	490c      	ldr	r1, [pc, #48]	@ (8000fd0 <__NVIC_SetPriority+0x4c>)
 8000f9e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000fa2:	0112      	lsls	r2, r2, #4
 8000fa4:	b2d2      	uxtb	r2, r2
 8000fa6:	440b      	add	r3, r1
 8000fa8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fac:	e00a      	b.n	8000fc4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fae:	683b      	ldr	r3, [r7, #0]
 8000fb0:	b2da      	uxtb	r2, r3
 8000fb2:	4908      	ldr	r1, [pc, #32]	@ (8000fd4 <__NVIC_SetPriority+0x50>)
 8000fb4:	88fb      	ldrh	r3, [r7, #6]
 8000fb6:	f003 030f 	and.w	r3, r3, #15
 8000fba:	3b04      	subs	r3, #4
 8000fbc:	0112      	lsls	r2, r2, #4
 8000fbe:	b2d2      	uxtb	r2, r2
 8000fc0:	440b      	add	r3, r1
 8000fc2:	761a      	strb	r2, [r3, #24]
}
 8000fc4:	bf00      	nop
 8000fc6:	370c      	adds	r7, #12
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fce:	4770      	bx	lr
 8000fd0:	e000e100 	.word	0xe000e100
 8000fd4:	e000ed00 	.word	0xe000ed00

08000fd8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	b089      	sub	sp, #36	@ 0x24
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	60f8      	str	r0, [r7, #12]
 8000fe0:	60b9      	str	r1, [r7, #8]
 8000fe2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	f003 0307 	and.w	r3, r3, #7
 8000fea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fec:	69fb      	ldr	r3, [r7, #28]
 8000fee:	f1c3 0307 	rsb	r3, r3, #7
 8000ff2:	2b04      	cmp	r3, #4
 8000ff4:	bf28      	it	cs
 8000ff6:	2304      	movcs	r3, #4
 8000ff8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ffa:	69fb      	ldr	r3, [r7, #28]
 8000ffc:	3304      	adds	r3, #4
 8000ffe:	2b06      	cmp	r3, #6
 8001000:	d902      	bls.n	8001008 <NVIC_EncodePriority+0x30>
 8001002:	69fb      	ldr	r3, [r7, #28]
 8001004:	3b03      	subs	r3, #3
 8001006:	e000      	b.n	800100a <NVIC_EncodePriority+0x32>
 8001008:	2300      	movs	r3, #0
 800100a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800100c:	f04f 32ff 	mov.w	r2, #4294967295
 8001010:	69bb      	ldr	r3, [r7, #24]
 8001012:	fa02 f303 	lsl.w	r3, r2, r3
 8001016:	43da      	mvns	r2, r3
 8001018:	68bb      	ldr	r3, [r7, #8]
 800101a:	401a      	ands	r2, r3
 800101c:	697b      	ldr	r3, [r7, #20]
 800101e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001020:	f04f 31ff 	mov.w	r1, #4294967295
 8001024:	697b      	ldr	r3, [r7, #20]
 8001026:	fa01 f303 	lsl.w	r3, r1, r3
 800102a:	43d9      	mvns	r1, r3
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001030:	4313      	orrs	r3, r2
         );
}
 8001032:	4618      	mov	r0, r3
 8001034:	3724      	adds	r7, #36	@ 0x24
 8001036:	46bd      	mov	sp, r7
 8001038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103c:	4770      	bx	lr
	...

08001040 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b082      	sub	sp, #8
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	3b01      	subs	r3, #1
 800104c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001050:	d301      	bcc.n	8001056 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001052:	2301      	movs	r3, #1
 8001054:	e00f      	b.n	8001076 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001056:	4a0a      	ldr	r2, [pc, #40]	@ (8001080 <SysTick_Config+0x40>)
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	3b01      	subs	r3, #1
 800105c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800105e:	210f      	movs	r1, #15
 8001060:	f04f 30ff 	mov.w	r0, #4294967295
 8001064:	f7ff ff8e 	bl	8000f84 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001068:	4b05      	ldr	r3, [pc, #20]	@ (8001080 <SysTick_Config+0x40>)
 800106a:	2200      	movs	r2, #0
 800106c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800106e:	4b04      	ldr	r3, [pc, #16]	@ (8001080 <SysTick_Config+0x40>)
 8001070:	2207      	movs	r2, #7
 8001072:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001074:	2300      	movs	r3, #0
}
 8001076:	4618      	mov	r0, r3
 8001078:	3708      	adds	r7, #8
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	e000e010 	.word	0xe000e010

08001084 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b082      	sub	sp, #8
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800108c:	6878      	ldr	r0, [r7, #4]
 800108e:	f7ff ff29 	bl	8000ee4 <__NVIC_SetPriorityGrouping>
}
 8001092:	bf00      	nop
 8001094:	3708      	adds	r7, #8
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}

0800109a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800109a:	b580      	push	{r7, lr}
 800109c:	b086      	sub	sp, #24
 800109e:	af00      	add	r7, sp, #0
 80010a0:	4603      	mov	r3, r0
 80010a2:	60b9      	str	r1, [r7, #8]
 80010a4:	607a      	str	r2, [r7, #4]
 80010a6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80010a8:	f7ff ff40 	bl	8000f2c <__NVIC_GetPriorityGrouping>
 80010ac:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010ae:	687a      	ldr	r2, [r7, #4]
 80010b0:	68b9      	ldr	r1, [r7, #8]
 80010b2:	6978      	ldr	r0, [r7, #20]
 80010b4:	f7ff ff90 	bl	8000fd8 <NVIC_EncodePriority>
 80010b8:	4602      	mov	r2, r0
 80010ba:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80010be:	4611      	mov	r1, r2
 80010c0:	4618      	mov	r0, r3
 80010c2:	f7ff ff5f 	bl	8000f84 <__NVIC_SetPriority>
}
 80010c6:	bf00      	nop
 80010c8:	3718      	adds	r7, #24
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}

080010ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010ce:	b580      	push	{r7, lr}
 80010d0:	b082      	sub	sp, #8
 80010d2:	af00      	add	r7, sp, #0
 80010d4:	4603      	mov	r3, r0
 80010d6:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010d8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80010dc:	4618      	mov	r0, r3
 80010de:	f7ff ff33 	bl	8000f48 <__NVIC_EnableIRQ>
}
 80010e2:	bf00      	nop
 80010e4:	3708      	adds	r7, #8
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}

080010ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010ea:	b580      	push	{r7, lr}
 80010ec:	b082      	sub	sp, #8
 80010ee:	af00      	add	r7, sp, #0
 80010f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010f2:	6878      	ldr	r0, [r7, #4]
 80010f4:	f7ff ffa4 	bl	8001040 <SysTick_Config>
 80010f8:	4603      	mov	r3, r0
}
 80010fa:	4618      	mov	r0, r3
 80010fc:	3708      	adds	r7, #8
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}
	...

08001104 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001104:	b480      	push	{r7}
 8001106:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001108:	f3bf 8f5f 	dmb	sy
}
 800110c:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800110e:	4b07      	ldr	r3, [pc, #28]	@ (800112c <HAL_MPU_Disable+0x28>)
 8001110:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001112:	4a06      	ldr	r2, [pc, #24]	@ (800112c <HAL_MPU_Disable+0x28>)
 8001114:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001118:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800111a:	4b05      	ldr	r3, [pc, #20]	@ (8001130 <HAL_MPU_Disable+0x2c>)
 800111c:	2200      	movs	r2, #0
 800111e:	605a      	str	r2, [r3, #4]
}
 8001120:	bf00      	nop
 8001122:	46bd      	mov	sp, r7
 8001124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001128:	4770      	bx	lr
 800112a:	bf00      	nop
 800112c:	e000ed00 	.word	0xe000ed00
 8001130:	e000ed90 	.word	0xe000ed90

08001134 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001134:	b480      	push	{r7}
 8001136:	b083      	sub	sp, #12
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 800113c:	4a0b      	ldr	r2, [pc, #44]	@ (800116c <HAL_MPU_Enable+0x38>)
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	f043 0301 	orr.w	r3, r3, #1
 8001144:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001146:	4b0a      	ldr	r3, [pc, #40]	@ (8001170 <HAL_MPU_Enable+0x3c>)
 8001148:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800114a:	4a09      	ldr	r2, [pc, #36]	@ (8001170 <HAL_MPU_Enable+0x3c>)
 800114c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001150:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8001152:	f3bf 8f4f 	dsb	sy
}
 8001156:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001158:	f3bf 8f6f 	isb	sy
}
 800115c:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800115e:	bf00      	nop
 8001160:	370c      	adds	r7, #12
 8001162:	46bd      	mov	sp, r7
 8001164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001168:	4770      	bx	lr
 800116a:	bf00      	nop
 800116c:	e000ed90 	.word	0xe000ed90
 8001170:	e000ed00 	.word	0xe000ed00

08001174 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 8001174:	b480      	push	{r7}
 8001176:	b083      	sub	sp, #12
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	785a      	ldrb	r2, [r3, #1]
 8001180:	4b1b      	ldr	r3, [pc, #108]	@ (80011f0 <HAL_MPU_ConfigRegion+0x7c>)
 8001182:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8001184:	4b1a      	ldr	r3, [pc, #104]	@ (80011f0 <HAL_MPU_ConfigRegion+0x7c>)
 8001186:	691b      	ldr	r3, [r3, #16]
 8001188:	4a19      	ldr	r2, [pc, #100]	@ (80011f0 <HAL_MPU_ConfigRegion+0x7c>)
 800118a:	f023 0301 	bic.w	r3, r3, #1
 800118e:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8001190:	4a17      	ldr	r2, [pc, #92]	@ (80011f0 <HAL_MPU_ConfigRegion+0x7c>)
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	685b      	ldr	r3, [r3, #4]
 8001196:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	7b1b      	ldrb	r3, [r3, #12]
 800119c:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	7adb      	ldrb	r3, [r3, #11]
 80011a2:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80011a4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	7a9b      	ldrb	r3, [r3, #10]
 80011aa:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80011ac:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	7b5b      	ldrb	r3, [r3, #13]
 80011b2:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80011b4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	7b9b      	ldrb	r3, [r3, #14]
 80011ba:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80011bc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	7bdb      	ldrb	r3, [r3, #15]
 80011c2:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80011c4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	7a5b      	ldrb	r3, [r3, #9]
 80011ca:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80011cc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	7a1b      	ldrb	r3, [r3, #8]
 80011d2:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80011d4:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80011d6:	687a      	ldr	r2, [r7, #4]
 80011d8:	7812      	ldrb	r2, [r2, #0]
 80011da:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80011dc:	4a04      	ldr	r2, [pc, #16]	@ (80011f0 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80011de:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80011e0:	6113      	str	r3, [r2, #16]
}
 80011e2:	bf00      	nop
 80011e4:	370c      	adds	r7, #12
 80011e6:	46bd      	mov	sp, r7
 80011e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ec:	4770      	bx	lr
 80011ee:	bf00      	nop
 80011f0:	e000ed90 	.word	0xe000ed90

080011f4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b086      	sub	sp, #24
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80011fc:	f7ff fe36 	bl	8000e6c <HAL_GetTick>
 8001200:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	2b00      	cmp	r3, #0
 8001206:	d101      	bne.n	800120c <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8001208:	2301      	movs	r3, #1
 800120a:	e316      	b.n	800183a <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	4a66      	ldr	r2, [pc, #408]	@ (80013ac <HAL_DMA_Init+0x1b8>)
 8001212:	4293      	cmp	r3, r2
 8001214:	d04a      	beq.n	80012ac <HAL_DMA_Init+0xb8>
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	4a65      	ldr	r2, [pc, #404]	@ (80013b0 <HAL_DMA_Init+0x1bc>)
 800121c:	4293      	cmp	r3, r2
 800121e:	d045      	beq.n	80012ac <HAL_DMA_Init+0xb8>
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	4a63      	ldr	r2, [pc, #396]	@ (80013b4 <HAL_DMA_Init+0x1c0>)
 8001226:	4293      	cmp	r3, r2
 8001228:	d040      	beq.n	80012ac <HAL_DMA_Init+0xb8>
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	4a62      	ldr	r2, [pc, #392]	@ (80013b8 <HAL_DMA_Init+0x1c4>)
 8001230:	4293      	cmp	r3, r2
 8001232:	d03b      	beq.n	80012ac <HAL_DMA_Init+0xb8>
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	4a60      	ldr	r2, [pc, #384]	@ (80013bc <HAL_DMA_Init+0x1c8>)
 800123a:	4293      	cmp	r3, r2
 800123c:	d036      	beq.n	80012ac <HAL_DMA_Init+0xb8>
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	4a5f      	ldr	r2, [pc, #380]	@ (80013c0 <HAL_DMA_Init+0x1cc>)
 8001244:	4293      	cmp	r3, r2
 8001246:	d031      	beq.n	80012ac <HAL_DMA_Init+0xb8>
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	4a5d      	ldr	r2, [pc, #372]	@ (80013c4 <HAL_DMA_Init+0x1d0>)
 800124e:	4293      	cmp	r3, r2
 8001250:	d02c      	beq.n	80012ac <HAL_DMA_Init+0xb8>
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	4a5c      	ldr	r2, [pc, #368]	@ (80013c8 <HAL_DMA_Init+0x1d4>)
 8001258:	4293      	cmp	r3, r2
 800125a:	d027      	beq.n	80012ac <HAL_DMA_Init+0xb8>
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	4a5a      	ldr	r2, [pc, #360]	@ (80013cc <HAL_DMA_Init+0x1d8>)
 8001262:	4293      	cmp	r3, r2
 8001264:	d022      	beq.n	80012ac <HAL_DMA_Init+0xb8>
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	4a59      	ldr	r2, [pc, #356]	@ (80013d0 <HAL_DMA_Init+0x1dc>)
 800126c:	4293      	cmp	r3, r2
 800126e:	d01d      	beq.n	80012ac <HAL_DMA_Init+0xb8>
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	4a57      	ldr	r2, [pc, #348]	@ (80013d4 <HAL_DMA_Init+0x1e0>)
 8001276:	4293      	cmp	r3, r2
 8001278:	d018      	beq.n	80012ac <HAL_DMA_Init+0xb8>
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	4a56      	ldr	r2, [pc, #344]	@ (80013d8 <HAL_DMA_Init+0x1e4>)
 8001280:	4293      	cmp	r3, r2
 8001282:	d013      	beq.n	80012ac <HAL_DMA_Init+0xb8>
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	4a54      	ldr	r2, [pc, #336]	@ (80013dc <HAL_DMA_Init+0x1e8>)
 800128a:	4293      	cmp	r3, r2
 800128c:	d00e      	beq.n	80012ac <HAL_DMA_Init+0xb8>
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	4a53      	ldr	r2, [pc, #332]	@ (80013e0 <HAL_DMA_Init+0x1ec>)
 8001294:	4293      	cmp	r3, r2
 8001296:	d009      	beq.n	80012ac <HAL_DMA_Init+0xb8>
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	4a51      	ldr	r2, [pc, #324]	@ (80013e4 <HAL_DMA_Init+0x1f0>)
 800129e:	4293      	cmp	r3, r2
 80012a0:	d004      	beq.n	80012ac <HAL_DMA_Init+0xb8>
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	4a50      	ldr	r2, [pc, #320]	@ (80013e8 <HAL_DMA_Init+0x1f4>)
 80012a8:	4293      	cmp	r3, r2
 80012aa:	d101      	bne.n	80012b0 <HAL_DMA_Init+0xbc>
 80012ac:	2301      	movs	r3, #1
 80012ae:	e000      	b.n	80012b2 <HAL_DMA_Init+0xbe>
 80012b0:	2300      	movs	r3, #0
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	f000 813b 	beq.w	800152e <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	2202      	movs	r2, #2
 80012bc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	2200      	movs	r2, #0
 80012c4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	4a37      	ldr	r2, [pc, #220]	@ (80013ac <HAL_DMA_Init+0x1b8>)
 80012ce:	4293      	cmp	r3, r2
 80012d0:	d04a      	beq.n	8001368 <HAL_DMA_Init+0x174>
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	4a36      	ldr	r2, [pc, #216]	@ (80013b0 <HAL_DMA_Init+0x1bc>)
 80012d8:	4293      	cmp	r3, r2
 80012da:	d045      	beq.n	8001368 <HAL_DMA_Init+0x174>
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	4a34      	ldr	r2, [pc, #208]	@ (80013b4 <HAL_DMA_Init+0x1c0>)
 80012e2:	4293      	cmp	r3, r2
 80012e4:	d040      	beq.n	8001368 <HAL_DMA_Init+0x174>
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	4a33      	ldr	r2, [pc, #204]	@ (80013b8 <HAL_DMA_Init+0x1c4>)
 80012ec:	4293      	cmp	r3, r2
 80012ee:	d03b      	beq.n	8001368 <HAL_DMA_Init+0x174>
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	4a31      	ldr	r2, [pc, #196]	@ (80013bc <HAL_DMA_Init+0x1c8>)
 80012f6:	4293      	cmp	r3, r2
 80012f8:	d036      	beq.n	8001368 <HAL_DMA_Init+0x174>
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	4a30      	ldr	r2, [pc, #192]	@ (80013c0 <HAL_DMA_Init+0x1cc>)
 8001300:	4293      	cmp	r3, r2
 8001302:	d031      	beq.n	8001368 <HAL_DMA_Init+0x174>
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	4a2e      	ldr	r2, [pc, #184]	@ (80013c4 <HAL_DMA_Init+0x1d0>)
 800130a:	4293      	cmp	r3, r2
 800130c:	d02c      	beq.n	8001368 <HAL_DMA_Init+0x174>
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	4a2d      	ldr	r2, [pc, #180]	@ (80013c8 <HAL_DMA_Init+0x1d4>)
 8001314:	4293      	cmp	r3, r2
 8001316:	d027      	beq.n	8001368 <HAL_DMA_Init+0x174>
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	4a2b      	ldr	r2, [pc, #172]	@ (80013cc <HAL_DMA_Init+0x1d8>)
 800131e:	4293      	cmp	r3, r2
 8001320:	d022      	beq.n	8001368 <HAL_DMA_Init+0x174>
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	4a2a      	ldr	r2, [pc, #168]	@ (80013d0 <HAL_DMA_Init+0x1dc>)
 8001328:	4293      	cmp	r3, r2
 800132a:	d01d      	beq.n	8001368 <HAL_DMA_Init+0x174>
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	4a28      	ldr	r2, [pc, #160]	@ (80013d4 <HAL_DMA_Init+0x1e0>)
 8001332:	4293      	cmp	r3, r2
 8001334:	d018      	beq.n	8001368 <HAL_DMA_Init+0x174>
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	4a27      	ldr	r2, [pc, #156]	@ (80013d8 <HAL_DMA_Init+0x1e4>)
 800133c:	4293      	cmp	r3, r2
 800133e:	d013      	beq.n	8001368 <HAL_DMA_Init+0x174>
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	4a25      	ldr	r2, [pc, #148]	@ (80013dc <HAL_DMA_Init+0x1e8>)
 8001346:	4293      	cmp	r3, r2
 8001348:	d00e      	beq.n	8001368 <HAL_DMA_Init+0x174>
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	4a24      	ldr	r2, [pc, #144]	@ (80013e0 <HAL_DMA_Init+0x1ec>)
 8001350:	4293      	cmp	r3, r2
 8001352:	d009      	beq.n	8001368 <HAL_DMA_Init+0x174>
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	4a22      	ldr	r2, [pc, #136]	@ (80013e4 <HAL_DMA_Init+0x1f0>)
 800135a:	4293      	cmp	r3, r2
 800135c:	d004      	beq.n	8001368 <HAL_DMA_Init+0x174>
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	4a21      	ldr	r2, [pc, #132]	@ (80013e8 <HAL_DMA_Init+0x1f4>)
 8001364:	4293      	cmp	r3, r2
 8001366:	d108      	bne.n	800137a <HAL_DMA_Init+0x186>
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	681a      	ldr	r2, [r3, #0]
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	f022 0201 	bic.w	r2, r2, #1
 8001376:	601a      	str	r2, [r3, #0]
 8001378:	e007      	b.n	800138a <HAL_DMA_Init+0x196>
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	681a      	ldr	r2, [r3, #0]
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	f022 0201 	bic.w	r2, r2, #1
 8001388:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800138a:	e02f      	b.n	80013ec <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800138c:	f7ff fd6e 	bl	8000e6c <HAL_GetTick>
 8001390:	4602      	mov	r2, r0
 8001392:	693b      	ldr	r3, [r7, #16]
 8001394:	1ad3      	subs	r3, r2, r3
 8001396:	2b05      	cmp	r3, #5
 8001398:	d928      	bls.n	80013ec <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	2220      	movs	r2, #32
 800139e:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	2203      	movs	r2, #3
 80013a4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 80013a8:	2301      	movs	r3, #1
 80013aa:	e246      	b.n	800183a <HAL_DMA_Init+0x646>
 80013ac:	40020010 	.word	0x40020010
 80013b0:	40020028 	.word	0x40020028
 80013b4:	40020040 	.word	0x40020040
 80013b8:	40020058 	.word	0x40020058
 80013bc:	40020070 	.word	0x40020070
 80013c0:	40020088 	.word	0x40020088
 80013c4:	400200a0 	.word	0x400200a0
 80013c8:	400200b8 	.word	0x400200b8
 80013cc:	40020410 	.word	0x40020410
 80013d0:	40020428 	.word	0x40020428
 80013d4:	40020440 	.word	0x40020440
 80013d8:	40020458 	.word	0x40020458
 80013dc:	40020470 	.word	0x40020470
 80013e0:	40020488 	.word	0x40020488
 80013e4:	400204a0 	.word	0x400204a0
 80013e8:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	f003 0301 	and.w	r3, r3, #1
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d1c8      	bne.n	800138c <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001402:	697a      	ldr	r2, [r7, #20]
 8001404:	4b83      	ldr	r3, [pc, #524]	@ (8001614 <HAL_DMA_Init+0x420>)
 8001406:	4013      	ands	r3, r2
 8001408:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8001412:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	691b      	ldr	r3, [r3, #16]
 8001418:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800141e:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	699b      	ldr	r3, [r3, #24]
 8001424:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800142a:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	6a1b      	ldr	r3, [r3, #32]
 8001430:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8001432:	697a      	ldr	r2, [r7, #20]
 8001434:	4313      	orrs	r3, r2
 8001436:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800143c:	2b04      	cmp	r3, #4
 800143e:	d107      	bne.n	8001450 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001448:	4313      	orrs	r3, r2
 800144a:	697a      	ldr	r2, [r7, #20]
 800144c:	4313      	orrs	r3, r2
 800144e:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8001450:	4b71      	ldr	r3, [pc, #452]	@ (8001618 <HAL_DMA_Init+0x424>)
 8001452:	681a      	ldr	r2, [r3, #0]
 8001454:	4b71      	ldr	r3, [pc, #452]	@ (800161c <HAL_DMA_Init+0x428>)
 8001456:	4013      	ands	r3, r2
 8001458:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800145c:	d328      	bcc.n	80014b0 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	685b      	ldr	r3, [r3, #4]
 8001462:	2b28      	cmp	r3, #40	@ 0x28
 8001464:	d903      	bls.n	800146e <HAL_DMA_Init+0x27a>
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	685b      	ldr	r3, [r3, #4]
 800146a:	2b2e      	cmp	r3, #46	@ 0x2e
 800146c:	d917      	bls.n	800149e <HAL_DMA_Init+0x2aa>
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	685b      	ldr	r3, [r3, #4]
 8001472:	2b3e      	cmp	r3, #62	@ 0x3e
 8001474:	d903      	bls.n	800147e <HAL_DMA_Init+0x28a>
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	685b      	ldr	r3, [r3, #4]
 800147a:	2b42      	cmp	r3, #66	@ 0x42
 800147c:	d90f      	bls.n	800149e <HAL_DMA_Init+0x2aa>
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	685b      	ldr	r3, [r3, #4]
 8001482:	2b46      	cmp	r3, #70	@ 0x46
 8001484:	d903      	bls.n	800148e <HAL_DMA_Init+0x29a>
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	685b      	ldr	r3, [r3, #4]
 800148a:	2b48      	cmp	r3, #72	@ 0x48
 800148c:	d907      	bls.n	800149e <HAL_DMA_Init+0x2aa>
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	685b      	ldr	r3, [r3, #4]
 8001492:	2b4e      	cmp	r3, #78	@ 0x4e
 8001494:	d905      	bls.n	80014a2 <HAL_DMA_Init+0x2ae>
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	685b      	ldr	r3, [r3, #4]
 800149a:	2b52      	cmp	r3, #82	@ 0x52
 800149c:	d801      	bhi.n	80014a2 <HAL_DMA_Init+0x2ae>
 800149e:	2301      	movs	r3, #1
 80014a0:	e000      	b.n	80014a4 <HAL_DMA_Init+0x2b0>
 80014a2:	2300      	movs	r3, #0
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d003      	beq.n	80014b0 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80014a8:	697b      	ldr	r3, [r7, #20]
 80014aa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80014ae:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	697a      	ldr	r2, [r7, #20]
 80014b6:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	695b      	ldr	r3, [r3, #20]
 80014be:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80014c0:	697b      	ldr	r3, [r7, #20]
 80014c2:	f023 0307 	bic.w	r3, r3, #7
 80014c6:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014cc:	697a      	ldr	r2, [r7, #20]
 80014ce:	4313      	orrs	r3, r2
 80014d0:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014d6:	2b04      	cmp	r3, #4
 80014d8:	d117      	bne.n	800150a <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014de:	697a      	ldr	r2, [r7, #20]
 80014e0:	4313      	orrs	r3, r2
 80014e2:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d00e      	beq.n	800150a <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80014ec:	6878      	ldr	r0, [r7, #4]
 80014ee:	f001 ff1d 	bl	800332c <DMA_CheckFifoParam>
 80014f2:	4603      	mov	r3, r0
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d008      	beq.n	800150a <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	2240      	movs	r2, #64	@ 0x40
 80014fc:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	2201      	movs	r2, #1
 8001502:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8001506:	2301      	movs	r3, #1
 8001508:	e197      	b.n	800183a <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	697a      	ldr	r2, [r7, #20]
 8001510:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001512:	6878      	ldr	r0, [r7, #4]
 8001514:	f001 fe58 	bl	80031c8 <DMA_CalcBaseAndBitshift>
 8001518:	4603      	mov	r3, r0
 800151a:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001520:	f003 031f 	and.w	r3, r3, #31
 8001524:	223f      	movs	r2, #63	@ 0x3f
 8001526:	409a      	lsls	r2, r3
 8001528:	68bb      	ldr	r3, [r7, #8]
 800152a:	609a      	str	r2, [r3, #8]
 800152c:	e0cd      	b.n	80016ca <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	4a3b      	ldr	r2, [pc, #236]	@ (8001620 <HAL_DMA_Init+0x42c>)
 8001534:	4293      	cmp	r3, r2
 8001536:	d022      	beq.n	800157e <HAL_DMA_Init+0x38a>
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	4a39      	ldr	r2, [pc, #228]	@ (8001624 <HAL_DMA_Init+0x430>)
 800153e:	4293      	cmp	r3, r2
 8001540:	d01d      	beq.n	800157e <HAL_DMA_Init+0x38a>
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	4a38      	ldr	r2, [pc, #224]	@ (8001628 <HAL_DMA_Init+0x434>)
 8001548:	4293      	cmp	r3, r2
 800154a:	d018      	beq.n	800157e <HAL_DMA_Init+0x38a>
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	4a36      	ldr	r2, [pc, #216]	@ (800162c <HAL_DMA_Init+0x438>)
 8001552:	4293      	cmp	r3, r2
 8001554:	d013      	beq.n	800157e <HAL_DMA_Init+0x38a>
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	4a35      	ldr	r2, [pc, #212]	@ (8001630 <HAL_DMA_Init+0x43c>)
 800155c:	4293      	cmp	r3, r2
 800155e:	d00e      	beq.n	800157e <HAL_DMA_Init+0x38a>
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	4a33      	ldr	r2, [pc, #204]	@ (8001634 <HAL_DMA_Init+0x440>)
 8001566:	4293      	cmp	r3, r2
 8001568:	d009      	beq.n	800157e <HAL_DMA_Init+0x38a>
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	4a32      	ldr	r2, [pc, #200]	@ (8001638 <HAL_DMA_Init+0x444>)
 8001570:	4293      	cmp	r3, r2
 8001572:	d004      	beq.n	800157e <HAL_DMA_Init+0x38a>
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	4a30      	ldr	r2, [pc, #192]	@ (800163c <HAL_DMA_Init+0x448>)
 800157a:	4293      	cmp	r3, r2
 800157c:	d101      	bne.n	8001582 <HAL_DMA_Init+0x38e>
 800157e:	2301      	movs	r3, #1
 8001580:	e000      	b.n	8001584 <HAL_DMA_Init+0x390>
 8001582:	2300      	movs	r3, #0
 8001584:	2b00      	cmp	r3, #0
 8001586:	f000 8097 	beq.w	80016b8 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	4a24      	ldr	r2, [pc, #144]	@ (8001620 <HAL_DMA_Init+0x42c>)
 8001590:	4293      	cmp	r3, r2
 8001592:	d021      	beq.n	80015d8 <HAL_DMA_Init+0x3e4>
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	4a22      	ldr	r2, [pc, #136]	@ (8001624 <HAL_DMA_Init+0x430>)
 800159a:	4293      	cmp	r3, r2
 800159c:	d01c      	beq.n	80015d8 <HAL_DMA_Init+0x3e4>
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	4a21      	ldr	r2, [pc, #132]	@ (8001628 <HAL_DMA_Init+0x434>)
 80015a4:	4293      	cmp	r3, r2
 80015a6:	d017      	beq.n	80015d8 <HAL_DMA_Init+0x3e4>
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	4a1f      	ldr	r2, [pc, #124]	@ (800162c <HAL_DMA_Init+0x438>)
 80015ae:	4293      	cmp	r3, r2
 80015b0:	d012      	beq.n	80015d8 <HAL_DMA_Init+0x3e4>
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	4a1e      	ldr	r2, [pc, #120]	@ (8001630 <HAL_DMA_Init+0x43c>)
 80015b8:	4293      	cmp	r3, r2
 80015ba:	d00d      	beq.n	80015d8 <HAL_DMA_Init+0x3e4>
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	4a1c      	ldr	r2, [pc, #112]	@ (8001634 <HAL_DMA_Init+0x440>)
 80015c2:	4293      	cmp	r3, r2
 80015c4:	d008      	beq.n	80015d8 <HAL_DMA_Init+0x3e4>
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	4a1b      	ldr	r2, [pc, #108]	@ (8001638 <HAL_DMA_Init+0x444>)
 80015cc:	4293      	cmp	r3, r2
 80015ce:	d003      	beq.n	80015d8 <HAL_DMA_Init+0x3e4>
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	4a19      	ldr	r2, [pc, #100]	@ (800163c <HAL_DMA_Init+0x448>)
 80015d6:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	2202      	movs	r2, #2
 80015dc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	2200      	movs	r2, #0
 80015e4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80015f0:	697a      	ldr	r2, [r7, #20]
 80015f2:	4b13      	ldr	r3, [pc, #76]	@ (8001640 <HAL_DMA_Init+0x44c>)
 80015f4:	4013      	ands	r3, r2
 80015f6:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	689b      	ldr	r3, [r3, #8]
 80015fc:	2b40      	cmp	r3, #64	@ 0x40
 80015fe:	d021      	beq.n	8001644 <HAL_DMA_Init+0x450>
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	689b      	ldr	r3, [r3, #8]
 8001604:	2b80      	cmp	r3, #128	@ 0x80
 8001606:	d102      	bne.n	800160e <HAL_DMA_Init+0x41a>
 8001608:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800160c:	e01b      	b.n	8001646 <HAL_DMA_Init+0x452>
 800160e:	2300      	movs	r3, #0
 8001610:	e019      	b.n	8001646 <HAL_DMA_Init+0x452>
 8001612:	bf00      	nop
 8001614:	fe10803f 	.word	0xfe10803f
 8001618:	5c001000 	.word	0x5c001000
 800161c:	ffff0000 	.word	0xffff0000
 8001620:	58025408 	.word	0x58025408
 8001624:	5802541c 	.word	0x5802541c
 8001628:	58025430 	.word	0x58025430
 800162c:	58025444 	.word	0x58025444
 8001630:	58025458 	.word	0x58025458
 8001634:	5802546c 	.word	0x5802546c
 8001638:	58025480 	.word	0x58025480
 800163c:	58025494 	.word	0x58025494
 8001640:	fffe000f 	.word	0xfffe000f
 8001644:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001646:	687a      	ldr	r2, [r7, #4]
 8001648:	68d2      	ldr	r2, [r2, #12]
 800164a:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800164c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	691b      	ldr	r3, [r3, #16]
 8001652:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001654:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	695b      	ldr	r3, [r3, #20]
 800165a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800165c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	699b      	ldr	r3, [r3, #24]
 8001662:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001664:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	69db      	ldr	r3, [r3, #28]
 800166a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800166c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	6a1b      	ldr	r3, [r3, #32]
 8001672:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001674:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001676:	697a      	ldr	r2, [r7, #20]
 8001678:	4313      	orrs	r3, r2
 800167a:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	697a      	ldr	r2, [r7, #20]
 8001682:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	461a      	mov	r2, r3
 800168a:	4b6e      	ldr	r3, [pc, #440]	@ (8001844 <HAL_DMA_Init+0x650>)
 800168c:	4413      	add	r3, r2
 800168e:	4a6e      	ldr	r2, [pc, #440]	@ (8001848 <HAL_DMA_Init+0x654>)
 8001690:	fba2 2303 	umull	r2, r3, r2, r3
 8001694:	091b      	lsrs	r3, r3, #4
 8001696:	009a      	lsls	r2, r3, #2
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800169c:	6878      	ldr	r0, [r7, #4]
 800169e:	f001 fd93 	bl	80031c8 <DMA_CalcBaseAndBitshift>
 80016a2:	4603      	mov	r3, r0
 80016a4:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80016aa:	f003 031f 	and.w	r3, r3, #31
 80016ae:	2201      	movs	r2, #1
 80016b0:	409a      	lsls	r2, r3
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	605a      	str	r2, [r3, #4]
 80016b6:	e008      	b.n	80016ca <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	2240      	movs	r2, #64	@ 0x40
 80016bc:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	2203      	movs	r2, #3
 80016c2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 80016c6:	2301      	movs	r3, #1
 80016c8:	e0b7      	b.n	800183a <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	4a5f      	ldr	r2, [pc, #380]	@ (800184c <HAL_DMA_Init+0x658>)
 80016d0:	4293      	cmp	r3, r2
 80016d2:	d072      	beq.n	80017ba <HAL_DMA_Init+0x5c6>
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	4a5d      	ldr	r2, [pc, #372]	@ (8001850 <HAL_DMA_Init+0x65c>)
 80016da:	4293      	cmp	r3, r2
 80016dc:	d06d      	beq.n	80017ba <HAL_DMA_Init+0x5c6>
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	4a5c      	ldr	r2, [pc, #368]	@ (8001854 <HAL_DMA_Init+0x660>)
 80016e4:	4293      	cmp	r3, r2
 80016e6:	d068      	beq.n	80017ba <HAL_DMA_Init+0x5c6>
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	4a5a      	ldr	r2, [pc, #360]	@ (8001858 <HAL_DMA_Init+0x664>)
 80016ee:	4293      	cmp	r3, r2
 80016f0:	d063      	beq.n	80017ba <HAL_DMA_Init+0x5c6>
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	4a59      	ldr	r2, [pc, #356]	@ (800185c <HAL_DMA_Init+0x668>)
 80016f8:	4293      	cmp	r3, r2
 80016fa:	d05e      	beq.n	80017ba <HAL_DMA_Init+0x5c6>
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	4a57      	ldr	r2, [pc, #348]	@ (8001860 <HAL_DMA_Init+0x66c>)
 8001702:	4293      	cmp	r3, r2
 8001704:	d059      	beq.n	80017ba <HAL_DMA_Init+0x5c6>
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	4a56      	ldr	r2, [pc, #344]	@ (8001864 <HAL_DMA_Init+0x670>)
 800170c:	4293      	cmp	r3, r2
 800170e:	d054      	beq.n	80017ba <HAL_DMA_Init+0x5c6>
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	4a54      	ldr	r2, [pc, #336]	@ (8001868 <HAL_DMA_Init+0x674>)
 8001716:	4293      	cmp	r3, r2
 8001718:	d04f      	beq.n	80017ba <HAL_DMA_Init+0x5c6>
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	4a53      	ldr	r2, [pc, #332]	@ (800186c <HAL_DMA_Init+0x678>)
 8001720:	4293      	cmp	r3, r2
 8001722:	d04a      	beq.n	80017ba <HAL_DMA_Init+0x5c6>
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	4a51      	ldr	r2, [pc, #324]	@ (8001870 <HAL_DMA_Init+0x67c>)
 800172a:	4293      	cmp	r3, r2
 800172c:	d045      	beq.n	80017ba <HAL_DMA_Init+0x5c6>
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	4a50      	ldr	r2, [pc, #320]	@ (8001874 <HAL_DMA_Init+0x680>)
 8001734:	4293      	cmp	r3, r2
 8001736:	d040      	beq.n	80017ba <HAL_DMA_Init+0x5c6>
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	4a4e      	ldr	r2, [pc, #312]	@ (8001878 <HAL_DMA_Init+0x684>)
 800173e:	4293      	cmp	r3, r2
 8001740:	d03b      	beq.n	80017ba <HAL_DMA_Init+0x5c6>
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	4a4d      	ldr	r2, [pc, #308]	@ (800187c <HAL_DMA_Init+0x688>)
 8001748:	4293      	cmp	r3, r2
 800174a:	d036      	beq.n	80017ba <HAL_DMA_Init+0x5c6>
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	4a4b      	ldr	r2, [pc, #300]	@ (8001880 <HAL_DMA_Init+0x68c>)
 8001752:	4293      	cmp	r3, r2
 8001754:	d031      	beq.n	80017ba <HAL_DMA_Init+0x5c6>
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	4a4a      	ldr	r2, [pc, #296]	@ (8001884 <HAL_DMA_Init+0x690>)
 800175c:	4293      	cmp	r3, r2
 800175e:	d02c      	beq.n	80017ba <HAL_DMA_Init+0x5c6>
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	4a48      	ldr	r2, [pc, #288]	@ (8001888 <HAL_DMA_Init+0x694>)
 8001766:	4293      	cmp	r3, r2
 8001768:	d027      	beq.n	80017ba <HAL_DMA_Init+0x5c6>
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	4a47      	ldr	r2, [pc, #284]	@ (800188c <HAL_DMA_Init+0x698>)
 8001770:	4293      	cmp	r3, r2
 8001772:	d022      	beq.n	80017ba <HAL_DMA_Init+0x5c6>
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	4a45      	ldr	r2, [pc, #276]	@ (8001890 <HAL_DMA_Init+0x69c>)
 800177a:	4293      	cmp	r3, r2
 800177c:	d01d      	beq.n	80017ba <HAL_DMA_Init+0x5c6>
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	4a44      	ldr	r2, [pc, #272]	@ (8001894 <HAL_DMA_Init+0x6a0>)
 8001784:	4293      	cmp	r3, r2
 8001786:	d018      	beq.n	80017ba <HAL_DMA_Init+0x5c6>
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	4a42      	ldr	r2, [pc, #264]	@ (8001898 <HAL_DMA_Init+0x6a4>)
 800178e:	4293      	cmp	r3, r2
 8001790:	d013      	beq.n	80017ba <HAL_DMA_Init+0x5c6>
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	4a41      	ldr	r2, [pc, #260]	@ (800189c <HAL_DMA_Init+0x6a8>)
 8001798:	4293      	cmp	r3, r2
 800179a:	d00e      	beq.n	80017ba <HAL_DMA_Init+0x5c6>
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	4a3f      	ldr	r2, [pc, #252]	@ (80018a0 <HAL_DMA_Init+0x6ac>)
 80017a2:	4293      	cmp	r3, r2
 80017a4:	d009      	beq.n	80017ba <HAL_DMA_Init+0x5c6>
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	4a3e      	ldr	r2, [pc, #248]	@ (80018a4 <HAL_DMA_Init+0x6b0>)
 80017ac:	4293      	cmp	r3, r2
 80017ae:	d004      	beq.n	80017ba <HAL_DMA_Init+0x5c6>
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	4a3c      	ldr	r2, [pc, #240]	@ (80018a8 <HAL_DMA_Init+0x6b4>)
 80017b6:	4293      	cmp	r3, r2
 80017b8:	d101      	bne.n	80017be <HAL_DMA_Init+0x5ca>
 80017ba:	2301      	movs	r3, #1
 80017bc:	e000      	b.n	80017c0 <HAL_DMA_Init+0x5cc>
 80017be:	2300      	movs	r3, #0
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d032      	beq.n	800182a <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80017c4:	6878      	ldr	r0, [r7, #4]
 80017c6:	f001 fe2d 	bl	8003424 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	689b      	ldr	r3, [r3, #8]
 80017ce:	2b80      	cmp	r3, #128	@ 0x80
 80017d0:	d102      	bne.n	80017d8 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	2200      	movs	r2, #0
 80017d6:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	685a      	ldr	r2, [r3, #4]
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80017e0:	b2d2      	uxtb	r2, r2
 80017e2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80017e8:	687a      	ldr	r2, [r7, #4]
 80017ea:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80017ec:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	685b      	ldr	r3, [r3, #4]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d010      	beq.n	8001818 <HAL_DMA_Init+0x624>
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	685b      	ldr	r3, [r3, #4]
 80017fa:	2b08      	cmp	r3, #8
 80017fc:	d80c      	bhi.n	8001818 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80017fe:	6878      	ldr	r0, [r7, #4]
 8001800:	f001 feaa 	bl	8003558 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001808:	2200      	movs	r2, #0
 800180a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001810:	687a      	ldr	r2, [r7, #4]
 8001812:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8001814:	605a      	str	r2, [r3, #4]
 8001816:	e008      	b.n	800182a <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	2200      	movs	r2, #0
 800181c:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	2200      	movs	r2, #0
 8001822:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	2200      	movs	r2, #0
 8001828:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	2200      	movs	r2, #0
 800182e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	2201      	movs	r2, #1
 8001834:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001838:	2300      	movs	r3, #0
}
 800183a:	4618      	mov	r0, r3
 800183c:	3718      	adds	r7, #24
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}
 8001842:	bf00      	nop
 8001844:	a7fdabf8 	.word	0xa7fdabf8
 8001848:	cccccccd 	.word	0xcccccccd
 800184c:	40020010 	.word	0x40020010
 8001850:	40020028 	.word	0x40020028
 8001854:	40020040 	.word	0x40020040
 8001858:	40020058 	.word	0x40020058
 800185c:	40020070 	.word	0x40020070
 8001860:	40020088 	.word	0x40020088
 8001864:	400200a0 	.word	0x400200a0
 8001868:	400200b8 	.word	0x400200b8
 800186c:	40020410 	.word	0x40020410
 8001870:	40020428 	.word	0x40020428
 8001874:	40020440 	.word	0x40020440
 8001878:	40020458 	.word	0x40020458
 800187c:	40020470 	.word	0x40020470
 8001880:	40020488 	.word	0x40020488
 8001884:	400204a0 	.word	0x400204a0
 8001888:	400204b8 	.word	0x400204b8
 800188c:	58025408 	.word	0x58025408
 8001890:	5802541c 	.word	0x5802541c
 8001894:	58025430 	.word	0x58025430
 8001898:	58025444 	.word	0x58025444
 800189c:	58025458 	.word	0x58025458
 80018a0:	5802546c 	.word	0x5802546c
 80018a4:	58025480 	.word	0x58025480
 80018a8:	58025494 	.word	0x58025494

080018ac <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b086      	sub	sp, #24
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80018b4:	f7ff fada 	bl	8000e6c <HAL_GetTick>
 80018b8:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d101      	bne.n	80018c4 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80018c0:	2301      	movs	r3, #1
 80018c2:	e2dc      	b.n	8001e7e <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80018ca:	b2db      	uxtb	r3, r3
 80018cc:	2b02      	cmp	r3, #2
 80018ce:	d008      	beq.n	80018e2 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	2280      	movs	r2, #128	@ 0x80
 80018d4:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	2200      	movs	r2, #0
 80018da:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 80018de:	2301      	movs	r3, #1
 80018e0:	e2cd      	b.n	8001e7e <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	4a76      	ldr	r2, [pc, #472]	@ (8001ac0 <HAL_DMA_Abort+0x214>)
 80018e8:	4293      	cmp	r3, r2
 80018ea:	d04a      	beq.n	8001982 <HAL_DMA_Abort+0xd6>
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4a74      	ldr	r2, [pc, #464]	@ (8001ac4 <HAL_DMA_Abort+0x218>)
 80018f2:	4293      	cmp	r3, r2
 80018f4:	d045      	beq.n	8001982 <HAL_DMA_Abort+0xd6>
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	4a73      	ldr	r2, [pc, #460]	@ (8001ac8 <HAL_DMA_Abort+0x21c>)
 80018fc:	4293      	cmp	r3, r2
 80018fe:	d040      	beq.n	8001982 <HAL_DMA_Abort+0xd6>
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	4a71      	ldr	r2, [pc, #452]	@ (8001acc <HAL_DMA_Abort+0x220>)
 8001906:	4293      	cmp	r3, r2
 8001908:	d03b      	beq.n	8001982 <HAL_DMA_Abort+0xd6>
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	4a70      	ldr	r2, [pc, #448]	@ (8001ad0 <HAL_DMA_Abort+0x224>)
 8001910:	4293      	cmp	r3, r2
 8001912:	d036      	beq.n	8001982 <HAL_DMA_Abort+0xd6>
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	4a6e      	ldr	r2, [pc, #440]	@ (8001ad4 <HAL_DMA_Abort+0x228>)
 800191a:	4293      	cmp	r3, r2
 800191c:	d031      	beq.n	8001982 <HAL_DMA_Abort+0xd6>
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	4a6d      	ldr	r2, [pc, #436]	@ (8001ad8 <HAL_DMA_Abort+0x22c>)
 8001924:	4293      	cmp	r3, r2
 8001926:	d02c      	beq.n	8001982 <HAL_DMA_Abort+0xd6>
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	4a6b      	ldr	r2, [pc, #428]	@ (8001adc <HAL_DMA_Abort+0x230>)
 800192e:	4293      	cmp	r3, r2
 8001930:	d027      	beq.n	8001982 <HAL_DMA_Abort+0xd6>
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	4a6a      	ldr	r2, [pc, #424]	@ (8001ae0 <HAL_DMA_Abort+0x234>)
 8001938:	4293      	cmp	r3, r2
 800193a:	d022      	beq.n	8001982 <HAL_DMA_Abort+0xd6>
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	4a68      	ldr	r2, [pc, #416]	@ (8001ae4 <HAL_DMA_Abort+0x238>)
 8001942:	4293      	cmp	r3, r2
 8001944:	d01d      	beq.n	8001982 <HAL_DMA_Abort+0xd6>
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	4a67      	ldr	r2, [pc, #412]	@ (8001ae8 <HAL_DMA_Abort+0x23c>)
 800194c:	4293      	cmp	r3, r2
 800194e:	d018      	beq.n	8001982 <HAL_DMA_Abort+0xd6>
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	4a65      	ldr	r2, [pc, #404]	@ (8001aec <HAL_DMA_Abort+0x240>)
 8001956:	4293      	cmp	r3, r2
 8001958:	d013      	beq.n	8001982 <HAL_DMA_Abort+0xd6>
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	4a64      	ldr	r2, [pc, #400]	@ (8001af0 <HAL_DMA_Abort+0x244>)
 8001960:	4293      	cmp	r3, r2
 8001962:	d00e      	beq.n	8001982 <HAL_DMA_Abort+0xd6>
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	4a62      	ldr	r2, [pc, #392]	@ (8001af4 <HAL_DMA_Abort+0x248>)
 800196a:	4293      	cmp	r3, r2
 800196c:	d009      	beq.n	8001982 <HAL_DMA_Abort+0xd6>
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	4a61      	ldr	r2, [pc, #388]	@ (8001af8 <HAL_DMA_Abort+0x24c>)
 8001974:	4293      	cmp	r3, r2
 8001976:	d004      	beq.n	8001982 <HAL_DMA_Abort+0xd6>
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	4a5f      	ldr	r2, [pc, #380]	@ (8001afc <HAL_DMA_Abort+0x250>)
 800197e:	4293      	cmp	r3, r2
 8001980:	d101      	bne.n	8001986 <HAL_DMA_Abort+0xda>
 8001982:	2301      	movs	r3, #1
 8001984:	e000      	b.n	8001988 <HAL_DMA_Abort+0xdc>
 8001986:	2300      	movs	r3, #0
 8001988:	2b00      	cmp	r3, #0
 800198a:	d013      	beq.n	80019b4 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	681a      	ldr	r2, [r3, #0]
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f022 021e 	bic.w	r2, r2, #30
 800199a:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	695a      	ldr	r2, [r3, #20]
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80019aa:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	617b      	str	r3, [r7, #20]
 80019b2:	e00a      	b.n	80019ca <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	681a      	ldr	r2, [r3, #0]
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f022 020e 	bic.w	r2, r2, #14
 80019c2:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	4a3c      	ldr	r2, [pc, #240]	@ (8001ac0 <HAL_DMA_Abort+0x214>)
 80019d0:	4293      	cmp	r3, r2
 80019d2:	d072      	beq.n	8001aba <HAL_DMA_Abort+0x20e>
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	4a3a      	ldr	r2, [pc, #232]	@ (8001ac4 <HAL_DMA_Abort+0x218>)
 80019da:	4293      	cmp	r3, r2
 80019dc:	d06d      	beq.n	8001aba <HAL_DMA_Abort+0x20e>
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	4a39      	ldr	r2, [pc, #228]	@ (8001ac8 <HAL_DMA_Abort+0x21c>)
 80019e4:	4293      	cmp	r3, r2
 80019e6:	d068      	beq.n	8001aba <HAL_DMA_Abort+0x20e>
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	4a37      	ldr	r2, [pc, #220]	@ (8001acc <HAL_DMA_Abort+0x220>)
 80019ee:	4293      	cmp	r3, r2
 80019f0:	d063      	beq.n	8001aba <HAL_DMA_Abort+0x20e>
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	4a36      	ldr	r2, [pc, #216]	@ (8001ad0 <HAL_DMA_Abort+0x224>)
 80019f8:	4293      	cmp	r3, r2
 80019fa:	d05e      	beq.n	8001aba <HAL_DMA_Abort+0x20e>
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	4a34      	ldr	r2, [pc, #208]	@ (8001ad4 <HAL_DMA_Abort+0x228>)
 8001a02:	4293      	cmp	r3, r2
 8001a04:	d059      	beq.n	8001aba <HAL_DMA_Abort+0x20e>
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	4a33      	ldr	r2, [pc, #204]	@ (8001ad8 <HAL_DMA_Abort+0x22c>)
 8001a0c:	4293      	cmp	r3, r2
 8001a0e:	d054      	beq.n	8001aba <HAL_DMA_Abort+0x20e>
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	4a31      	ldr	r2, [pc, #196]	@ (8001adc <HAL_DMA_Abort+0x230>)
 8001a16:	4293      	cmp	r3, r2
 8001a18:	d04f      	beq.n	8001aba <HAL_DMA_Abort+0x20e>
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	4a30      	ldr	r2, [pc, #192]	@ (8001ae0 <HAL_DMA_Abort+0x234>)
 8001a20:	4293      	cmp	r3, r2
 8001a22:	d04a      	beq.n	8001aba <HAL_DMA_Abort+0x20e>
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	4a2e      	ldr	r2, [pc, #184]	@ (8001ae4 <HAL_DMA_Abort+0x238>)
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	d045      	beq.n	8001aba <HAL_DMA_Abort+0x20e>
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	4a2d      	ldr	r2, [pc, #180]	@ (8001ae8 <HAL_DMA_Abort+0x23c>)
 8001a34:	4293      	cmp	r3, r2
 8001a36:	d040      	beq.n	8001aba <HAL_DMA_Abort+0x20e>
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	4a2b      	ldr	r2, [pc, #172]	@ (8001aec <HAL_DMA_Abort+0x240>)
 8001a3e:	4293      	cmp	r3, r2
 8001a40:	d03b      	beq.n	8001aba <HAL_DMA_Abort+0x20e>
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	4a2a      	ldr	r2, [pc, #168]	@ (8001af0 <HAL_DMA_Abort+0x244>)
 8001a48:	4293      	cmp	r3, r2
 8001a4a:	d036      	beq.n	8001aba <HAL_DMA_Abort+0x20e>
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	4a28      	ldr	r2, [pc, #160]	@ (8001af4 <HAL_DMA_Abort+0x248>)
 8001a52:	4293      	cmp	r3, r2
 8001a54:	d031      	beq.n	8001aba <HAL_DMA_Abort+0x20e>
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	4a27      	ldr	r2, [pc, #156]	@ (8001af8 <HAL_DMA_Abort+0x24c>)
 8001a5c:	4293      	cmp	r3, r2
 8001a5e:	d02c      	beq.n	8001aba <HAL_DMA_Abort+0x20e>
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	4a25      	ldr	r2, [pc, #148]	@ (8001afc <HAL_DMA_Abort+0x250>)
 8001a66:	4293      	cmp	r3, r2
 8001a68:	d027      	beq.n	8001aba <HAL_DMA_Abort+0x20e>
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	4a24      	ldr	r2, [pc, #144]	@ (8001b00 <HAL_DMA_Abort+0x254>)
 8001a70:	4293      	cmp	r3, r2
 8001a72:	d022      	beq.n	8001aba <HAL_DMA_Abort+0x20e>
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	4a22      	ldr	r2, [pc, #136]	@ (8001b04 <HAL_DMA_Abort+0x258>)
 8001a7a:	4293      	cmp	r3, r2
 8001a7c:	d01d      	beq.n	8001aba <HAL_DMA_Abort+0x20e>
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	4a21      	ldr	r2, [pc, #132]	@ (8001b08 <HAL_DMA_Abort+0x25c>)
 8001a84:	4293      	cmp	r3, r2
 8001a86:	d018      	beq.n	8001aba <HAL_DMA_Abort+0x20e>
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4a1f      	ldr	r2, [pc, #124]	@ (8001b0c <HAL_DMA_Abort+0x260>)
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d013      	beq.n	8001aba <HAL_DMA_Abort+0x20e>
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	4a1e      	ldr	r2, [pc, #120]	@ (8001b10 <HAL_DMA_Abort+0x264>)
 8001a98:	4293      	cmp	r3, r2
 8001a9a:	d00e      	beq.n	8001aba <HAL_DMA_Abort+0x20e>
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	4a1c      	ldr	r2, [pc, #112]	@ (8001b14 <HAL_DMA_Abort+0x268>)
 8001aa2:	4293      	cmp	r3, r2
 8001aa4:	d009      	beq.n	8001aba <HAL_DMA_Abort+0x20e>
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	4a1b      	ldr	r2, [pc, #108]	@ (8001b18 <HAL_DMA_Abort+0x26c>)
 8001aac:	4293      	cmp	r3, r2
 8001aae:	d004      	beq.n	8001aba <HAL_DMA_Abort+0x20e>
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	4a19      	ldr	r2, [pc, #100]	@ (8001b1c <HAL_DMA_Abort+0x270>)
 8001ab6:	4293      	cmp	r3, r2
 8001ab8:	d132      	bne.n	8001b20 <HAL_DMA_Abort+0x274>
 8001aba:	2301      	movs	r3, #1
 8001abc:	e031      	b.n	8001b22 <HAL_DMA_Abort+0x276>
 8001abe:	bf00      	nop
 8001ac0:	40020010 	.word	0x40020010
 8001ac4:	40020028 	.word	0x40020028
 8001ac8:	40020040 	.word	0x40020040
 8001acc:	40020058 	.word	0x40020058
 8001ad0:	40020070 	.word	0x40020070
 8001ad4:	40020088 	.word	0x40020088
 8001ad8:	400200a0 	.word	0x400200a0
 8001adc:	400200b8 	.word	0x400200b8
 8001ae0:	40020410 	.word	0x40020410
 8001ae4:	40020428 	.word	0x40020428
 8001ae8:	40020440 	.word	0x40020440
 8001aec:	40020458 	.word	0x40020458
 8001af0:	40020470 	.word	0x40020470
 8001af4:	40020488 	.word	0x40020488
 8001af8:	400204a0 	.word	0x400204a0
 8001afc:	400204b8 	.word	0x400204b8
 8001b00:	58025408 	.word	0x58025408
 8001b04:	5802541c 	.word	0x5802541c
 8001b08:	58025430 	.word	0x58025430
 8001b0c:	58025444 	.word	0x58025444
 8001b10:	58025458 	.word	0x58025458
 8001b14:	5802546c 	.word	0x5802546c
 8001b18:	58025480 	.word	0x58025480
 8001b1c:	58025494 	.word	0x58025494
 8001b20:	2300      	movs	r3, #0
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d007      	beq.n	8001b36 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b2a:	681a      	ldr	r2, [r3, #0]
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b30:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001b34:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	4a6d      	ldr	r2, [pc, #436]	@ (8001cf0 <HAL_DMA_Abort+0x444>)
 8001b3c:	4293      	cmp	r3, r2
 8001b3e:	d04a      	beq.n	8001bd6 <HAL_DMA_Abort+0x32a>
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4a6b      	ldr	r2, [pc, #428]	@ (8001cf4 <HAL_DMA_Abort+0x448>)
 8001b46:	4293      	cmp	r3, r2
 8001b48:	d045      	beq.n	8001bd6 <HAL_DMA_Abort+0x32a>
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	4a6a      	ldr	r2, [pc, #424]	@ (8001cf8 <HAL_DMA_Abort+0x44c>)
 8001b50:	4293      	cmp	r3, r2
 8001b52:	d040      	beq.n	8001bd6 <HAL_DMA_Abort+0x32a>
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4a68      	ldr	r2, [pc, #416]	@ (8001cfc <HAL_DMA_Abort+0x450>)
 8001b5a:	4293      	cmp	r3, r2
 8001b5c:	d03b      	beq.n	8001bd6 <HAL_DMA_Abort+0x32a>
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	4a67      	ldr	r2, [pc, #412]	@ (8001d00 <HAL_DMA_Abort+0x454>)
 8001b64:	4293      	cmp	r3, r2
 8001b66:	d036      	beq.n	8001bd6 <HAL_DMA_Abort+0x32a>
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	4a65      	ldr	r2, [pc, #404]	@ (8001d04 <HAL_DMA_Abort+0x458>)
 8001b6e:	4293      	cmp	r3, r2
 8001b70:	d031      	beq.n	8001bd6 <HAL_DMA_Abort+0x32a>
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	4a64      	ldr	r2, [pc, #400]	@ (8001d08 <HAL_DMA_Abort+0x45c>)
 8001b78:	4293      	cmp	r3, r2
 8001b7a:	d02c      	beq.n	8001bd6 <HAL_DMA_Abort+0x32a>
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	4a62      	ldr	r2, [pc, #392]	@ (8001d0c <HAL_DMA_Abort+0x460>)
 8001b82:	4293      	cmp	r3, r2
 8001b84:	d027      	beq.n	8001bd6 <HAL_DMA_Abort+0x32a>
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	4a61      	ldr	r2, [pc, #388]	@ (8001d10 <HAL_DMA_Abort+0x464>)
 8001b8c:	4293      	cmp	r3, r2
 8001b8e:	d022      	beq.n	8001bd6 <HAL_DMA_Abort+0x32a>
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	4a5f      	ldr	r2, [pc, #380]	@ (8001d14 <HAL_DMA_Abort+0x468>)
 8001b96:	4293      	cmp	r3, r2
 8001b98:	d01d      	beq.n	8001bd6 <HAL_DMA_Abort+0x32a>
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	4a5e      	ldr	r2, [pc, #376]	@ (8001d18 <HAL_DMA_Abort+0x46c>)
 8001ba0:	4293      	cmp	r3, r2
 8001ba2:	d018      	beq.n	8001bd6 <HAL_DMA_Abort+0x32a>
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	4a5c      	ldr	r2, [pc, #368]	@ (8001d1c <HAL_DMA_Abort+0x470>)
 8001baa:	4293      	cmp	r3, r2
 8001bac:	d013      	beq.n	8001bd6 <HAL_DMA_Abort+0x32a>
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	4a5b      	ldr	r2, [pc, #364]	@ (8001d20 <HAL_DMA_Abort+0x474>)
 8001bb4:	4293      	cmp	r3, r2
 8001bb6:	d00e      	beq.n	8001bd6 <HAL_DMA_Abort+0x32a>
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	4a59      	ldr	r2, [pc, #356]	@ (8001d24 <HAL_DMA_Abort+0x478>)
 8001bbe:	4293      	cmp	r3, r2
 8001bc0:	d009      	beq.n	8001bd6 <HAL_DMA_Abort+0x32a>
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	4a58      	ldr	r2, [pc, #352]	@ (8001d28 <HAL_DMA_Abort+0x47c>)
 8001bc8:	4293      	cmp	r3, r2
 8001bca:	d004      	beq.n	8001bd6 <HAL_DMA_Abort+0x32a>
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	4a56      	ldr	r2, [pc, #344]	@ (8001d2c <HAL_DMA_Abort+0x480>)
 8001bd2:	4293      	cmp	r3, r2
 8001bd4:	d108      	bne.n	8001be8 <HAL_DMA_Abort+0x33c>
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	681a      	ldr	r2, [r3, #0]
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f022 0201 	bic.w	r2, r2, #1
 8001be4:	601a      	str	r2, [r3, #0]
 8001be6:	e007      	b.n	8001bf8 <HAL_DMA_Abort+0x34c>
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	681a      	ldr	r2, [r3, #0]
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f022 0201 	bic.w	r2, r2, #1
 8001bf6:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8001bf8:	e013      	b.n	8001c22 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001bfa:	f7ff f937 	bl	8000e6c <HAL_GetTick>
 8001bfe:	4602      	mov	r2, r0
 8001c00:	693b      	ldr	r3, [r7, #16]
 8001c02:	1ad3      	subs	r3, r2, r3
 8001c04:	2b05      	cmp	r3, #5
 8001c06:	d90c      	bls.n	8001c22 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	2220      	movs	r2, #32
 8001c0c:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	2203      	movs	r2, #3
 8001c12:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	2200      	movs	r2, #0
 8001c1a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8001c1e:	2301      	movs	r3, #1
 8001c20:	e12d      	b.n	8001e7e <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8001c22:	697b      	ldr	r3, [r7, #20]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f003 0301 	and.w	r3, r3, #1
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d1e5      	bne.n	8001bfa <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4a2f      	ldr	r2, [pc, #188]	@ (8001cf0 <HAL_DMA_Abort+0x444>)
 8001c34:	4293      	cmp	r3, r2
 8001c36:	d04a      	beq.n	8001cce <HAL_DMA_Abort+0x422>
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	4a2d      	ldr	r2, [pc, #180]	@ (8001cf4 <HAL_DMA_Abort+0x448>)
 8001c3e:	4293      	cmp	r3, r2
 8001c40:	d045      	beq.n	8001cce <HAL_DMA_Abort+0x422>
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	4a2c      	ldr	r2, [pc, #176]	@ (8001cf8 <HAL_DMA_Abort+0x44c>)
 8001c48:	4293      	cmp	r3, r2
 8001c4a:	d040      	beq.n	8001cce <HAL_DMA_Abort+0x422>
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	4a2a      	ldr	r2, [pc, #168]	@ (8001cfc <HAL_DMA_Abort+0x450>)
 8001c52:	4293      	cmp	r3, r2
 8001c54:	d03b      	beq.n	8001cce <HAL_DMA_Abort+0x422>
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	4a29      	ldr	r2, [pc, #164]	@ (8001d00 <HAL_DMA_Abort+0x454>)
 8001c5c:	4293      	cmp	r3, r2
 8001c5e:	d036      	beq.n	8001cce <HAL_DMA_Abort+0x422>
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	4a27      	ldr	r2, [pc, #156]	@ (8001d04 <HAL_DMA_Abort+0x458>)
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d031      	beq.n	8001cce <HAL_DMA_Abort+0x422>
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	4a26      	ldr	r2, [pc, #152]	@ (8001d08 <HAL_DMA_Abort+0x45c>)
 8001c70:	4293      	cmp	r3, r2
 8001c72:	d02c      	beq.n	8001cce <HAL_DMA_Abort+0x422>
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	4a24      	ldr	r2, [pc, #144]	@ (8001d0c <HAL_DMA_Abort+0x460>)
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	d027      	beq.n	8001cce <HAL_DMA_Abort+0x422>
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	4a23      	ldr	r2, [pc, #140]	@ (8001d10 <HAL_DMA_Abort+0x464>)
 8001c84:	4293      	cmp	r3, r2
 8001c86:	d022      	beq.n	8001cce <HAL_DMA_Abort+0x422>
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	4a21      	ldr	r2, [pc, #132]	@ (8001d14 <HAL_DMA_Abort+0x468>)
 8001c8e:	4293      	cmp	r3, r2
 8001c90:	d01d      	beq.n	8001cce <HAL_DMA_Abort+0x422>
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	4a20      	ldr	r2, [pc, #128]	@ (8001d18 <HAL_DMA_Abort+0x46c>)
 8001c98:	4293      	cmp	r3, r2
 8001c9a:	d018      	beq.n	8001cce <HAL_DMA_Abort+0x422>
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	4a1e      	ldr	r2, [pc, #120]	@ (8001d1c <HAL_DMA_Abort+0x470>)
 8001ca2:	4293      	cmp	r3, r2
 8001ca4:	d013      	beq.n	8001cce <HAL_DMA_Abort+0x422>
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	4a1d      	ldr	r2, [pc, #116]	@ (8001d20 <HAL_DMA_Abort+0x474>)
 8001cac:	4293      	cmp	r3, r2
 8001cae:	d00e      	beq.n	8001cce <HAL_DMA_Abort+0x422>
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	4a1b      	ldr	r2, [pc, #108]	@ (8001d24 <HAL_DMA_Abort+0x478>)
 8001cb6:	4293      	cmp	r3, r2
 8001cb8:	d009      	beq.n	8001cce <HAL_DMA_Abort+0x422>
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	4a1a      	ldr	r2, [pc, #104]	@ (8001d28 <HAL_DMA_Abort+0x47c>)
 8001cc0:	4293      	cmp	r3, r2
 8001cc2:	d004      	beq.n	8001cce <HAL_DMA_Abort+0x422>
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	4a18      	ldr	r2, [pc, #96]	@ (8001d2c <HAL_DMA_Abort+0x480>)
 8001cca:	4293      	cmp	r3, r2
 8001ccc:	d101      	bne.n	8001cd2 <HAL_DMA_Abort+0x426>
 8001cce:	2301      	movs	r3, #1
 8001cd0:	e000      	b.n	8001cd4 <HAL_DMA_Abort+0x428>
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d02b      	beq.n	8001d30 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cdc:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ce2:	f003 031f 	and.w	r3, r3, #31
 8001ce6:	223f      	movs	r2, #63	@ 0x3f
 8001ce8:	409a      	lsls	r2, r3
 8001cea:	68bb      	ldr	r3, [r7, #8]
 8001cec:	609a      	str	r2, [r3, #8]
 8001cee:	e02a      	b.n	8001d46 <HAL_DMA_Abort+0x49a>
 8001cf0:	40020010 	.word	0x40020010
 8001cf4:	40020028 	.word	0x40020028
 8001cf8:	40020040 	.word	0x40020040
 8001cfc:	40020058 	.word	0x40020058
 8001d00:	40020070 	.word	0x40020070
 8001d04:	40020088 	.word	0x40020088
 8001d08:	400200a0 	.word	0x400200a0
 8001d0c:	400200b8 	.word	0x400200b8
 8001d10:	40020410 	.word	0x40020410
 8001d14:	40020428 	.word	0x40020428
 8001d18:	40020440 	.word	0x40020440
 8001d1c:	40020458 	.word	0x40020458
 8001d20:	40020470 	.word	0x40020470
 8001d24:	40020488 	.word	0x40020488
 8001d28:	400204a0 	.word	0x400204a0
 8001d2c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d34:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d3a:	f003 031f 	and.w	r3, r3, #31
 8001d3e:	2201      	movs	r2, #1
 8001d40:	409a      	lsls	r2, r3
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	4a4f      	ldr	r2, [pc, #316]	@ (8001e88 <HAL_DMA_Abort+0x5dc>)
 8001d4c:	4293      	cmp	r3, r2
 8001d4e:	d072      	beq.n	8001e36 <HAL_DMA_Abort+0x58a>
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	4a4d      	ldr	r2, [pc, #308]	@ (8001e8c <HAL_DMA_Abort+0x5e0>)
 8001d56:	4293      	cmp	r3, r2
 8001d58:	d06d      	beq.n	8001e36 <HAL_DMA_Abort+0x58a>
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	4a4c      	ldr	r2, [pc, #304]	@ (8001e90 <HAL_DMA_Abort+0x5e4>)
 8001d60:	4293      	cmp	r3, r2
 8001d62:	d068      	beq.n	8001e36 <HAL_DMA_Abort+0x58a>
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	4a4a      	ldr	r2, [pc, #296]	@ (8001e94 <HAL_DMA_Abort+0x5e8>)
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	d063      	beq.n	8001e36 <HAL_DMA_Abort+0x58a>
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	4a49      	ldr	r2, [pc, #292]	@ (8001e98 <HAL_DMA_Abort+0x5ec>)
 8001d74:	4293      	cmp	r3, r2
 8001d76:	d05e      	beq.n	8001e36 <HAL_DMA_Abort+0x58a>
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	4a47      	ldr	r2, [pc, #284]	@ (8001e9c <HAL_DMA_Abort+0x5f0>)
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d059      	beq.n	8001e36 <HAL_DMA_Abort+0x58a>
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	4a46      	ldr	r2, [pc, #280]	@ (8001ea0 <HAL_DMA_Abort+0x5f4>)
 8001d88:	4293      	cmp	r3, r2
 8001d8a:	d054      	beq.n	8001e36 <HAL_DMA_Abort+0x58a>
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	4a44      	ldr	r2, [pc, #272]	@ (8001ea4 <HAL_DMA_Abort+0x5f8>)
 8001d92:	4293      	cmp	r3, r2
 8001d94:	d04f      	beq.n	8001e36 <HAL_DMA_Abort+0x58a>
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	4a43      	ldr	r2, [pc, #268]	@ (8001ea8 <HAL_DMA_Abort+0x5fc>)
 8001d9c:	4293      	cmp	r3, r2
 8001d9e:	d04a      	beq.n	8001e36 <HAL_DMA_Abort+0x58a>
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	4a41      	ldr	r2, [pc, #260]	@ (8001eac <HAL_DMA_Abort+0x600>)
 8001da6:	4293      	cmp	r3, r2
 8001da8:	d045      	beq.n	8001e36 <HAL_DMA_Abort+0x58a>
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	4a40      	ldr	r2, [pc, #256]	@ (8001eb0 <HAL_DMA_Abort+0x604>)
 8001db0:	4293      	cmp	r3, r2
 8001db2:	d040      	beq.n	8001e36 <HAL_DMA_Abort+0x58a>
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	4a3e      	ldr	r2, [pc, #248]	@ (8001eb4 <HAL_DMA_Abort+0x608>)
 8001dba:	4293      	cmp	r3, r2
 8001dbc:	d03b      	beq.n	8001e36 <HAL_DMA_Abort+0x58a>
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	4a3d      	ldr	r2, [pc, #244]	@ (8001eb8 <HAL_DMA_Abort+0x60c>)
 8001dc4:	4293      	cmp	r3, r2
 8001dc6:	d036      	beq.n	8001e36 <HAL_DMA_Abort+0x58a>
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	4a3b      	ldr	r2, [pc, #236]	@ (8001ebc <HAL_DMA_Abort+0x610>)
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d031      	beq.n	8001e36 <HAL_DMA_Abort+0x58a>
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	4a3a      	ldr	r2, [pc, #232]	@ (8001ec0 <HAL_DMA_Abort+0x614>)
 8001dd8:	4293      	cmp	r3, r2
 8001dda:	d02c      	beq.n	8001e36 <HAL_DMA_Abort+0x58a>
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4a38      	ldr	r2, [pc, #224]	@ (8001ec4 <HAL_DMA_Abort+0x618>)
 8001de2:	4293      	cmp	r3, r2
 8001de4:	d027      	beq.n	8001e36 <HAL_DMA_Abort+0x58a>
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	4a37      	ldr	r2, [pc, #220]	@ (8001ec8 <HAL_DMA_Abort+0x61c>)
 8001dec:	4293      	cmp	r3, r2
 8001dee:	d022      	beq.n	8001e36 <HAL_DMA_Abort+0x58a>
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	4a35      	ldr	r2, [pc, #212]	@ (8001ecc <HAL_DMA_Abort+0x620>)
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d01d      	beq.n	8001e36 <HAL_DMA_Abort+0x58a>
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	4a34      	ldr	r2, [pc, #208]	@ (8001ed0 <HAL_DMA_Abort+0x624>)
 8001e00:	4293      	cmp	r3, r2
 8001e02:	d018      	beq.n	8001e36 <HAL_DMA_Abort+0x58a>
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4a32      	ldr	r2, [pc, #200]	@ (8001ed4 <HAL_DMA_Abort+0x628>)
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d013      	beq.n	8001e36 <HAL_DMA_Abort+0x58a>
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	4a31      	ldr	r2, [pc, #196]	@ (8001ed8 <HAL_DMA_Abort+0x62c>)
 8001e14:	4293      	cmp	r3, r2
 8001e16:	d00e      	beq.n	8001e36 <HAL_DMA_Abort+0x58a>
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4a2f      	ldr	r2, [pc, #188]	@ (8001edc <HAL_DMA_Abort+0x630>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d009      	beq.n	8001e36 <HAL_DMA_Abort+0x58a>
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	4a2e      	ldr	r2, [pc, #184]	@ (8001ee0 <HAL_DMA_Abort+0x634>)
 8001e28:	4293      	cmp	r3, r2
 8001e2a:	d004      	beq.n	8001e36 <HAL_DMA_Abort+0x58a>
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4a2c      	ldr	r2, [pc, #176]	@ (8001ee4 <HAL_DMA_Abort+0x638>)
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d101      	bne.n	8001e3a <HAL_DMA_Abort+0x58e>
 8001e36:	2301      	movs	r3, #1
 8001e38:	e000      	b.n	8001e3c <HAL_DMA_Abort+0x590>
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d015      	beq.n	8001e6c <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001e44:	687a      	ldr	r2, [r7, #4]
 8001e46:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8001e48:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d00c      	beq.n	8001e6c <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001e56:	681a      	ldr	r2, [r3, #0]
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001e5c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001e60:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e66:	687a      	ldr	r2, [r7, #4]
 8001e68:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8001e6a:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2201      	movs	r2, #1
 8001e70:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	2200      	movs	r2, #0
 8001e78:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8001e7c:	2300      	movs	r3, #0
}
 8001e7e:	4618      	mov	r0, r3
 8001e80:	3718      	adds	r7, #24
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bd80      	pop	{r7, pc}
 8001e86:	bf00      	nop
 8001e88:	40020010 	.word	0x40020010
 8001e8c:	40020028 	.word	0x40020028
 8001e90:	40020040 	.word	0x40020040
 8001e94:	40020058 	.word	0x40020058
 8001e98:	40020070 	.word	0x40020070
 8001e9c:	40020088 	.word	0x40020088
 8001ea0:	400200a0 	.word	0x400200a0
 8001ea4:	400200b8 	.word	0x400200b8
 8001ea8:	40020410 	.word	0x40020410
 8001eac:	40020428 	.word	0x40020428
 8001eb0:	40020440 	.word	0x40020440
 8001eb4:	40020458 	.word	0x40020458
 8001eb8:	40020470 	.word	0x40020470
 8001ebc:	40020488 	.word	0x40020488
 8001ec0:	400204a0 	.word	0x400204a0
 8001ec4:	400204b8 	.word	0x400204b8
 8001ec8:	58025408 	.word	0x58025408
 8001ecc:	5802541c 	.word	0x5802541c
 8001ed0:	58025430 	.word	0x58025430
 8001ed4:	58025444 	.word	0x58025444
 8001ed8:	58025458 	.word	0x58025458
 8001edc:	5802546c 	.word	0x5802546c
 8001ee0:	58025480 	.word	0x58025480
 8001ee4:	58025494 	.word	0x58025494

08001ee8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b084      	sub	sp, #16
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d101      	bne.n	8001efa <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8001ef6:	2301      	movs	r3, #1
 8001ef8:	e237      	b.n	800236a <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001f00:	b2db      	uxtb	r3, r3
 8001f02:	2b02      	cmp	r3, #2
 8001f04:	d004      	beq.n	8001f10 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	2280      	movs	r2, #128	@ 0x80
 8001f0a:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001f0c:	2301      	movs	r3, #1
 8001f0e:	e22c      	b.n	800236a <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	4a5c      	ldr	r2, [pc, #368]	@ (8002088 <HAL_DMA_Abort_IT+0x1a0>)
 8001f16:	4293      	cmp	r3, r2
 8001f18:	d04a      	beq.n	8001fb0 <HAL_DMA_Abort_IT+0xc8>
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	4a5b      	ldr	r2, [pc, #364]	@ (800208c <HAL_DMA_Abort_IT+0x1a4>)
 8001f20:	4293      	cmp	r3, r2
 8001f22:	d045      	beq.n	8001fb0 <HAL_DMA_Abort_IT+0xc8>
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4a59      	ldr	r2, [pc, #356]	@ (8002090 <HAL_DMA_Abort_IT+0x1a8>)
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	d040      	beq.n	8001fb0 <HAL_DMA_Abort_IT+0xc8>
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	4a58      	ldr	r2, [pc, #352]	@ (8002094 <HAL_DMA_Abort_IT+0x1ac>)
 8001f34:	4293      	cmp	r3, r2
 8001f36:	d03b      	beq.n	8001fb0 <HAL_DMA_Abort_IT+0xc8>
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	4a56      	ldr	r2, [pc, #344]	@ (8002098 <HAL_DMA_Abort_IT+0x1b0>)
 8001f3e:	4293      	cmp	r3, r2
 8001f40:	d036      	beq.n	8001fb0 <HAL_DMA_Abort_IT+0xc8>
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	4a55      	ldr	r2, [pc, #340]	@ (800209c <HAL_DMA_Abort_IT+0x1b4>)
 8001f48:	4293      	cmp	r3, r2
 8001f4a:	d031      	beq.n	8001fb0 <HAL_DMA_Abort_IT+0xc8>
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	4a53      	ldr	r2, [pc, #332]	@ (80020a0 <HAL_DMA_Abort_IT+0x1b8>)
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d02c      	beq.n	8001fb0 <HAL_DMA_Abort_IT+0xc8>
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	4a52      	ldr	r2, [pc, #328]	@ (80020a4 <HAL_DMA_Abort_IT+0x1bc>)
 8001f5c:	4293      	cmp	r3, r2
 8001f5e:	d027      	beq.n	8001fb0 <HAL_DMA_Abort_IT+0xc8>
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4a50      	ldr	r2, [pc, #320]	@ (80020a8 <HAL_DMA_Abort_IT+0x1c0>)
 8001f66:	4293      	cmp	r3, r2
 8001f68:	d022      	beq.n	8001fb0 <HAL_DMA_Abort_IT+0xc8>
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	4a4f      	ldr	r2, [pc, #316]	@ (80020ac <HAL_DMA_Abort_IT+0x1c4>)
 8001f70:	4293      	cmp	r3, r2
 8001f72:	d01d      	beq.n	8001fb0 <HAL_DMA_Abort_IT+0xc8>
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	4a4d      	ldr	r2, [pc, #308]	@ (80020b0 <HAL_DMA_Abort_IT+0x1c8>)
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d018      	beq.n	8001fb0 <HAL_DMA_Abort_IT+0xc8>
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	4a4c      	ldr	r2, [pc, #304]	@ (80020b4 <HAL_DMA_Abort_IT+0x1cc>)
 8001f84:	4293      	cmp	r3, r2
 8001f86:	d013      	beq.n	8001fb0 <HAL_DMA_Abort_IT+0xc8>
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4a4a      	ldr	r2, [pc, #296]	@ (80020b8 <HAL_DMA_Abort_IT+0x1d0>)
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d00e      	beq.n	8001fb0 <HAL_DMA_Abort_IT+0xc8>
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	4a49      	ldr	r2, [pc, #292]	@ (80020bc <HAL_DMA_Abort_IT+0x1d4>)
 8001f98:	4293      	cmp	r3, r2
 8001f9a:	d009      	beq.n	8001fb0 <HAL_DMA_Abort_IT+0xc8>
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	4a47      	ldr	r2, [pc, #284]	@ (80020c0 <HAL_DMA_Abort_IT+0x1d8>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d004      	beq.n	8001fb0 <HAL_DMA_Abort_IT+0xc8>
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	4a46      	ldr	r2, [pc, #280]	@ (80020c4 <HAL_DMA_Abort_IT+0x1dc>)
 8001fac:	4293      	cmp	r3, r2
 8001fae:	d101      	bne.n	8001fb4 <HAL_DMA_Abort_IT+0xcc>
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	e000      	b.n	8001fb6 <HAL_DMA_Abort_IT+0xce>
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	f000 8086 	beq.w	80020c8 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2204      	movs	r2, #4
 8001fc0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	4a2f      	ldr	r2, [pc, #188]	@ (8002088 <HAL_DMA_Abort_IT+0x1a0>)
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	d04a      	beq.n	8002064 <HAL_DMA_Abort_IT+0x17c>
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	4a2e      	ldr	r2, [pc, #184]	@ (800208c <HAL_DMA_Abort_IT+0x1a4>)
 8001fd4:	4293      	cmp	r3, r2
 8001fd6:	d045      	beq.n	8002064 <HAL_DMA_Abort_IT+0x17c>
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4a2c      	ldr	r2, [pc, #176]	@ (8002090 <HAL_DMA_Abort_IT+0x1a8>)
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d040      	beq.n	8002064 <HAL_DMA_Abort_IT+0x17c>
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	4a2b      	ldr	r2, [pc, #172]	@ (8002094 <HAL_DMA_Abort_IT+0x1ac>)
 8001fe8:	4293      	cmp	r3, r2
 8001fea:	d03b      	beq.n	8002064 <HAL_DMA_Abort_IT+0x17c>
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	4a29      	ldr	r2, [pc, #164]	@ (8002098 <HAL_DMA_Abort_IT+0x1b0>)
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d036      	beq.n	8002064 <HAL_DMA_Abort_IT+0x17c>
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	4a28      	ldr	r2, [pc, #160]	@ (800209c <HAL_DMA_Abort_IT+0x1b4>)
 8001ffc:	4293      	cmp	r3, r2
 8001ffe:	d031      	beq.n	8002064 <HAL_DMA_Abort_IT+0x17c>
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	4a26      	ldr	r2, [pc, #152]	@ (80020a0 <HAL_DMA_Abort_IT+0x1b8>)
 8002006:	4293      	cmp	r3, r2
 8002008:	d02c      	beq.n	8002064 <HAL_DMA_Abort_IT+0x17c>
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	4a25      	ldr	r2, [pc, #148]	@ (80020a4 <HAL_DMA_Abort_IT+0x1bc>)
 8002010:	4293      	cmp	r3, r2
 8002012:	d027      	beq.n	8002064 <HAL_DMA_Abort_IT+0x17c>
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	4a23      	ldr	r2, [pc, #140]	@ (80020a8 <HAL_DMA_Abort_IT+0x1c0>)
 800201a:	4293      	cmp	r3, r2
 800201c:	d022      	beq.n	8002064 <HAL_DMA_Abort_IT+0x17c>
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	4a22      	ldr	r2, [pc, #136]	@ (80020ac <HAL_DMA_Abort_IT+0x1c4>)
 8002024:	4293      	cmp	r3, r2
 8002026:	d01d      	beq.n	8002064 <HAL_DMA_Abort_IT+0x17c>
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	4a20      	ldr	r2, [pc, #128]	@ (80020b0 <HAL_DMA_Abort_IT+0x1c8>)
 800202e:	4293      	cmp	r3, r2
 8002030:	d018      	beq.n	8002064 <HAL_DMA_Abort_IT+0x17c>
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	4a1f      	ldr	r2, [pc, #124]	@ (80020b4 <HAL_DMA_Abort_IT+0x1cc>)
 8002038:	4293      	cmp	r3, r2
 800203a:	d013      	beq.n	8002064 <HAL_DMA_Abort_IT+0x17c>
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	4a1d      	ldr	r2, [pc, #116]	@ (80020b8 <HAL_DMA_Abort_IT+0x1d0>)
 8002042:	4293      	cmp	r3, r2
 8002044:	d00e      	beq.n	8002064 <HAL_DMA_Abort_IT+0x17c>
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	4a1c      	ldr	r2, [pc, #112]	@ (80020bc <HAL_DMA_Abort_IT+0x1d4>)
 800204c:	4293      	cmp	r3, r2
 800204e:	d009      	beq.n	8002064 <HAL_DMA_Abort_IT+0x17c>
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4a1a      	ldr	r2, [pc, #104]	@ (80020c0 <HAL_DMA_Abort_IT+0x1d8>)
 8002056:	4293      	cmp	r3, r2
 8002058:	d004      	beq.n	8002064 <HAL_DMA_Abort_IT+0x17c>
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	4a19      	ldr	r2, [pc, #100]	@ (80020c4 <HAL_DMA_Abort_IT+0x1dc>)
 8002060:	4293      	cmp	r3, r2
 8002062:	d108      	bne.n	8002076 <HAL_DMA_Abort_IT+0x18e>
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	681a      	ldr	r2, [r3, #0]
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f022 0201 	bic.w	r2, r2, #1
 8002072:	601a      	str	r2, [r3, #0]
 8002074:	e178      	b.n	8002368 <HAL_DMA_Abort_IT+0x480>
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	681a      	ldr	r2, [r3, #0]
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f022 0201 	bic.w	r2, r2, #1
 8002084:	601a      	str	r2, [r3, #0]
 8002086:	e16f      	b.n	8002368 <HAL_DMA_Abort_IT+0x480>
 8002088:	40020010 	.word	0x40020010
 800208c:	40020028 	.word	0x40020028
 8002090:	40020040 	.word	0x40020040
 8002094:	40020058 	.word	0x40020058
 8002098:	40020070 	.word	0x40020070
 800209c:	40020088 	.word	0x40020088
 80020a0:	400200a0 	.word	0x400200a0
 80020a4:	400200b8 	.word	0x400200b8
 80020a8:	40020410 	.word	0x40020410
 80020ac:	40020428 	.word	0x40020428
 80020b0:	40020440 	.word	0x40020440
 80020b4:	40020458 	.word	0x40020458
 80020b8:	40020470 	.word	0x40020470
 80020bc:	40020488 	.word	0x40020488
 80020c0:	400204a0 	.word	0x400204a0
 80020c4:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	681a      	ldr	r2, [r3, #0]
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f022 020e 	bic.w	r2, r2, #14
 80020d6:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	4a6c      	ldr	r2, [pc, #432]	@ (8002290 <HAL_DMA_Abort_IT+0x3a8>)
 80020de:	4293      	cmp	r3, r2
 80020e0:	d04a      	beq.n	8002178 <HAL_DMA_Abort_IT+0x290>
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	4a6b      	ldr	r2, [pc, #428]	@ (8002294 <HAL_DMA_Abort_IT+0x3ac>)
 80020e8:	4293      	cmp	r3, r2
 80020ea:	d045      	beq.n	8002178 <HAL_DMA_Abort_IT+0x290>
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	4a69      	ldr	r2, [pc, #420]	@ (8002298 <HAL_DMA_Abort_IT+0x3b0>)
 80020f2:	4293      	cmp	r3, r2
 80020f4:	d040      	beq.n	8002178 <HAL_DMA_Abort_IT+0x290>
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	4a68      	ldr	r2, [pc, #416]	@ (800229c <HAL_DMA_Abort_IT+0x3b4>)
 80020fc:	4293      	cmp	r3, r2
 80020fe:	d03b      	beq.n	8002178 <HAL_DMA_Abort_IT+0x290>
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4a66      	ldr	r2, [pc, #408]	@ (80022a0 <HAL_DMA_Abort_IT+0x3b8>)
 8002106:	4293      	cmp	r3, r2
 8002108:	d036      	beq.n	8002178 <HAL_DMA_Abort_IT+0x290>
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	4a65      	ldr	r2, [pc, #404]	@ (80022a4 <HAL_DMA_Abort_IT+0x3bc>)
 8002110:	4293      	cmp	r3, r2
 8002112:	d031      	beq.n	8002178 <HAL_DMA_Abort_IT+0x290>
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4a63      	ldr	r2, [pc, #396]	@ (80022a8 <HAL_DMA_Abort_IT+0x3c0>)
 800211a:	4293      	cmp	r3, r2
 800211c:	d02c      	beq.n	8002178 <HAL_DMA_Abort_IT+0x290>
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	4a62      	ldr	r2, [pc, #392]	@ (80022ac <HAL_DMA_Abort_IT+0x3c4>)
 8002124:	4293      	cmp	r3, r2
 8002126:	d027      	beq.n	8002178 <HAL_DMA_Abort_IT+0x290>
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	4a60      	ldr	r2, [pc, #384]	@ (80022b0 <HAL_DMA_Abort_IT+0x3c8>)
 800212e:	4293      	cmp	r3, r2
 8002130:	d022      	beq.n	8002178 <HAL_DMA_Abort_IT+0x290>
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	4a5f      	ldr	r2, [pc, #380]	@ (80022b4 <HAL_DMA_Abort_IT+0x3cc>)
 8002138:	4293      	cmp	r3, r2
 800213a:	d01d      	beq.n	8002178 <HAL_DMA_Abort_IT+0x290>
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4a5d      	ldr	r2, [pc, #372]	@ (80022b8 <HAL_DMA_Abort_IT+0x3d0>)
 8002142:	4293      	cmp	r3, r2
 8002144:	d018      	beq.n	8002178 <HAL_DMA_Abort_IT+0x290>
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	4a5c      	ldr	r2, [pc, #368]	@ (80022bc <HAL_DMA_Abort_IT+0x3d4>)
 800214c:	4293      	cmp	r3, r2
 800214e:	d013      	beq.n	8002178 <HAL_DMA_Abort_IT+0x290>
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4a5a      	ldr	r2, [pc, #360]	@ (80022c0 <HAL_DMA_Abort_IT+0x3d8>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d00e      	beq.n	8002178 <HAL_DMA_Abort_IT+0x290>
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	4a59      	ldr	r2, [pc, #356]	@ (80022c4 <HAL_DMA_Abort_IT+0x3dc>)
 8002160:	4293      	cmp	r3, r2
 8002162:	d009      	beq.n	8002178 <HAL_DMA_Abort_IT+0x290>
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4a57      	ldr	r2, [pc, #348]	@ (80022c8 <HAL_DMA_Abort_IT+0x3e0>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d004      	beq.n	8002178 <HAL_DMA_Abort_IT+0x290>
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	4a56      	ldr	r2, [pc, #344]	@ (80022cc <HAL_DMA_Abort_IT+0x3e4>)
 8002174:	4293      	cmp	r3, r2
 8002176:	d108      	bne.n	800218a <HAL_DMA_Abort_IT+0x2a2>
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	681a      	ldr	r2, [r3, #0]
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f022 0201 	bic.w	r2, r2, #1
 8002186:	601a      	str	r2, [r3, #0]
 8002188:	e007      	b.n	800219a <HAL_DMA_Abort_IT+0x2b2>
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	681a      	ldr	r2, [r3, #0]
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f022 0201 	bic.w	r2, r2, #1
 8002198:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	4a3c      	ldr	r2, [pc, #240]	@ (8002290 <HAL_DMA_Abort_IT+0x3a8>)
 80021a0:	4293      	cmp	r3, r2
 80021a2:	d072      	beq.n	800228a <HAL_DMA_Abort_IT+0x3a2>
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4a3a      	ldr	r2, [pc, #232]	@ (8002294 <HAL_DMA_Abort_IT+0x3ac>)
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d06d      	beq.n	800228a <HAL_DMA_Abort_IT+0x3a2>
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	4a39      	ldr	r2, [pc, #228]	@ (8002298 <HAL_DMA_Abort_IT+0x3b0>)
 80021b4:	4293      	cmp	r3, r2
 80021b6:	d068      	beq.n	800228a <HAL_DMA_Abort_IT+0x3a2>
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	4a37      	ldr	r2, [pc, #220]	@ (800229c <HAL_DMA_Abort_IT+0x3b4>)
 80021be:	4293      	cmp	r3, r2
 80021c0:	d063      	beq.n	800228a <HAL_DMA_Abort_IT+0x3a2>
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	4a36      	ldr	r2, [pc, #216]	@ (80022a0 <HAL_DMA_Abort_IT+0x3b8>)
 80021c8:	4293      	cmp	r3, r2
 80021ca:	d05e      	beq.n	800228a <HAL_DMA_Abort_IT+0x3a2>
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4a34      	ldr	r2, [pc, #208]	@ (80022a4 <HAL_DMA_Abort_IT+0x3bc>)
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d059      	beq.n	800228a <HAL_DMA_Abort_IT+0x3a2>
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	4a33      	ldr	r2, [pc, #204]	@ (80022a8 <HAL_DMA_Abort_IT+0x3c0>)
 80021dc:	4293      	cmp	r3, r2
 80021de:	d054      	beq.n	800228a <HAL_DMA_Abort_IT+0x3a2>
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	4a31      	ldr	r2, [pc, #196]	@ (80022ac <HAL_DMA_Abort_IT+0x3c4>)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d04f      	beq.n	800228a <HAL_DMA_Abort_IT+0x3a2>
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	4a30      	ldr	r2, [pc, #192]	@ (80022b0 <HAL_DMA_Abort_IT+0x3c8>)
 80021f0:	4293      	cmp	r3, r2
 80021f2:	d04a      	beq.n	800228a <HAL_DMA_Abort_IT+0x3a2>
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	4a2e      	ldr	r2, [pc, #184]	@ (80022b4 <HAL_DMA_Abort_IT+0x3cc>)
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d045      	beq.n	800228a <HAL_DMA_Abort_IT+0x3a2>
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	4a2d      	ldr	r2, [pc, #180]	@ (80022b8 <HAL_DMA_Abort_IT+0x3d0>)
 8002204:	4293      	cmp	r3, r2
 8002206:	d040      	beq.n	800228a <HAL_DMA_Abort_IT+0x3a2>
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4a2b      	ldr	r2, [pc, #172]	@ (80022bc <HAL_DMA_Abort_IT+0x3d4>)
 800220e:	4293      	cmp	r3, r2
 8002210:	d03b      	beq.n	800228a <HAL_DMA_Abort_IT+0x3a2>
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	4a2a      	ldr	r2, [pc, #168]	@ (80022c0 <HAL_DMA_Abort_IT+0x3d8>)
 8002218:	4293      	cmp	r3, r2
 800221a:	d036      	beq.n	800228a <HAL_DMA_Abort_IT+0x3a2>
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4a28      	ldr	r2, [pc, #160]	@ (80022c4 <HAL_DMA_Abort_IT+0x3dc>)
 8002222:	4293      	cmp	r3, r2
 8002224:	d031      	beq.n	800228a <HAL_DMA_Abort_IT+0x3a2>
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	4a27      	ldr	r2, [pc, #156]	@ (80022c8 <HAL_DMA_Abort_IT+0x3e0>)
 800222c:	4293      	cmp	r3, r2
 800222e:	d02c      	beq.n	800228a <HAL_DMA_Abort_IT+0x3a2>
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	4a25      	ldr	r2, [pc, #148]	@ (80022cc <HAL_DMA_Abort_IT+0x3e4>)
 8002236:	4293      	cmp	r3, r2
 8002238:	d027      	beq.n	800228a <HAL_DMA_Abort_IT+0x3a2>
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	4a24      	ldr	r2, [pc, #144]	@ (80022d0 <HAL_DMA_Abort_IT+0x3e8>)
 8002240:	4293      	cmp	r3, r2
 8002242:	d022      	beq.n	800228a <HAL_DMA_Abort_IT+0x3a2>
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	4a22      	ldr	r2, [pc, #136]	@ (80022d4 <HAL_DMA_Abort_IT+0x3ec>)
 800224a:	4293      	cmp	r3, r2
 800224c:	d01d      	beq.n	800228a <HAL_DMA_Abort_IT+0x3a2>
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	4a21      	ldr	r2, [pc, #132]	@ (80022d8 <HAL_DMA_Abort_IT+0x3f0>)
 8002254:	4293      	cmp	r3, r2
 8002256:	d018      	beq.n	800228a <HAL_DMA_Abort_IT+0x3a2>
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	4a1f      	ldr	r2, [pc, #124]	@ (80022dc <HAL_DMA_Abort_IT+0x3f4>)
 800225e:	4293      	cmp	r3, r2
 8002260:	d013      	beq.n	800228a <HAL_DMA_Abort_IT+0x3a2>
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	4a1e      	ldr	r2, [pc, #120]	@ (80022e0 <HAL_DMA_Abort_IT+0x3f8>)
 8002268:	4293      	cmp	r3, r2
 800226a:	d00e      	beq.n	800228a <HAL_DMA_Abort_IT+0x3a2>
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4a1c      	ldr	r2, [pc, #112]	@ (80022e4 <HAL_DMA_Abort_IT+0x3fc>)
 8002272:	4293      	cmp	r3, r2
 8002274:	d009      	beq.n	800228a <HAL_DMA_Abort_IT+0x3a2>
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	4a1b      	ldr	r2, [pc, #108]	@ (80022e8 <HAL_DMA_Abort_IT+0x400>)
 800227c:	4293      	cmp	r3, r2
 800227e:	d004      	beq.n	800228a <HAL_DMA_Abort_IT+0x3a2>
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4a19      	ldr	r2, [pc, #100]	@ (80022ec <HAL_DMA_Abort_IT+0x404>)
 8002286:	4293      	cmp	r3, r2
 8002288:	d132      	bne.n	80022f0 <HAL_DMA_Abort_IT+0x408>
 800228a:	2301      	movs	r3, #1
 800228c:	e031      	b.n	80022f2 <HAL_DMA_Abort_IT+0x40a>
 800228e:	bf00      	nop
 8002290:	40020010 	.word	0x40020010
 8002294:	40020028 	.word	0x40020028
 8002298:	40020040 	.word	0x40020040
 800229c:	40020058 	.word	0x40020058
 80022a0:	40020070 	.word	0x40020070
 80022a4:	40020088 	.word	0x40020088
 80022a8:	400200a0 	.word	0x400200a0
 80022ac:	400200b8 	.word	0x400200b8
 80022b0:	40020410 	.word	0x40020410
 80022b4:	40020428 	.word	0x40020428
 80022b8:	40020440 	.word	0x40020440
 80022bc:	40020458 	.word	0x40020458
 80022c0:	40020470 	.word	0x40020470
 80022c4:	40020488 	.word	0x40020488
 80022c8:	400204a0 	.word	0x400204a0
 80022cc:	400204b8 	.word	0x400204b8
 80022d0:	58025408 	.word	0x58025408
 80022d4:	5802541c 	.word	0x5802541c
 80022d8:	58025430 	.word	0x58025430
 80022dc:	58025444 	.word	0x58025444
 80022e0:	58025458 	.word	0x58025458
 80022e4:	5802546c 	.word	0x5802546c
 80022e8:	58025480 	.word	0x58025480
 80022ec:	58025494 	.word	0x58025494
 80022f0:	2300      	movs	r3, #0
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d028      	beq.n	8002348 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80022fa:	681a      	ldr	r2, [r3, #0]
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002300:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002304:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800230a:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002310:	f003 031f 	and.w	r3, r3, #31
 8002314:	2201      	movs	r2, #1
 8002316:	409a      	lsls	r2, r3
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002320:	687a      	ldr	r2, [r7, #4]
 8002322:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8002324:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800232a:	2b00      	cmp	r3, #0
 800232c:	d00c      	beq.n	8002348 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002332:	681a      	ldr	r2, [r3, #0]
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002338:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800233c:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002342:	687a      	ldr	r2, [r7, #4]
 8002344:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002346:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	2201      	movs	r2, #1
 800234c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2200      	movs	r2, #0
 8002354:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800235c:	2b00      	cmp	r3, #0
 800235e:	d003      	beq.n	8002368 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002364:	6878      	ldr	r0, [r7, #4]
 8002366:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8002368:	2300      	movs	r3, #0
}
 800236a:	4618      	mov	r0, r3
 800236c:	3710      	adds	r7, #16
 800236e:	46bd      	mov	sp, r7
 8002370:	bd80      	pop	{r7, pc}
 8002372:	bf00      	nop

08002374 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b08a      	sub	sp, #40	@ 0x28
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 800237c:	2300      	movs	r3, #0
 800237e:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002380:	4b67      	ldr	r3, [pc, #412]	@ (8002520 <HAL_DMA_IRQHandler+0x1ac>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4a67      	ldr	r2, [pc, #412]	@ (8002524 <HAL_DMA_IRQHandler+0x1b0>)
 8002386:	fba2 2303 	umull	r2, r3, r2, r3
 800238a:	0a9b      	lsrs	r3, r3, #10
 800238c:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002392:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002398:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800239a:	6a3b      	ldr	r3, [r7, #32]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80023a0:	69fb      	ldr	r3, [r7, #28]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	4a5f      	ldr	r2, [pc, #380]	@ (8002528 <HAL_DMA_IRQHandler+0x1b4>)
 80023ac:	4293      	cmp	r3, r2
 80023ae:	d04a      	beq.n	8002446 <HAL_DMA_IRQHandler+0xd2>
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4a5d      	ldr	r2, [pc, #372]	@ (800252c <HAL_DMA_IRQHandler+0x1b8>)
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d045      	beq.n	8002446 <HAL_DMA_IRQHandler+0xd2>
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	4a5c      	ldr	r2, [pc, #368]	@ (8002530 <HAL_DMA_IRQHandler+0x1bc>)
 80023c0:	4293      	cmp	r3, r2
 80023c2:	d040      	beq.n	8002446 <HAL_DMA_IRQHandler+0xd2>
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	4a5a      	ldr	r2, [pc, #360]	@ (8002534 <HAL_DMA_IRQHandler+0x1c0>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d03b      	beq.n	8002446 <HAL_DMA_IRQHandler+0xd2>
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	4a59      	ldr	r2, [pc, #356]	@ (8002538 <HAL_DMA_IRQHandler+0x1c4>)
 80023d4:	4293      	cmp	r3, r2
 80023d6:	d036      	beq.n	8002446 <HAL_DMA_IRQHandler+0xd2>
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	4a57      	ldr	r2, [pc, #348]	@ (800253c <HAL_DMA_IRQHandler+0x1c8>)
 80023de:	4293      	cmp	r3, r2
 80023e0:	d031      	beq.n	8002446 <HAL_DMA_IRQHandler+0xd2>
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	4a56      	ldr	r2, [pc, #344]	@ (8002540 <HAL_DMA_IRQHandler+0x1cc>)
 80023e8:	4293      	cmp	r3, r2
 80023ea:	d02c      	beq.n	8002446 <HAL_DMA_IRQHandler+0xd2>
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	4a54      	ldr	r2, [pc, #336]	@ (8002544 <HAL_DMA_IRQHandler+0x1d0>)
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d027      	beq.n	8002446 <HAL_DMA_IRQHandler+0xd2>
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	4a53      	ldr	r2, [pc, #332]	@ (8002548 <HAL_DMA_IRQHandler+0x1d4>)
 80023fc:	4293      	cmp	r3, r2
 80023fe:	d022      	beq.n	8002446 <HAL_DMA_IRQHandler+0xd2>
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	4a51      	ldr	r2, [pc, #324]	@ (800254c <HAL_DMA_IRQHandler+0x1d8>)
 8002406:	4293      	cmp	r3, r2
 8002408:	d01d      	beq.n	8002446 <HAL_DMA_IRQHandler+0xd2>
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	4a50      	ldr	r2, [pc, #320]	@ (8002550 <HAL_DMA_IRQHandler+0x1dc>)
 8002410:	4293      	cmp	r3, r2
 8002412:	d018      	beq.n	8002446 <HAL_DMA_IRQHandler+0xd2>
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	4a4e      	ldr	r2, [pc, #312]	@ (8002554 <HAL_DMA_IRQHandler+0x1e0>)
 800241a:	4293      	cmp	r3, r2
 800241c:	d013      	beq.n	8002446 <HAL_DMA_IRQHandler+0xd2>
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	4a4d      	ldr	r2, [pc, #308]	@ (8002558 <HAL_DMA_IRQHandler+0x1e4>)
 8002424:	4293      	cmp	r3, r2
 8002426:	d00e      	beq.n	8002446 <HAL_DMA_IRQHandler+0xd2>
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	4a4b      	ldr	r2, [pc, #300]	@ (800255c <HAL_DMA_IRQHandler+0x1e8>)
 800242e:	4293      	cmp	r3, r2
 8002430:	d009      	beq.n	8002446 <HAL_DMA_IRQHandler+0xd2>
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	4a4a      	ldr	r2, [pc, #296]	@ (8002560 <HAL_DMA_IRQHandler+0x1ec>)
 8002438:	4293      	cmp	r3, r2
 800243a:	d004      	beq.n	8002446 <HAL_DMA_IRQHandler+0xd2>
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4a48      	ldr	r2, [pc, #288]	@ (8002564 <HAL_DMA_IRQHandler+0x1f0>)
 8002442:	4293      	cmp	r3, r2
 8002444:	d101      	bne.n	800244a <HAL_DMA_IRQHandler+0xd6>
 8002446:	2301      	movs	r3, #1
 8002448:	e000      	b.n	800244c <HAL_DMA_IRQHandler+0xd8>
 800244a:	2300      	movs	r3, #0
 800244c:	2b00      	cmp	r3, #0
 800244e:	f000 842b 	beq.w	8002ca8 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002456:	f003 031f 	and.w	r3, r3, #31
 800245a:	2208      	movs	r2, #8
 800245c:	409a      	lsls	r2, r3
 800245e:	69bb      	ldr	r3, [r7, #24]
 8002460:	4013      	ands	r3, r2
 8002462:	2b00      	cmp	r3, #0
 8002464:	f000 80a2 	beq.w	80025ac <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4a2e      	ldr	r2, [pc, #184]	@ (8002528 <HAL_DMA_IRQHandler+0x1b4>)
 800246e:	4293      	cmp	r3, r2
 8002470:	d04a      	beq.n	8002508 <HAL_DMA_IRQHandler+0x194>
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	4a2d      	ldr	r2, [pc, #180]	@ (800252c <HAL_DMA_IRQHandler+0x1b8>)
 8002478:	4293      	cmp	r3, r2
 800247a:	d045      	beq.n	8002508 <HAL_DMA_IRQHandler+0x194>
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	4a2b      	ldr	r2, [pc, #172]	@ (8002530 <HAL_DMA_IRQHandler+0x1bc>)
 8002482:	4293      	cmp	r3, r2
 8002484:	d040      	beq.n	8002508 <HAL_DMA_IRQHandler+0x194>
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	4a2a      	ldr	r2, [pc, #168]	@ (8002534 <HAL_DMA_IRQHandler+0x1c0>)
 800248c:	4293      	cmp	r3, r2
 800248e:	d03b      	beq.n	8002508 <HAL_DMA_IRQHandler+0x194>
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	4a28      	ldr	r2, [pc, #160]	@ (8002538 <HAL_DMA_IRQHandler+0x1c4>)
 8002496:	4293      	cmp	r3, r2
 8002498:	d036      	beq.n	8002508 <HAL_DMA_IRQHandler+0x194>
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	4a27      	ldr	r2, [pc, #156]	@ (800253c <HAL_DMA_IRQHandler+0x1c8>)
 80024a0:	4293      	cmp	r3, r2
 80024a2:	d031      	beq.n	8002508 <HAL_DMA_IRQHandler+0x194>
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	4a25      	ldr	r2, [pc, #148]	@ (8002540 <HAL_DMA_IRQHandler+0x1cc>)
 80024aa:	4293      	cmp	r3, r2
 80024ac:	d02c      	beq.n	8002508 <HAL_DMA_IRQHandler+0x194>
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	4a24      	ldr	r2, [pc, #144]	@ (8002544 <HAL_DMA_IRQHandler+0x1d0>)
 80024b4:	4293      	cmp	r3, r2
 80024b6:	d027      	beq.n	8002508 <HAL_DMA_IRQHandler+0x194>
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	4a22      	ldr	r2, [pc, #136]	@ (8002548 <HAL_DMA_IRQHandler+0x1d4>)
 80024be:	4293      	cmp	r3, r2
 80024c0:	d022      	beq.n	8002508 <HAL_DMA_IRQHandler+0x194>
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4a21      	ldr	r2, [pc, #132]	@ (800254c <HAL_DMA_IRQHandler+0x1d8>)
 80024c8:	4293      	cmp	r3, r2
 80024ca:	d01d      	beq.n	8002508 <HAL_DMA_IRQHandler+0x194>
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4a1f      	ldr	r2, [pc, #124]	@ (8002550 <HAL_DMA_IRQHandler+0x1dc>)
 80024d2:	4293      	cmp	r3, r2
 80024d4:	d018      	beq.n	8002508 <HAL_DMA_IRQHandler+0x194>
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	4a1e      	ldr	r2, [pc, #120]	@ (8002554 <HAL_DMA_IRQHandler+0x1e0>)
 80024dc:	4293      	cmp	r3, r2
 80024de:	d013      	beq.n	8002508 <HAL_DMA_IRQHandler+0x194>
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	4a1c      	ldr	r2, [pc, #112]	@ (8002558 <HAL_DMA_IRQHandler+0x1e4>)
 80024e6:	4293      	cmp	r3, r2
 80024e8:	d00e      	beq.n	8002508 <HAL_DMA_IRQHandler+0x194>
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	4a1b      	ldr	r2, [pc, #108]	@ (800255c <HAL_DMA_IRQHandler+0x1e8>)
 80024f0:	4293      	cmp	r3, r2
 80024f2:	d009      	beq.n	8002508 <HAL_DMA_IRQHandler+0x194>
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	4a19      	ldr	r2, [pc, #100]	@ (8002560 <HAL_DMA_IRQHandler+0x1ec>)
 80024fa:	4293      	cmp	r3, r2
 80024fc:	d004      	beq.n	8002508 <HAL_DMA_IRQHandler+0x194>
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	4a18      	ldr	r2, [pc, #96]	@ (8002564 <HAL_DMA_IRQHandler+0x1f0>)
 8002504:	4293      	cmp	r3, r2
 8002506:	d12f      	bne.n	8002568 <HAL_DMA_IRQHandler+0x1f4>
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f003 0304 	and.w	r3, r3, #4
 8002512:	2b00      	cmp	r3, #0
 8002514:	bf14      	ite	ne
 8002516:	2301      	movne	r3, #1
 8002518:	2300      	moveq	r3, #0
 800251a:	b2db      	uxtb	r3, r3
 800251c:	e02e      	b.n	800257c <HAL_DMA_IRQHandler+0x208>
 800251e:	bf00      	nop
 8002520:	24000004 	.word	0x24000004
 8002524:	1b4e81b5 	.word	0x1b4e81b5
 8002528:	40020010 	.word	0x40020010
 800252c:	40020028 	.word	0x40020028
 8002530:	40020040 	.word	0x40020040
 8002534:	40020058 	.word	0x40020058
 8002538:	40020070 	.word	0x40020070
 800253c:	40020088 	.word	0x40020088
 8002540:	400200a0 	.word	0x400200a0
 8002544:	400200b8 	.word	0x400200b8
 8002548:	40020410 	.word	0x40020410
 800254c:	40020428 	.word	0x40020428
 8002550:	40020440 	.word	0x40020440
 8002554:	40020458 	.word	0x40020458
 8002558:	40020470 	.word	0x40020470
 800255c:	40020488 	.word	0x40020488
 8002560:	400204a0 	.word	0x400204a0
 8002564:	400204b8 	.word	0x400204b8
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f003 0308 	and.w	r3, r3, #8
 8002572:	2b00      	cmp	r3, #0
 8002574:	bf14      	ite	ne
 8002576:	2301      	movne	r3, #1
 8002578:	2300      	moveq	r3, #0
 800257a:	b2db      	uxtb	r3, r3
 800257c:	2b00      	cmp	r3, #0
 800257e:	d015      	beq.n	80025ac <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	681a      	ldr	r2, [r3, #0]
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f022 0204 	bic.w	r2, r2, #4
 800258e:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002594:	f003 031f 	and.w	r3, r3, #31
 8002598:	2208      	movs	r2, #8
 800259a:	409a      	lsls	r2, r3
 800259c:	6a3b      	ldr	r3, [r7, #32]
 800259e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025a4:	f043 0201 	orr.w	r2, r3, #1
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025b0:	f003 031f 	and.w	r3, r3, #31
 80025b4:	69ba      	ldr	r2, [r7, #24]
 80025b6:	fa22 f303 	lsr.w	r3, r2, r3
 80025ba:	f003 0301 	and.w	r3, r3, #1
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d06e      	beq.n	80026a0 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	4a69      	ldr	r2, [pc, #420]	@ (800276c <HAL_DMA_IRQHandler+0x3f8>)
 80025c8:	4293      	cmp	r3, r2
 80025ca:	d04a      	beq.n	8002662 <HAL_DMA_IRQHandler+0x2ee>
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	4a67      	ldr	r2, [pc, #412]	@ (8002770 <HAL_DMA_IRQHandler+0x3fc>)
 80025d2:	4293      	cmp	r3, r2
 80025d4:	d045      	beq.n	8002662 <HAL_DMA_IRQHandler+0x2ee>
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	4a66      	ldr	r2, [pc, #408]	@ (8002774 <HAL_DMA_IRQHandler+0x400>)
 80025dc:	4293      	cmp	r3, r2
 80025de:	d040      	beq.n	8002662 <HAL_DMA_IRQHandler+0x2ee>
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	4a64      	ldr	r2, [pc, #400]	@ (8002778 <HAL_DMA_IRQHandler+0x404>)
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d03b      	beq.n	8002662 <HAL_DMA_IRQHandler+0x2ee>
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	4a63      	ldr	r2, [pc, #396]	@ (800277c <HAL_DMA_IRQHandler+0x408>)
 80025f0:	4293      	cmp	r3, r2
 80025f2:	d036      	beq.n	8002662 <HAL_DMA_IRQHandler+0x2ee>
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	4a61      	ldr	r2, [pc, #388]	@ (8002780 <HAL_DMA_IRQHandler+0x40c>)
 80025fa:	4293      	cmp	r3, r2
 80025fc:	d031      	beq.n	8002662 <HAL_DMA_IRQHandler+0x2ee>
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	4a60      	ldr	r2, [pc, #384]	@ (8002784 <HAL_DMA_IRQHandler+0x410>)
 8002604:	4293      	cmp	r3, r2
 8002606:	d02c      	beq.n	8002662 <HAL_DMA_IRQHandler+0x2ee>
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	4a5e      	ldr	r2, [pc, #376]	@ (8002788 <HAL_DMA_IRQHandler+0x414>)
 800260e:	4293      	cmp	r3, r2
 8002610:	d027      	beq.n	8002662 <HAL_DMA_IRQHandler+0x2ee>
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	4a5d      	ldr	r2, [pc, #372]	@ (800278c <HAL_DMA_IRQHandler+0x418>)
 8002618:	4293      	cmp	r3, r2
 800261a:	d022      	beq.n	8002662 <HAL_DMA_IRQHandler+0x2ee>
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	4a5b      	ldr	r2, [pc, #364]	@ (8002790 <HAL_DMA_IRQHandler+0x41c>)
 8002622:	4293      	cmp	r3, r2
 8002624:	d01d      	beq.n	8002662 <HAL_DMA_IRQHandler+0x2ee>
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4a5a      	ldr	r2, [pc, #360]	@ (8002794 <HAL_DMA_IRQHandler+0x420>)
 800262c:	4293      	cmp	r3, r2
 800262e:	d018      	beq.n	8002662 <HAL_DMA_IRQHandler+0x2ee>
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	4a58      	ldr	r2, [pc, #352]	@ (8002798 <HAL_DMA_IRQHandler+0x424>)
 8002636:	4293      	cmp	r3, r2
 8002638:	d013      	beq.n	8002662 <HAL_DMA_IRQHandler+0x2ee>
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	4a57      	ldr	r2, [pc, #348]	@ (800279c <HAL_DMA_IRQHandler+0x428>)
 8002640:	4293      	cmp	r3, r2
 8002642:	d00e      	beq.n	8002662 <HAL_DMA_IRQHandler+0x2ee>
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	4a55      	ldr	r2, [pc, #340]	@ (80027a0 <HAL_DMA_IRQHandler+0x42c>)
 800264a:	4293      	cmp	r3, r2
 800264c:	d009      	beq.n	8002662 <HAL_DMA_IRQHandler+0x2ee>
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	4a54      	ldr	r2, [pc, #336]	@ (80027a4 <HAL_DMA_IRQHandler+0x430>)
 8002654:	4293      	cmp	r3, r2
 8002656:	d004      	beq.n	8002662 <HAL_DMA_IRQHandler+0x2ee>
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	4a52      	ldr	r2, [pc, #328]	@ (80027a8 <HAL_DMA_IRQHandler+0x434>)
 800265e:	4293      	cmp	r3, r2
 8002660:	d10a      	bne.n	8002678 <HAL_DMA_IRQHandler+0x304>
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	695b      	ldr	r3, [r3, #20]
 8002668:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800266c:	2b00      	cmp	r3, #0
 800266e:	bf14      	ite	ne
 8002670:	2301      	movne	r3, #1
 8002672:	2300      	moveq	r3, #0
 8002674:	b2db      	uxtb	r3, r3
 8002676:	e003      	b.n	8002680 <HAL_DMA_IRQHandler+0x30c>
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	2300      	movs	r3, #0
 8002680:	2b00      	cmp	r3, #0
 8002682:	d00d      	beq.n	80026a0 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002688:	f003 031f 	and.w	r3, r3, #31
 800268c:	2201      	movs	r2, #1
 800268e:	409a      	lsls	r2, r3
 8002690:	6a3b      	ldr	r3, [r7, #32]
 8002692:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002698:	f043 0202 	orr.w	r2, r3, #2
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026a4:	f003 031f 	and.w	r3, r3, #31
 80026a8:	2204      	movs	r2, #4
 80026aa:	409a      	lsls	r2, r3
 80026ac:	69bb      	ldr	r3, [r7, #24]
 80026ae:	4013      	ands	r3, r2
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	f000 808f 	beq.w	80027d4 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	4a2c      	ldr	r2, [pc, #176]	@ (800276c <HAL_DMA_IRQHandler+0x3f8>)
 80026bc:	4293      	cmp	r3, r2
 80026be:	d04a      	beq.n	8002756 <HAL_DMA_IRQHandler+0x3e2>
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	4a2a      	ldr	r2, [pc, #168]	@ (8002770 <HAL_DMA_IRQHandler+0x3fc>)
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d045      	beq.n	8002756 <HAL_DMA_IRQHandler+0x3e2>
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	4a29      	ldr	r2, [pc, #164]	@ (8002774 <HAL_DMA_IRQHandler+0x400>)
 80026d0:	4293      	cmp	r3, r2
 80026d2:	d040      	beq.n	8002756 <HAL_DMA_IRQHandler+0x3e2>
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	4a27      	ldr	r2, [pc, #156]	@ (8002778 <HAL_DMA_IRQHandler+0x404>)
 80026da:	4293      	cmp	r3, r2
 80026dc:	d03b      	beq.n	8002756 <HAL_DMA_IRQHandler+0x3e2>
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	4a26      	ldr	r2, [pc, #152]	@ (800277c <HAL_DMA_IRQHandler+0x408>)
 80026e4:	4293      	cmp	r3, r2
 80026e6:	d036      	beq.n	8002756 <HAL_DMA_IRQHandler+0x3e2>
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	4a24      	ldr	r2, [pc, #144]	@ (8002780 <HAL_DMA_IRQHandler+0x40c>)
 80026ee:	4293      	cmp	r3, r2
 80026f0:	d031      	beq.n	8002756 <HAL_DMA_IRQHandler+0x3e2>
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	4a23      	ldr	r2, [pc, #140]	@ (8002784 <HAL_DMA_IRQHandler+0x410>)
 80026f8:	4293      	cmp	r3, r2
 80026fa:	d02c      	beq.n	8002756 <HAL_DMA_IRQHandler+0x3e2>
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	4a21      	ldr	r2, [pc, #132]	@ (8002788 <HAL_DMA_IRQHandler+0x414>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d027      	beq.n	8002756 <HAL_DMA_IRQHandler+0x3e2>
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	4a20      	ldr	r2, [pc, #128]	@ (800278c <HAL_DMA_IRQHandler+0x418>)
 800270c:	4293      	cmp	r3, r2
 800270e:	d022      	beq.n	8002756 <HAL_DMA_IRQHandler+0x3e2>
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	4a1e      	ldr	r2, [pc, #120]	@ (8002790 <HAL_DMA_IRQHandler+0x41c>)
 8002716:	4293      	cmp	r3, r2
 8002718:	d01d      	beq.n	8002756 <HAL_DMA_IRQHandler+0x3e2>
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	4a1d      	ldr	r2, [pc, #116]	@ (8002794 <HAL_DMA_IRQHandler+0x420>)
 8002720:	4293      	cmp	r3, r2
 8002722:	d018      	beq.n	8002756 <HAL_DMA_IRQHandler+0x3e2>
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4a1b      	ldr	r2, [pc, #108]	@ (8002798 <HAL_DMA_IRQHandler+0x424>)
 800272a:	4293      	cmp	r3, r2
 800272c:	d013      	beq.n	8002756 <HAL_DMA_IRQHandler+0x3e2>
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	4a1a      	ldr	r2, [pc, #104]	@ (800279c <HAL_DMA_IRQHandler+0x428>)
 8002734:	4293      	cmp	r3, r2
 8002736:	d00e      	beq.n	8002756 <HAL_DMA_IRQHandler+0x3e2>
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	4a18      	ldr	r2, [pc, #96]	@ (80027a0 <HAL_DMA_IRQHandler+0x42c>)
 800273e:	4293      	cmp	r3, r2
 8002740:	d009      	beq.n	8002756 <HAL_DMA_IRQHandler+0x3e2>
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	4a17      	ldr	r2, [pc, #92]	@ (80027a4 <HAL_DMA_IRQHandler+0x430>)
 8002748:	4293      	cmp	r3, r2
 800274a:	d004      	beq.n	8002756 <HAL_DMA_IRQHandler+0x3e2>
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4a15      	ldr	r2, [pc, #84]	@ (80027a8 <HAL_DMA_IRQHandler+0x434>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d12a      	bne.n	80027ac <HAL_DMA_IRQHandler+0x438>
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f003 0302 	and.w	r3, r3, #2
 8002760:	2b00      	cmp	r3, #0
 8002762:	bf14      	ite	ne
 8002764:	2301      	movne	r3, #1
 8002766:	2300      	moveq	r3, #0
 8002768:	b2db      	uxtb	r3, r3
 800276a:	e023      	b.n	80027b4 <HAL_DMA_IRQHandler+0x440>
 800276c:	40020010 	.word	0x40020010
 8002770:	40020028 	.word	0x40020028
 8002774:	40020040 	.word	0x40020040
 8002778:	40020058 	.word	0x40020058
 800277c:	40020070 	.word	0x40020070
 8002780:	40020088 	.word	0x40020088
 8002784:	400200a0 	.word	0x400200a0
 8002788:	400200b8 	.word	0x400200b8
 800278c:	40020410 	.word	0x40020410
 8002790:	40020428 	.word	0x40020428
 8002794:	40020440 	.word	0x40020440
 8002798:	40020458 	.word	0x40020458
 800279c:	40020470 	.word	0x40020470
 80027a0:	40020488 	.word	0x40020488
 80027a4:	400204a0 	.word	0x400204a0
 80027a8:	400204b8 	.word	0x400204b8
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	2300      	movs	r3, #0
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d00d      	beq.n	80027d4 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027bc:	f003 031f 	and.w	r3, r3, #31
 80027c0:	2204      	movs	r2, #4
 80027c2:	409a      	lsls	r2, r3
 80027c4:	6a3b      	ldr	r3, [r7, #32]
 80027c6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027cc:	f043 0204 	orr.w	r2, r3, #4
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027d8:	f003 031f 	and.w	r3, r3, #31
 80027dc:	2210      	movs	r2, #16
 80027de:	409a      	lsls	r2, r3
 80027e0:	69bb      	ldr	r3, [r7, #24]
 80027e2:	4013      	ands	r3, r2
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	f000 80a6 	beq.w	8002936 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	4a85      	ldr	r2, [pc, #532]	@ (8002a04 <HAL_DMA_IRQHandler+0x690>)
 80027f0:	4293      	cmp	r3, r2
 80027f2:	d04a      	beq.n	800288a <HAL_DMA_IRQHandler+0x516>
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	4a83      	ldr	r2, [pc, #524]	@ (8002a08 <HAL_DMA_IRQHandler+0x694>)
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d045      	beq.n	800288a <HAL_DMA_IRQHandler+0x516>
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	4a82      	ldr	r2, [pc, #520]	@ (8002a0c <HAL_DMA_IRQHandler+0x698>)
 8002804:	4293      	cmp	r3, r2
 8002806:	d040      	beq.n	800288a <HAL_DMA_IRQHandler+0x516>
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4a80      	ldr	r2, [pc, #512]	@ (8002a10 <HAL_DMA_IRQHandler+0x69c>)
 800280e:	4293      	cmp	r3, r2
 8002810:	d03b      	beq.n	800288a <HAL_DMA_IRQHandler+0x516>
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	4a7f      	ldr	r2, [pc, #508]	@ (8002a14 <HAL_DMA_IRQHandler+0x6a0>)
 8002818:	4293      	cmp	r3, r2
 800281a:	d036      	beq.n	800288a <HAL_DMA_IRQHandler+0x516>
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	4a7d      	ldr	r2, [pc, #500]	@ (8002a18 <HAL_DMA_IRQHandler+0x6a4>)
 8002822:	4293      	cmp	r3, r2
 8002824:	d031      	beq.n	800288a <HAL_DMA_IRQHandler+0x516>
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4a7c      	ldr	r2, [pc, #496]	@ (8002a1c <HAL_DMA_IRQHandler+0x6a8>)
 800282c:	4293      	cmp	r3, r2
 800282e:	d02c      	beq.n	800288a <HAL_DMA_IRQHandler+0x516>
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4a7a      	ldr	r2, [pc, #488]	@ (8002a20 <HAL_DMA_IRQHandler+0x6ac>)
 8002836:	4293      	cmp	r3, r2
 8002838:	d027      	beq.n	800288a <HAL_DMA_IRQHandler+0x516>
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	4a79      	ldr	r2, [pc, #484]	@ (8002a24 <HAL_DMA_IRQHandler+0x6b0>)
 8002840:	4293      	cmp	r3, r2
 8002842:	d022      	beq.n	800288a <HAL_DMA_IRQHandler+0x516>
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4a77      	ldr	r2, [pc, #476]	@ (8002a28 <HAL_DMA_IRQHandler+0x6b4>)
 800284a:	4293      	cmp	r3, r2
 800284c:	d01d      	beq.n	800288a <HAL_DMA_IRQHandler+0x516>
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	4a76      	ldr	r2, [pc, #472]	@ (8002a2c <HAL_DMA_IRQHandler+0x6b8>)
 8002854:	4293      	cmp	r3, r2
 8002856:	d018      	beq.n	800288a <HAL_DMA_IRQHandler+0x516>
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4a74      	ldr	r2, [pc, #464]	@ (8002a30 <HAL_DMA_IRQHandler+0x6bc>)
 800285e:	4293      	cmp	r3, r2
 8002860:	d013      	beq.n	800288a <HAL_DMA_IRQHandler+0x516>
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	4a73      	ldr	r2, [pc, #460]	@ (8002a34 <HAL_DMA_IRQHandler+0x6c0>)
 8002868:	4293      	cmp	r3, r2
 800286a:	d00e      	beq.n	800288a <HAL_DMA_IRQHandler+0x516>
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	4a71      	ldr	r2, [pc, #452]	@ (8002a38 <HAL_DMA_IRQHandler+0x6c4>)
 8002872:	4293      	cmp	r3, r2
 8002874:	d009      	beq.n	800288a <HAL_DMA_IRQHandler+0x516>
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4a70      	ldr	r2, [pc, #448]	@ (8002a3c <HAL_DMA_IRQHandler+0x6c8>)
 800287c:	4293      	cmp	r3, r2
 800287e:	d004      	beq.n	800288a <HAL_DMA_IRQHandler+0x516>
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	4a6e      	ldr	r2, [pc, #440]	@ (8002a40 <HAL_DMA_IRQHandler+0x6cc>)
 8002886:	4293      	cmp	r3, r2
 8002888:	d10a      	bne.n	80028a0 <HAL_DMA_IRQHandler+0x52c>
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f003 0308 	and.w	r3, r3, #8
 8002894:	2b00      	cmp	r3, #0
 8002896:	bf14      	ite	ne
 8002898:	2301      	movne	r3, #1
 800289a:	2300      	moveq	r3, #0
 800289c:	b2db      	uxtb	r3, r3
 800289e:	e009      	b.n	80028b4 <HAL_DMA_IRQHandler+0x540>
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f003 0304 	and.w	r3, r3, #4
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	bf14      	ite	ne
 80028ae:	2301      	movne	r3, #1
 80028b0:	2300      	moveq	r3, #0
 80028b2:	b2db      	uxtb	r3, r3
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d03e      	beq.n	8002936 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028bc:	f003 031f 	and.w	r3, r3, #31
 80028c0:	2210      	movs	r2, #16
 80028c2:	409a      	lsls	r2, r3
 80028c4:	6a3b      	ldr	r3, [r7, #32]
 80028c6:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d018      	beq.n	8002908 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d108      	bne.n	80028f6 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d024      	beq.n	8002936 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028f0:	6878      	ldr	r0, [r7, #4]
 80028f2:	4798      	blx	r3
 80028f4:	e01f      	b.n	8002936 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d01b      	beq.n	8002936 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002902:	6878      	ldr	r0, [r7, #4]
 8002904:	4798      	blx	r3
 8002906:	e016      	b.n	8002936 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002912:	2b00      	cmp	r3, #0
 8002914:	d107      	bne.n	8002926 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	681a      	ldr	r2, [r3, #0]
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f022 0208 	bic.w	r2, r2, #8
 8002924:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800292a:	2b00      	cmp	r3, #0
 800292c:	d003      	beq.n	8002936 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002932:	6878      	ldr	r0, [r7, #4]
 8002934:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800293a:	f003 031f 	and.w	r3, r3, #31
 800293e:	2220      	movs	r2, #32
 8002940:	409a      	lsls	r2, r3
 8002942:	69bb      	ldr	r3, [r7, #24]
 8002944:	4013      	ands	r3, r2
 8002946:	2b00      	cmp	r3, #0
 8002948:	f000 8110 	beq.w	8002b6c <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	4a2c      	ldr	r2, [pc, #176]	@ (8002a04 <HAL_DMA_IRQHandler+0x690>)
 8002952:	4293      	cmp	r3, r2
 8002954:	d04a      	beq.n	80029ec <HAL_DMA_IRQHandler+0x678>
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	4a2b      	ldr	r2, [pc, #172]	@ (8002a08 <HAL_DMA_IRQHandler+0x694>)
 800295c:	4293      	cmp	r3, r2
 800295e:	d045      	beq.n	80029ec <HAL_DMA_IRQHandler+0x678>
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4a29      	ldr	r2, [pc, #164]	@ (8002a0c <HAL_DMA_IRQHandler+0x698>)
 8002966:	4293      	cmp	r3, r2
 8002968:	d040      	beq.n	80029ec <HAL_DMA_IRQHandler+0x678>
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	4a28      	ldr	r2, [pc, #160]	@ (8002a10 <HAL_DMA_IRQHandler+0x69c>)
 8002970:	4293      	cmp	r3, r2
 8002972:	d03b      	beq.n	80029ec <HAL_DMA_IRQHandler+0x678>
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	4a26      	ldr	r2, [pc, #152]	@ (8002a14 <HAL_DMA_IRQHandler+0x6a0>)
 800297a:	4293      	cmp	r3, r2
 800297c:	d036      	beq.n	80029ec <HAL_DMA_IRQHandler+0x678>
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	4a25      	ldr	r2, [pc, #148]	@ (8002a18 <HAL_DMA_IRQHandler+0x6a4>)
 8002984:	4293      	cmp	r3, r2
 8002986:	d031      	beq.n	80029ec <HAL_DMA_IRQHandler+0x678>
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	4a23      	ldr	r2, [pc, #140]	@ (8002a1c <HAL_DMA_IRQHandler+0x6a8>)
 800298e:	4293      	cmp	r3, r2
 8002990:	d02c      	beq.n	80029ec <HAL_DMA_IRQHandler+0x678>
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	4a22      	ldr	r2, [pc, #136]	@ (8002a20 <HAL_DMA_IRQHandler+0x6ac>)
 8002998:	4293      	cmp	r3, r2
 800299a:	d027      	beq.n	80029ec <HAL_DMA_IRQHandler+0x678>
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	4a20      	ldr	r2, [pc, #128]	@ (8002a24 <HAL_DMA_IRQHandler+0x6b0>)
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d022      	beq.n	80029ec <HAL_DMA_IRQHandler+0x678>
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	4a1f      	ldr	r2, [pc, #124]	@ (8002a28 <HAL_DMA_IRQHandler+0x6b4>)
 80029ac:	4293      	cmp	r3, r2
 80029ae:	d01d      	beq.n	80029ec <HAL_DMA_IRQHandler+0x678>
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	4a1d      	ldr	r2, [pc, #116]	@ (8002a2c <HAL_DMA_IRQHandler+0x6b8>)
 80029b6:	4293      	cmp	r3, r2
 80029b8:	d018      	beq.n	80029ec <HAL_DMA_IRQHandler+0x678>
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	4a1c      	ldr	r2, [pc, #112]	@ (8002a30 <HAL_DMA_IRQHandler+0x6bc>)
 80029c0:	4293      	cmp	r3, r2
 80029c2:	d013      	beq.n	80029ec <HAL_DMA_IRQHandler+0x678>
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	4a1a      	ldr	r2, [pc, #104]	@ (8002a34 <HAL_DMA_IRQHandler+0x6c0>)
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d00e      	beq.n	80029ec <HAL_DMA_IRQHandler+0x678>
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	4a19      	ldr	r2, [pc, #100]	@ (8002a38 <HAL_DMA_IRQHandler+0x6c4>)
 80029d4:	4293      	cmp	r3, r2
 80029d6:	d009      	beq.n	80029ec <HAL_DMA_IRQHandler+0x678>
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	4a17      	ldr	r2, [pc, #92]	@ (8002a3c <HAL_DMA_IRQHandler+0x6c8>)
 80029de:	4293      	cmp	r3, r2
 80029e0:	d004      	beq.n	80029ec <HAL_DMA_IRQHandler+0x678>
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	4a16      	ldr	r2, [pc, #88]	@ (8002a40 <HAL_DMA_IRQHandler+0x6cc>)
 80029e8:	4293      	cmp	r3, r2
 80029ea:	d12b      	bne.n	8002a44 <HAL_DMA_IRQHandler+0x6d0>
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f003 0310 	and.w	r3, r3, #16
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	bf14      	ite	ne
 80029fa:	2301      	movne	r3, #1
 80029fc:	2300      	moveq	r3, #0
 80029fe:	b2db      	uxtb	r3, r3
 8002a00:	e02a      	b.n	8002a58 <HAL_DMA_IRQHandler+0x6e4>
 8002a02:	bf00      	nop
 8002a04:	40020010 	.word	0x40020010
 8002a08:	40020028 	.word	0x40020028
 8002a0c:	40020040 	.word	0x40020040
 8002a10:	40020058 	.word	0x40020058
 8002a14:	40020070 	.word	0x40020070
 8002a18:	40020088 	.word	0x40020088
 8002a1c:	400200a0 	.word	0x400200a0
 8002a20:	400200b8 	.word	0x400200b8
 8002a24:	40020410 	.word	0x40020410
 8002a28:	40020428 	.word	0x40020428
 8002a2c:	40020440 	.word	0x40020440
 8002a30:	40020458 	.word	0x40020458
 8002a34:	40020470 	.word	0x40020470
 8002a38:	40020488 	.word	0x40020488
 8002a3c:	400204a0 	.word	0x400204a0
 8002a40:	400204b8 	.word	0x400204b8
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f003 0302 	and.w	r3, r3, #2
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	bf14      	ite	ne
 8002a52:	2301      	movne	r3, #1
 8002a54:	2300      	moveq	r3, #0
 8002a56:	b2db      	uxtb	r3, r3
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	f000 8087 	beq.w	8002b6c <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a62:	f003 031f 	and.w	r3, r3, #31
 8002a66:	2220      	movs	r2, #32
 8002a68:	409a      	lsls	r2, r3
 8002a6a:	6a3b      	ldr	r3, [r7, #32]
 8002a6c:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002a74:	b2db      	uxtb	r3, r3
 8002a76:	2b04      	cmp	r3, #4
 8002a78:	d139      	bne.n	8002aee <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	681a      	ldr	r2, [r3, #0]
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f022 0216 	bic.w	r2, r2, #22
 8002a88:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	695a      	ldr	r2, [r3, #20]
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002a98:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d103      	bne.n	8002aaa <HAL_DMA_IRQHandler+0x736>
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d007      	beq.n	8002aba <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	681a      	ldr	r2, [r3, #0]
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f022 0208 	bic.w	r2, r2, #8
 8002ab8:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002abe:	f003 031f 	and.w	r3, r3, #31
 8002ac2:	223f      	movs	r2, #63	@ 0x3f
 8002ac4:	409a      	lsls	r2, r3
 8002ac6:	6a3b      	ldr	r3, [r7, #32]
 8002ac8:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	2201      	movs	r2, #1
 8002ace:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	f000 834a 	beq.w	8003178 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002ae8:	6878      	ldr	r0, [r7, #4]
 8002aea:	4798      	blx	r3
          }
          return;
 8002aec:	e344      	b.n	8003178 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d018      	beq.n	8002b2e <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d108      	bne.n	8002b1c <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d02c      	beq.n	8002b6c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b16:	6878      	ldr	r0, [r7, #4]
 8002b18:	4798      	blx	r3
 8002b1a:	e027      	b.n	8002b6c <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d023      	beq.n	8002b6c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b28:	6878      	ldr	r0, [r7, #4]
 8002b2a:	4798      	blx	r3
 8002b2c:	e01e      	b.n	8002b6c <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d10f      	bne.n	8002b5c <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	681a      	ldr	r2, [r3, #0]
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f022 0210 	bic.w	r2, r2, #16
 8002b4a:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2201      	movs	r2, #1
 8002b50:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2200      	movs	r2, #0
 8002b58:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d003      	beq.n	8002b6c <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b68:	6878      	ldr	r0, [r7, #4]
 8002b6a:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	f000 8306 	beq.w	8003182 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b7a:	f003 0301 	and.w	r3, r3, #1
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	f000 8088 	beq.w	8002c94 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2204      	movs	r2, #4
 8002b88:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4a7a      	ldr	r2, [pc, #488]	@ (8002d7c <HAL_DMA_IRQHandler+0xa08>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d04a      	beq.n	8002c2c <HAL_DMA_IRQHandler+0x8b8>
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	4a79      	ldr	r2, [pc, #484]	@ (8002d80 <HAL_DMA_IRQHandler+0xa0c>)
 8002b9c:	4293      	cmp	r3, r2
 8002b9e:	d045      	beq.n	8002c2c <HAL_DMA_IRQHandler+0x8b8>
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	4a77      	ldr	r2, [pc, #476]	@ (8002d84 <HAL_DMA_IRQHandler+0xa10>)
 8002ba6:	4293      	cmp	r3, r2
 8002ba8:	d040      	beq.n	8002c2c <HAL_DMA_IRQHandler+0x8b8>
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	4a76      	ldr	r2, [pc, #472]	@ (8002d88 <HAL_DMA_IRQHandler+0xa14>)
 8002bb0:	4293      	cmp	r3, r2
 8002bb2:	d03b      	beq.n	8002c2c <HAL_DMA_IRQHandler+0x8b8>
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4a74      	ldr	r2, [pc, #464]	@ (8002d8c <HAL_DMA_IRQHandler+0xa18>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d036      	beq.n	8002c2c <HAL_DMA_IRQHandler+0x8b8>
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	4a73      	ldr	r2, [pc, #460]	@ (8002d90 <HAL_DMA_IRQHandler+0xa1c>)
 8002bc4:	4293      	cmp	r3, r2
 8002bc6:	d031      	beq.n	8002c2c <HAL_DMA_IRQHandler+0x8b8>
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4a71      	ldr	r2, [pc, #452]	@ (8002d94 <HAL_DMA_IRQHandler+0xa20>)
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d02c      	beq.n	8002c2c <HAL_DMA_IRQHandler+0x8b8>
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	4a70      	ldr	r2, [pc, #448]	@ (8002d98 <HAL_DMA_IRQHandler+0xa24>)
 8002bd8:	4293      	cmp	r3, r2
 8002bda:	d027      	beq.n	8002c2c <HAL_DMA_IRQHandler+0x8b8>
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	4a6e      	ldr	r2, [pc, #440]	@ (8002d9c <HAL_DMA_IRQHandler+0xa28>)
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d022      	beq.n	8002c2c <HAL_DMA_IRQHandler+0x8b8>
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4a6d      	ldr	r2, [pc, #436]	@ (8002da0 <HAL_DMA_IRQHandler+0xa2c>)
 8002bec:	4293      	cmp	r3, r2
 8002bee:	d01d      	beq.n	8002c2c <HAL_DMA_IRQHandler+0x8b8>
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	4a6b      	ldr	r2, [pc, #428]	@ (8002da4 <HAL_DMA_IRQHandler+0xa30>)
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	d018      	beq.n	8002c2c <HAL_DMA_IRQHandler+0x8b8>
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4a6a      	ldr	r2, [pc, #424]	@ (8002da8 <HAL_DMA_IRQHandler+0xa34>)
 8002c00:	4293      	cmp	r3, r2
 8002c02:	d013      	beq.n	8002c2c <HAL_DMA_IRQHandler+0x8b8>
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	4a68      	ldr	r2, [pc, #416]	@ (8002dac <HAL_DMA_IRQHandler+0xa38>)
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d00e      	beq.n	8002c2c <HAL_DMA_IRQHandler+0x8b8>
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	4a67      	ldr	r2, [pc, #412]	@ (8002db0 <HAL_DMA_IRQHandler+0xa3c>)
 8002c14:	4293      	cmp	r3, r2
 8002c16:	d009      	beq.n	8002c2c <HAL_DMA_IRQHandler+0x8b8>
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4a65      	ldr	r2, [pc, #404]	@ (8002db4 <HAL_DMA_IRQHandler+0xa40>)
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d004      	beq.n	8002c2c <HAL_DMA_IRQHandler+0x8b8>
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	4a64      	ldr	r2, [pc, #400]	@ (8002db8 <HAL_DMA_IRQHandler+0xa44>)
 8002c28:	4293      	cmp	r3, r2
 8002c2a:	d108      	bne.n	8002c3e <HAL_DMA_IRQHandler+0x8ca>
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	681a      	ldr	r2, [r3, #0]
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f022 0201 	bic.w	r2, r2, #1
 8002c3a:	601a      	str	r2, [r3, #0]
 8002c3c:	e007      	b.n	8002c4e <HAL_DMA_IRQHandler+0x8da>
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	681a      	ldr	r2, [r3, #0]
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f022 0201 	bic.w	r2, r2, #1
 8002c4c:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	3301      	adds	r3, #1
 8002c52:	60fb      	str	r3, [r7, #12]
 8002c54:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c56:	429a      	cmp	r2, r3
 8002c58:	d307      	bcc.n	8002c6a <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f003 0301 	and.w	r3, r3, #1
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d1f2      	bne.n	8002c4e <HAL_DMA_IRQHandler+0x8da>
 8002c68:	e000      	b.n	8002c6c <HAL_DMA_IRQHandler+0x8f8>
            break;
 8002c6a:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f003 0301 	and.w	r3, r3, #1
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d004      	beq.n	8002c84 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	2203      	movs	r2, #3
 8002c7e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8002c82:	e003      	b.n	8002c8c <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2201      	movs	r2, #1
 8002c88:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2200      	movs	r2, #0
 8002c90:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	f000 8272 	beq.w	8003182 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ca2:	6878      	ldr	r0, [r7, #4]
 8002ca4:	4798      	blx	r3
 8002ca6:	e26c      	b.n	8003182 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	4a43      	ldr	r2, [pc, #268]	@ (8002dbc <HAL_DMA_IRQHandler+0xa48>)
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d022      	beq.n	8002cf8 <HAL_DMA_IRQHandler+0x984>
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	4a42      	ldr	r2, [pc, #264]	@ (8002dc0 <HAL_DMA_IRQHandler+0xa4c>)
 8002cb8:	4293      	cmp	r3, r2
 8002cba:	d01d      	beq.n	8002cf8 <HAL_DMA_IRQHandler+0x984>
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	4a40      	ldr	r2, [pc, #256]	@ (8002dc4 <HAL_DMA_IRQHandler+0xa50>)
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	d018      	beq.n	8002cf8 <HAL_DMA_IRQHandler+0x984>
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	4a3f      	ldr	r2, [pc, #252]	@ (8002dc8 <HAL_DMA_IRQHandler+0xa54>)
 8002ccc:	4293      	cmp	r3, r2
 8002cce:	d013      	beq.n	8002cf8 <HAL_DMA_IRQHandler+0x984>
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	4a3d      	ldr	r2, [pc, #244]	@ (8002dcc <HAL_DMA_IRQHandler+0xa58>)
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d00e      	beq.n	8002cf8 <HAL_DMA_IRQHandler+0x984>
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	4a3c      	ldr	r2, [pc, #240]	@ (8002dd0 <HAL_DMA_IRQHandler+0xa5c>)
 8002ce0:	4293      	cmp	r3, r2
 8002ce2:	d009      	beq.n	8002cf8 <HAL_DMA_IRQHandler+0x984>
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	4a3a      	ldr	r2, [pc, #232]	@ (8002dd4 <HAL_DMA_IRQHandler+0xa60>)
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d004      	beq.n	8002cf8 <HAL_DMA_IRQHandler+0x984>
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	4a39      	ldr	r2, [pc, #228]	@ (8002dd8 <HAL_DMA_IRQHandler+0xa64>)
 8002cf4:	4293      	cmp	r3, r2
 8002cf6:	d101      	bne.n	8002cfc <HAL_DMA_IRQHandler+0x988>
 8002cf8:	2301      	movs	r3, #1
 8002cfa:	e000      	b.n	8002cfe <HAL_DMA_IRQHandler+0x98a>
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	f000 823f 	beq.w	8003182 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d10:	f003 031f 	and.w	r3, r3, #31
 8002d14:	2204      	movs	r2, #4
 8002d16:	409a      	lsls	r2, r3
 8002d18:	697b      	ldr	r3, [r7, #20]
 8002d1a:	4013      	ands	r3, r2
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	f000 80cd 	beq.w	8002ebc <HAL_DMA_IRQHandler+0xb48>
 8002d22:	693b      	ldr	r3, [r7, #16]
 8002d24:	f003 0304 	and.w	r3, r3, #4
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	f000 80c7 	beq.w	8002ebc <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d32:	f003 031f 	and.w	r3, r3, #31
 8002d36:	2204      	movs	r2, #4
 8002d38:	409a      	lsls	r2, r3
 8002d3a:	69fb      	ldr	r3, [r7, #28]
 8002d3c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002d3e:	693b      	ldr	r3, [r7, #16]
 8002d40:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d049      	beq.n	8002ddc <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8002d48:	693b      	ldr	r3, [r7, #16]
 8002d4a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d109      	bne.n	8002d66 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	f000 8210 	beq.w	800317c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002d60:	6878      	ldr	r0, [r7, #4]
 8002d62:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002d64:	e20a      	b.n	800317c <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	f000 8206 	beq.w	800317c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d74:	6878      	ldr	r0, [r7, #4]
 8002d76:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002d78:	e200      	b.n	800317c <HAL_DMA_IRQHandler+0xe08>
 8002d7a:	bf00      	nop
 8002d7c:	40020010 	.word	0x40020010
 8002d80:	40020028 	.word	0x40020028
 8002d84:	40020040 	.word	0x40020040
 8002d88:	40020058 	.word	0x40020058
 8002d8c:	40020070 	.word	0x40020070
 8002d90:	40020088 	.word	0x40020088
 8002d94:	400200a0 	.word	0x400200a0
 8002d98:	400200b8 	.word	0x400200b8
 8002d9c:	40020410 	.word	0x40020410
 8002da0:	40020428 	.word	0x40020428
 8002da4:	40020440 	.word	0x40020440
 8002da8:	40020458 	.word	0x40020458
 8002dac:	40020470 	.word	0x40020470
 8002db0:	40020488 	.word	0x40020488
 8002db4:	400204a0 	.word	0x400204a0
 8002db8:	400204b8 	.word	0x400204b8
 8002dbc:	58025408 	.word	0x58025408
 8002dc0:	5802541c 	.word	0x5802541c
 8002dc4:	58025430 	.word	0x58025430
 8002dc8:	58025444 	.word	0x58025444
 8002dcc:	58025458 	.word	0x58025458
 8002dd0:	5802546c 	.word	0x5802546c
 8002dd4:	58025480 	.word	0x58025480
 8002dd8:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8002ddc:	693b      	ldr	r3, [r7, #16]
 8002dde:	f003 0320 	and.w	r3, r3, #32
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d160      	bne.n	8002ea8 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4a7f      	ldr	r2, [pc, #508]	@ (8002fe8 <HAL_DMA_IRQHandler+0xc74>)
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d04a      	beq.n	8002e86 <HAL_DMA_IRQHandler+0xb12>
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4a7d      	ldr	r2, [pc, #500]	@ (8002fec <HAL_DMA_IRQHandler+0xc78>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d045      	beq.n	8002e86 <HAL_DMA_IRQHandler+0xb12>
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4a7c      	ldr	r2, [pc, #496]	@ (8002ff0 <HAL_DMA_IRQHandler+0xc7c>)
 8002e00:	4293      	cmp	r3, r2
 8002e02:	d040      	beq.n	8002e86 <HAL_DMA_IRQHandler+0xb12>
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4a7a      	ldr	r2, [pc, #488]	@ (8002ff4 <HAL_DMA_IRQHandler+0xc80>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d03b      	beq.n	8002e86 <HAL_DMA_IRQHandler+0xb12>
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4a79      	ldr	r2, [pc, #484]	@ (8002ff8 <HAL_DMA_IRQHandler+0xc84>)
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d036      	beq.n	8002e86 <HAL_DMA_IRQHandler+0xb12>
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4a77      	ldr	r2, [pc, #476]	@ (8002ffc <HAL_DMA_IRQHandler+0xc88>)
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d031      	beq.n	8002e86 <HAL_DMA_IRQHandler+0xb12>
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	4a76      	ldr	r2, [pc, #472]	@ (8003000 <HAL_DMA_IRQHandler+0xc8c>)
 8002e28:	4293      	cmp	r3, r2
 8002e2a:	d02c      	beq.n	8002e86 <HAL_DMA_IRQHandler+0xb12>
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	4a74      	ldr	r2, [pc, #464]	@ (8003004 <HAL_DMA_IRQHandler+0xc90>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d027      	beq.n	8002e86 <HAL_DMA_IRQHandler+0xb12>
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	4a73      	ldr	r2, [pc, #460]	@ (8003008 <HAL_DMA_IRQHandler+0xc94>)
 8002e3c:	4293      	cmp	r3, r2
 8002e3e:	d022      	beq.n	8002e86 <HAL_DMA_IRQHandler+0xb12>
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4a71      	ldr	r2, [pc, #452]	@ (800300c <HAL_DMA_IRQHandler+0xc98>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d01d      	beq.n	8002e86 <HAL_DMA_IRQHandler+0xb12>
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	4a70      	ldr	r2, [pc, #448]	@ (8003010 <HAL_DMA_IRQHandler+0xc9c>)
 8002e50:	4293      	cmp	r3, r2
 8002e52:	d018      	beq.n	8002e86 <HAL_DMA_IRQHandler+0xb12>
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	4a6e      	ldr	r2, [pc, #440]	@ (8003014 <HAL_DMA_IRQHandler+0xca0>)
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d013      	beq.n	8002e86 <HAL_DMA_IRQHandler+0xb12>
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	4a6d      	ldr	r2, [pc, #436]	@ (8003018 <HAL_DMA_IRQHandler+0xca4>)
 8002e64:	4293      	cmp	r3, r2
 8002e66:	d00e      	beq.n	8002e86 <HAL_DMA_IRQHandler+0xb12>
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	4a6b      	ldr	r2, [pc, #428]	@ (800301c <HAL_DMA_IRQHandler+0xca8>)
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d009      	beq.n	8002e86 <HAL_DMA_IRQHandler+0xb12>
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	4a6a      	ldr	r2, [pc, #424]	@ (8003020 <HAL_DMA_IRQHandler+0xcac>)
 8002e78:	4293      	cmp	r3, r2
 8002e7a:	d004      	beq.n	8002e86 <HAL_DMA_IRQHandler+0xb12>
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	4a68      	ldr	r2, [pc, #416]	@ (8003024 <HAL_DMA_IRQHandler+0xcb0>)
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d108      	bne.n	8002e98 <HAL_DMA_IRQHandler+0xb24>
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	681a      	ldr	r2, [r3, #0]
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f022 0208 	bic.w	r2, r2, #8
 8002e94:	601a      	str	r2, [r3, #0]
 8002e96:	e007      	b.n	8002ea8 <HAL_DMA_IRQHandler+0xb34>
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	681a      	ldr	r2, [r3, #0]
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f022 0204 	bic.w	r2, r2, #4
 8002ea6:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	f000 8165 	beq.w	800317c <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002eb6:	6878      	ldr	r0, [r7, #4]
 8002eb8:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002eba:	e15f      	b.n	800317c <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ec0:	f003 031f 	and.w	r3, r3, #31
 8002ec4:	2202      	movs	r2, #2
 8002ec6:	409a      	lsls	r2, r3
 8002ec8:	697b      	ldr	r3, [r7, #20]
 8002eca:	4013      	ands	r3, r2
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	f000 80c5 	beq.w	800305c <HAL_DMA_IRQHandler+0xce8>
 8002ed2:	693b      	ldr	r3, [r7, #16]
 8002ed4:	f003 0302 	and.w	r3, r3, #2
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	f000 80bf 	beq.w	800305c <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ee2:	f003 031f 	and.w	r3, r3, #31
 8002ee6:	2202      	movs	r2, #2
 8002ee8:	409a      	lsls	r2, r3
 8002eea:	69fb      	ldr	r3, [r7, #28]
 8002eec:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002eee:	693b      	ldr	r3, [r7, #16]
 8002ef0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d018      	beq.n	8002f2a <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8002ef8:	693b      	ldr	r3, [r7, #16]
 8002efa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d109      	bne.n	8002f16 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	f000 813a 	beq.w	8003180 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f10:	6878      	ldr	r0, [r7, #4]
 8002f12:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002f14:	e134      	b.n	8003180 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	f000 8130 	beq.w	8003180 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f24:	6878      	ldr	r0, [r7, #4]
 8002f26:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002f28:	e12a      	b.n	8003180 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8002f2a:	693b      	ldr	r3, [r7, #16]
 8002f2c:	f003 0320 	and.w	r3, r3, #32
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	f040 8089 	bne.w	8003048 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	4a2b      	ldr	r2, [pc, #172]	@ (8002fe8 <HAL_DMA_IRQHandler+0xc74>)
 8002f3c:	4293      	cmp	r3, r2
 8002f3e:	d04a      	beq.n	8002fd6 <HAL_DMA_IRQHandler+0xc62>
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	4a29      	ldr	r2, [pc, #164]	@ (8002fec <HAL_DMA_IRQHandler+0xc78>)
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d045      	beq.n	8002fd6 <HAL_DMA_IRQHandler+0xc62>
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	4a28      	ldr	r2, [pc, #160]	@ (8002ff0 <HAL_DMA_IRQHandler+0xc7c>)
 8002f50:	4293      	cmp	r3, r2
 8002f52:	d040      	beq.n	8002fd6 <HAL_DMA_IRQHandler+0xc62>
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	4a26      	ldr	r2, [pc, #152]	@ (8002ff4 <HAL_DMA_IRQHandler+0xc80>)
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d03b      	beq.n	8002fd6 <HAL_DMA_IRQHandler+0xc62>
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	4a25      	ldr	r2, [pc, #148]	@ (8002ff8 <HAL_DMA_IRQHandler+0xc84>)
 8002f64:	4293      	cmp	r3, r2
 8002f66:	d036      	beq.n	8002fd6 <HAL_DMA_IRQHandler+0xc62>
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	4a23      	ldr	r2, [pc, #140]	@ (8002ffc <HAL_DMA_IRQHandler+0xc88>)
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d031      	beq.n	8002fd6 <HAL_DMA_IRQHandler+0xc62>
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	4a22      	ldr	r2, [pc, #136]	@ (8003000 <HAL_DMA_IRQHandler+0xc8c>)
 8002f78:	4293      	cmp	r3, r2
 8002f7a:	d02c      	beq.n	8002fd6 <HAL_DMA_IRQHandler+0xc62>
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	4a20      	ldr	r2, [pc, #128]	@ (8003004 <HAL_DMA_IRQHandler+0xc90>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d027      	beq.n	8002fd6 <HAL_DMA_IRQHandler+0xc62>
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	4a1f      	ldr	r2, [pc, #124]	@ (8003008 <HAL_DMA_IRQHandler+0xc94>)
 8002f8c:	4293      	cmp	r3, r2
 8002f8e:	d022      	beq.n	8002fd6 <HAL_DMA_IRQHandler+0xc62>
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	4a1d      	ldr	r2, [pc, #116]	@ (800300c <HAL_DMA_IRQHandler+0xc98>)
 8002f96:	4293      	cmp	r3, r2
 8002f98:	d01d      	beq.n	8002fd6 <HAL_DMA_IRQHandler+0xc62>
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	4a1c      	ldr	r2, [pc, #112]	@ (8003010 <HAL_DMA_IRQHandler+0xc9c>)
 8002fa0:	4293      	cmp	r3, r2
 8002fa2:	d018      	beq.n	8002fd6 <HAL_DMA_IRQHandler+0xc62>
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	4a1a      	ldr	r2, [pc, #104]	@ (8003014 <HAL_DMA_IRQHandler+0xca0>)
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d013      	beq.n	8002fd6 <HAL_DMA_IRQHandler+0xc62>
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	4a19      	ldr	r2, [pc, #100]	@ (8003018 <HAL_DMA_IRQHandler+0xca4>)
 8002fb4:	4293      	cmp	r3, r2
 8002fb6:	d00e      	beq.n	8002fd6 <HAL_DMA_IRQHandler+0xc62>
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4a17      	ldr	r2, [pc, #92]	@ (800301c <HAL_DMA_IRQHandler+0xca8>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d009      	beq.n	8002fd6 <HAL_DMA_IRQHandler+0xc62>
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	4a16      	ldr	r2, [pc, #88]	@ (8003020 <HAL_DMA_IRQHandler+0xcac>)
 8002fc8:	4293      	cmp	r3, r2
 8002fca:	d004      	beq.n	8002fd6 <HAL_DMA_IRQHandler+0xc62>
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4a14      	ldr	r2, [pc, #80]	@ (8003024 <HAL_DMA_IRQHandler+0xcb0>)
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d128      	bne.n	8003028 <HAL_DMA_IRQHandler+0xcb4>
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	681a      	ldr	r2, [r3, #0]
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f022 0214 	bic.w	r2, r2, #20
 8002fe4:	601a      	str	r2, [r3, #0]
 8002fe6:	e027      	b.n	8003038 <HAL_DMA_IRQHandler+0xcc4>
 8002fe8:	40020010 	.word	0x40020010
 8002fec:	40020028 	.word	0x40020028
 8002ff0:	40020040 	.word	0x40020040
 8002ff4:	40020058 	.word	0x40020058
 8002ff8:	40020070 	.word	0x40020070
 8002ffc:	40020088 	.word	0x40020088
 8003000:	400200a0 	.word	0x400200a0
 8003004:	400200b8 	.word	0x400200b8
 8003008:	40020410 	.word	0x40020410
 800300c:	40020428 	.word	0x40020428
 8003010:	40020440 	.word	0x40020440
 8003014:	40020458 	.word	0x40020458
 8003018:	40020470 	.word	0x40020470
 800301c:	40020488 	.word	0x40020488
 8003020:	400204a0 	.word	0x400204a0
 8003024:	400204b8 	.word	0x400204b8
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	681a      	ldr	r2, [r3, #0]
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f022 020a 	bic.w	r2, r2, #10
 8003036:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2201      	movs	r2, #1
 800303c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2200      	movs	r2, #0
 8003044:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800304c:	2b00      	cmp	r3, #0
 800304e:	f000 8097 	beq.w	8003180 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003056:	6878      	ldr	r0, [r7, #4]
 8003058:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800305a:	e091      	b.n	8003180 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003060:	f003 031f 	and.w	r3, r3, #31
 8003064:	2208      	movs	r2, #8
 8003066:	409a      	lsls	r2, r3
 8003068:	697b      	ldr	r3, [r7, #20]
 800306a:	4013      	ands	r3, r2
 800306c:	2b00      	cmp	r3, #0
 800306e:	f000 8088 	beq.w	8003182 <HAL_DMA_IRQHandler+0xe0e>
 8003072:	693b      	ldr	r3, [r7, #16]
 8003074:	f003 0308 	and.w	r3, r3, #8
 8003078:	2b00      	cmp	r3, #0
 800307a:	f000 8082 	beq.w	8003182 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	4a41      	ldr	r2, [pc, #260]	@ (8003188 <HAL_DMA_IRQHandler+0xe14>)
 8003084:	4293      	cmp	r3, r2
 8003086:	d04a      	beq.n	800311e <HAL_DMA_IRQHandler+0xdaa>
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4a3f      	ldr	r2, [pc, #252]	@ (800318c <HAL_DMA_IRQHandler+0xe18>)
 800308e:	4293      	cmp	r3, r2
 8003090:	d045      	beq.n	800311e <HAL_DMA_IRQHandler+0xdaa>
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	4a3e      	ldr	r2, [pc, #248]	@ (8003190 <HAL_DMA_IRQHandler+0xe1c>)
 8003098:	4293      	cmp	r3, r2
 800309a:	d040      	beq.n	800311e <HAL_DMA_IRQHandler+0xdaa>
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	4a3c      	ldr	r2, [pc, #240]	@ (8003194 <HAL_DMA_IRQHandler+0xe20>)
 80030a2:	4293      	cmp	r3, r2
 80030a4:	d03b      	beq.n	800311e <HAL_DMA_IRQHandler+0xdaa>
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	4a3b      	ldr	r2, [pc, #236]	@ (8003198 <HAL_DMA_IRQHandler+0xe24>)
 80030ac:	4293      	cmp	r3, r2
 80030ae:	d036      	beq.n	800311e <HAL_DMA_IRQHandler+0xdaa>
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	4a39      	ldr	r2, [pc, #228]	@ (800319c <HAL_DMA_IRQHandler+0xe28>)
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d031      	beq.n	800311e <HAL_DMA_IRQHandler+0xdaa>
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	4a38      	ldr	r2, [pc, #224]	@ (80031a0 <HAL_DMA_IRQHandler+0xe2c>)
 80030c0:	4293      	cmp	r3, r2
 80030c2:	d02c      	beq.n	800311e <HAL_DMA_IRQHandler+0xdaa>
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	4a36      	ldr	r2, [pc, #216]	@ (80031a4 <HAL_DMA_IRQHandler+0xe30>)
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d027      	beq.n	800311e <HAL_DMA_IRQHandler+0xdaa>
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	4a35      	ldr	r2, [pc, #212]	@ (80031a8 <HAL_DMA_IRQHandler+0xe34>)
 80030d4:	4293      	cmp	r3, r2
 80030d6:	d022      	beq.n	800311e <HAL_DMA_IRQHandler+0xdaa>
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	4a33      	ldr	r2, [pc, #204]	@ (80031ac <HAL_DMA_IRQHandler+0xe38>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d01d      	beq.n	800311e <HAL_DMA_IRQHandler+0xdaa>
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	4a32      	ldr	r2, [pc, #200]	@ (80031b0 <HAL_DMA_IRQHandler+0xe3c>)
 80030e8:	4293      	cmp	r3, r2
 80030ea:	d018      	beq.n	800311e <HAL_DMA_IRQHandler+0xdaa>
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	4a30      	ldr	r2, [pc, #192]	@ (80031b4 <HAL_DMA_IRQHandler+0xe40>)
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d013      	beq.n	800311e <HAL_DMA_IRQHandler+0xdaa>
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	4a2f      	ldr	r2, [pc, #188]	@ (80031b8 <HAL_DMA_IRQHandler+0xe44>)
 80030fc:	4293      	cmp	r3, r2
 80030fe:	d00e      	beq.n	800311e <HAL_DMA_IRQHandler+0xdaa>
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	4a2d      	ldr	r2, [pc, #180]	@ (80031bc <HAL_DMA_IRQHandler+0xe48>)
 8003106:	4293      	cmp	r3, r2
 8003108:	d009      	beq.n	800311e <HAL_DMA_IRQHandler+0xdaa>
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	4a2c      	ldr	r2, [pc, #176]	@ (80031c0 <HAL_DMA_IRQHandler+0xe4c>)
 8003110:	4293      	cmp	r3, r2
 8003112:	d004      	beq.n	800311e <HAL_DMA_IRQHandler+0xdaa>
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	4a2a      	ldr	r2, [pc, #168]	@ (80031c4 <HAL_DMA_IRQHandler+0xe50>)
 800311a:	4293      	cmp	r3, r2
 800311c:	d108      	bne.n	8003130 <HAL_DMA_IRQHandler+0xdbc>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	681a      	ldr	r2, [r3, #0]
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f022 021c 	bic.w	r2, r2, #28
 800312c:	601a      	str	r2, [r3, #0]
 800312e:	e007      	b.n	8003140 <HAL_DMA_IRQHandler+0xdcc>
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	681a      	ldr	r2, [r3, #0]
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f022 020e 	bic.w	r2, r2, #14
 800313e:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003144:	f003 031f 	and.w	r3, r3, #31
 8003148:	2201      	movs	r2, #1
 800314a:	409a      	lsls	r2, r3
 800314c:	69fb      	ldr	r3, [r7, #28]
 800314e:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2201      	movs	r2, #1
 8003154:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	2201      	movs	r2, #1
 800315a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	2200      	movs	r2, #0
 8003162:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800316a:	2b00      	cmp	r3, #0
 800316c:	d009      	beq.n	8003182 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003172:	6878      	ldr	r0, [r7, #4]
 8003174:	4798      	blx	r3
 8003176:	e004      	b.n	8003182 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8003178:	bf00      	nop
 800317a:	e002      	b.n	8003182 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800317c:	bf00      	nop
 800317e:	e000      	b.n	8003182 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003180:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8003182:	3728      	adds	r7, #40	@ 0x28
 8003184:	46bd      	mov	sp, r7
 8003186:	bd80      	pop	{r7, pc}
 8003188:	40020010 	.word	0x40020010
 800318c:	40020028 	.word	0x40020028
 8003190:	40020040 	.word	0x40020040
 8003194:	40020058 	.word	0x40020058
 8003198:	40020070 	.word	0x40020070
 800319c:	40020088 	.word	0x40020088
 80031a0:	400200a0 	.word	0x400200a0
 80031a4:	400200b8 	.word	0x400200b8
 80031a8:	40020410 	.word	0x40020410
 80031ac:	40020428 	.word	0x40020428
 80031b0:	40020440 	.word	0x40020440
 80031b4:	40020458 	.word	0x40020458
 80031b8:	40020470 	.word	0x40020470
 80031bc:	40020488 	.word	0x40020488
 80031c0:	400204a0 	.word	0x400204a0
 80031c4:	400204b8 	.word	0x400204b8

080031c8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80031c8:	b480      	push	{r7}
 80031ca:	b085      	sub	sp, #20
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	4a42      	ldr	r2, [pc, #264]	@ (80032e0 <DMA_CalcBaseAndBitshift+0x118>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d04a      	beq.n	8003270 <DMA_CalcBaseAndBitshift+0xa8>
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	4a41      	ldr	r2, [pc, #260]	@ (80032e4 <DMA_CalcBaseAndBitshift+0x11c>)
 80031e0:	4293      	cmp	r3, r2
 80031e2:	d045      	beq.n	8003270 <DMA_CalcBaseAndBitshift+0xa8>
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	4a3f      	ldr	r2, [pc, #252]	@ (80032e8 <DMA_CalcBaseAndBitshift+0x120>)
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d040      	beq.n	8003270 <DMA_CalcBaseAndBitshift+0xa8>
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	4a3e      	ldr	r2, [pc, #248]	@ (80032ec <DMA_CalcBaseAndBitshift+0x124>)
 80031f4:	4293      	cmp	r3, r2
 80031f6:	d03b      	beq.n	8003270 <DMA_CalcBaseAndBitshift+0xa8>
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	4a3c      	ldr	r2, [pc, #240]	@ (80032f0 <DMA_CalcBaseAndBitshift+0x128>)
 80031fe:	4293      	cmp	r3, r2
 8003200:	d036      	beq.n	8003270 <DMA_CalcBaseAndBitshift+0xa8>
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	4a3b      	ldr	r2, [pc, #236]	@ (80032f4 <DMA_CalcBaseAndBitshift+0x12c>)
 8003208:	4293      	cmp	r3, r2
 800320a:	d031      	beq.n	8003270 <DMA_CalcBaseAndBitshift+0xa8>
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	4a39      	ldr	r2, [pc, #228]	@ (80032f8 <DMA_CalcBaseAndBitshift+0x130>)
 8003212:	4293      	cmp	r3, r2
 8003214:	d02c      	beq.n	8003270 <DMA_CalcBaseAndBitshift+0xa8>
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	4a38      	ldr	r2, [pc, #224]	@ (80032fc <DMA_CalcBaseAndBitshift+0x134>)
 800321c:	4293      	cmp	r3, r2
 800321e:	d027      	beq.n	8003270 <DMA_CalcBaseAndBitshift+0xa8>
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	4a36      	ldr	r2, [pc, #216]	@ (8003300 <DMA_CalcBaseAndBitshift+0x138>)
 8003226:	4293      	cmp	r3, r2
 8003228:	d022      	beq.n	8003270 <DMA_CalcBaseAndBitshift+0xa8>
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4a35      	ldr	r2, [pc, #212]	@ (8003304 <DMA_CalcBaseAndBitshift+0x13c>)
 8003230:	4293      	cmp	r3, r2
 8003232:	d01d      	beq.n	8003270 <DMA_CalcBaseAndBitshift+0xa8>
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	4a33      	ldr	r2, [pc, #204]	@ (8003308 <DMA_CalcBaseAndBitshift+0x140>)
 800323a:	4293      	cmp	r3, r2
 800323c:	d018      	beq.n	8003270 <DMA_CalcBaseAndBitshift+0xa8>
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	4a32      	ldr	r2, [pc, #200]	@ (800330c <DMA_CalcBaseAndBitshift+0x144>)
 8003244:	4293      	cmp	r3, r2
 8003246:	d013      	beq.n	8003270 <DMA_CalcBaseAndBitshift+0xa8>
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	4a30      	ldr	r2, [pc, #192]	@ (8003310 <DMA_CalcBaseAndBitshift+0x148>)
 800324e:	4293      	cmp	r3, r2
 8003250:	d00e      	beq.n	8003270 <DMA_CalcBaseAndBitshift+0xa8>
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4a2f      	ldr	r2, [pc, #188]	@ (8003314 <DMA_CalcBaseAndBitshift+0x14c>)
 8003258:	4293      	cmp	r3, r2
 800325a:	d009      	beq.n	8003270 <DMA_CalcBaseAndBitshift+0xa8>
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	4a2d      	ldr	r2, [pc, #180]	@ (8003318 <DMA_CalcBaseAndBitshift+0x150>)
 8003262:	4293      	cmp	r3, r2
 8003264:	d004      	beq.n	8003270 <DMA_CalcBaseAndBitshift+0xa8>
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	4a2c      	ldr	r2, [pc, #176]	@ (800331c <DMA_CalcBaseAndBitshift+0x154>)
 800326c:	4293      	cmp	r3, r2
 800326e:	d101      	bne.n	8003274 <DMA_CalcBaseAndBitshift+0xac>
 8003270:	2301      	movs	r3, #1
 8003272:	e000      	b.n	8003276 <DMA_CalcBaseAndBitshift+0xae>
 8003274:	2300      	movs	r3, #0
 8003276:	2b00      	cmp	r3, #0
 8003278:	d024      	beq.n	80032c4 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	b2db      	uxtb	r3, r3
 8003280:	3b10      	subs	r3, #16
 8003282:	4a27      	ldr	r2, [pc, #156]	@ (8003320 <DMA_CalcBaseAndBitshift+0x158>)
 8003284:	fba2 2303 	umull	r2, r3, r2, r3
 8003288:	091b      	lsrs	r3, r3, #4
 800328a:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	f003 0307 	and.w	r3, r3, #7
 8003292:	4a24      	ldr	r2, [pc, #144]	@ (8003324 <DMA_CalcBaseAndBitshift+0x15c>)
 8003294:	5cd3      	ldrb	r3, [r2, r3]
 8003296:	461a      	mov	r2, r3
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	2b03      	cmp	r3, #3
 80032a0:	d908      	bls.n	80032b4 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	461a      	mov	r2, r3
 80032a8:	4b1f      	ldr	r3, [pc, #124]	@ (8003328 <DMA_CalcBaseAndBitshift+0x160>)
 80032aa:	4013      	ands	r3, r2
 80032ac:	1d1a      	adds	r2, r3, #4
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	659a      	str	r2, [r3, #88]	@ 0x58
 80032b2:	e00d      	b.n	80032d0 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	461a      	mov	r2, r3
 80032ba:	4b1b      	ldr	r3, [pc, #108]	@ (8003328 <DMA_CalcBaseAndBitshift+0x160>)
 80032bc:	4013      	ands	r3, r2
 80032be:	687a      	ldr	r2, [r7, #4]
 80032c0:	6593      	str	r3, [r2, #88]	@ 0x58
 80032c2:	e005      	b.n	80032d0 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80032d4:	4618      	mov	r0, r3
 80032d6:	3714      	adds	r7, #20
 80032d8:	46bd      	mov	sp, r7
 80032da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032de:	4770      	bx	lr
 80032e0:	40020010 	.word	0x40020010
 80032e4:	40020028 	.word	0x40020028
 80032e8:	40020040 	.word	0x40020040
 80032ec:	40020058 	.word	0x40020058
 80032f0:	40020070 	.word	0x40020070
 80032f4:	40020088 	.word	0x40020088
 80032f8:	400200a0 	.word	0x400200a0
 80032fc:	400200b8 	.word	0x400200b8
 8003300:	40020410 	.word	0x40020410
 8003304:	40020428 	.word	0x40020428
 8003308:	40020440 	.word	0x40020440
 800330c:	40020458 	.word	0x40020458
 8003310:	40020470 	.word	0x40020470
 8003314:	40020488 	.word	0x40020488
 8003318:	400204a0 	.word	0x400204a0
 800331c:	400204b8 	.word	0x400204b8
 8003320:	aaaaaaab 	.word	0xaaaaaaab
 8003324:	080082a0 	.word	0x080082a0
 8003328:	fffffc00 	.word	0xfffffc00

0800332c <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(const DMA_HandleTypeDef *hdma)
{
 800332c:	b480      	push	{r7}
 800332e:	b085      	sub	sp, #20
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003334:	2300      	movs	r3, #0
 8003336:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	699b      	ldr	r3, [r3, #24]
 800333c:	2b00      	cmp	r3, #0
 800333e:	d120      	bne.n	8003382 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003344:	2b03      	cmp	r3, #3
 8003346:	d858      	bhi.n	80033fa <DMA_CheckFifoParam+0xce>
 8003348:	a201      	add	r2, pc, #4	@ (adr r2, 8003350 <DMA_CheckFifoParam+0x24>)
 800334a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800334e:	bf00      	nop
 8003350:	08003361 	.word	0x08003361
 8003354:	08003373 	.word	0x08003373
 8003358:	08003361 	.word	0x08003361
 800335c:	080033fb 	.word	0x080033fb
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003364:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003368:	2b00      	cmp	r3, #0
 800336a:	d048      	beq.n	80033fe <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 800336c:	2301      	movs	r3, #1
 800336e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003370:	e045      	b.n	80033fe <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003376:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800337a:	d142      	bne.n	8003402 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 800337c:	2301      	movs	r3, #1
 800337e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003380:	e03f      	b.n	8003402 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	699b      	ldr	r3, [r3, #24]
 8003386:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800338a:	d123      	bne.n	80033d4 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003390:	2b03      	cmp	r3, #3
 8003392:	d838      	bhi.n	8003406 <DMA_CheckFifoParam+0xda>
 8003394:	a201      	add	r2, pc, #4	@ (adr r2, 800339c <DMA_CheckFifoParam+0x70>)
 8003396:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800339a:	bf00      	nop
 800339c:	080033ad 	.word	0x080033ad
 80033a0:	080033b3 	.word	0x080033b3
 80033a4:	080033ad 	.word	0x080033ad
 80033a8:	080033c5 	.word	0x080033c5
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80033ac:	2301      	movs	r3, #1
 80033ae:	73fb      	strb	r3, [r7, #15]
        break;
 80033b0:	e030      	b.n	8003414 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033b6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d025      	beq.n	800340a <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80033be:	2301      	movs	r3, #1
 80033c0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80033c2:	e022      	b.n	800340a <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033c8:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80033cc:	d11f      	bne.n	800340e <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80033ce:	2301      	movs	r3, #1
 80033d0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80033d2:	e01c      	b.n	800340e <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033d8:	2b02      	cmp	r3, #2
 80033da:	d902      	bls.n	80033e2 <DMA_CheckFifoParam+0xb6>
 80033dc:	2b03      	cmp	r3, #3
 80033de:	d003      	beq.n	80033e8 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80033e0:	e018      	b.n	8003414 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80033e2:	2301      	movs	r3, #1
 80033e4:	73fb      	strb	r3, [r7, #15]
        break;
 80033e6:	e015      	b.n	8003414 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033ec:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d00e      	beq.n	8003412 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80033f4:	2301      	movs	r3, #1
 80033f6:	73fb      	strb	r3, [r7, #15]
    break;
 80033f8:	e00b      	b.n	8003412 <DMA_CheckFifoParam+0xe6>
        break;
 80033fa:	bf00      	nop
 80033fc:	e00a      	b.n	8003414 <DMA_CheckFifoParam+0xe8>
        break;
 80033fe:	bf00      	nop
 8003400:	e008      	b.n	8003414 <DMA_CheckFifoParam+0xe8>
        break;
 8003402:	bf00      	nop
 8003404:	e006      	b.n	8003414 <DMA_CheckFifoParam+0xe8>
        break;
 8003406:	bf00      	nop
 8003408:	e004      	b.n	8003414 <DMA_CheckFifoParam+0xe8>
        break;
 800340a:	bf00      	nop
 800340c:	e002      	b.n	8003414 <DMA_CheckFifoParam+0xe8>
        break;
 800340e:	bf00      	nop
 8003410:	e000      	b.n	8003414 <DMA_CheckFifoParam+0xe8>
    break;
 8003412:	bf00      	nop
    }
  }

  return status;
 8003414:	7bfb      	ldrb	r3, [r7, #15]
}
 8003416:	4618      	mov	r0, r3
 8003418:	3714      	adds	r7, #20
 800341a:	46bd      	mov	sp, r7
 800341c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003420:	4770      	bx	lr
 8003422:	bf00      	nop

08003424 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003424:	b480      	push	{r7}
 8003426:	b085      	sub	sp, #20
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	4a38      	ldr	r2, [pc, #224]	@ (8003518 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8003438:	4293      	cmp	r3, r2
 800343a:	d022      	beq.n	8003482 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	4a36      	ldr	r2, [pc, #216]	@ (800351c <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8003442:	4293      	cmp	r3, r2
 8003444:	d01d      	beq.n	8003482 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	4a35      	ldr	r2, [pc, #212]	@ (8003520 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 800344c:	4293      	cmp	r3, r2
 800344e:	d018      	beq.n	8003482 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	4a33      	ldr	r2, [pc, #204]	@ (8003524 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8003456:	4293      	cmp	r3, r2
 8003458:	d013      	beq.n	8003482 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	4a32      	ldr	r2, [pc, #200]	@ (8003528 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8003460:	4293      	cmp	r3, r2
 8003462:	d00e      	beq.n	8003482 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	4a30      	ldr	r2, [pc, #192]	@ (800352c <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800346a:	4293      	cmp	r3, r2
 800346c:	d009      	beq.n	8003482 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	4a2f      	ldr	r2, [pc, #188]	@ (8003530 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8003474:	4293      	cmp	r3, r2
 8003476:	d004      	beq.n	8003482 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	4a2d      	ldr	r2, [pc, #180]	@ (8003534 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800347e:	4293      	cmp	r3, r2
 8003480:	d101      	bne.n	8003486 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8003482:	2301      	movs	r3, #1
 8003484:	e000      	b.n	8003488 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8003486:	2300      	movs	r3, #0
 8003488:	2b00      	cmp	r3, #0
 800348a:	d01a      	beq.n	80034c2 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	b2db      	uxtb	r3, r3
 8003492:	3b08      	subs	r3, #8
 8003494:	4a28      	ldr	r2, [pc, #160]	@ (8003538 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8003496:	fba2 2303 	umull	r2, r3, r2, r3
 800349a:	091b      	lsrs	r3, r3, #4
 800349c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800349e:	68fa      	ldr	r2, [r7, #12]
 80034a0:	4b26      	ldr	r3, [pc, #152]	@ (800353c <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80034a2:	4413      	add	r3, r2
 80034a4:	009b      	lsls	r3, r3, #2
 80034a6:	461a      	mov	r2, r3
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	4a24      	ldr	r2, [pc, #144]	@ (8003540 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80034b0:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	f003 031f 	and.w	r3, r3, #31
 80034b8:	2201      	movs	r2, #1
 80034ba:	409a      	lsls	r2, r3
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80034c0:	e024      	b.n	800350c <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	b2db      	uxtb	r3, r3
 80034c8:	3b10      	subs	r3, #16
 80034ca:	4a1e      	ldr	r2, [pc, #120]	@ (8003544 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80034cc:	fba2 2303 	umull	r2, r3, r2, r3
 80034d0:	091b      	lsrs	r3, r3, #4
 80034d2:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80034d4:	68bb      	ldr	r3, [r7, #8]
 80034d6:	4a1c      	ldr	r2, [pc, #112]	@ (8003548 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80034d8:	4293      	cmp	r3, r2
 80034da:	d806      	bhi.n	80034ea <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80034dc:	68bb      	ldr	r3, [r7, #8]
 80034de:	4a1b      	ldr	r2, [pc, #108]	@ (800354c <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d902      	bls.n	80034ea <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	3308      	adds	r3, #8
 80034e8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80034ea:	68fa      	ldr	r2, [r7, #12]
 80034ec:	4b18      	ldr	r3, [pc, #96]	@ (8003550 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80034ee:	4413      	add	r3, r2
 80034f0:	009b      	lsls	r3, r3, #2
 80034f2:	461a      	mov	r2, r3
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	4a16      	ldr	r2, [pc, #88]	@ (8003554 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80034fc:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	f003 031f 	and.w	r3, r3, #31
 8003504:	2201      	movs	r2, #1
 8003506:	409a      	lsls	r2, r3
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800350c:	bf00      	nop
 800350e:	3714      	adds	r7, #20
 8003510:	46bd      	mov	sp, r7
 8003512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003516:	4770      	bx	lr
 8003518:	58025408 	.word	0x58025408
 800351c:	5802541c 	.word	0x5802541c
 8003520:	58025430 	.word	0x58025430
 8003524:	58025444 	.word	0x58025444
 8003528:	58025458 	.word	0x58025458
 800352c:	5802546c 	.word	0x5802546c
 8003530:	58025480 	.word	0x58025480
 8003534:	58025494 	.word	0x58025494
 8003538:	cccccccd 	.word	0xcccccccd
 800353c:	16009600 	.word	0x16009600
 8003540:	58025880 	.word	0x58025880
 8003544:	aaaaaaab 	.word	0xaaaaaaab
 8003548:	400204b8 	.word	0x400204b8
 800354c:	4002040f 	.word	0x4002040f
 8003550:	10008200 	.word	0x10008200
 8003554:	40020880 	.word	0x40020880

08003558 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003558:	b480      	push	{r7}
 800355a:	b085      	sub	sp, #20
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	685b      	ldr	r3, [r3, #4]
 8003564:	b2db      	uxtb	r3, r3
 8003566:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	2b00      	cmp	r3, #0
 800356c:	d04a      	beq.n	8003604 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	2b08      	cmp	r3, #8
 8003572:	d847      	bhi.n	8003604 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	4a25      	ldr	r2, [pc, #148]	@ (8003610 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d022      	beq.n	80035c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	4a24      	ldr	r2, [pc, #144]	@ (8003614 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8003584:	4293      	cmp	r3, r2
 8003586:	d01d      	beq.n	80035c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	4a22      	ldr	r2, [pc, #136]	@ (8003618 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800358e:	4293      	cmp	r3, r2
 8003590:	d018      	beq.n	80035c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	4a21      	ldr	r2, [pc, #132]	@ (800361c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8003598:	4293      	cmp	r3, r2
 800359a:	d013      	beq.n	80035c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	4a1f      	ldr	r2, [pc, #124]	@ (8003620 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d00e      	beq.n	80035c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	4a1e      	ldr	r2, [pc, #120]	@ (8003624 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80035ac:	4293      	cmp	r3, r2
 80035ae:	d009      	beq.n	80035c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	4a1c      	ldr	r2, [pc, #112]	@ (8003628 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d004      	beq.n	80035c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	4a1b      	ldr	r2, [pc, #108]	@ (800362c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80035c0:	4293      	cmp	r3, r2
 80035c2:	d101      	bne.n	80035c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80035c4:	2301      	movs	r3, #1
 80035c6:	e000      	b.n	80035ca <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80035c8:	2300      	movs	r3, #0
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d00a      	beq.n	80035e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80035ce:	68fa      	ldr	r2, [r7, #12]
 80035d0:	4b17      	ldr	r3, [pc, #92]	@ (8003630 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80035d2:	4413      	add	r3, r2
 80035d4:	009b      	lsls	r3, r3, #2
 80035d6:	461a      	mov	r2, r3
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	4a15      	ldr	r2, [pc, #84]	@ (8003634 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80035e0:	671a      	str	r2, [r3, #112]	@ 0x70
 80035e2:	e009      	b.n	80035f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80035e4:	68fa      	ldr	r2, [r7, #12]
 80035e6:	4b14      	ldr	r3, [pc, #80]	@ (8003638 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80035e8:	4413      	add	r3, r2
 80035ea:	009b      	lsls	r3, r3, #2
 80035ec:	461a      	mov	r2, r3
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	4a11      	ldr	r2, [pc, #68]	@ (800363c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80035f6:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	3b01      	subs	r3, #1
 80035fc:	2201      	movs	r2, #1
 80035fe:	409a      	lsls	r2, r3
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8003604:	bf00      	nop
 8003606:	3714      	adds	r7, #20
 8003608:	46bd      	mov	sp, r7
 800360a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360e:	4770      	bx	lr
 8003610:	58025408 	.word	0x58025408
 8003614:	5802541c 	.word	0x5802541c
 8003618:	58025430 	.word	0x58025430
 800361c:	58025444 	.word	0x58025444
 8003620:	58025458 	.word	0x58025458
 8003624:	5802546c 	.word	0x5802546c
 8003628:	58025480 	.word	0x58025480
 800362c:	58025494 	.word	0x58025494
 8003630:	1600963f 	.word	0x1600963f
 8003634:	58025940 	.word	0x58025940
 8003638:	1000823f 	.word	0x1000823f
 800363c:	40020940 	.word	0x40020940

08003640 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8003640:	b480      	push	{r7}
 8003642:	b089      	sub	sp, #36	@ 0x24
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
 8003648:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800364a:	2300      	movs	r3, #0
 800364c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800364e:	4b89      	ldr	r3, [pc, #548]	@ (8003874 <HAL_GPIO_Init+0x234>)
 8003650:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003652:	e194      	b.n	800397e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	681a      	ldr	r2, [r3, #0]
 8003658:	2101      	movs	r1, #1
 800365a:	69fb      	ldr	r3, [r7, #28]
 800365c:	fa01 f303 	lsl.w	r3, r1, r3
 8003660:	4013      	ands	r3, r2
 8003662:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8003664:	693b      	ldr	r3, [r7, #16]
 8003666:	2b00      	cmp	r3, #0
 8003668:	f000 8186 	beq.w	8003978 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	685b      	ldr	r3, [r3, #4]
 8003670:	f003 0303 	and.w	r3, r3, #3
 8003674:	2b01      	cmp	r3, #1
 8003676:	d005      	beq.n	8003684 <HAL_GPIO_Init+0x44>
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	685b      	ldr	r3, [r3, #4]
 800367c:	f003 0303 	and.w	r3, r3, #3
 8003680:	2b02      	cmp	r3, #2
 8003682:	d130      	bne.n	80036e6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	689b      	ldr	r3, [r3, #8]
 8003688:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800368a:	69fb      	ldr	r3, [r7, #28]
 800368c:	005b      	lsls	r3, r3, #1
 800368e:	2203      	movs	r2, #3
 8003690:	fa02 f303 	lsl.w	r3, r2, r3
 8003694:	43db      	mvns	r3, r3
 8003696:	69ba      	ldr	r2, [r7, #24]
 8003698:	4013      	ands	r3, r2
 800369a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	68da      	ldr	r2, [r3, #12]
 80036a0:	69fb      	ldr	r3, [r7, #28]
 80036a2:	005b      	lsls	r3, r3, #1
 80036a4:	fa02 f303 	lsl.w	r3, r2, r3
 80036a8:	69ba      	ldr	r2, [r7, #24]
 80036aa:	4313      	orrs	r3, r2
 80036ac:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	69ba      	ldr	r2, [r7, #24]
 80036b2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	685b      	ldr	r3, [r3, #4]
 80036b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80036ba:	2201      	movs	r2, #1
 80036bc:	69fb      	ldr	r3, [r7, #28]
 80036be:	fa02 f303 	lsl.w	r3, r2, r3
 80036c2:	43db      	mvns	r3, r3
 80036c4:	69ba      	ldr	r2, [r7, #24]
 80036c6:	4013      	ands	r3, r2
 80036c8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	685b      	ldr	r3, [r3, #4]
 80036ce:	091b      	lsrs	r3, r3, #4
 80036d0:	f003 0201 	and.w	r2, r3, #1
 80036d4:	69fb      	ldr	r3, [r7, #28]
 80036d6:	fa02 f303 	lsl.w	r3, r2, r3
 80036da:	69ba      	ldr	r2, [r7, #24]
 80036dc:	4313      	orrs	r3, r2
 80036de:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	69ba      	ldr	r2, [r7, #24]
 80036e4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	685b      	ldr	r3, [r3, #4]
 80036ea:	f003 0303 	and.w	r3, r3, #3
 80036ee:	2b03      	cmp	r3, #3
 80036f0:	d017      	beq.n	8003722 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	68db      	ldr	r3, [r3, #12]
 80036f6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80036f8:	69fb      	ldr	r3, [r7, #28]
 80036fa:	005b      	lsls	r3, r3, #1
 80036fc:	2203      	movs	r2, #3
 80036fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003702:	43db      	mvns	r3, r3
 8003704:	69ba      	ldr	r2, [r7, #24]
 8003706:	4013      	ands	r3, r2
 8003708:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	689a      	ldr	r2, [r3, #8]
 800370e:	69fb      	ldr	r3, [r7, #28]
 8003710:	005b      	lsls	r3, r3, #1
 8003712:	fa02 f303 	lsl.w	r3, r2, r3
 8003716:	69ba      	ldr	r2, [r7, #24]
 8003718:	4313      	orrs	r3, r2
 800371a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	69ba      	ldr	r2, [r7, #24]
 8003720:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	685b      	ldr	r3, [r3, #4]
 8003726:	f003 0303 	and.w	r3, r3, #3
 800372a:	2b02      	cmp	r3, #2
 800372c:	d123      	bne.n	8003776 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800372e:	69fb      	ldr	r3, [r7, #28]
 8003730:	08da      	lsrs	r2, r3, #3
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	3208      	adds	r2, #8
 8003736:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800373a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800373c:	69fb      	ldr	r3, [r7, #28]
 800373e:	f003 0307 	and.w	r3, r3, #7
 8003742:	009b      	lsls	r3, r3, #2
 8003744:	220f      	movs	r2, #15
 8003746:	fa02 f303 	lsl.w	r3, r2, r3
 800374a:	43db      	mvns	r3, r3
 800374c:	69ba      	ldr	r2, [r7, #24]
 800374e:	4013      	ands	r3, r2
 8003750:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003752:	683b      	ldr	r3, [r7, #0]
 8003754:	691a      	ldr	r2, [r3, #16]
 8003756:	69fb      	ldr	r3, [r7, #28]
 8003758:	f003 0307 	and.w	r3, r3, #7
 800375c:	009b      	lsls	r3, r3, #2
 800375e:	fa02 f303 	lsl.w	r3, r2, r3
 8003762:	69ba      	ldr	r2, [r7, #24]
 8003764:	4313      	orrs	r3, r2
 8003766:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003768:	69fb      	ldr	r3, [r7, #28]
 800376a:	08da      	lsrs	r2, r3, #3
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	3208      	adds	r2, #8
 8003770:	69b9      	ldr	r1, [r7, #24]
 8003772:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800377c:	69fb      	ldr	r3, [r7, #28]
 800377e:	005b      	lsls	r3, r3, #1
 8003780:	2203      	movs	r2, #3
 8003782:	fa02 f303 	lsl.w	r3, r2, r3
 8003786:	43db      	mvns	r3, r3
 8003788:	69ba      	ldr	r2, [r7, #24]
 800378a:	4013      	ands	r3, r2
 800378c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800378e:	683b      	ldr	r3, [r7, #0]
 8003790:	685b      	ldr	r3, [r3, #4]
 8003792:	f003 0203 	and.w	r2, r3, #3
 8003796:	69fb      	ldr	r3, [r7, #28]
 8003798:	005b      	lsls	r3, r3, #1
 800379a:	fa02 f303 	lsl.w	r3, r2, r3
 800379e:	69ba      	ldr	r2, [r7, #24]
 80037a0:	4313      	orrs	r3, r2
 80037a2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	69ba      	ldr	r2, [r7, #24]
 80037a8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80037aa:	683b      	ldr	r3, [r7, #0]
 80037ac:	685b      	ldr	r3, [r3, #4]
 80037ae:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	f000 80e0 	beq.w	8003978 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80037b8:	4b2f      	ldr	r3, [pc, #188]	@ (8003878 <HAL_GPIO_Init+0x238>)
 80037ba:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80037be:	4a2e      	ldr	r2, [pc, #184]	@ (8003878 <HAL_GPIO_Init+0x238>)
 80037c0:	f043 0302 	orr.w	r3, r3, #2
 80037c4:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80037c8:	4b2b      	ldr	r3, [pc, #172]	@ (8003878 <HAL_GPIO_Init+0x238>)
 80037ca:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80037ce:	f003 0302 	and.w	r3, r3, #2
 80037d2:	60fb      	str	r3, [r7, #12]
 80037d4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80037d6:	4a29      	ldr	r2, [pc, #164]	@ (800387c <HAL_GPIO_Init+0x23c>)
 80037d8:	69fb      	ldr	r3, [r7, #28]
 80037da:	089b      	lsrs	r3, r3, #2
 80037dc:	3302      	adds	r3, #2
 80037de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80037e4:	69fb      	ldr	r3, [r7, #28]
 80037e6:	f003 0303 	and.w	r3, r3, #3
 80037ea:	009b      	lsls	r3, r3, #2
 80037ec:	220f      	movs	r2, #15
 80037ee:	fa02 f303 	lsl.w	r3, r2, r3
 80037f2:	43db      	mvns	r3, r3
 80037f4:	69ba      	ldr	r2, [r7, #24]
 80037f6:	4013      	ands	r3, r2
 80037f8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	4a20      	ldr	r2, [pc, #128]	@ (8003880 <HAL_GPIO_Init+0x240>)
 80037fe:	4293      	cmp	r3, r2
 8003800:	d052      	beq.n	80038a8 <HAL_GPIO_Init+0x268>
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	4a1f      	ldr	r2, [pc, #124]	@ (8003884 <HAL_GPIO_Init+0x244>)
 8003806:	4293      	cmp	r3, r2
 8003808:	d031      	beq.n	800386e <HAL_GPIO_Init+0x22e>
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	4a1e      	ldr	r2, [pc, #120]	@ (8003888 <HAL_GPIO_Init+0x248>)
 800380e:	4293      	cmp	r3, r2
 8003810:	d02b      	beq.n	800386a <HAL_GPIO_Init+0x22a>
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	4a1d      	ldr	r2, [pc, #116]	@ (800388c <HAL_GPIO_Init+0x24c>)
 8003816:	4293      	cmp	r3, r2
 8003818:	d025      	beq.n	8003866 <HAL_GPIO_Init+0x226>
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	4a1c      	ldr	r2, [pc, #112]	@ (8003890 <HAL_GPIO_Init+0x250>)
 800381e:	4293      	cmp	r3, r2
 8003820:	d01f      	beq.n	8003862 <HAL_GPIO_Init+0x222>
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	4a1b      	ldr	r2, [pc, #108]	@ (8003894 <HAL_GPIO_Init+0x254>)
 8003826:	4293      	cmp	r3, r2
 8003828:	d019      	beq.n	800385e <HAL_GPIO_Init+0x21e>
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	4a1a      	ldr	r2, [pc, #104]	@ (8003898 <HAL_GPIO_Init+0x258>)
 800382e:	4293      	cmp	r3, r2
 8003830:	d013      	beq.n	800385a <HAL_GPIO_Init+0x21a>
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	4a19      	ldr	r2, [pc, #100]	@ (800389c <HAL_GPIO_Init+0x25c>)
 8003836:	4293      	cmp	r3, r2
 8003838:	d00d      	beq.n	8003856 <HAL_GPIO_Init+0x216>
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	4a18      	ldr	r2, [pc, #96]	@ (80038a0 <HAL_GPIO_Init+0x260>)
 800383e:	4293      	cmp	r3, r2
 8003840:	d007      	beq.n	8003852 <HAL_GPIO_Init+0x212>
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	4a17      	ldr	r2, [pc, #92]	@ (80038a4 <HAL_GPIO_Init+0x264>)
 8003846:	4293      	cmp	r3, r2
 8003848:	d101      	bne.n	800384e <HAL_GPIO_Init+0x20e>
 800384a:	2309      	movs	r3, #9
 800384c:	e02d      	b.n	80038aa <HAL_GPIO_Init+0x26a>
 800384e:	230a      	movs	r3, #10
 8003850:	e02b      	b.n	80038aa <HAL_GPIO_Init+0x26a>
 8003852:	2308      	movs	r3, #8
 8003854:	e029      	b.n	80038aa <HAL_GPIO_Init+0x26a>
 8003856:	2307      	movs	r3, #7
 8003858:	e027      	b.n	80038aa <HAL_GPIO_Init+0x26a>
 800385a:	2306      	movs	r3, #6
 800385c:	e025      	b.n	80038aa <HAL_GPIO_Init+0x26a>
 800385e:	2305      	movs	r3, #5
 8003860:	e023      	b.n	80038aa <HAL_GPIO_Init+0x26a>
 8003862:	2304      	movs	r3, #4
 8003864:	e021      	b.n	80038aa <HAL_GPIO_Init+0x26a>
 8003866:	2303      	movs	r3, #3
 8003868:	e01f      	b.n	80038aa <HAL_GPIO_Init+0x26a>
 800386a:	2302      	movs	r3, #2
 800386c:	e01d      	b.n	80038aa <HAL_GPIO_Init+0x26a>
 800386e:	2301      	movs	r3, #1
 8003870:	e01b      	b.n	80038aa <HAL_GPIO_Init+0x26a>
 8003872:	bf00      	nop
 8003874:	58000080 	.word	0x58000080
 8003878:	58024400 	.word	0x58024400
 800387c:	58000400 	.word	0x58000400
 8003880:	58020000 	.word	0x58020000
 8003884:	58020400 	.word	0x58020400
 8003888:	58020800 	.word	0x58020800
 800388c:	58020c00 	.word	0x58020c00
 8003890:	58021000 	.word	0x58021000
 8003894:	58021400 	.word	0x58021400
 8003898:	58021800 	.word	0x58021800
 800389c:	58021c00 	.word	0x58021c00
 80038a0:	58022000 	.word	0x58022000
 80038a4:	58022400 	.word	0x58022400
 80038a8:	2300      	movs	r3, #0
 80038aa:	69fa      	ldr	r2, [r7, #28]
 80038ac:	f002 0203 	and.w	r2, r2, #3
 80038b0:	0092      	lsls	r2, r2, #2
 80038b2:	4093      	lsls	r3, r2
 80038b4:	69ba      	ldr	r2, [r7, #24]
 80038b6:	4313      	orrs	r3, r2
 80038b8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80038ba:	4938      	ldr	r1, [pc, #224]	@ (800399c <HAL_GPIO_Init+0x35c>)
 80038bc:	69fb      	ldr	r3, [r7, #28]
 80038be:	089b      	lsrs	r3, r3, #2
 80038c0:	3302      	adds	r3, #2
 80038c2:	69ba      	ldr	r2, [r7, #24]
 80038c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80038c8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80038d0:	693b      	ldr	r3, [r7, #16]
 80038d2:	43db      	mvns	r3, r3
 80038d4:	69ba      	ldr	r2, [r7, #24]
 80038d6:	4013      	ands	r3, r2
 80038d8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	685b      	ldr	r3, [r3, #4]
 80038de:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d003      	beq.n	80038ee <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80038e6:	69ba      	ldr	r2, [r7, #24]
 80038e8:	693b      	ldr	r3, [r7, #16]
 80038ea:	4313      	orrs	r3, r2
 80038ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80038ee:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80038f2:	69bb      	ldr	r3, [r7, #24]
 80038f4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80038f6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80038fa:	685b      	ldr	r3, [r3, #4]
 80038fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80038fe:	693b      	ldr	r3, [r7, #16]
 8003900:	43db      	mvns	r3, r3
 8003902:	69ba      	ldr	r2, [r7, #24]
 8003904:	4013      	ands	r3, r2
 8003906:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	685b      	ldr	r3, [r3, #4]
 800390c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003910:	2b00      	cmp	r3, #0
 8003912:	d003      	beq.n	800391c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003914:	69ba      	ldr	r2, [r7, #24]
 8003916:	693b      	ldr	r3, [r7, #16]
 8003918:	4313      	orrs	r3, r2
 800391a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800391c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003920:	69bb      	ldr	r3, [r7, #24]
 8003922:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8003924:	697b      	ldr	r3, [r7, #20]
 8003926:	685b      	ldr	r3, [r3, #4]
 8003928:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800392a:	693b      	ldr	r3, [r7, #16]
 800392c:	43db      	mvns	r3, r3
 800392e:	69ba      	ldr	r2, [r7, #24]
 8003930:	4013      	ands	r3, r2
 8003932:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	685b      	ldr	r3, [r3, #4]
 8003938:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800393c:	2b00      	cmp	r3, #0
 800393e:	d003      	beq.n	8003948 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8003940:	69ba      	ldr	r2, [r7, #24]
 8003942:	693b      	ldr	r3, [r7, #16]
 8003944:	4313      	orrs	r3, r2
 8003946:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8003948:	697b      	ldr	r3, [r7, #20]
 800394a:	69ba      	ldr	r2, [r7, #24]
 800394c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800394e:	697b      	ldr	r3, [r7, #20]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003954:	693b      	ldr	r3, [r7, #16]
 8003956:	43db      	mvns	r3, r3
 8003958:	69ba      	ldr	r2, [r7, #24]
 800395a:	4013      	ands	r3, r2
 800395c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800395e:	683b      	ldr	r3, [r7, #0]
 8003960:	685b      	ldr	r3, [r3, #4]
 8003962:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003966:	2b00      	cmp	r3, #0
 8003968:	d003      	beq.n	8003972 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800396a:	69ba      	ldr	r2, [r7, #24]
 800396c:	693b      	ldr	r3, [r7, #16]
 800396e:	4313      	orrs	r3, r2
 8003970:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8003972:	697b      	ldr	r3, [r7, #20]
 8003974:	69ba      	ldr	r2, [r7, #24]
 8003976:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8003978:	69fb      	ldr	r3, [r7, #28]
 800397a:	3301      	adds	r3, #1
 800397c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800397e:	683b      	ldr	r3, [r7, #0]
 8003980:	681a      	ldr	r2, [r3, #0]
 8003982:	69fb      	ldr	r3, [r7, #28]
 8003984:	fa22 f303 	lsr.w	r3, r2, r3
 8003988:	2b00      	cmp	r3, #0
 800398a:	f47f ae63 	bne.w	8003654 <HAL_GPIO_Init+0x14>
  }
}
 800398e:	bf00      	nop
 8003990:	bf00      	nop
 8003992:	3724      	adds	r7, #36	@ 0x24
 8003994:	46bd      	mov	sp, r7
 8003996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399a:	4770      	bx	lr
 800399c:	58000400 	.word	0x58000400

080039a0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80039a0:	b480      	push	{r7}
 80039a2:	b085      	sub	sp, #20
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
 80039a8:	460b      	mov	r3, r1
 80039aa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	691a      	ldr	r2, [r3, #16]
 80039b0:	887b      	ldrh	r3, [r7, #2]
 80039b2:	4013      	ands	r3, r2
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d002      	beq.n	80039be <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80039b8:	2301      	movs	r3, #1
 80039ba:	73fb      	strb	r3, [r7, #15]
 80039bc:	e001      	b.n	80039c2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80039be:	2300      	movs	r3, #0
 80039c0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80039c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80039c4:	4618      	mov	r0, r3
 80039c6:	3714      	adds	r7, #20
 80039c8:	46bd      	mov	sp, r7
 80039ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ce:	4770      	bx	lr

080039d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80039d0:	b480      	push	{r7}
 80039d2:	b083      	sub	sp, #12
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
 80039d8:	460b      	mov	r3, r1
 80039da:	807b      	strh	r3, [r7, #2]
 80039dc:	4613      	mov	r3, r2
 80039de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80039e0:	787b      	ldrb	r3, [r7, #1]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d003      	beq.n	80039ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80039e6:	887a      	ldrh	r2, [r7, #2]
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80039ec:	e003      	b.n	80039f6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80039ee:	887b      	ldrh	r3, [r7, #2]
 80039f0:	041a      	lsls	r2, r3, #16
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	619a      	str	r2, [r3, #24]
}
 80039f6:	bf00      	nop
 80039f8:	370c      	adds	r7, #12
 80039fa:	46bd      	mov	sp, r7
 80039fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a00:	4770      	bx	lr
	...

08003a04 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	b084      	sub	sp, #16
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8003a0c:	4b19      	ldr	r3, [pc, #100]	@ (8003a74 <HAL_PWREx_ConfigSupply+0x70>)
 8003a0e:	68db      	ldr	r3, [r3, #12]
 8003a10:	f003 0304 	and.w	r3, r3, #4
 8003a14:	2b04      	cmp	r3, #4
 8003a16:	d00a      	beq.n	8003a2e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003a18:	4b16      	ldr	r3, [pc, #88]	@ (8003a74 <HAL_PWREx_ConfigSupply+0x70>)
 8003a1a:	68db      	ldr	r3, [r3, #12]
 8003a1c:	f003 0307 	and.w	r3, r3, #7
 8003a20:	687a      	ldr	r2, [r7, #4]
 8003a22:	429a      	cmp	r2, r3
 8003a24:	d001      	beq.n	8003a2a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8003a26:	2301      	movs	r3, #1
 8003a28:	e01f      	b.n	8003a6a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	e01d      	b.n	8003a6a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8003a2e:	4b11      	ldr	r3, [pc, #68]	@ (8003a74 <HAL_PWREx_ConfigSupply+0x70>)
 8003a30:	68db      	ldr	r3, [r3, #12]
 8003a32:	f023 0207 	bic.w	r2, r3, #7
 8003a36:	490f      	ldr	r1, [pc, #60]	@ (8003a74 <HAL_PWREx_ConfigSupply+0x70>)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	4313      	orrs	r3, r2
 8003a3c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8003a3e:	f7fd fa15 	bl	8000e6c <HAL_GetTick>
 8003a42:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003a44:	e009      	b.n	8003a5a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003a46:	f7fd fa11 	bl	8000e6c <HAL_GetTick>
 8003a4a:	4602      	mov	r2, r0
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	1ad3      	subs	r3, r2, r3
 8003a50:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003a54:	d901      	bls.n	8003a5a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8003a56:	2301      	movs	r3, #1
 8003a58:	e007      	b.n	8003a6a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003a5a:	4b06      	ldr	r3, [pc, #24]	@ (8003a74 <HAL_PWREx_ConfigSupply+0x70>)
 8003a5c:	685b      	ldr	r3, [r3, #4]
 8003a5e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003a62:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003a66:	d1ee      	bne.n	8003a46 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003a68:	2300      	movs	r3, #0
}
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	3710      	adds	r7, #16
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	bd80      	pop	{r7, pc}
 8003a72:	bf00      	nop
 8003a74:	58024800 	.word	0x58024800

08003a78 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b08c      	sub	sp, #48	@ 0x30
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d102      	bne.n	8003a8c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003a86:	2301      	movs	r3, #1
 8003a88:	f000 bc48 	b.w	800431c <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f003 0301 	and.w	r3, r3, #1
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	f000 8088 	beq.w	8003baa <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003a9a:	4b99      	ldr	r3, [pc, #612]	@ (8003d00 <HAL_RCC_OscConfig+0x288>)
 8003a9c:	691b      	ldr	r3, [r3, #16]
 8003a9e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003aa2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003aa4:	4b96      	ldr	r3, [pc, #600]	@ (8003d00 <HAL_RCC_OscConfig+0x288>)
 8003aa6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003aa8:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003aaa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003aac:	2b10      	cmp	r3, #16
 8003aae:	d007      	beq.n	8003ac0 <HAL_RCC_OscConfig+0x48>
 8003ab0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ab2:	2b18      	cmp	r3, #24
 8003ab4:	d111      	bne.n	8003ada <HAL_RCC_OscConfig+0x62>
 8003ab6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ab8:	f003 0303 	and.w	r3, r3, #3
 8003abc:	2b02      	cmp	r3, #2
 8003abe:	d10c      	bne.n	8003ada <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ac0:	4b8f      	ldr	r3, [pc, #572]	@ (8003d00 <HAL_RCC_OscConfig+0x288>)
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d06d      	beq.n	8003ba8 <HAL_RCC_OscConfig+0x130>
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	685b      	ldr	r3, [r3, #4]
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d169      	bne.n	8003ba8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003ad4:	2301      	movs	r3, #1
 8003ad6:	f000 bc21 	b.w	800431c <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	685b      	ldr	r3, [r3, #4]
 8003ade:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003ae2:	d106      	bne.n	8003af2 <HAL_RCC_OscConfig+0x7a>
 8003ae4:	4b86      	ldr	r3, [pc, #536]	@ (8003d00 <HAL_RCC_OscConfig+0x288>)
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	4a85      	ldr	r2, [pc, #532]	@ (8003d00 <HAL_RCC_OscConfig+0x288>)
 8003aea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003aee:	6013      	str	r3, [r2, #0]
 8003af0:	e02e      	b.n	8003b50 <HAL_RCC_OscConfig+0xd8>
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	685b      	ldr	r3, [r3, #4]
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d10c      	bne.n	8003b14 <HAL_RCC_OscConfig+0x9c>
 8003afa:	4b81      	ldr	r3, [pc, #516]	@ (8003d00 <HAL_RCC_OscConfig+0x288>)
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	4a80      	ldr	r2, [pc, #512]	@ (8003d00 <HAL_RCC_OscConfig+0x288>)
 8003b00:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003b04:	6013      	str	r3, [r2, #0]
 8003b06:	4b7e      	ldr	r3, [pc, #504]	@ (8003d00 <HAL_RCC_OscConfig+0x288>)
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	4a7d      	ldr	r2, [pc, #500]	@ (8003d00 <HAL_RCC_OscConfig+0x288>)
 8003b0c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003b10:	6013      	str	r3, [r2, #0]
 8003b12:	e01d      	b.n	8003b50 <HAL_RCC_OscConfig+0xd8>
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	685b      	ldr	r3, [r3, #4]
 8003b18:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003b1c:	d10c      	bne.n	8003b38 <HAL_RCC_OscConfig+0xc0>
 8003b1e:	4b78      	ldr	r3, [pc, #480]	@ (8003d00 <HAL_RCC_OscConfig+0x288>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	4a77      	ldr	r2, [pc, #476]	@ (8003d00 <HAL_RCC_OscConfig+0x288>)
 8003b24:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003b28:	6013      	str	r3, [r2, #0]
 8003b2a:	4b75      	ldr	r3, [pc, #468]	@ (8003d00 <HAL_RCC_OscConfig+0x288>)
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	4a74      	ldr	r2, [pc, #464]	@ (8003d00 <HAL_RCC_OscConfig+0x288>)
 8003b30:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b34:	6013      	str	r3, [r2, #0]
 8003b36:	e00b      	b.n	8003b50 <HAL_RCC_OscConfig+0xd8>
 8003b38:	4b71      	ldr	r3, [pc, #452]	@ (8003d00 <HAL_RCC_OscConfig+0x288>)
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	4a70      	ldr	r2, [pc, #448]	@ (8003d00 <HAL_RCC_OscConfig+0x288>)
 8003b3e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003b42:	6013      	str	r3, [r2, #0]
 8003b44:	4b6e      	ldr	r3, [pc, #440]	@ (8003d00 <HAL_RCC_OscConfig+0x288>)
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	4a6d      	ldr	r2, [pc, #436]	@ (8003d00 <HAL_RCC_OscConfig+0x288>)
 8003b4a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003b4e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	685b      	ldr	r3, [r3, #4]
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d013      	beq.n	8003b80 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b58:	f7fd f988 	bl	8000e6c <HAL_GetTick>
 8003b5c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003b5e:	e008      	b.n	8003b72 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b60:	f7fd f984 	bl	8000e6c <HAL_GetTick>
 8003b64:	4602      	mov	r2, r0
 8003b66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b68:	1ad3      	subs	r3, r2, r3
 8003b6a:	2b64      	cmp	r3, #100	@ 0x64
 8003b6c:	d901      	bls.n	8003b72 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003b6e:	2303      	movs	r3, #3
 8003b70:	e3d4      	b.n	800431c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003b72:	4b63      	ldr	r3, [pc, #396]	@ (8003d00 <HAL_RCC_OscConfig+0x288>)
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d0f0      	beq.n	8003b60 <HAL_RCC_OscConfig+0xe8>
 8003b7e:	e014      	b.n	8003baa <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b80:	f7fd f974 	bl	8000e6c <HAL_GetTick>
 8003b84:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003b86:	e008      	b.n	8003b9a <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b88:	f7fd f970 	bl	8000e6c <HAL_GetTick>
 8003b8c:	4602      	mov	r2, r0
 8003b8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b90:	1ad3      	subs	r3, r2, r3
 8003b92:	2b64      	cmp	r3, #100	@ 0x64
 8003b94:	d901      	bls.n	8003b9a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003b96:	2303      	movs	r3, #3
 8003b98:	e3c0      	b.n	800431c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003b9a:	4b59      	ldr	r3, [pc, #356]	@ (8003d00 <HAL_RCC_OscConfig+0x288>)
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d1f0      	bne.n	8003b88 <HAL_RCC_OscConfig+0x110>
 8003ba6:	e000      	b.n	8003baa <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ba8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f003 0302 	and.w	r3, r3, #2
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	f000 80ca 	beq.w	8003d4c <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003bb8:	4b51      	ldr	r3, [pc, #324]	@ (8003d00 <HAL_RCC_OscConfig+0x288>)
 8003bba:	691b      	ldr	r3, [r3, #16]
 8003bbc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003bc0:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003bc2:	4b4f      	ldr	r3, [pc, #316]	@ (8003d00 <HAL_RCC_OscConfig+0x288>)
 8003bc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bc6:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003bc8:	6a3b      	ldr	r3, [r7, #32]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d007      	beq.n	8003bde <HAL_RCC_OscConfig+0x166>
 8003bce:	6a3b      	ldr	r3, [r7, #32]
 8003bd0:	2b18      	cmp	r3, #24
 8003bd2:	d156      	bne.n	8003c82 <HAL_RCC_OscConfig+0x20a>
 8003bd4:	69fb      	ldr	r3, [r7, #28]
 8003bd6:	f003 0303 	and.w	r3, r3, #3
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d151      	bne.n	8003c82 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003bde:	4b48      	ldr	r3, [pc, #288]	@ (8003d00 <HAL_RCC_OscConfig+0x288>)
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f003 0304 	and.w	r3, r3, #4
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d005      	beq.n	8003bf6 <HAL_RCC_OscConfig+0x17e>
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	68db      	ldr	r3, [r3, #12]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d101      	bne.n	8003bf6 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8003bf2:	2301      	movs	r3, #1
 8003bf4:	e392      	b.n	800431c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003bf6:	4b42      	ldr	r3, [pc, #264]	@ (8003d00 <HAL_RCC_OscConfig+0x288>)
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f023 0219 	bic.w	r2, r3, #25
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	68db      	ldr	r3, [r3, #12]
 8003c02:	493f      	ldr	r1, [pc, #252]	@ (8003d00 <HAL_RCC_OscConfig+0x288>)
 8003c04:	4313      	orrs	r3, r2
 8003c06:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c08:	f7fd f930 	bl	8000e6c <HAL_GetTick>
 8003c0c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003c0e:	e008      	b.n	8003c22 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c10:	f7fd f92c 	bl	8000e6c <HAL_GetTick>
 8003c14:	4602      	mov	r2, r0
 8003c16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c18:	1ad3      	subs	r3, r2, r3
 8003c1a:	2b02      	cmp	r3, #2
 8003c1c:	d901      	bls.n	8003c22 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003c1e:	2303      	movs	r3, #3
 8003c20:	e37c      	b.n	800431c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003c22:	4b37      	ldr	r3, [pc, #220]	@ (8003d00 <HAL_RCC_OscConfig+0x288>)
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f003 0304 	and.w	r3, r3, #4
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d0f0      	beq.n	8003c10 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c2e:	f7fd f94d 	bl	8000ecc <HAL_GetREVID>
 8003c32:	4603      	mov	r3, r0
 8003c34:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003c38:	4293      	cmp	r3, r2
 8003c3a:	d817      	bhi.n	8003c6c <HAL_RCC_OscConfig+0x1f4>
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	691b      	ldr	r3, [r3, #16]
 8003c40:	2b40      	cmp	r3, #64	@ 0x40
 8003c42:	d108      	bne.n	8003c56 <HAL_RCC_OscConfig+0x1de>
 8003c44:	4b2e      	ldr	r3, [pc, #184]	@ (8003d00 <HAL_RCC_OscConfig+0x288>)
 8003c46:	685b      	ldr	r3, [r3, #4]
 8003c48:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8003c4c:	4a2c      	ldr	r2, [pc, #176]	@ (8003d00 <HAL_RCC_OscConfig+0x288>)
 8003c4e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003c52:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003c54:	e07a      	b.n	8003d4c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c56:	4b2a      	ldr	r3, [pc, #168]	@ (8003d00 <HAL_RCC_OscConfig+0x288>)
 8003c58:	685b      	ldr	r3, [r3, #4]
 8003c5a:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	691b      	ldr	r3, [r3, #16]
 8003c62:	031b      	lsls	r3, r3, #12
 8003c64:	4926      	ldr	r1, [pc, #152]	@ (8003d00 <HAL_RCC_OscConfig+0x288>)
 8003c66:	4313      	orrs	r3, r2
 8003c68:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003c6a:	e06f      	b.n	8003d4c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c6c:	4b24      	ldr	r3, [pc, #144]	@ (8003d00 <HAL_RCC_OscConfig+0x288>)
 8003c6e:	685b      	ldr	r3, [r3, #4]
 8003c70:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	691b      	ldr	r3, [r3, #16]
 8003c78:	061b      	lsls	r3, r3, #24
 8003c7a:	4921      	ldr	r1, [pc, #132]	@ (8003d00 <HAL_RCC_OscConfig+0x288>)
 8003c7c:	4313      	orrs	r3, r2
 8003c7e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003c80:	e064      	b.n	8003d4c <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	68db      	ldr	r3, [r3, #12]
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d047      	beq.n	8003d1a <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003c8a:	4b1d      	ldr	r3, [pc, #116]	@ (8003d00 <HAL_RCC_OscConfig+0x288>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f023 0219 	bic.w	r2, r3, #25
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	68db      	ldr	r3, [r3, #12]
 8003c96:	491a      	ldr	r1, [pc, #104]	@ (8003d00 <HAL_RCC_OscConfig+0x288>)
 8003c98:	4313      	orrs	r3, r2
 8003c9a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c9c:	f7fd f8e6 	bl	8000e6c <HAL_GetTick>
 8003ca0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003ca2:	e008      	b.n	8003cb6 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ca4:	f7fd f8e2 	bl	8000e6c <HAL_GetTick>
 8003ca8:	4602      	mov	r2, r0
 8003caa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cac:	1ad3      	subs	r3, r2, r3
 8003cae:	2b02      	cmp	r3, #2
 8003cb0:	d901      	bls.n	8003cb6 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8003cb2:	2303      	movs	r3, #3
 8003cb4:	e332      	b.n	800431c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003cb6:	4b12      	ldr	r3, [pc, #72]	@ (8003d00 <HAL_RCC_OscConfig+0x288>)
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f003 0304 	and.w	r3, r3, #4
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d0f0      	beq.n	8003ca4 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cc2:	f7fd f903 	bl	8000ecc <HAL_GetREVID>
 8003cc6:	4603      	mov	r3, r0
 8003cc8:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003ccc:	4293      	cmp	r3, r2
 8003cce:	d819      	bhi.n	8003d04 <HAL_RCC_OscConfig+0x28c>
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	691b      	ldr	r3, [r3, #16]
 8003cd4:	2b40      	cmp	r3, #64	@ 0x40
 8003cd6:	d108      	bne.n	8003cea <HAL_RCC_OscConfig+0x272>
 8003cd8:	4b09      	ldr	r3, [pc, #36]	@ (8003d00 <HAL_RCC_OscConfig+0x288>)
 8003cda:	685b      	ldr	r3, [r3, #4]
 8003cdc:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8003ce0:	4a07      	ldr	r2, [pc, #28]	@ (8003d00 <HAL_RCC_OscConfig+0x288>)
 8003ce2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003ce6:	6053      	str	r3, [r2, #4]
 8003ce8:	e030      	b.n	8003d4c <HAL_RCC_OscConfig+0x2d4>
 8003cea:	4b05      	ldr	r3, [pc, #20]	@ (8003d00 <HAL_RCC_OscConfig+0x288>)
 8003cec:	685b      	ldr	r3, [r3, #4]
 8003cee:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	691b      	ldr	r3, [r3, #16]
 8003cf6:	031b      	lsls	r3, r3, #12
 8003cf8:	4901      	ldr	r1, [pc, #4]	@ (8003d00 <HAL_RCC_OscConfig+0x288>)
 8003cfa:	4313      	orrs	r3, r2
 8003cfc:	604b      	str	r3, [r1, #4]
 8003cfe:	e025      	b.n	8003d4c <HAL_RCC_OscConfig+0x2d4>
 8003d00:	58024400 	.word	0x58024400
 8003d04:	4b9a      	ldr	r3, [pc, #616]	@ (8003f70 <HAL_RCC_OscConfig+0x4f8>)
 8003d06:	685b      	ldr	r3, [r3, #4]
 8003d08:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	691b      	ldr	r3, [r3, #16]
 8003d10:	061b      	lsls	r3, r3, #24
 8003d12:	4997      	ldr	r1, [pc, #604]	@ (8003f70 <HAL_RCC_OscConfig+0x4f8>)
 8003d14:	4313      	orrs	r3, r2
 8003d16:	604b      	str	r3, [r1, #4]
 8003d18:	e018      	b.n	8003d4c <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d1a:	4b95      	ldr	r3, [pc, #596]	@ (8003f70 <HAL_RCC_OscConfig+0x4f8>)
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	4a94      	ldr	r2, [pc, #592]	@ (8003f70 <HAL_RCC_OscConfig+0x4f8>)
 8003d20:	f023 0301 	bic.w	r3, r3, #1
 8003d24:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d26:	f7fd f8a1 	bl	8000e6c <HAL_GetTick>
 8003d2a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003d2c:	e008      	b.n	8003d40 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d2e:	f7fd f89d 	bl	8000e6c <HAL_GetTick>
 8003d32:	4602      	mov	r2, r0
 8003d34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d36:	1ad3      	subs	r3, r2, r3
 8003d38:	2b02      	cmp	r3, #2
 8003d3a:	d901      	bls.n	8003d40 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8003d3c:	2303      	movs	r3, #3
 8003d3e:	e2ed      	b.n	800431c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003d40:	4b8b      	ldr	r3, [pc, #556]	@ (8003f70 <HAL_RCC_OscConfig+0x4f8>)
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f003 0304 	and.w	r3, r3, #4
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d1f0      	bne.n	8003d2e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f003 0310 	and.w	r3, r3, #16
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	f000 80a9 	beq.w	8003eac <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003d5a:	4b85      	ldr	r3, [pc, #532]	@ (8003f70 <HAL_RCC_OscConfig+0x4f8>)
 8003d5c:	691b      	ldr	r3, [r3, #16]
 8003d5e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003d62:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003d64:	4b82      	ldr	r3, [pc, #520]	@ (8003f70 <HAL_RCC_OscConfig+0x4f8>)
 8003d66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d68:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003d6a:	69bb      	ldr	r3, [r7, #24]
 8003d6c:	2b08      	cmp	r3, #8
 8003d6e:	d007      	beq.n	8003d80 <HAL_RCC_OscConfig+0x308>
 8003d70:	69bb      	ldr	r3, [r7, #24]
 8003d72:	2b18      	cmp	r3, #24
 8003d74:	d13a      	bne.n	8003dec <HAL_RCC_OscConfig+0x374>
 8003d76:	697b      	ldr	r3, [r7, #20]
 8003d78:	f003 0303 	and.w	r3, r3, #3
 8003d7c:	2b01      	cmp	r3, #1
 8003d7e:	d135      	bne.n	8003dec <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003d80:	4b7b      	ldr	r3, [pc, #492]	@ (8003f70 <HAL_RCC_OscConfig+0x4f8>)
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d005      	beq.n	8003d98 <HAL_RCC_OscConfig+0x320>
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	69db      	ldr	r3, [r3, #28]
 8003d90:	2b80      	cmp	r3, #128	@ 0x80
 8003d92:	d001      	beq.n	8003d98 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8003d94:	2301      	movs	r3, #1
 8003d96:	e2c1      	b.n	800431c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003d98:	f7fd f898 	bl	8000ecc <HAL_GetREVID>
 8003d9c:	4603      	mov	r3, r0
 8003d9e:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003da2:	4293      	cmp	r3, r2
 8003da4:	d817      	bhi.n	8003dd6 <HAL_RCC_OscConfig+0x35e>
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6a1b      	ldr	r3, [r3, #32]
 8003daa:	2b20      	cmp	r3, #32
 8003dac:	d108      	bne.n	8003dc0 <HAL_RCC_OscConfig+0x348>
 8003dae:	4b70      	ldr	r3, [pc, #448]	@ (8003f70 <HAL_RCC_OscConfig+0x4f8>)
 8003db0:	685b      	ldr	r3, [r3, #4]
 8003db2:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8003db6:	4a6e      	ldr	r2, [pc, #440]	@ (8003f70 <HAL_RCC_OscConfig+0x4f8>)
 8003db8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003dbc:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003dbe:	e075      	b.n	8003eac <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003dc0:	4b6b      	ldr	r3, [pc, #428]	@ (8003f70 <HAL_RCC_OscConfig+0x4f8>)
 8003dc2:	685b      	ldr	r3, [r3, #4]
 8003dc4:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6a1b      	ldr	r3, [r3, #32]
 8003dcc:	069b      	lsls	r3, r3, #26
 8003dce:	4968      	ldr	r1, [pc, #416]	@ (8003f70 <HAL_RCC_OscConfig+0x4f8>)
 8003dd0:	4313      	orrs	r3, r2
 8003dd2:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003dd4:	e06a      	b.n	8003eac <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003dd6:	4b66      	ldr	r3, [pc, #408]	@ (8003f70 <HAL_RCC_OscConfig+0x4f8>)
 8003dd8:	68db      	ldr	r3, [r3, #12]
 8003dda:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6a1b      	ldr	r3, [r3, #32]
 8003de2:	061b      	lsls	r3, r3, #24
 8003de4:	4962      	ldr	r1, [pc, #392]	@ (8003f70 <HAL_RCC_OscConfig+0x4f8>)
 8003de6:	4313      	orrs	r3, r2
 8003de8:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003dea:	e05f      	b.n	8003eac <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	69db      	ldr	r3, [r3, #28]
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d042      	beq.n	8003e7a <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003df4:	4b5e      	ldr	r3, [pc, #376]	@ (8003f70 <HAL_RCC_OscConfig+0x4f8>)
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	4a5d      	ldr	r2, [pc, #372]	@ (8003f70 <HAL_RCC_OscConfig+0x4f8>)
 8003dfa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003dfe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e00:	f7fd f834 	bl	8000e6c <HAL_GetTick>
 8003e04:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003e06:	e008      	b.n	8003e1a <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003e08:	f7fd f830 	bl	8000e6c <HAL_GetTick>
 8003e0c:	4602      	mov	r2, r0
 8003e0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e10:	1ad3      	subs	r3, r2, r3
 8003e12:	2b02      	cmp	r3, #2
 8003e14:	d901      	bls.n	8003e1a <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8003e16:	2303      	movs	r3, #3
 8003e18:	e280      	b.n	800431c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003e1a:	4b55      	ldr	r3, [pc, #340]	@ (8003f70 <HAL_RCC_OscConfig+0x4f8>)
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d0f0      	beq.n	8003e08 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003e26:	f7fd f851 	bl	8000ecc <HAL_GetREVID>
 8003e2a:	4603      	mov	r3, r0
 8003e2c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003e30:	4293      	cmp	r3, r2
 8003e32:	d817      	bhi.n	8003e64 <HAL_RCC_OscConfig+0x3ec>
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6a1b      	ldr	r3, [r3, #32]
 8003e38:	2b20      	cmp	r3, #32
 8003e3a:	d108      	bne.n	8003e4e <HAL_RCC_OscConfig+0x3d6>
 8003e3c:	4b4c      	ldr	r3, [pc, #304]	@ (8003f70 <HAL_RCC_OscConfig+0x4f8>)
 8003e3e:	685b      	ldr	r3, [r3, #4]
 8003e40:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8003e44:	4a4a      	ldr	r2, [pc, #296]	@ (8003f70 <HAL_RCC_OscConfig+0x4f8>)
 8003e46:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003e4a:	6053      	str	r3, [r2, #4]
 8003e4c:	e02e      	b.n	8003eac <HAL_RCC_OscConfig+0x434>
 8003e4e:	4b48      	ldr	r3, [pc, #288]	@ (8003f70 <HAL_RCC_OscConfig+0x4f8>)
 8003e50:	685b      	ldr	r3, [r3, #4]
 8003e52:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6a1b      	ldr	r3, [r3, #32]
 8003e5a:	069b      	lsls	r3, r3, #26
 8003e5c:	4944      	ldr	r1, [pc, #272]	@ (8003f70 <HAL_RCC_OscConfig+0x4f8>)
 8003e5e:	4313      	orrs	r3, r2
 8003e60:	604b      	str	r3, [r1, #4]
 8003e62:	e023      	b.n	8003eac <HAL_RCC_OscConfig+0x434>
 8003e64:	4b42      	ldr	r3, [pc, #264]	@ (8003f70 <HAL_RCC_OscConfig+0x4f8>)
 8003e66:	68db      	ldr	r3, [r3, #12]
 8003e68:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6a1b      	ldr	r3, [r3, #32]
 8003e70:	061b      	lsls	r3, r3, #24
 8003e72:	493f      	ldr	r1, [pc, #252]	@ (8003f70 <HAL_RCC_OscConfig+0x4f8>)
 8003e74:	4313      	orrs	r3, r2
 8003e76:	60cb      	str	r3, [r1, #12]
 8003e78:	e018      	b.n	8003eac <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003e7a:	4b3d      	ldr	r3, [pc, #244]	@ (8003f70 <HAL_RCC_OscConfig+0x4f8>)
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	4a3c      	ldr	r2, [pc, #240]	@ (8003f70 <HAL_RCC_OscConfig+0x4f8>)
 8003e80:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003e84:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e86:	f7fc fff1 	bl	8000e6c <HAL_GetTick>
 8003e8a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003e8c:	e008      	b.n	8003ea0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003e8e:	f7fc ffed 	bl	8000e6c <HAL_GetTick>
 8003e92:	4602      	mov	r2, r0
 8003e94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e96:	1ad3      	subs	r3, r2, r3
 8003e98:	2b02      	cmp	r3, #2
 8003e9a:	d901      	bls.n	8003ea0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003e9c:	2303      	movs	r3, #3
 8003e9e:	e23d      	b.n	800431c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003ea0:	4b33      	ldr	r3, [pc, #204]	@ (8003f70 <HAL_RCC_OscConfig+0x4f8>)
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d1f0      	bne.n	8003e8e <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f003 0308 	and.w	r3, r3, #8
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d036      	beq.n	8003f26 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	695b      	ldr	r3, [r3, #20]
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d019      	beq.n	8003ef4 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003ec0:	4b2b      	ldr	r3, [pc, #172]	@ (8003f70 <HAL_RCC_OscConfig+0x4f8>)
 8003ec2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003ec4:	4a2a      	ldr	r2, [pc, #168]	@ (8003f70 <HAL_RCC_OscConfig+0x4f8>)
 8003ec6:	f043 0301 	orr.w	r3, r3, #1
 8003eca:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ecc:	f7fc ffce 	bl	8000e6c <HAL_GetTick>
 8003ed0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003ed2:	e008      	b.n	8003ee6 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ed4:	f7fc ffca 	bl	8000e6c <HAL_GetTick>
 8003ed8:	4602      	mov	r2, r0
 8003eda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003edc:	1ad3      	subs	r3, r2, r3
 8003ede:	2b02      	cmp	r3, #2
 8003ee0:	d901      	bls.n	8003ee6 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8003ee2:	2303      	movs	r3, #3
 8003ee4:	e21a      	b.n	800431c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003ee6:	4b22      	ldr	r3, [pc, #136]	@ (8003f70 <HAL_RCC_OscConfig+0x4f8>)
 8003ee8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003eea:	f003 0302 	and.w	r3, r3, #2
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d0f0      	beq.n	8003ed4 <HAL_RCC_OscConfig+0x45c>
 8003ef2:	e018      	b.n	8003f26 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ef4:	4b1e      	ldr	r3, [pc, #120]	@ (8003f70 <HAL_RCC_OscConfig+0x4f8>)
 8003ef6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003ef8:	4a1d      	ldr	r2, [pc, #116]	@ (8003f70 <HAL_RCC_OscConfig+0x4f8>)
 8003efa:	f023 0301 	bic.w	r3, r3, #1
 8003efe:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f00:	f7fc ffb4 	bl	8000e6c <HAL_GetTick>
 8003f04:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003f06:	e008      	b.n	8003f1a <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f08:	f7fc ffb0 	bl	8000e6c <HAL_GetTick>
 8003f0c:	4602      	mov	r2, r0
 8003f0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f10:	1ad3      	subs	r3, r2, r3
 8003f12:	2b02      	cmp	r3, #2
 8003f14:	d901      	bls.n	8003f1a <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8003f16:	2303      	movs	r3, #3
 8003f18:	e200      	b.n	800431c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003f1a:	4b15      	ldr	r3, [pc, #84]	@ (8003f70 <HAL_RCC_OscConfig+0x4f8>)
 8003f1c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003f1e:	f003 0302 	and.w	r3, r3, #2
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d1f0      	bne.n	8003f08 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f003 0320 	and.w	r3, r3, #32
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d039      	beq.n	8003fa6 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	699b      	ldr	r3, [r3, #24]
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d01c      	beq.n	8003f74 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003f3a:	4b0d      	ldr	r3, [pc, #52]	@ (8003f70 <HAL_RCC_OscConfig+0x4f8>)
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	4a0c      	ldr	r2, [pc, #48]	@ (8003f70 <HAL_RCC_OscConfig+0x4f8>)
 8003f40:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003f44:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003f46:	f7fc ff91 	bl	8000e6c <HAL_GetTick>
 8003f4a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003f4c:	e008      	b.n	8003f60 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003f4e:	f7fc ff8d 	bl	8000e6c <HAL_GetTick>
 8003f52:	4602      	mov	r2, r0
 8003f54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f56:	1ad3      	subs	r3, r2, r3
 8003f58:	2b02      	cmp	r3, #2
 8003f5a:	d901      	bls.n	8003f60 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8003f5c:	2303      	movs	r3, #3
 8003f5e:	e1dd      	b.n	800431c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003f60:	4b03      	ldr	r3, [pc, #12]	@ (8003f70 <HAL_RCC_OscConfig+0x4f8>)
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d0f0      	beq.n	8003f4e <HAL_RCC_OscConfig+0x4d6>
 8003f6c:	e01b      	b.n	8003fa6 <HAL_RCC_OscConfig+0x52e>
 8003f6e:	bf00      	nop
 8003f70:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003f74:	4b9b      	ldr	r3, [pc, #620]	@ (80041e4 <HAL_RCC_OscConfig+0x76c>)
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	4a9a      	ldr	r2, [pc, #616]	@ (80041e4 <HAL_RCC_OscConfig+0x76c>)
 8003f7a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003f7e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003f80:	f7fc ff74 	bl	8000e6c <HAL_GetTick>
 8003f84:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003f86:	e008      	b.n	8003f9a <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003f88:	f7fc ff70 	bl	8000e6c <HAL_GetTick>
 8003f8c:	4602      	mov	r2, r0
 8003f8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f90:	1ad3      	subs	r3, r2, r3
 8003f92:	2b02      	cmp	r3, #2
 8003f94:	d901      	bls.n	8003f9a <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8003f96:	2303      	movs	r3, #3
 8003f98:	e1c0      	b.n	800431c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003f9a:	4b92      	ldr	r3, [pc, #584]	@ (80041e4 <HAL_RCC_OscConfig+0x76c>)
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d1f0      	bne.n	8003f88 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f003 0304 	and.w	r3, r3, #4
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	f000 8081 	beq.w	80040b6 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003fb4:	4b8c      	ldr	r3, [pc, #560]	@ (80041e8 <HAL_RCC_OscConfig+0x770>)
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	4a8b      	ldr	r2, [pc, #556]	@ (80041e8 <HAL_RCC_OscConfig+0x770>)
 8003fba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003fbe:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003fc0:	f7fc ff54 	bl	8000e6c <HAL_GetTick>
 8003fc4:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003fc6:	e008      	b.n	8003fda <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003fc8:	f7fc ff50 	bl	8000e6c <HAL_GetTick>
 8003fcc:	4602      	mov	r2, r0
 8003fce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fd0:	1ad3      	subs	r3, r2, r3
 8003fd2:	2b64      	cmp	r3, #100	@ 0x64
 8003fd4:	d901      	bls.n	8003fda <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8003fd6:	2303      	movs	r3, #3
 8003fd8:	e1a0      	b.n	800431c <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003fda:	4b83      	ldr	r3, [pc, #524]	@ (80041e8 <HAL_RCC_OscConfig+0x770>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d0f0      	beq.n	8003fc8 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	689b      	ldr	r3, [r3, #8]
 8003fea:	2b01      	cmp	r3, #1
 8003fec:	d106      	bne.n	8003ffc <HAL_RCC_OscConfig+0x584>
 8003fee:	4b7d      	ldr	r3, [pc, #500]	@ (80041e4 <HAL_RCC_OscConfig+0x76c>)
 8003ff0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ff2:	4a7c      	ldr	r2, [pc, #496]	@ (80041e4 <HAL_RCC_OscConfig+0x76c>)
 8003ff4:	f043 0301 	orr.w	r3, r3, #1
 8003ff8:	6713      	str	r3, [r2, #112]	@ 0x70
 8003ffa:	e02d      	b.n	8004058 <HAL_RCC_OscConfig+0x5e0>
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	689b      	ldr	r3, [r3, #8]
 8004000:	2b00      	cmp	r3, #0
 8004002:	d10c      	bne.n	800401e <HAL_RCC_OscConfig+0x5a6>
 8004004:	4b77      	ldr	r3, [pc, #476]	@ (80041e4 <HAL_RCC_OscConfig+0x76c>)
 8004006:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004008:	4a76      	ldr	r2, [pc, #472]	@ (80041e4 <HAL_RCC_OscConfig+0x76c>)
 800400a:	f023 0301 	bic.w	r3, r3, #1
 800400e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004010:	4b74      	ldr	r3, [pc, #464]	@ (80041e4 <HAL_RCC_OscConfig+0x76c>)
 8004012:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004014:	4a73      	ldr	r2, [pc, #460]	@ (80041e4 <HAL_RCC_OscConfig+0x76c>)
 8004016:	f023 0304 	bic.w	r3, r3, #4
 800401a:	6713      	str	r3, [r2, #112]	@ 0x70
 800401c:	e01c      	b.n	8004058 <HAL_RCC_OscConfig+0x5e0>
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	689b      	ldr	r3, [r3, #8]
 8004022:	2b05      	cmp	r3, #5
 8004024:	d10c      	bne.n	8004040 <HAL_RCC_OscConfig+0x5c8>
 8004026:	4b6f      	ldr	r3, [pc, #444]	@ (80041e4 <HAL_RCC_OscConfig+0x76c>)
 8004028:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800402a:	4a6e      	ldr	r2, [pc, #440]	@ (80041e4 <HAL_RCC_OscConfig+0x76c>)
 800402c:	f043 0304 	orr.w	r3, r3, #4
 8004030:	6713      	str	r3, [r2, #112]	@ 0x70
 8004032:	4b6c      	ldr	r3, [pc, #432]	@ (80041e4 <HAL_RCC_OscConfig+0x76c>)
 8004034:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004036:	4a6b      	ldr	r2, [pc, #428]	@ (80041e4 <HAL_RCC_OscConfig+0x76c>)
 8004038:	f043 0301 	orr.w	r3, r3, #1
 800403c:	6713      	str	r3, [r2, #112]	@ 0x70
 800403e:	e00b      	b.n	8004058 <HAL_RCC_OscConfig+0x5e0>
 8004040:	4b68      	ldr	r3, [pc, #416]	@ (80041e4 <HAL_RCC_OscConfig+0x76c>)
 8004042:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004044:	4a67      	ldr	r2, [pc, #412]	@ (80041e4 <HAL_RCC_OscConfig+0x76c>)
 8004046:	f023 0301 	bic.w	r3, r3, #1
 800404a:	6713      	str	r3, [r2, #112]	@ 0x70
 800404c:	4b65      	ldr	r3, [pc, #404]	@ (80041e4 <HAL_RCC_OscConfig+0x76c>)
 800404e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004050:	4a64      	ldr	r2, [pc, #400]	@ (80041e4 <HAL_RCC_OscConfig+0x76c>)
 8004052:	f023 0304 	bic.w	r3, r3, #4
 8004056:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	689b      	ldr	r3, [r3, #8]
 800405c:	2b00      	cmp	r3, #0
 800405e:	d015      	beq.n	800408c <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004060:	f7fc ff04 	bl	8000e6c <HAL_GetTick>
 8004064:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004066:	e00a      	b.n	800407e <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004068:	f7fc ff00 	bl	8000e6c <HAL_GetTick>
 800406c:	4602      	mov	r2, r0
 800406e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004070:	1ad3      	subs	r3, r2, r3
 8004072:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004076:	4293      	cmp	r3, r2
 8004078:	d901      	bls.n	800407e <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800407a:	2303      	movs	r3, #3
 800407c:	e14e      	b.n	800431c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800407e:	4b59      	ldr	r3, [pc, #356]	@ (80041e4 <HAL_RCC_OscConfig+0x76c>)
 8004080:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004082:	f003 0302 	and.w	r3, r3, #2
 8004086:	2b00      	cmp	r3, #0
 8004088:	d0ee      	beq.n	8004068 <HAL_RCC_OscConfig+0x5f0>
 800408a:	e014      	b.n	80040b6 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800408c:	f7fc feee 	bl	8000e6c <HAL_GetTick>
 8004090:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004092:	e00a      	b.n	80040aa <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004094:	f7fc feea 	bl	8000e6c <HAL_GetTick>
 8004098:	4602      	mov	r2, r0
 800409a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800409c:	1ad3      	subs	r3, r2, r3
 800409e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80040a2:	4293      	cmp	r3, r2
 80040a4:	d901      	bls.n	80040aa <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80040a6:	2303      	movs	r3, #3
 80040a8:	e138      	b.n	800431c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80040aa:	4b4e      	ldr	r3, [pc, #312]	@ (80041e4 <HAL_RCC_OscConfig+0x76c>)
 80040ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040ae:	f003 0302 	and.w	r3, r3, #2
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d1ee      	bne.n	8004094 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	f000 812d 	beq.w	800431a <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80040c0:	4b48      	ldr	r3, [pc, #288]	@ (80041e4 <HAL_RCC_OscConfig+0x76c>)
 80040c2:	691b      	ldr	r3, [r3, #16]
 80040c4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80040c8:	2b18      	cmp	r3, #24
 80040ca:	f000 80bd 	beq.w	8004248 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040d2:	2b02      	cmp	r3, #2
 80040d4:	f040 809e 	bne.w	8004214 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040d8:	4b42      	ldr	r3, [pc, #264]	@ (80041e4 <HAL_RCC_OscConfig+0x76c>)
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	4a41      	ldr	r2, [pc, #260]	@ (80041e4 <HAL_RCC_OscConfig+0x76c>)
 80040de:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80040e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040e4:	f7fc fec2 	bl	8000e6c <HAL_GetTick>
 80040e8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80040ea:	e008      	b.n	80040fe <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040ec:	f7fc febe 	bl	8000e6c <HAL_GetTick>
 80040f0:	4602      	mov	r2, r0
 80040f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040f4:	1ad3      	subs	r3, r2, r3
 80040f6:	2b02      	cmp	r3, #2
 80040f8:	d901      	bls.n	80040fe <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80040fa:	2303      	movs	r3, #3
 80040fc:	e10e      	b.n	800431c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80040fe:	4b39      	ldr	r3, [pc, #228]	@ (80041e4 <HAL_RCC_OscConfig+0x76c>)
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004106:	2b00      	cmp	r3, #0
 8004108:	d1f0      	bne.n	80040ec <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800410a:	4b36      	ldr	r3, [pc, #216]	@ (80041e4 <HAL_RCC_OscConfig+0x76c>)
 800410c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800410e:	4b37      	ldr	r3, [pc, #220]	@ (80041ec <HAL_RCC_OscConfig+0x774>)
 8004110:	4013      	ands	r3, r2
 8004112:	687a      	ldr	r2, [r7, #4]
 8004114:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8004116:	687a      	ldr	r2, [r7, #4]
 8004118:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800411a:	0112      	lsls	r2, r2, #4
 800411c:	430a      	orrs	r2, r1
 800411e:	4931      	ldr	r1, [pc, #196]	@ (80041e4 <HAL_RCC_OscConfig+0x76c>)
 8004120:	4313      	orrs	r3, r2
 8004122:	628b      	str	r3, [r1, #40]	@ 0x28
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004128:	3b01      	subs	r3, #1
 800412a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004132:	3b01      	subs	r3, #1
 8004134:	025b      	lsls	r3, r3, #9
 8004136:	b29b      	uxth	r3, r3
 8004138:	431a      	orrs	r2, r3
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800413e:	3b01      	subs	r3, #1
 8004140:	041b      	lsls	r3, r3, #16
 8004142:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004146:	431a      	orrs	r2, r3
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800414c:	3b01      	subs	r3, #1
 800414e:	061b      	lsls	r3, r3, #24
 8004150:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004154:	4923      	ldr	r1, [pc, #140]	@ (80041e4 <HAL_RCC_OscConfig+0x76c>)
 8004156:	4313      	orrs	r3, r2
 8004158:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800415a:	4b22      	ldr	r3, [pc, #136]	@ (80041e4 <HAL_RCC_OscConfig+0x76c>)
 800415c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800415e:	4a21      	ldr	r2, [pc, #132]	@ (80041e4 <HAL_RCC_OscConfig+0x76c>)
 8004160:	f023 0301 	bic.w	r3, r3, #1
 8004164:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004166:	4b1f      	ldr	r3, [pc, #124]	@ (80041e4 <HAL_RCC_OscConfig+0x76c>)
 8004168:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800416a:	4b21      	ldr	r3, [pc, #132]	@ (80041f0 <HAL_RCC_OscConfig+0x778>)
 800416c:	4013      	ands	r3, r2
 800416e:	687a      	ldr	r2, [r7, #4]
 8004170:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004172:	00d2      	lsls	r2, r2, #3
 8004174:	491b      	ldr	r1, [pc, #108]	@ (80041e4 <HAL_RCC_OscConfig+0x76c>)
 8004176:	4313      	orrs	r3, r2
 8004178:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800417a:	4b1a      	ldr	r3, [pc, #104]	@ (80041e4 <HAL_RCC_OscConfig+0x76c>)
 800417c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800417e:	f023 020c 	bic.w	r2, r3, #12
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004186:	4917      	ldr	r1, [pc, #92]	@ (80041e4 <HAL_RCC_OscConfig+0x76c>)
 8004188:	4313      	orrs	r3, r2
 800418a:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800418c:	4b15      	ldr	r3, [pc, #84]	@ (80041e4 <HAL_RCC_OscConfig+0x76c>)
 800418e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004190:	f023 0202 	bic.w	r2, r3, #2
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004198:	4912      	ldr	r1, [pc, #72]	@ (80041e4 <HAL_RCC_OscConfig+0x76c>)
 800419a:	4313      	orrs	r3, r2
 800419c:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800419e:	4b11      	ldr	r3, [pc, #68]	@ (80041e4 <HAL_RCC_OscConfig+0x76c>)
 80041a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041a2:	4a10      	ldr	r2, [pc, #64]	@ (80041e4 <HAL_RCC_OscConfig+0x76c>)
 80041a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80041a8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80041aa:	4b0e      	ldr	r3, [pc, #56]	@ (80041e4 <HAL_RCC_OscConfig+0x76c>)
 80041ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041ae:	4a0d      	ldr	r2, [pc, #52]	@ (80041e4 <HAL_RCC_OscConfig+0x76c>)
 80041b0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80041b4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80041b6:	4b0b      	ldr	r3, [pc, #44]	@ (80041e4 <HAL_RCC_OscConfig+0x76c>)
 80041b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041ba:	4a0a      	ldr	r2, [pc, #40]	@ (80041e4 <HAL_RCC_OscConfig+0x76c>)
 80041bc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80041c0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80041c2:	4b08      	ldr	r3, [pc, #32]	@ (80041e4 <HAL_RCC_OscConfig+0x76c>)
 80041c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041c6:	4a07      	ldr	r2, [pc, #28]	@ (80041e4 <HAL_RCC_OscConfig+0x76c>)
 80041c8:	f043 0301 	orr.w	r3, r3, #1
 80041cc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80041ce:	4b05      	ldr	r3, [pc, #20]	@ (80041e4 <HAL_RCC_OscConfig+0x76c>)
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	4a04      	ldr	r2, [pc, #16]	@ (80041e4 <HAL_RCC_OscConfig+0x76c>)
 80041d4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80041d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041da:	f7fc fe47 	bl	8000e6c <HAL_GetTick>
 80041de:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80041e0:	e011      	b.n	8004206 <HAL_RCC_OscConfig+0x78e>
 80041e2:	bf00      	nop
 80041e4:	58024400 	.word	0x58024400
 80041e8:	58024800 	.word	0x58024800
 80041ec:	fffffc0c 	.word	0xfffffc0c
 80041f0:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041f4:	f7fc fe3a 	bl	8000e6c <HAL_GetTick>
 80041f8:	4602      	mov	r2, r0
 80041fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041fc:	1ad3      	subs	r3, r2, r3
 80041fe:	2b02      	cmp	r3, #2
 8004200:	d901      	bls.n	8004206 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8004202:	2303      	movs	r3, #3
 8004204:	e08a      	b.n	800431c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004206:	4b47      	ldr	r3, [pc, #284]	@ (8004324 <HAL_RCC_OscConfig+0x8ac>)
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800420e:	2b00      	cmp	r3, #0
 8004210:	d0f0      	beq.n	80041f4 <HAL_RCC_OscConfig+0x77c>
 8004212:	e082      	b.n	800431a <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004214:	4b43      	ldr	r3, [pc, #268]	@ (8004324 <HAL_RCC_OscConfig+0x8ac>)
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	4a42      	ldr	r2, [pc, #264]	@ (8004324 <HAL_RCC_OscConfig+0x8ac>)
 800421a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800421e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004220:	f7fc fe24 	bl	8000e6c <HAL_GetTick>
 8004224:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004226:	e008      	b.n	800423a <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004228:	f7fc fe20 	bl	8000e6c <HAL_GetTick>
 800422c:	4602      	mov	r2, r0
 800422e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004230:	1ad3      	subs	r3, r2, r3
 8004232:	2b02      	cmp	r3, #2
 8004234:	d901      	bls.n	800423a <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8004236:	2303      	movs	r3, #3
 8004238:	e070      	b.n	800431c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800423a:	4b3a      	ldr	r3, [pc, #232]	@ (8004324 <HAL_RCC_OscConfig+0x8ac>)
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004242:	2b00      	cmp	r3, #0
 8004244:	d1f0      	bne.n	8004228 <HAL_RCC_OscConfig+0x7b0>
 8004246:	e068      	b.n	800431a <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004248:	4b36      	ldr	r3, [pc, #216]	@ (8004324 <HAL_RCC_OscConfig+0x8ac>)
 800424a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800424c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800424e:	4b35      	ldr	r3, [pc, #212]	@ (8004324 <HAL_RCC_OscConfig+0x8ac>)
 8004250:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004252:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004258:	2b01      	cmp	r3, #1
 800425a:	d031      	beq.n	80042c0 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800425c:	693b      	ldr	r3, [r7, #16]
 800425e:	f003 0203 	and.w	r2, r3, #3
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004266:	429a      	cmp	r2, r3
 8004268:	d12a      	bne.n	80042c0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800426a:	693b      	ldr	r3, [r7, #16]
 800426c:	091b      	lsrs	r3, r3, #4
 800426e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004276:	429a      	cmp	r2, r3
 8004278:	d122      	bne.n	80042c0 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004284:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004286:	429a      	cmp	r2, r3
 8004288:	d11a      	bne.n	80042c0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	0a5b      	lsrs	r3, r3, #9
 800428e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004296:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004298:	429a      	cmp	r2, r3
 800429a:	d111      	bne.n	80042c0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	0c1b      	lsrs	r3, r3, #16
 80042a0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042a8:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80042aa:	429a      	cmp	r2, r3
 80042ac:	d108      	bne.n	80042c0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	0e1b      	lsrs	r3, r3, #24
 80042b2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042ba:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80042bc:	429a      	cmp	r2, r3
 80042be:	d001      	beq.n	80042c4 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80042c0:	2301      	movs	r3, #1
 80042c2:	e02b      	b.n	800431c <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80042c4:	4b17      	ldr	r3, [pc, #92]	@ (8004324 <HAL_RCC_OscConfig+0x8ac>)
 80042c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80042c8:	08db      	lsrs	r3, r3, #3
 80042ca:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80042ce:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80042d4:	693a      	ldr	r2, [r7, #16]
 80042d6:	429a      	cmp	r2, r3
 80042d8:	d01f      	beq.n	800431a <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80042da:	4b12      	ldr	r3, [pc, #72]	@ (8004324 <HAL_RCC_OscConfig+0x8ac>)
 80042dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042de:	4a11      	ldr	r2, [pc, #68]	@ (8004324 <HAL_RCC_OscConfig+0x8ac>)
 80042e0:	f023 0301 	bic.w	r3, r3, #1
 80042e4:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80042e6:	f7fc fdc1 	bl	8000e6c <HAL_GetTick>
 80042ea:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80042ec:	bf00      	nop
 80042ee:	f7fc fdbd 	bl	8000e6c <HAL_GetTick>
 80042f2:	4602      	mov	r2, r0
 80042f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042f6:	4293      	cmp	r3, r2
 80042f8:	d0f9      	beq.n	80042ee <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80042fa:	4b0a      	ldr	r3, [pc, #40]	@ (8004324 <HAL_RCC_OscConfig+0x8ac>)
 80042fc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80042fe:	4b0a      	ldr	r3, [pc, #40]	@ (8004328 <HAL_RCC_OscConfig+0x8b0>)
 8004300:	4013      	ands	r3, r2
 8004302:	687a      	ldr	r2, [r7, #4]
 8004304:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004306:	00d2      	lsls	r2, r2, #3
 8004308:	4906      	ldr	r1, [pc, #24]	@ (8004324 <HAL_RCC_OscConfig+0x8ac>)
 800430a:	4313      	orrs	r3, r2
 800430c:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800430e:	4b05      	ldr	r3, [pc, #20]	@ (8004324 <HAL_RCC_OscConfig+0x8ac>)
 8004310:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004312:	4a04      	ldr	r2, [pc, #16]	@ (8004324 <HAL_RCC_OscConfig+0x8ac>)
 8004314:	f043 0301 	orr.w	r3, r3, #1
 8004318:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800431a:	2300      	movs	r3, #0
}
 800431c:	4618      	mov	r0, r3
 800431e:	3730      	adds	r7, #48	@ 0x30
 8004320:	46bd      	mov	sp, r7
 8004322:	bd80      	pop	{r7, pc}
 8004324:	58024400 	.word	0x58024400
 8004328:	ffff0007 	.word	0xffff0007

0800432c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800432c:	b580      	push	{r7, lr}
 800432e:	b086      	sub	sp, #24
 8004330:	af00      	add	r7, sp, #0
 8004332:	6078      	str	r0, [r7, #4]
 8004334:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	2b00      	cmp	r3, #0
 800433a:	d101      	bne.n	8004340 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800433c:	2301      	movs	r3, #1
 800433e:	e19c      	b.n	800467a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004340:	4b8a      	ldr	r3, [pc, #552]	@ (800456c <HAL_RCC_ClockConfig+0x240>)
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f003 030f 	and.w	r3, r3, #15
 8004348:	683a      	ldr	r2, [r7, #0]
 800434a:	429a      	cmp	r2, r3
 800434c:	d910      	bls.n	8004370 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800434e:	4b87      	ldr	r3, [pc, #540]	@ (800456c <HAL_RCC_ClockConfig+0x240>)
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f023 020f 	bic.w	r2, r3, #15
 8004356:	4985      	ldr	r1, [pc, #532]	@ (800456c <HAL_RCC_ClockConfig+0x240>)
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	4313      	orrs	r3, r2
 800435c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800435e:	4b83      	ldr	r3, [pc, #524]	@ (800456c <HAL_RCC_ClockConfig+0x240>)
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f003 030f 	and.w	r3, r3, #15
 8004366:	683a      	ldr	r2, [r7, #0]
 8004368:	429a      	cmp	r2, r3
 800436a:	d001      	beq.n	8004370 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800436c:	2301      	movs	r3, #1
 800436e:	e184      	b.n	800467a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f003 0304 	and.w	r3, r3, #4
 8004378:	2b00      	cmp	r3, #0
 800437a:	d010      	beq.n	800439e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	691a      	ldr	r2, [r3, #16]
 8004380:	4b7b      	ldr	r3, [pc, #492]	@ (8004570 <HAL_RCC_ClockConfig+0x244>)
 8004382:	699b      	ldr	r3, [r3, #24]
 8004384:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004388:	429a      	cmp	r2, r3
 800438a:	d908      	bls.n	800439e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800438c:	4b78      	ldr	r3, [pc, #480]	@ (8004570 <HAL_RCC_ClockConfig+0x244>)
 800438e:	699b      	ldr	r3, [r3, #24]
 8004390:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	691b      	ldr	r3, [r3, #16]
 8004398:	4975      	ldr	r1, [pc, #468]	@ (8004570 <HAL_RCC_ClockConfig+0x244>)
 800439a:	4313      	orrs	r3, r2
 800439c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f003 0308 	and.w	r3, r3, #8
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d010      	beq.n	80043cc <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	695a      	ldr	r2, [r3, #20]
 80043ae:	4b70      	ldr	r3, [pc, #448]	@ (8004570 <HAL_RCC_ClockConfig+0x244>)
 80043b0:	69db      	ldr	r3, [r3, #28]
 80043b2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80043b6:	429a      	cmp	r2, r3
 80043b8:	d908      	bls.n	80043cc <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80043ba:	4b6d      	ldr	r3, [pc, #436]	@ (8004570 <HAL_RCC_ClockConfig+0x244>)
 80043bc:	69db      	ldr	r3, [r3, #28]
 80043be:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	695b      	ldr	r3, [r3, #20]
 80043c6:	496a      	ldr	r1, [pc, #424]	@ (8004570 <HAL_RCC_ClockConfig+0x244>)
 80043c8:	4313      	orrs	r3, r2
 80043ca:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f003 0310 	and.w	r3, r3, #16
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d010      	beq.n	80043fa <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	699a      	ldr	r2, [r3, #24]
 80043dc:	4b64      	ldr	r3, [pc, #400]	@ (8004570 <HAL_RCC_ClockConfig+0x244>)
 80043de:	69db      	ldr	r3, [r3, #28]
 80043e0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80043e4:	429a      	cmp	r2, r3
 80043e6:	d908      	bls.n	80043fa <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80043e8:	4b61      	ldr	r3, [pc, #388]	@ (8004570 <HAL_RCC_ClockConfig+0x244>)
 80043ea:	69db      	ldr	r3, [r3, #28]
 80043ec:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	699b      	ldr	r3, [r3, #24]
 80043f4:	495e      	ldr	r1, [pc, #376]	@ (8004570 <HAL_RCC_ClockConfig+0x244>)
 80043f6:	4313      	orrs	r3, r2
 80043f8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f003 0320 	and.w	r3, r3, #32
 8004402:	2b00      	cmp	r3, #0
 8004404:	d010      	beq.n	8004428 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	69da      	ldr	r2, [r3, #28]
 800440a:	4b59      	ldr	r3, [pc, #356]	@ (8004570 <HAL_RCC_ClockConfig+0x244>)
 800440c:	6a1b      	ldr	r3, [r3, #32]
 800440e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004412:	429a      	cmp	r2, r3
 8004414:	d908      	bls.n	8004428 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004416:	4b56      	ldr	r3, [pc, #344]	@ (8004570 <HAL_RCC_ClockConfig+0x244>)
 8004418:	6a1b      	ldr	r3, [r3, #32]
 800441a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	69db      	ldr	r3, [r3, #28]
 8004422:	4953      	ldr	r1, [pc, #332]	@ (8004570 <HAL_RCC_ClockConfig+0x244>)
 8004424:	4313      	orrs	r3, r2
 8004426:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f003 0302 	and.w	r3, r3, #2
 8004430:	2b00      	cmp	r3, #0
 8004432:	d010      	beq.n	8004456 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	68da      	ldr	r2, [r3, #12]
 8004438:	4b4d      	ldr	r3, [pc, #308]	@ (8004570 <HAL_RCC_ClockConfig+0x244>)
 800443a:	699b      	ldr	r3, [r3, #24]
 800443c:	f003 030f 	and.w	r3, r3, #15
 8004440:	429a      	cmp	r2, r3
 8004442:	d908      	bls.n	8004456 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004444:	4b4a      	ldr	r3, [pc, #296]	@ (8004570 <HAL_RCC_ClockConfig+0x244>)
 8004446:	699b      	ldr	r3, [r3, #24]
 8004448:	f023 020f 	bic.w	r2, r3, #15
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	68db      	ldr	r3, [r3, #12]
 8004450:	4947      	ldr	r1, [pc, #284]	@ (8004570 <HAL_RCC_ClockConfig+0x244>)
 8004452:	4313      	orrs	r3, r2
 8004454:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f003 0301 	and.w	r3, r3, #1
 800445e:	2b00      	cmp	r3, #0
 8004460:	d055      	beq.n	800450e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8004462:	4b43      	ldr	r3, [pc, #268]	@ (8004570 <HAL_RCC_ClockConfig+0x244>)
 8004464:	699b      	ldr	r3, [r3, #24]
 8004466:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	689b      	ldr	r3, [r3, #8]
 800446e:	4940      	ldr	r1, [pc, #256]	@ (8004570 <HAL_RCC_ClockConfig+0x244>)
 8004470:	4313      	orrs	r3, r2
 8004472:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	685b      	ldr	r3, [r3, #4]
 8004478:	2b02      	cmp	r3, #2
 800447a:	d107      	bne.n	800448c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800447c:	4b3c      	ldr	r3, [pc, #240]	@ (8004570 <HAL_RCC_ClockConfig+0x244>)
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004484:	2b00      	cmp	r3, #0
 8004486:	d121      	bne.n	80044cc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004488:	2301      	movs	r3, #1
 800448a:	e0f6      	b.n	800467a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	685b      	ldr	r3, [r3, #4]
 8004490:	2b03      	cmp	r3, #3
 8004492:	d107      	bne.n	80044a4 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004494:	4b36      	ldr	r3, [pc, #216]	@ (8004570 <HAL_RCC_ClockConfig+0x244>)
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800449c:	2b00      	cmp	r3, #0
 800449e:	d115      	bne.n	80044cc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80044a0:	2301      	movs	r3, #1
 80044a2:	e0ea      	b.n	800467a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	685b      	ldr	r3, [r3, #4]
 80044a8:	2b01      	cmp	r3, #1
 80044aa:	d107      	bne.n	80044bc <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80044ac:	4b30      	ldr	r3, [pc, #192]	@ (8004570 <HAL_RCC_ClockConfig+0x244>)
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d109      	bne.n	80044cc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80044b8:	2301      	movs	r3, #1
 80044ba:	e0de      	b.n	800467a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80044bc:	4b2c      	ldr	r3, [pc, #176]	@ (8004570 <HAL_RCC_ClockConfig+0x244>)
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f003 0304 	and.w	r3, r3, #4
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d101      	bne.n	80044cc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80044c8:	2301      	movs	r3, #1
 80044ca:	e0d6      	b.n	800467a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80044cc:	4b28      	ldr	r3, [pc, #160]	@ (8004570 <HAL_RCC_ClockConfig+0x244>)
 80044ce:	691b      	ldr	r3, [r3, #16]
 80044d0:	f023 0207 	bic.w	r2, r3, #7
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	685b      	ldr	r3, [r3, #4]
 80044d8:	4925      	ldr	r1, [pc, #148]	@ (8004570 <HAL_RCC_ClockConfig+0x244>)
 80044da:	4313      	orrs	r3, r2
 80044dc:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80044de:	f7fc fcc5 	bl	8000e6c <HAL_GetTick>
 80044e2:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044e4:	e00a      	b.n	80044fc <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80044e6:	f7fc fcc1 	bl	8000e6c <HAL_GetTick>
 80044ea:	4602      	mov	r2, r0
 80044ec:	697b      	ldr	r3, [r7, #20]
 80044ee:	1ad3      	subs	r3, r2, r3
 80044f0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80044f4:	4293      	cmp	r3, r2
 80044f6:	d901      	bls.n	80044fc <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80044f8:	2303      	movs	r3, #3
 80044fa:	e0be      	b.n	800467a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044fc:	4b1c      	ldr	r3, [pc, #112]	@ (8004570 <HAL_RCC_ClockConfig+0x244>)
 80044fe:	691b      	ldr	r3, [r3, #16]
 8004500:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	685b      	ldr	r3, [r3, #4]
 8004508:	00db      	lsls	r3, r3, #3
 800450a:	429a      	cmp	r2, r3
 800450c:	d1eb      	bne.n	80044e6 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f003 0302 	and.w	r3, r3, #2
 8004516:	2b00      	cmp	r3, #0
 8004518:	d010      	beq.n	800453c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	68da      	ldr	r2, [r3, #12]
 800451e:	4b14      	ldr	r3, [pc, #80]	@ (8004570 <HAL_RCC_ClockConfig+0x244>)
 8004520:	699b      	ldr	r3, [r3, #24]
 8004522:	f003 030f 	and.w	r3, r3, #15
 8004526:	429a      	cmp	r2, r3
 8004528:	d208      	bcs.n	800453c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800452a:	4b11      	ldr	r3, [pc, #68]	@ (8004570 <HAL_RCC_ClockConfig+0x244>)
 800452c:	699b      	ldr	r3, [r3, #24]
 800452e:	f023 020f 	bic.w	r2, r3, #15
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	68db      	ldr	r3, [r3, #12]
 8004536:	490e      	ldr	r1, [pc, #56]	@ (8004570 <HAL_RCC_ClockConfig+0x244>)
 8004538:	4313      	orrs	r3, r2
 800453a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800453c:	4b0b      	ldr	r3, [pc, #44]	@ (800456c <HAL_RCC_ClockConfig+0x240>)
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f003 030f 	and.w	r3, r3, #15
 8004544:	683a      	ldr	r2, [r7, #0]
 8004546:	429a      	cmp	r2, r3
 8004548:	d214      	bcs.n	8004574 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800454a:	4b08      	ldr	r3, [pc, #32]	@ (800456c <HAL_RCC_ClockConfig+0x240>)
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f023 020f 	bic.w	r2, r3, #15
 8004552:	4906      	ldr	r1, [pc, #24]	@ (800456c <HAL_RCC_ClockConfig+0x240>)
 8004554:	683b      	ldr	r3, [r7, #0]
 8004556:	4313      	orrs	r3, r2
 8004558:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800455a:	4b04      	ldr	r3, [pc, #16]	@ (800456c <HAL_RCC_ClockConfig+0x240>)
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f003 030f 	and.w	r3, r3, #15
 8004562:	683a      	ldr	r2, [r7, #0]
 8004564:	429a      	cmp	r2, r3
 8004566:	d005      	beq.n	8004574 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004568:	2301      	movs	r3, #1
 800456a:	e086      	b.n	800467a <HAL_RCC_ClockConfig+0x34e>
 800456c:	52002000 	.word	0x52002000
 8004570:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f003 0304 	and.w	r3, r3, #4
 800457c:	2b00      	cmp	r3, #0
 800457e:	d010      	beq.n	80045a2 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	691a      	ldr	r2, [r3, #16]
 8004584:	4b3f      	ldr	r3, [pc, #252]	@ (8004684 <HAL_RCC_ClockConfig+0x358>)
 8004586:	699b      	ldr	r3, [r3, #24]
 8004588:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800458c:	429a      	cmp	r2, r3
 800458e:	d208      	bcs.n	80045a2 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004590:	4b3c      	ldr	r3, [pc, #240]	@ (8004684 <HAL_RCC_ClockConfig+0x358>)
 8004592:	699b      	ldr	r3, [r3, #24]
 8004594:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	691b      	ldr	r3, [r3, #16]
 800459c:	4939      	ldr	r1, [pc, #228]	@ (8004684 <HAL_RCC_ClockConfig+0x358>)
 800459e:	4313      	orrs	r3, r2
 80045a0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f003 0308 	and.w	r3, r3, #8
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d010      	beq.n	80045d0 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	695a      	ldr	r2, [r3, #20]
 80045b2:	4b34      	ldr	r3, [pc, #208]	@ (8004684 <HAL_RCC_ClockConfig+0x358>)
 80045b4:	69db      	ldr	r3, [r3, #28]
 80045b6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80045ba:	429a      	cmp	r2, r3
 80045bc:	d208      	bcs.n	80045d0 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80045be:	4b31      	ldr	r3, [pc, #196]	@ (8004684 <HAL_RCC_ClockConfig+0x358>)
 80045c0:	69db      	ldr	r3, [r3, #28]
 80045c2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	695b      	ldr	r3, [r3, #20]
 80045ca:	492e      	ldr	r1, [pc, #184]	@ (8004684 <HAL_RCC_ClockConfig+0x358>)
 80045cc:	4313      	orrs	r3, r2
 80045ce:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f003 0310 	and.w	r3, r3, #16
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d010      	beq.n	80045fe <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	699a      	ldr	r2, [r3, #24]
 80045e0:	4b28      	ldr	r3, [pc, #160]	@ (8004684 <HAL_RCC_ClockConfig+0x358>)
 80045e2:	69db      	ldr	r3, [r3, #28]
 80045e4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80045e8:	429a      	cmp	r2, r3
 80045ea:	d208      	bcs.n	80045fe <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80045ec:	4b25      	ldr	r3, [pc, #148]	@ (8004684 <HAL_RCC_ClockConfig+0x358>)
 80045ee:	69db      	ldr	r3, [r3, #28]
 80045f0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	699b      	ldr	r3, [r3, #24]
 80045f8:	4922      	ldr	r1, [pc, #136]	@ (8004684 <HAL_RCC_ClockConfig+0x358>)
 80045fa:	4313      	orrs	r3, r2
 80045fc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f003 0320 	and.w	r3, r3, #32
 8004606:	2b00      	cmp	r3, #0
 8004608:	d010      	beq.n	800462c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	69da      	ldr	r2, [r3, #28]
 800460e:	4b1d      	ldr	r3, [pc, #116]	@ (8004684 <HAL_RCC_ClockConfig+0x358>)
 8004610:	6a1b      	ldr	r3, [r3, #32]
 8004612:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004616:	429a      	cmp	r2, r3
 8004618:	d208      	bcs.n	800462c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800461a:	4b1a      	ldr	r3, [pc, #104]	@ (8004684 <HAL_RCC_ClockConfig+0x358>)
 800461c:	6a1b      	ldr	r3, [r3, #32]
 800461e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	69db      	ldr	r3, [r3, #28]
 8004626:	4917      	ldr	r1, [pc, #92]	@ (8004684 <HAL_RCC_ClockConfig+0x358>)
 8004628:	4313      	orrs	r3, r2
 800462a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800462c:	f000 f834 	bl	8004698 <HAL_RCC_GetSysClockFreq>
 8004630:	4602      	mov	r2, r0
 8004632:	4b14      	ldr	r3, [pc, #80]	@ (8004684 <HAL_RCC_ClockConfig+0x358>)
 8004634:	699b      	ldr	r3, [r3, #24]
 8004636:	0a1b      	lsrs	r3, r3, #8
 8004638:	f003 030f 	and.w	r3, r3, #15
 800463c:	4912      	ldr	r1, [pc, #72]	@ (8004688 <HAL_RCC_ClockConfig+0x35c>)
 800463e:	5ccb      	ldrb	r3, [r1, r3]
 8004640:	f003 031f 	and.w	r3, r3, #31
 8004644:	fa22 f303 	lsr.w	r3, r2, r3
 8004648:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800464a:	4b0e      	ldr	r3, [pc, #56]	@ (8004684 <HAL_RCC_ClockConfig+0x358>)
 800464c:	699b      	ldr	r3, [r3, #24]
 800464e:	f003 030f 	and.w	r3, r3, #15
 8004652:	4a0d      	ldr	r2, [pc, #52]	@ (8004688 <HAL_RCC_ClockConfig+0x35c>)
 8004654:	5cd3      	ldrb	r3, [r2, r3]
 8004656:	f003 031f 	and.w	r3, r3, #31
 800465a:	693a      	ldr	r2, [r7, #16]
 800465c:	fa22 f303 	lsr.w	r3, r2, r3
 8004660:	4a0a      	ldr	r2, [pc, #40]	@ (800468c <HAL_RCC_ClockConfig+0x360>)
 8004662:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004664:	4a0a      	ldr	r2, [pc, #40]	@ (8004690 <HAL_RCC_ClockConfig+0x364>)
 8004666:	693b      	ldr	r3, [r7, #16]
 8004668:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800466a:	4b0a      	ldr	r3, [pc, #40]	@ (8004694 <HAL_RCC_ClockConfig+0x368>)
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	4618      	mov	r0, r3
 8004670:	f7fc fbb2 	bl	8000dd8 <HAL_InitTick>
 8004674:	4603      	mov	r3, r0
 8004676:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8004678:	7bfb      	ldrb	r3, [r7, #15]
}
 800467a:	4618      	mov	r0, r3
 800467c:	3718      	adds	r7, #24
 800467e:	46bd      	mov	sp, r7
 8004680:	bd80      	pop	{r7, pc}
 8004682:	bf00      	nop
 8004684:	58024400 	.word	0x58024400
 8004688:	08008290 	.word	0x08008290
 800468c:	24000008 	.word	0x24000008
 8004690:	24000004 	.word	0x24000004
 8004694:	2400000c 	.word	0x2400000c

08004698 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004698:	b480      	push	{r7}
 800469a:	b089      	sub	sp, #36	@ 0x24
 800469c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800469e:	4bb3      	ldr	r3, [pc, #716]	@ (800496c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80046a0:	691b      	ldr	r3, [r3, #16]
 80046a2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80046a6:	2b18      	cmp	r3, #24
 80046a8:	f200 8155 	bhi.w	8004956 <HAL_RCC_GetSysClockFreq+0x2be>
 80046ac:	a201      	add	r2, pc, #4	@ (adr r2, 80046b4 <HAL_RCC_GetSysClockFreq+0x1c>)
 80046ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046b2:	bf00      	nop
 80046b4:	08004719 	.word	0x08004719
 80046b8:	08004957 	.word	0x08004957
 80046bc:	08004957 	.word	0x08004957
 80046c0:	08004957 	.word	0x08004957
 80046c4:	08004957 	.word	0x08004957
 80046c8:	08004957 	.word	0x08004957
 80046cc:	08004957 	.word	0x08004957
 80046d0:	08004957 	.word	0x08004957
 80046d4:	0800473f 	.word	0x0800473f
 80046d8:	08004957 	.word	0x08004957
 80046dc:	08004957 	.word	0x08004957
 80046e0:	08004957 	.word	0x08004957
 80046e4:	08004957 	.word	0x08004957
 80046e8:	08004957 	.word	0x08004957
 80046ec:	08004957 	.word	0x08004957
 80046f0:	08004957 	.word	0x08004957
 80046f4:	08004745 	.word	0x08004745
 80046f8:	08004957 	.word	0x08004957
 80046fc:	08004957 	.word	0x08004957
 8004700:	08004957 	.word	0x08004957
 8004704:	08004957 	.word	0x08004957
 8004708:	08004957 	.word	0x08004957
 800470c:	08004957 	.word	0x08004957
 8004710:	08004957 	.word	0x08004957
 8004714:	0800474b 	.word	0x0800474b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004718:	4b94      	ldr	r3, [pc, #592]	@ (800496c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f003 0320 	and.w	r3, r3, #32
 8004720:	2b00      	cmp	r3, #0
 8004722:	d009      	beq.n	8004738 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004724:	4b91      	ldr	r3, [pc, #580]	@ (800496c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	08db      	lsrs	r3, r3, #3
 800472a:	f003 0303 	and.w	r3, r3, #3
 800472e:	4a90      	ldr	r2, [pc, #576]	@ (8004970 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004730:	fa22 f303 	lsr.w	r3, r2, r3
 8004734:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8004736:	e111      	b.n	800495c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004738:	4b8d      	ldr	r3, [pc, #564]	@ (8004970 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800473a:	61bb      	str	r3, [r7, #24]
      break;
 800473c:	e10e      	b.n	800495c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800473e:	4b8d      	ldr	r3, [pc, #564]	@ (8004974 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004740:	61bb      	str	r3, [r7, #24]
      break;
 8004742:	e10b      	b.n	800495c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8004744:	4b8c      	ldr	r3, [pc, #560]	@ (8004978 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8004746:	61bb      	str	r3, [r7, #24]
      break;
 8004748:	e108      	b.n	800495c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800474a:	4b88      	ldr	r3, [pc, #544]	@ (800496c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800474c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800474e:	f003 0303 	and.w	r3, r3, #3
 8004752:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8004754:	4b85      	ldr	r3, [pc, #532]	@ (800496c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004756:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004758:	091b      	lsrs	r3, r3, #4
 800475a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800475e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004760:	4b82      	ldr	r3, [pc, #520]	@ (800496c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004762:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004764:	f003 0301 	and.w	r3, r3, #1
 8004768:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800476a:	4b80      	ldr	r3, [pc, #512]	@ (800496c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800476c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800476e:	08db      	lsrs	r3, r3, #3
 8004770:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004774:	68fa      	ldr	r2, [r7, #12]
 8004776:	fb02 f303 	mul.w	r3, r2, r3
 800477a:	ee07 3a90 	vmov	s15, r3
 800477e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004782:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8004786:	693b      	ldr	r3, [r7, #16]
 8004788:	2b00      	cmp	r3, #0
 800478a:	f000 80e1 	beq.w	8004950 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 800478e:	697b      	ldr	r3, [r7, #20]
 8004790:	2b02      	cmp	r3, #2
 8004792:	f000 8083 	beq.w	800489c <HAL_RCC_GetSysClockFreq+0x204>
 8004796:	697b      	ldr	r3, [r7, #20]
 8004798:	2b02      	cmp	r3, #2
 800479a:	f200 80a1 	bhi.w	80048e0 <HAL_RCC_GetSysClockFreq+0x248>
 800479e:	697b      	ldr	r3, [r7, #20]
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d003      	beq.n	80047ac <HAL_RCC_GetSysClockFreq+0x114>
 80047a4:	697b      	ldr	r3, [r7, #20]
 80047a6:	2b01      	cmp	r3, #1
 80047a8:	d056      	beq.n	8004858 <HAL_RCC_GetSysClockFreq+0x1c0>
 80047aa:	e099      	b.n	80048e0 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80047ac:	4b6f      	ldr	r3, [pc, #444]	@ (800496c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f003 0320 	and.w	r3, r3, #32
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d02d      	beq.n	8004814 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80047b8:	4b6c      	ldr	r3, [pc, #432]	@ (800496c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	08db      	lsrs	r3, r3, #3
 80047be:	f003 0303 	and.w	r3, r3, #3
 80047c2:	4a6b      	ldr	r2, [pc, #428]	@ (8004970 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80047c4:	fa22 f303 	lsr.w	r3, r2, r3
 80047c8:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	ee07 3a90 	vmov	s15, r3
 80047d0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80047d4:	693b      	ldr	r3, [r7, #16]
 80047d6:	ee07 3a90 	vmov	s15, r3
 80047da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80047e2:	4b62      	ldr	r3, [pc, #392]	@ (800496c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80047e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047ea:	ee07 3a90 	vmov	s15, r3
 80047ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80047f2:	ed97 6a02 	vldr	s12, [r7, #8]
 80047f6:	eddf 5a61 	vldr	s11, [pc, #388]	@ 800497c <HAL_RCC_GetSysClockFreq+0x2e4>
 80047fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80047fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004802:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004806:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800480a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800480e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8004812:	e087      	b.n	8004924 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004814:	693b      	ldr	r3, [r7, #16]
 8004816:	ee07 3a90 	vmov	s15, r3
 800481a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800481e:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8004980 <HAL_RCC_GetSysClockFreq+0x2e8>
 8004822:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004826:	4b51      	ldr	r3, [pc, #324]	@ (800496c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004828:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800482a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800482e:	ee07 3a90 	vmov	s15, r3
 8004832:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004836:	ed97 6a02 	vldr	s12, [r7, #8]
 800483a:	eddf 5a50 	vldr	s11, [pc, #320]	@ 800497c <HAL_RCC_GetSysClockFreq+0x2e4>
 800483e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004842:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004846:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800484a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800484e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004852:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004856:	e065      	b.n	8004924 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004858:	693b      	ldr	r3, [r7, #16]
 800485a:	ee07 3a90 	vmov	s15, r3
 800485e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004862:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8004984 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004866:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800486a:	4b40      	ldr	r3, [pc, #256]	@ (800496c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800486c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800486e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004872:	ee07 3a90 	vmov	s15, r3
 8004876:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800487a:	ed97 6a02 	vldr	s12, [r7, #8]
 800487e:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800497c <HAL_RCC_GetSysClockFreq+0x2e4>
 8004882:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004886:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800488a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800488e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004892:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004896:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800489a:	e043      	b.n	8004924 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800489c:	693b      	ldr	r3, [r7, #16]
 800489e:	ee07 3a90 	vmov	s15, r3
 80048a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048a6:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8004988 <HAL_RCC_GetSysClockFreq+0x2f0>
 80048aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80048ae:	4b2f      	ldr	r3, [pc, #188]	@ (800496c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80048b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048b6:	ee07 3a90 	vmov	s15, r3
 80048ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80048be:	ed97 6a02 	vldr	s12, [r7, #8]
 80048c2:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 800497c <HAL_RCC_GetSysClockFreq+0x2e4>
 80048c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80048ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80048ce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80048d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80048d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048da:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80048de:	e021      	b.n	8004924 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80048e0:	693b      	ldr	r3, [r7, #16]
 80048e2:	ee07 3a90 	vmov	s15, r3
 80048e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048ea:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8004984 <HAL_RCC_GetSysClockFreq+0x2ec>
 80048ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80048f2:	4b1e      	ldr	r3, [pc, #120]	@ (800496c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80048f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048fa:	ee07 3a90 	vmov	s15, r3
 80048fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004902:	ed97 6a02 	vldr	s12, [r7, #8]
 8004906:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 800497c <HAL_RCC_GetSysClockFreq+0x2e4>
 800490a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800490e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004912:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004916:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800491a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800491e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004922:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8004924:	4b11      	ldr	r3, [pc, #68]	@ (800496c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004926:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004928:	0a5b      	lsrs	r3, r3, #9
 800492a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800492e:	3301      	adds	r3, #1
 8004930:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8004932:	683b      	ldr	r3, [r7, #0]
 8004934:	ee07 3a90 	vmov	s15, r3
 8004938:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800493c:	edd7 6a07 	vldr	s13, [r7, #28]
 8004940:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004944:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004948:	ee17 3a90 	vmov	r3, s15
 800494c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800494e:	e005      	b.n	800495c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8004950:	2300      	movs	r3, #0
 8004952:	61bb      	str	r3, [r7, #24]
      break;
 8004954:	e002      	b.n	800495c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8004956:	4b07      	ldr	r3, [pc, #28]	@ (8004974 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004958:	61bb      	str	r3, [r7, #24]
      break;
 800495a:	bf00      	nop
  }

  return sysclockfreq;
 800495c:	69bb      	ldr	r3, [r7, #24]
}
 800495e:	4618      	mov	r0, r3
 8004960:	3724      	adds	r7, #36	@ 0x24
 8004962:	46bd      	mov	sp, r7
 8004964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004968:	4770      	bx	lr
 800496a:	bf00      	nop
 800496c:	58024400 	.word	0x58024400
 8004970:	03d09000 	.word	0x03d09000
 8004974:	003d0900 	.word	0x003d0900
 8004978:	017d7840 	.word	0x017d7840
 800497c:	46000000 	.word	0x46000000
 8004980:	4c742400 	.word	0x4c742400
 8004984:	4a742400 	.word	0x4a742400
 8004988:	4bbebc20 	.word	0x4bbebc20

0800498c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800498c:	b580      	push	{r7, lr}
 800498e:	b082      	sub	sp, #8
 8004990:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004992:	f7ff fe81 	bl	8004698 <HAL_RCC_GetSysClockFreq>
 8004996:	4602      	mov	r2, r0
 8004998:	4b10      	ldr	r3, [pc, #64]	@ (80049dc <HAL_RCC_GetHCLKFreq+0x50>)
 800499a:	699b      	ldr	r3, [r3, #24]
 800499c:	0a1b      	lsrs	r3, r3, #8
 800499e:	f003 030f 	and.w	r3, r3, #15
 80049a2:	490f      	ldr	r1, [pc, #60]	@ (80049e0 <HAL_RCC_GetHCLKFreq+0x54>)
 80049a4:	5ccb      	ldrb	r3, [r1, r3]
 80049a6:	f003 031f 	and.w	r3, r3, #31
 80049aa:	fa22 f303 	lsr.w	r3, r2, r3
 80049ae:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80049b0:	4b0a      	ldr	r3, [pc, #40]	@ (80049dc <HAL_RCC_GetHCLKFreq+0x50>)
 80049b2:	699b      	ldr	r3, [r3, #24]
 80049b4:	f003 030f 	and.w	r3, r3, #15
 80049b8:	4a09      	ldr	r2, [pc, #36]	@ (80049e0 <HAL_RCC_GetHCLKFreq+0x54>)
 80049ba:	5cd3      	ldrb	r3, [r2, r3]
 80049bc:	f003 031f 	and.w	r3, r3, #31
 80049c0:	687a      	ldr	r2, [r7, #4]
 80049c2:	fa22 f303 	lsr.w	r3, r2, r3
 80049c6:	4a07      	ldr	r2, [pc, #28]	@ (80049e4 <HAL_RCC_GetHCLKFreq+0x58>)
 80049c8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80049ca:	4a07      	ldr	r2, [pc, #28]	@ (80049e8 <HAL_RCC_GetHCLKFreq+0x5c>)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80049d0:	4b04      	ldr	r3, [pc, #16]	@ (80049e4 <HAL_RCC_GetHCLKFreq+0x58>)
 80049d2:	681b      	ldr	r3, [r3, #0]
}
 80049d4:	4618      	mov	r0, r3
 80049d6:	3708      	adds	r7, #8
 80049d8:	46bd      	mov	sp, r7
 80049da:	bd80      	pop	{r7, pc}
 80049dc:	58024400 	.word	0x58024400
 80049e0:	08008290 	.word	0x08008290
 80049e4:	24000008 	.word	0x24000008
 80049e8:	24000004 	.word	0x24000004

080049ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80049ec:	b580      	push	{r7, lr}
 80049ee:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80049f0:	f7ff ffcc 	bl	800498c <HAL_RCC_GetHCLKFreq>
 80049f4:	4602      	mov	r2, r0
 80049f6:	4b06      	ldr	r3, [pc, #24]	@ (8004a10 <HAL_RCC_GetPCLK1Freq+0x24>)
 80049f8:	69db      	ldr	r3, [r3, #28]
 80049fa:	091b      	lsrs	r3, r3, #4
 80049fc:	f003 0307 	and.w	r3, r3, #7
 8004a00:	4904      	ldr	r1, [pc, #16]	@ (8004a14 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004a02:	5ccb      	ldrb	r3, [r1, r3]
 8004a04:	f003 031f 	and.w	r3, r3, #31
 8004a08:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8004a0c:	4618      	mov	r0, r3
 8004a0e:	bd80      	pop	{r7, pc}
 8004a10:	58024400 	.word	0x58024400
 8004a14:	08008290 	.word	0x08008290

08004a18 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8004a1c:	f7ff ffb6 	bl	800498c <HAL_RCC_GetHCLKFreq>
 8004a20:	4602      	mov	r2, r0
 8004a22:	4b06      	ldr	r3, [pc, #24]	@ (8004a3c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004a24:	69db      	ldr	r3, [r3, #28]
 8004a26:	0a1b      	lsrs	r3, r3, #8
 8004a28:	f003 0307 	and.w	r3, r3, #7
 8004a2c:	4904      	ldr	r1, [pc, #16]	@ (8004a40 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004a2e:	5ccb      	ldrb	r3, [r1, r3]
 8004a30:	f003 031f 	and.w	r3, r3, #31
 8004a34:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8004a38:	4618      	mov	r0, r3
 8004a3a:	bd80      	pop	{r7, pc}
 8004a3c:	58024400 	.word	0x58024400
 8004a40:	08008290 	.word	0x08008290

08004a44 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004a44:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004a48:	b0ca      	sub	sp, #296	@ 0x128
 8004a4a:	af00      	add	r7, sp, #0
 8004a4c:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004a50:	2300      	movs	r3, #0
 8004a52:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004a56:	2300      	movs	r3, #0
 8004a58:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004a5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a64:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8004a68:	2500      	movs	r5, #0
 8004a6a:	ea54 0305 	orrs.w	r3, r4, r5
 8004a6e:	d049      	beq.n	8004b04 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8004a70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a74:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004a76:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004a7a:	d02f      	beq.n	8004adc <HAL_RCCEx_PeriphCLKConfig+0x98>
 8004a7c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004a80:	d828      	bhi.n	8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8004a82:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004a86:	d01a      	beq.n	8004abe <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004a88:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004a8c:	d822      	bhi.n	8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d003      	beq.n	8004a9a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8004a92:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004a96:	d007      	beq.n	8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004a98:	e01c      	b.n	8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004a9a:	4bb8      	ldr	r3, [pc, #736]	@ (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004a9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a9e:	4ab7      	ldr	r2, [pc, #732]	@ (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004aa0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004aa4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004aa6:	e01a      	b.n	8004ade <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004aa8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004aac:	3308      	adds	r3, #8
 8004aae:	2102      	movs	r1, #2
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	f001 fc8f 	bl	80063d4 <RCCEx_PLL2_Config>
 8004ab6:	4603      	mov	r3, r0
 8004ab8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004abc:	e00f      	b.n	8004ade <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004abe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ac2:	3328      	adds	r3, #40	@ 0x28
 8004ac4:	2102      	movs	r1, #2
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	f001 fd36 	bl	8006538 <RCCEx_PLL3_Config>
 8004acc:	4603      	mov	r3, r0
 8004ace:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004ad2:	e004      	b.n	8004ade <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004ad4:	2301      	movs	r3, #1
 8004ad6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004ada:	e000      	b.n	8004ade <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8004adc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004ade:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d10a      	bne.n	8004afc <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8004ae6:	4ba5      	ldr	r3, [pc, #660]	@ (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004ae8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004aea:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8004aee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004af2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004af4:	4aa1      	ldr	r2, [pc, #644]	@ (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004af6:	430b      	orrs	r3, r1
 8004af8:	6513      	str	r3, [r2, #80]	@ 0x50
 8004afa:	e003      	b.n	8004b04 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004afc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004b00:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004b04:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b0c:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8004b10:	f04f 0900 	mov.w	r9, #0
 8004b14:	ea58 0309 	orrs.w	r3, r8, r9
 8004b18:	d047      	beq.n	8004baa <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8004b1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b20:	2b04      	cmp	r3, #4
 8004b22:	d82a      	bhi.n	8004b7a <HAL_RCCEx_PeriphCLKConfig+0x136>
 8004b24:	a201      	add	r2, pc, #4	@ (adr r2, 8004b2c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8004b26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b2a:	bf00      	nop
 8004b2c:	08004b41 	.word	0x08004b41
 8004b30:	08004b4f 	.word	0x08004b4f
 8004b34:	08004b65 	.word	0x08004b65
 8004b38:	08004b83 	.word	0x08004b83
 8004b3c:	08004b83 	.word	0x08004b83
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004b40:	4b8e      	ldr	r3, [pc, #568]	@ (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004b42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b44:	4a8d      	ldr	r2, [pc, #564]	@ (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004b46:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004b4a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004b4c:	e01a      	b.n	8004b84 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004b4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b52:	3308      	adds	r3, #8
 8004b54:	2100      	movs	r1, #0
 8004b56:	4618      	mov	r0, r3
 8004b58:	f001 fc3c 	bl	80063d4 <RCCEx_PLL2_Config>
 8004b5c:	4603      	mov	r3, r0
 8004b5e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004b62:	e00f      	b.n	8004b84 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004b64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b68:	3328      	adds	r3, #40	@ 0x28
 8004b6a:	2100      	movs	r1, #0
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	f001 fce3 	bl	8006538 <RCCEx_PLL3_Config>
 8004b72:	4603      	mov	r3, r0
 8004b74:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004b78:	e004      	b.n	8004b84 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004b7a:	2301      	movs	r3, #1
 8004b7c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004b80:	e000      	b.n	8004b84 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8004b82:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004b84:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d10a      	bne.n	8004ba2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004b8c:	4b7b      	ldr	r3, [pc, #492]	@ (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004b8e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004b90:	f023 0107 	bic.w	r1, r3, #7
 8004b94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b9a:	4a78      	ldr	r2, [pc, #480]	@ (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004b9c:	430b      	orrs	r3, r1
 8004b9e:	6513      	str	r3, [r2, #80]	@ 0x50
 8004ba0:	e003      	b.n	8004baa <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ba2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004ba6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8004baa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004bae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bb2:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8004bb6:	f04f 0b00 	mov.w	fp, #0
 8004bba:	ea5a 030b 	orrs.w	r3, sl, fp
 8004bbe:	d04c      	beq.n	8004c5a <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8004bc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004bc4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004bc6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004bca:	d030      	beq.n	8004c2e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8004bcc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004bd0:	d829      	bhi.n	8004c26 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8004bd2:	2bc0      	cmp	r3, #192	@ 0xc0
 8004bd4:	d02d      	beq.n	8004c32 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8004bd6:	2bc0      	cmp	r3, #192	@ 0xc0
 8004bd8:	d825      	bhi.n	8004c26 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8004bda:	2b80      	cmp	r3, #128	@ 0x80
 8004bdc:	d018      	beq.n	8004c10 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8004bde:	2b80      	cmp	r3, #128	@ 0x80
 8004be0:	d821      	bhi.n	8004c26 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d002      	beq.n	8004bec <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8004be6:	2b40      	cmp	r3, #64	@ 0x40
 8004be8:	d007      	beq.n	8004bfa <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8004bea:	e01c      	b.n	8004c26 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004bec:	4b63      	ldr	r3, [pc, #396]	@ (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004bee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bf0:	4a62      	ldr	r2, [pc, #392]	@ (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004bf2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004bf6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8004bf8:	e01c      	b.n	8004c34 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004bfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004bfe:	3308      	adds	r3, #8
 8004c00:	2100      	movs	r1, #0
 8004c02:	4618      	mov	r0, r3
 8004c04:	f001 fbe6 	bl	80063d4 <RCCEx_PLL2_Config>
 8004c08:	4603      	mov	r3, r0
 8004c0a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8004c0e:	e011      	b.n	8004c34 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004c10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c14:	3328      	adds	r3, #40	@ 0x28
 8004c16:	2100      	movs	r1, #0
 8004c18:	4618      	mov	r0, r3
 8004c1a:	f001 fc8d 	bl	8006538 <RCCEx_PLL3_Config>
 8004c1e:	4603      	mov	r3, r0
 8004c20:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8004c24:	e006      	b.n	8004c34 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004c26:	2301      	movs	r3, #1
 8004c28:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004c2c:	e002      	b.n	8004c34 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8004c2e:	bf00      	nop
 8004c30:	e000      	b.n	8004c34 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8004c32:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004c34:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d10a      	bne.n	8004c52 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8004c3c:	4b4f      	ldr	r3, [pc, #316]	@ (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004c3e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004c40:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8004c44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c48:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c4a:	4a4c      	ldr	r2, [pc, #304]	@ (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004c4c:	430b      	orrs	r3, r1
 8004c4e:	6513      	str	r3, [r2, #80]	@ 0x50
 8004c50:	e003      	b.n	8004c5a <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c52:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004c56:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8004c5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c62:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8004c66:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8004c6a:	2300      	movs	r3, #0
 8004c6c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8004c70:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8004c74:	460b      	mov	r3, r1
 8004c76:	4313      	orrs	r3, r2
 8004c78:	d053      	beq.n	8004d22 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8004c7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c7e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8004c82:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004c86:	d035      	beq.n	8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8004c88:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004c8c:	d82e      	bhi.n	8004cec <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8004c8e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8004c92:	d031      	beq.n	8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8004c94:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8004c98:	d828      	bhi.n	8004cec <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8004c9a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004c9e:	d01a      	beq.n	8004cd6 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8004ca0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004ca4:	d822      	bhi.n	8004cec <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d003      	beq.n	8004cb2 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8004caa:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004cae:	d007      	beq.n	8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8004cb0:	e01c      	b.n	8004cec <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004cb2:	4b32      	ldr	r3, [pc, #200]	@ (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004cb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cb6:	4a31      	ldr	r2, [pc, #196]	@ (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004cb8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004cbc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004cbe:	e01c      	b.n	8004cfa <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004cc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004cc4:	3308      	adds	r3, #8
 8004cc6:	2100      	movs	r1, #0
 8004cc8:	4618      	mov	r0, r3
 8004cca:	f001 fb83 	bl	80063d4 <RCCEx_PLL2_Config>
 8004cce:	4603      	mov	r3, r0
 8004cd0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8004cd4:	e011      	b.n	8004cfa <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004cd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004cda:	3328      	adds	r3, #40	@ 0x28
 8004cdc:	2100      	movs	r1, #0
 8004cde:	4618      	mov	r0, r3
 8004ce0:	f001 fc2a 	bl	8006538 <RCCEx_PLL3_Config>
 8004ce4:	4603      	mov	r3, r0
 8004ce6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004cea:	e006      	b.n	8004cfa <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8004cec:	2301      	movs	r3, #1
 8004cee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004cf2:	e002      	b.n	8004cfa <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8004cf4:	bf00      	nop
 8004cf6:	e000      	b.n	8004cfa <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8004cf8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004cfa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d10b      	bne.n	8004d1a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8004d02:	4b1e      	ldr	r3, [pc, #120]	@ (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004d04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d06:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8004d0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d0e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8004d12:	4a1a      	ldr	r2, [pc, #104]	@ (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004d14:	430b      	orrs	r3, r1
 8004d16:	6593      	str	r3, [r2, #88]	@ 0x58
 8004d18:	e003      	b.n	8004d22 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d1a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004d1e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8004d22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d2a:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8004d2e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8004d32:	2300      	movs	r3, #0
 8004d34:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8004d38:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8004d3c:	460b      	mov	r3, r1
 8004d3e:	4313      	orrs	r3, r2
 8004d40:	d056      	beq.n	8004df0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8004d42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d46:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8004d4a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004d4e:	d038      	beq.n	8004dc2 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8004d50:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004d54:	d831      	bhi.n	8004dba <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004d56:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004d5a:	d034      	beq.n	8004dc6 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8004d5c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004d60:	d82b      	bhi.n	8004dba <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004d62:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004d66:	d01d      	beq.n	8004da4 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8004d68:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004d6c:	d825      	bhi.n	8004dba <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d006      	beq.n	8004d80 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8004d72:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004d76:	d00a      	beq.n	8004d8e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8004d78:	e01f      	b.n	8004dba <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004d7a:	bf00      	nop
 8004d7c:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004d80:	4ba2      	ldr	r3, [pc, #648]	@ (800500c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004d82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d84:	4aa1      	ldr	r2, [pc, #644]	@ (800500c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004d86:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004d8a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004d8c:	e01c      	b.n	8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004d8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d92:	3308      	adds	r3, #8
 8004d94:	2100      	movs	r1, #0
 8004d96:	4618      	mov	r0, r3
 8004d98:	f001 fb1c 	bl	80063d4 <RCCEx_PLL2_Config>
 8004d9c:	4603      	mov	r3, r0
 8004d9e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8004da2:	e011      	b.n	8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004da4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004da8:	3328      	adds	r3, #40	@ 0x28
 8004daa:	2100      	movs	r1, #0
 8004dac:	4618      	mov	r0, r3
 8004dae:	f001 fbc3 	bl	8006538 <RCCEx_PLL3_Config>
 8004db2:	4603      	mov	r3, r0
 8004db4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004db8:	e006      	b.n	8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8004dba:	2301      	movs	r3, #1
 8004dbc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004dc0:	e002      	b.n	8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8004dc2:	bf00      	nop
 8004dc4:	e000      	b.n	8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8004dc6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004dc8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d10b      	bne.n	8004de8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8004dd0:	4b8e      	ldr	r3, [pc, #568]	@ (800500c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004dd2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004dd4:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8004dd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ddc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8004de0:	4a8a      	ldr	r2, [pc, #552]	@ (800500c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004de2:	430b      	orrs	r3, r1
 8004de4:	6593      	str	r3, [r2, #88]	@ 0x58
 8004de6:	e003      	b.n	8004df0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004de8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004dec:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004df0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004df4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004df8:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8004dfc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8004e00:	2300      	movs	r3, #0
 8004e02:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8004e06:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8004e0a:	460b      	mov	r3, r1
 8004e0c:	4313      	orrs	r3, r2
 8004e0e:	d03a      	beq.n	8004e86 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8004e10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004e16:	2b30      	cmp	r3, #48	@ 0x30
 8004e18:	d01f      	beq.n	8004e5a <HAL_RCCEx_PeriphCLKConfig+0x416>
 8004e1a:	2b30      	cmp	r3, #48	@ 0x30
 8004e1c:	d819      	bhi.n	8004e52 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8004e1e:	2b20      	cmp	r3, #32
 8004e20:	d00c      	beq.n	8004e3c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8004e22:	2b20      	cmp	r3, #32
 8004e24:	d815      	bhi.n	8004e52 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d019      	beq.n	8004e5e <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8004e2a:	2b10      	cmp	r3, #16
 8004e2c:	d111      	bne.n	8004e52 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004e2e:	4b77      	ldr	r3, [pc, #476]	@ (800500c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004e30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e32:	4a76      	ldr	r2, [pc, #472]	@ (800500c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004e34:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004e38:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8004e3a:	e011      	b.n	8004e60 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004e3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e40:	3308      	adds	r3, #8
 8004e42:	2102      	movs	r1, #2
 8004e44:	4618      	mov	r0, r3
 8004e46:	f001 fac5 	bl	80063d4 <RCCEx_PLL2_Config>
 8004e4a:	4603      	mov	r3, r0
 8004e4c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8004e50:	e006      	b.n	8004e60 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004e52:	2301      	movs	r3, #1
 8004e54:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004e58:	e002      	b.n	8004e60 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8004e5a:	bf00      	nop
 8004e5c:	e000      	b.n	8004e60 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8004e5e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004e60:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d10a      	bne.n	8004e7e <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004e68:	4b68      	ldr	r3, [pc, #416]	@ (800500c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004e6a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004e6c:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8004e70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004e76:	4a65      	ldr	r2, [pc, #404]	@ (800500c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004e78:	430b      	orrs	r3, r1
 8004e7a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004e7c:	e003      	b.n	8004e86 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e7e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004e82:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8004e86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e8e:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8004e92:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8004e96:	2300      	movs	r3, #0
 8004e98:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8004e9c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8004ea0:	460b      	mov	r3, r1
 8004ea2:	4313      	orrs	r3, r2
 8004ea4:	d051      	beq.n	8004f4a <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8004ea6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004eaa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004eac:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004eb0:	d035      	beq.n	8004f1e <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8004eb2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004eb6:	d82e      	bhi.n	8004f16 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004eb8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004ebc:	d031      	beq.n	8004f22 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8004ebe:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004ec2:	d828      	bhi.n	8004f16 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004ec4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004ec8:	d01a      	beq.n	8004f00 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8004eca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004ece:	d822      	bhi.n	8004f16 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d003      	beq.n	8004edc <HAL_RCCEx_PeriphCLKConfig+0x498>
 8004ed4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004ed8:	d007      	beq.n	8004eea <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8004eda:	e01c      	b.n	8004f16 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004edc:	4b4b      	ldr	r3, [pc, #300]	@ (800500c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004ede:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ee0:	4a4a      	ldr	r2, [pc, #296]	@ (800500c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004ee2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004ee6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004ee8:	e01c      	b.n	8004f24 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004eea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004eee:	3308      	adds	r3, #8
 8004ef0:	2100      	movs	r1, #0
 8004ef2:	4618      	mov	r0, r3
 8004ef4:	f001 fa6e 	bl	80063d4 <RCCEx_PLL2_Config>
 8004ef8:	4603      	mov	r3, r0
 8004efa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004efe:	e011      	b.n	8004f24 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004f00:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f04:	3328      	adds	r3, #40	@ 0x28
 8004f06:	2100      	movs	r1, #0
 8004f08:	4618      	mov	r0, r3
 8004f0a:	f001 fb15 	bl	8006538 <RCCEx_PLL3_Config>
 8004f0e:	4603      	mov	r3, r0
 8004f10:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004f14:	e006      	b.n	8004f24 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004f16:	2301      	movs	r3, #1
 8004f18:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004f1c:	e002      	b.n	8004f24 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8004f1e:	bf00      	nop
 8004f20:	e000      	b.n	8004f24 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8004f22:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004f24:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d10a      	bne.n	8004f42 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004f2c:	4b37      	ldr	r3, [pc, #220]	@ (800500c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004f2e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004f30:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8004f34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f38:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004f3a:	4a34      	ldr	r2, [pc, #208]	@ (800500c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004f3c:	430b      	orrs	r3, r1
 8004f3e:	6513      	str	r3, [r2, #80]	@ 0x50
 8004f40:	e003      	b.n	8004f4a <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f42:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004f46:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004f4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f52:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8004f56:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004f5a:	2300      	movs	r3, #0
 8004f5c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8004f60:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8004f64:	460b      	mov	r3, r1
 8004f66:	4313      	orrs	r3, r2
 8004f68:	d056      	beq.n	8005018 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8004f6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f6e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004f70:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004f74:	d033      	beq.n	8004fde <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8004f76:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004f7a:	d82c      	bhi.n	8004fd6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004f7c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004f80:	d02f      	beq.n	8004fe2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8004f82:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004f86:	d826      	bhi.n	8004fd6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004f88:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004f8c:	d02b      	beq.n	8004fe6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8004f8e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004f92:	d820      	bhi.n	8004fd6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004f94:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004f98:	d012      	beq.n	8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8004f9a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004f9e:	d81a      	bhi.n	8004fd6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d022      	beq.n	8004fea <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8004fa4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004fa8:	d115      	bne.n	8004fd6 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004faa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004fae:	3308      	adds	r3, #8
 8004fb0:	2101      	movs	r1, #1
 8004fb2:	4618      	mov	r0, r3
 8004fb4:	f001 fa0e 	bl	80063d4 <RCCEx_PLL2_Config>
 8004fb8:	4603      	mov	r3, r0
 8004fba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004fbe:	e015      	b.n	8004fec <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004fc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004fc4:	3328      	adds	r3, #40	@ 0x28
 8004fc6:	2101      	movs	r1, #1
 8004fc8:	4618      	mov	r0, r3
 8004fca:	f001 fab5 	bl	8006538 <RCCEx_PLL3_Config>
 8004fce:	4603      	mov	r3, r0
 8004fd0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004fd4:	e00a      	b.n	8004fec <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004fd6:	2301      	movs	r3, #1
 8004fd8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004fdc:	e006      	b.n	8004fec <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004fde:	bf00      	nop
 8004fe0:	e004      	b.n	8004fec <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004fe2:	bf00      	nop
 8004fe4:	e002      	b.n	8004fec <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004fe6:	bf00      	nop
 8004fe8:	e000      	b.n	8004fec <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004fea:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004fec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d10d      	bne.n	8005010 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004ff4:	4b05      	ldr	r3, [pc, #20]	@ (800500c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004ff6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004ff8:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8004ffc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005000:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005002:	4a02      	ldr	r2, [pc, #8]	@ (800500c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005004:	430b      	orrs	r3, r1
 8005006:	6513      	str	r3, [r2, #80]	@ 0x50
 8005008:	e006      	b.n	8005018 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800500a:	bf00      	nop
 800500c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005010:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005014:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005018:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800501c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005020:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8005024:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005028:	2300      	movs	r3, #0
 800502a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800502e:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8005032:	460b      	mov	r3, r1
 8005034:	4313      	orrs	r3, r2
 8005036:	d055      	beq.n	80050e4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8005038:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800503c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005040:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005044:	d033      	beq.n	80050ae <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8005046:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800504a:	d82c      	bhi.n	80050a6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800504c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005050:	d02f      	beq.n	80050b2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8005052:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005056:	d826      	bhi.n	80050a6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005058:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800505c:	d02b      	beq.n	80050b6 <HAL_RCCEx_PeriphCLKConfig+0x672>
 800505e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005062:	d820      	bhi.n	80050a6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005064:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005068:	d012      	beq.n	8005090 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800506a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800506e:	d81a      	bhi.n	80050a6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005070:	2b00      	cmp	r3, #0
 8005072:	d022      	beq.n	80050ba <HAL_RCCEx_PeriphCLKConfig+0x676>
 8005074:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005078:	d115      	bne.n	80050a6 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800507a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800507e:	3308      	adds	r3, #8
 8005080:	2101      	movs	r1, #1
 8005082:	4618      	mov	r0, r3
 8005084:	f001 f9a6 	bl	80063d4 <RCCEx_PLL2_Config>
 8005088:	4603      	mov	r3, r0
 800508a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800508e:	e015      	b.n	80050bc <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005090:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005094:	3328      	adds	r3, #40	@ 0x28
 8005096:	2101      	movs	r1, #1
 8005098:	4618      	mov	r0, r3
 800509a:	f001 fa4d 	bl	8006538 <RCCEx_PLL3_Config>
 800509e:	4603      	mov	r3, r0
 80050a0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80050a4:	e00a      	b.n	80050bc <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80050a6:	2301      	movs	r3, #1
 80050a8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80050ac:	e006      	b.n	80050bc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80050ae:	bf00      	nop
 80050b0:	e004      	b.n	80050bc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80050b2:	bf00      	nop
 80050b4:	e002      	b.n	80050bc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80050b6:	bf00      	nop
 80050b8:	e000      	b.n	80050bc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80050ba:	bf00      	nop
    }

    if (ret == HAL_OK)
 80050bc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d10b      	bne.n	80050dc <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80050c4:	4ba3      	ldr	r3, [pc, #652]	@ (8005354 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80050c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80050c8:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80050cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80050d0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80050d4:	4a9f      	ldr	r2, [pc, #636]	@ (8005354 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80050d6:	430b      	orrs	r3, r1
 80050d8:	6593      	str	r3, [r2, #88]	@ 0x58
 80050da:	e003      	b.n	80050e4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050dc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80050e0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80050e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80050e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050ec:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80050f0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80050f4:	2300      	movs	r3, #0
 80050f6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80050fa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80050fe:	460b      	mov	r3, r1
 8005100:	4313      	orrs	r3, r2
 8005102:	d037      	beq.n	8005174 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8005104:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005108:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800510a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800510e:	d00e      	beq.n	800512e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8005110:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005114:	d816      	bhi.n	8005144 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8005116:	2b00      	cmp	r3, #0
 8005118:	d018      	beq.n	800514c <HAL_RCCEx_PeriphCLKConfig+0x708>
 800511a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800511e:	d111      	bne.n	8005144 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005120:	4b8c      	ldr	r3, [pc, #560]	@ (8005354 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005122:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005124:	4a8b      	ldr	r2, [pc, #556]	@ (8005354 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005126:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800512a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800512c:	e00f      	b.n	800514e <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800512e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005132:	3308      	adds	r3, #8
 8005134:	2101      	movs	r1, #1
 8005136:	4618      	mov	r0, r3
 8005138:	f001 f94c 	bl	80063d4 <RCCEx_PLL2_Config>
 800513c:	4603      	mov	r3, r0
 800513e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005142:	e004      	b.n	800514e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005144:	2301      	movs	r3, #1
 8005146:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800514a:	e000      	b.n	800514e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 800514c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800514e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005152:	2b00      	cmp	r3, #0
 8005154:	d10a      	bne.n	800516c <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005156:	4b7f      	ldr	r3, [pc, #508]	@ (8005354 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005158:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800515a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800515e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005162:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005164:	4a7b      	ldr	r2, [pc, #492]	@ (8005354 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005166:	430b      	orrs	r3, r1
 8005168:	6513      	str	r3, [r2, #80]	@ 0x50
 800516a:	e003      	b.n	8005174 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800516c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005170:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005174:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005178:	e9d3 2300 	ldrd	r2, r3, [r3]
 800517c:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8005180:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005184:	2300      	movs	r3, #0
 8005186:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800518a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800518e:	460b      	mov	r3, r1
 8005190:	4313      	orrs	r3, r2
 8005192:	d039      	beq.n	8005208 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8005194:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005198:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800519a:	2b03      	cmp	r3, #3
 800519c:	d81c      	bhi.n	80051d8 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800519e:	a201      	add	r2, pc, #4	@ (adr r2, 80051a4 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 80051a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051a4:	080051e1 	.word	0x080051e1
 80051a8:	080051b5 	.word	0x080051b5
 80051ac:	080051c3 	.word	0x080051c3
 80051b0:	080051e1 	.word	0x080051e1
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80051b4:	4b67      	ldr	r3, [pc, #412]	@ (8005354 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80051b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051b8:	4a66      	ldr	r2, [pc, #408]	@ (8005354 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80051ba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80051be:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80051c0:	e00f      	b.n	80051e2 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80051c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80051c6:	3308      	adds	r3, #8
 80051c8:	2102      	movs	r1, #2
 80051ca:	4618      	mov	r0, r3
 80051cc:	f001 f902 	bl	80063d4 <RCCEx_PLL2_Config>
 80051d0:	4603      	mov	r3, r0
 80051d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 80051d6:	e004      	b.n	80051e2 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80051d8:	2301      	movs	r3, #1
 80051da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80051de:	e000      	b.n	80051e2 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 80051e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80051e2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d10a      	bne.n	8005200 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80051ea:	4b5a      	ldr	r3, [pc, #360]	@ (8005354 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80051ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80051ee:	f023 0103 	bic.w	r1, r3, #3
 80051f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80051f6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80051f8:	4a56      	ldr	r2, [pc, #344]	@ (8005354 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80051fa:	430b      	orrs	r3, r1
 80051fc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80051fe:	e003      	b.n	8005208 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005200:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005204:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005208:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800520c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005210:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8005214:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005218:	2300      	movs	r3, #0
 800521a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800521e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8005222:	460b      	mov	r3, r1
 8005224:	4313      	orrs	r3, r2
 8005226:	f000 809f 	beq.w	8005368 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800522a:	4b4b      	ldr	r3, [pc, #300]	@ (8005358 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	4a4a      	ldr	r2, [pc, #296]	@ (8005358 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005230:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005234:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005236:	f7fb fe19 	bl	8000e6c <HAL_GetTick>
 800523a:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800523e:	e00b      	b.n	8005258 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005240:	f7fb fe14 	bl	8000e6c <HAL_GetTick>
 8005244:	4602      	mov	r2, r0
 8005246:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800524a:	1ad3      	subs	r3, r2, r3
 800524c:	2b64      	cmp	r3, #100	@ 0x64
 800524e:	d903      	bls.n	8005258 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8005250:	2303      	movs	r3, #3
 8005252:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005256:	e005      	b.n	8005264 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005258:	4b3f      	ldr	r3, [pc, #252]	@ (8005358 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005260:	2b00      	cmp	r3, #0
 8005262:	d0ed      	beq.n	8005240 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8005264:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005268:	2b00      	cmp	r3, #0
 800526a:	d179      	bne.n	8005360 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800526c:	4b39      	ldr	r3, [pc, #228]	@ (8005354 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800526e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005270:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005274:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005278:	4053      	eors	r3, r2
 800527a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800527e:	2b00      	cmp	r3, #0
 8005280:	d015      	beq.n	80052ae <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005282:	4b34      	ldr	r3, [pc, #208]	@ (8005354 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005284:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005286:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800528a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800528e:	4b31      	ldr	r3, [pc, #196]	@ (8005354 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005290:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005292:	4a30      	ldr	r2, [pc, #192]	@ (8005354 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005294:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005298:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800529a:	4b2e      	ldr	r3, [pc, #184]	@ (8005354 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800529c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800529e:	4a2d      	ldr	r2, [pc, #180]	@ (8005354 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80052a0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80052a4:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80052a6:	4a2b      	ldr	r2, [pc, #172]	@ (8005354 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80052a8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80052ac:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80052ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80052b2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80052b6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80052ba:	d118      	bne.n	80052ee <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052bc:	f7fb fdd6 	bl	8000e6c <HAL_GetTick>
 80052c0:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80052c4:	e00d      	b.n	80052e2 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80052c6:	f7fb fdd1 	bl	8000e6c <HAL_GetTick>
 80052ca:	4602      	mov	r2, r0
 80052cc:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80052d0:	1ad2      	subs	r2, r2, r3
 80052d2:	f241 3388 	movw	r3, #5000	@ 0x1388
 80052d6:	429a      	cmp	r2, r3
 80052d8:	d903      	bls.n	80052e2 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 80052da:	2303      	movs	r3, #3
 80052dc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 80052e0:	e005      	b.n	80052ee <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80052e2:	4b1c      	ldr	r3, [pc, #112]	@ (8005354 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80052e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052e6:	f003 0302 	and.w	r3, r3, #2
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d0eb      	beq.n	80052c6 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 80052ee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d129      	bne.n	800534a <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80052f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80052fa:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80052fe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005302:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005306:	d10e      	bne.n	8005326 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8005308:	4b12      	ldr	r3, [pc, #72]	@ (8005354 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800530a:	691b      	ldr	r3, [r3, #16]
 800530c:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8005310:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005314:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005318:	091a      	lsrs	r2, r3, #4
 800531a:	4b10      	ldr	r3, [pc, #64]	@ (800535c <HAL_RCCEx_PeriphCLKConfig+0x918>)
 800531c:	4013      	ands	r3, r2
 800531e:	4a0d      	ldr	r2, [pc, #52]	@ (8005354 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005320:	430b      	orrs	r3, r1
 8005322:	6113      	str	r3, [r2, #16]
 8005324:	e005      	b.n	8005332 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8005326:	4b0b      	ldr	r3, [pc, #44]	@ (8005354 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005328:	691b      	ldr	r3, [r3, #16]
 800532a:	4a0a      	ldr	r2, [pc, #40]	@ (8005354 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800532c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8005330:	6113      	str	r3, [r2, #16]
 8005332:	4b08      	ldr	r3, [pc, #32]	@ (8005354 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005334:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8005336:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800533a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800533e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005342:	4a04      	ldr	r2, [pc, #16]	@ (8005354 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005344:	430b      	orrs	r3, r1
 8005346:	6713      	str	r3, [r2, #112]	@ 0x70
 8005348:	e00e      	b.n	8005368 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800534a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800534e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8005352:	e009      	b.n	8005368 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8005354:	58024400 	.word	0x58024400
 8005358:	58024800 	.word	0x58024800
 800535c:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005360:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005364:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005368:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800536c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005370:	f002 0301 	and.w	r3, r2, #1
 8005374:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005378:	2300      	movs	r3, #0
 800537a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800537e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005382:	460b      	mov	r3, r1
 8005384:	4313      	orrs	r3, r2
 8005386:	f000 8089 	beq.w	800549c <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800538a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800538e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005390:	2b28      	cmp	r3, #40	@ 0x28
 8005392:	d86b      	bhi.n	800546c <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8005394:	a201      	add	r2, pc, #4	@ (adr r2, 800539c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8005396:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800539a:	bf00      	nop
 800539c:	08005475 	.word	0x08005475
 80053a0:	0800546d 	.word	0x0800546d
 80053a4:	0800546d 	.word	0x0800546d
 80053a8:	0800546d 	.word	0x0800546d
 80053ac:	0800546d 	.word	0x0800546d
 80053b0:	0800546d 	.word	0x0800546d
 80053b4:	0800546d 	.word	0x0800546d
 80053b8:	0800546d 	.word	0x0800546d
 80053bc:	08005441 	.word	0x08005441
 80053c0:	0800546d 	.word	0x0800546d
 80053c4:	0800546d 	.word	0x0800546d
 80053c8:	0800546d 	.word	0x0800546d
 80053cc:	0800546d 	.word	0x0800546d
 80053d0:	0800546d 	.word	0x0800546d
 80053d4:	0800546d 	.word	0x0800546d
 80053d8:	0800546d 	.word	0x0800546d
 80053dc:	08005457 	.word	0x08005457
 80053e0:	0800546d 	.word	0x0800546d
 80053e4:	0800546d 	.word	0x0800546d
 80053e8:	0800546d 	.word	0x0800546d
 80053ec:	0800546d 	.word	0x0800546d
 80053f0:	0800546d 	.word	0x0800546d
 80053f4:	0800546d 	.word	0x0800546d
 80053f8:	0800546d 	.word	0x0800546d
 80053fc:	08005475 	.word	0x08005475
 8005400:	0800546d 	.word	0x0800546d
 8005404:	0800546d 	.word	0x0800546d
 8005408:	0800546d 	.word	0x0800546d
 800540c:	0800546d 	.word	0x0800546d
 8005410:	0800546d 	.word	0x0800546d
 8005414:	0800546d 	.word	0x0800546d
 8005418:	0800546d 	.word	0x0800546d
 800541c:	08005475 	.word	0x08005475
 8005420:	0800546d 	.word	0x0800546d
 8005424:	0800546d 	.word	0x0800546d
 8005428:	0800546d 	.word	0x0800546d
 800542c:	0800546d 	.word	0x0800546d
 8005430:	0800546d 	.word	0x0800546d
 8005434:	0800546d 	.word	0x0800546d
 8005438:	0800546d 	.word	0x0800546d
 800543c:	08005475 	.word	0x08005475
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005440:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005444:	3308      	adds	r3, #8
 8005446:	2101      	movs	r1, #1
 8005448:	4618      	mov	r0, r3
 800544a:	f000 ffc3 	bl	80063d4 <RCCEx_PLL2_Config>
 800544e:	4603      	mov	r3, r0
 8005450:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005454:	e00f      	b.n	8005476 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005456:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800545a:	3328      	adds	r3, #40	@ 0x28
 800545c:	2101      	movs	r1, #1
 800545e:	4618      	mov	r0, r3
 8005460:	f001 f86a 	bl	8006538 <RCCEx_PLL3_Config>
 8005464:	4603      	mov	r3, r0
 8005466:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800546a:	e004      	b.n	8005476 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800546c:	2301      	movs	r3, #1
 800546e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005472:	e000      	b.n	8005476 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8005474:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005476:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800547a:	2b00      	cmp	r3, #0
 800547c:	d10a      	bne.n	8005494 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800547e:	4bbf      	ldr	r3, [pc, #764]	@ (800577c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005480:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005482:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8005486:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800548a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800548c:	4abb      	ldr	r2, [pc, #748]	@ (800577c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800548e:	430b      	orrs	r3, r1
 8005490:	6553      	str	r3, [r2, #84]	@ 0x54
 8005492:	e003      	b.n	800549c <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005494:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005498:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800549c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80054a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054a4:	f002 0302 	and.w	r3, r2, #2
 80054a8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80054ac:	2300      	movs	r3, #0
 80054ae:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80054b2:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80054b6:	460b      	mov	r3, r1
 80054b8:	4313      	orrs	r3, r2
 80054ba:	d041      	beq.n	8005540 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80054bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80054c0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80054c2:	2b05      	cmp	r3, #5
 80054c4:	d824      	bhi.n	8005510 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 80054c6:	a201      	add	r2, pc, #4	@ (adr r2, 80054cc <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 80054c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054cc:	08005519 	.word	0x08005519
 80054d0:	080054e5 	.word	0x080054e5
 80054d4:	080054fb 	.word	0x080054fb
 80054d8:	08005519 	.word	0x08005519
 80054dc:	08005519 	.word	0x08005519
 80054e0:	08005519 	.word	0x08005519
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80054e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80054e8:	3308      	adds	r3, #8
 80054ea:	2101      	movs	r1, #1
 80054ec:	4618      	mov	r0, r3
 80054ee:	f000 ff71 	bl	80063d4 <RCCEx_PLL2_Config>
 80054f2:	4603      	mov	r3, r0
 80054f4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80054f8:	e00f      	b.n	800551a <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80054fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80054fe:	3328      	adds	r3, #40	@ 0x28
 8005500:	2101      	movs	r1, #1
 8005502:	4618      	mov	r0, r3
 8005504:	f001 f818 	bl	8006538 <RCCEx_PLL3_Config>
 8005508:	4603      	mov	r3, r0
 800550a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800550e:	e004      	b.n	800551a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005510:	2301      	movs	r3, #1
 8005512:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005516:	e000      	b.n	800551a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8005518:	bf00      	nop
    }

    if (ret == HAL_OK)
 800551a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800551e:	2b00      	cmp	r3, #0
 8005520:	d10a      	bne.n	8005538 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8005522:	4b96      	ldr	r3, [pc, #600]	@ (800577c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005524:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005526:	f023 0107 	bic.w	r1, r3, #7
 800552a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800552e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005530:	4a92      	ldr	r2, [pc, #584]	@ (800577c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005532:	430b      	orrs	r3, r1
 8005534:	6553      	str	r3, [r2, #84]	@ 0x54
 8005536:	e003      	b.n	8005540 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005538:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800553c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005540:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005544:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005548:	f002 0304 	and.w	r3, r2, #4
 800554c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005550:	2300      	movs	r3, #0
 8005552:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005556:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800555a:	460b      	mov	r3, r1
 800555c:	4313      	orrs	r3, r2
 800555e:	d044      	beq.n	80055ea <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8005560:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005564:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005568:	2b05      	cmp	r3, #5
 800556a:	d825      	bhi.n	80055b8 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800556c:	a201      	add	r2, pc, #4	@ (adr r2, 8005574 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800556e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005572:	bf00      	nop
 8005574:	080055c1 	.word	0x080055c1
 8005578:	0800558d 	.word	0x0800558d
 800557c:	080055a3 	.word	0x080055a3
 8005580:	080055c1 	.word	0x080055c1
 8005584:	080055c1 	.word	0x080055c1
 8005588:	080055c1 	.word	0x080055c1
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800558c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005590:	3308      	adds	r3, #8
 8005592:	2101      	movs	r1, #1
 8005594:	4618      	mov	r0, r3
 8005596:	f000 ff1d 	bl	80063d4 <RCCEx_PLL2_Config>
 800559a:	4603      	mov	r3, r0
 800559c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80055a0:	e00f      	b.n	80055c2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80055a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80055a6:	3328      	adds	r3, #40	@ 0x28
 80055a8:	2101      	movs	r1, #1
 80055aa:	4618      	mov	r0, r3
 80055ac:	f000 ffc4 	bl	8006538 <RCCEx_PLL3_Config>
 80055b0:	4603      	mov	r3, r0
 80055b2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80055b6:	e004      	b.n	80055c2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80055b8:	2301      	movs	r3, #1
 80055ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80055be:	e000      	b.n	80055c2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 80055c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80055c2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d10b      	bne.n	80055e2 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80055ca:	4b6c      	ldr	r3, [pc, #432]	@ (800577c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80055cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80055ce:	f023 0107 	bic.w	r1, r3, #7
 80055d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80055d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80055da:	4a68      	ldr	r2, [pc, #416]	@ (800577c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80055dc:	430b      	orrs	r3, r1
 80055de:	6593      	str	r3, [r2, #88]	@ 0x58
 80055e0:	e003      	b.n	80055ea <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055e2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80055e6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80055ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80055ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055f2:	f002 0320 	and.w	r3, r2, #32
 80055f6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80055fa:	2300      	movs	r3, #0
 80055fc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005600:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005604:	460b      	mov	r3, r1
 8005606:	4313      	orrs	r3, r2
 8005608:	d055      	beq.n	80056b6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800560a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800560e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005612:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005616:	d033      	beq.n	8005680 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8005618:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800561c:	d82c      	bhi.n	8005678 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800561e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005622:	d02f      	beq.n	8005684 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8005624:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005628:	d826      	bhi.n	8005678 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800562a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800562e:	d02b      	beq.n	8005688 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8005630:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005634:	d820      	bhi.n	8005678 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005636:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800563a:	d012      	beq.n	8005662 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800563c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005640:	d81a      	bhi.n	8005678 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005642:	2b00      	cmp	r3, #0
 8005644:	d022      	beq.n	800568c <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8005646:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800564a:	d115      	bne.n	8005678 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800564c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005650:	3308      	adds	r3, #8
 8005652:	2100      	movs	r1, #0
 8005654:	4618      	mov	r0, r3
 8005656:	f000 febd 	bl	80063d4 <RCCEx_PLL2_Config>
 800565a:	4603      	mov	r3, r0
 800565c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005660:	e015      	b.n	800568e <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005662:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005666:	3328      	adds	r3, #40	@ 0x28
 8005668:	2102      	movs	r1, #2
 800566a:	4618      	mov	r0, r3
 800566c:	f000 ff64 	bl	8006538 <RCCEx_PLL3_Config>
 8005670:	4603      	mov	r3, r0
 8005672:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005676:	e00a      	b.n	800568e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005678:	2301      	movs	r3, #1
 800567a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800567e:	e006      	b.n	800568e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005680:	bf00      	nop
 8005682:	e004      	b.n	800568e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005684:	bf00      	nop
 8005686:	e002      	b.n	800568e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005688:	bf00      	nop
 800568a:	e000      	b.n	800568e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800568c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800568e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005692:	2b00      	cmp	r3, #0
 8005694:	d10b      	bne.n	80056ae <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005696:	4b39      	ldr	r3, [pc, #228]	@ (800577c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005698:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800569a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800569e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80056a6:	4a35      	ldr	r2, [pc, #212]	@ (800577c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80056a8:	430b      	orrs	r3, r1
 80056aa:	6553      	str	r3, [r2, #84]	@ 0x54
 80056ac:	e003      	b.n	80056b6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056ae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80056b2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80056b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056be:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80056c2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80056c6:	2300      	movs	r3, #0
 80056c8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80056cc:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80056d0:	460b      	mov	r3, r1
 80056d2:	4313      	orrs	r3, r2
 80056d4:	d058      	beq.n	8005788 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80056d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056da:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80056de:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80056e2:	d033      	beq.n	800574c <HAL_RCCEx_PeriphCLKConfig+0xd08>
 80056e4:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80056e8:	d82c      	bhi.n	8005744 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80056ea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80056ee:	d02f      	beq.n	8005750 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 80056f0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80056f4:	d826      	bhi.n	8005744 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80056f6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80056fa:	d02b      	beq.n	8005754 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 80056fc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005700:	d820      	bhi.n	8005744 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8005702:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005706:	d012      	beq.n	800572e <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8005708:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800570c:	d81a      	bhi.n	8005744 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800570e:	2b00      	cmp	r3, #0
 8005710:	d022      	beq.n	8005758 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8005712:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005716:	d115      	bne.n	8005744 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005718:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800571c:	3308      	adds	r3, #8
 800571e:	2100      	movs	r1, #0
 8005720:	4618      	mov	r0, r3
 8005722:	f000 fe57 	bl	80063d4 <RCCEx_PLL2_Config>
 8005726:	4603      	mov	r3, r0
 8005728:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800572c:	e015      	b.n	800575a <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800572e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005732:	3328      	adds	r3, #40	@ 0x28
 8005734:	2102      	movs	r1, #2
 8005736:	4618      	mov	r0, r3
 8005738:	f000 fefe 	bl	8006538 <RCCEx_PLL3_Config>
 800573c:	4603      	mov	r3, r0
 800573e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005742:	e00a      	b.n	800575a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005744:	2301      	movs	r3, #1
 8005746:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800574a:	e006      	b.n	800575a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800574c:	bf00      	nop
 800574e:	e004      	b.n	800575a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005750:	bf00      	nop
 8005752:	e002      	b.n	800575a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005754:	bf00      	nop
 8005756:	e000      	b.n	800575a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005758:	bf00      	nop
    }

    if (ret == HAL_OK)
 800575a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800575e:	2b00      	cmp	r3, #0
 8005760:	d10e      	bne.n	8005780 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005762:	4b06      	ldr	r3, [pc, #24]	@ (800577c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005764:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005766:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800576a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800576e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005772:	4a02      	ldr	r2, [pc, #8]	@ (800577c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005774:	430b      	orrs	r3, r1
 8005776:	6593      	str	r3, [r2, #88]	@ 0x58
 8005778:	e006      	b.n	8005788 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800577a:	bf00      	nop
 800577c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005780:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005784:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8005788:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800578c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005790:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8005794:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005798:	2300      	movs	r3, #0
 800579a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800579e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80057a2:	460b      	mov	r3, r1
 80057a4:	4313      	orrs	r3, r2
 80057a6:	d055      	beq.n	8005854 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80057a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057ac:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80057b0:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80057b4:	d033      	beq.n	800581e <HAL_RCCEx_PeriphCLKConfig+0xdda>
 80057b6:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80057ba:	d82c      	bhi.n	8005816 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80057bc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80057c0:	d02f      	beq.n	8005822 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 80057c2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80057c6:	d826      	bhi.n	8005816 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80057c8:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80057cc:	d02b      	beq.n	8005826 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 80057ce:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80057d2:	d820      	bhi.n	8005816 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80057d4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80057d8:	d012      	beq.n	8005800 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 80057da:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80057de:	d81a      	bhi.n	8005816 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d022      	beq.n	800582a <HAL_RCCEx_PeriphCLKConfig+0xde6>
 80057e4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80057e8:	d115      	bne.n	8005816 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80057ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057ee:	3308      	adds	r3, #8
 80057f0:	2100      	movs	r1, #0
 80057f2:	4618      	mov	r0, r3
 80057f4:	f000 fdee 	bl	80063d4 <RCCEx_PLL2_Config>
 80057f8:	4603      	mov	r3, r0
 80057fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80057fe:	e015      	b.n	800582c <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005800:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005804:	3328      	adds	r3, #40	@ 0x28
 8005806:	2102      	movs	r1, #2
 8005808:	4618      	mov	r0, r3
 800580a:	f000 fe95 	bl	8006538 <RCCEx_PLL3_Config>
 800580e:	4603      	mov	r3, r0
 8005810:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8005814:	e00a      	b.n	800582c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005816:	2301      	movs	r3, #1
 8005818:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800581c:	e006      	b.n	800582c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800581e:	bf00      	nop
 8005820:	e004      	b.n	800582c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8005822:	bf00      	nop
 8005824:	e002      	b.n	800582c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8005826:	bf00      	nop
 8005828:	e000      	b.n	800582c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800582a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800582c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005830:	2b00      	cmp	r3, #0
 8005832:	d10b      	bne.n	800584c <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8005834:	4ba1      	ldr	r3, [pc, #644]	@ (8005abc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005836:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005838:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 800583c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005840:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005844:	4a9d      	ldr	r2, [pc, #628]	@ (8005abc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005846:	430b      	orrs	r3, r1
 8005848:	6593      	str	r3, [r2, #88]	@ 0x58
 800584a:	e003      	b.n	8005854 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800584c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005850:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8005854:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005858:	e9d3 2300 	ldrd	r2, r3, [r3]
 800585c:	f002 0308 	and.w	r3, r2, #8
 8005860:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005864:	2300      	movs	r3, #0
 8005866:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800586a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800586e:	460b      	mov	r3, r1
 8005870:	4313      	orrs	r3, r2
 8005872:	d01e      	beq.n	80058b2 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8005874:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005878:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800587c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005880:	d10c      	bne.n	800589c <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005882:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005886:	3328      	adds	r3, #40	@ 0x28
 8005888:	2102      	movs	r1, #2
 800588a:	4618      	mov	r0, r3
 800588c:	f000 fe54 	bl	8006538 <RCCEx_PLL3_Config>
 8005890:	4603      	mov	r3, r0
 8005892:	2b00      	cmp	r3, #0
 8005894:	d002      	beq.n	800589c <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8005896:	2301      	movs	r3, #1
 8005898:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800589c:	4b87      	ldr	r3, [pc, #540]	@ (8005abc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800589e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80058a0:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80058a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80058ac:	4a83      	ldr	r2, [pc, #524]	@ (8005abc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80058ae:	430b      	orrs	r3, r1
 80058b0:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80058b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058ba:	f002 0310 	and.w	r3, r2, #16
 80058be:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80058c2:	2300      	movs	r3, #0
 80058c4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80058c8:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80058cc:	460b      	mov	r3, r1
 80058ce:	4313      	orrs	r3, r2
 80058d0:	d01e      	beq.n	8005910 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80058d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058d6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80058da:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80058de:	d10c      	bne.n	80058fa <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80058e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058e4:	3328      	adds	r3, #40	@ 0x28
 80058e6:	2102      	movs	r1, #2
 80058e8:	4618      	mov	r0, r3
 80058ea:	f000 fe25 	bl	8006538 <RCCEx_PLL3_Config>
 80058ee:	4603      	mov	r3, r0
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d002      	beq.n	80058fa <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 80058f4:	2301      	movs	r3, #1
 80058f6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80058fa:	4b70      	ldr	r3, [pc, #448]	@ (8005abc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80058fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80058fe:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005902:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005906:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800590a:	4a6c      	ldr	r2, [pc, #432]	@ (8005abc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800590c:	430b      	orrs	r3, r1
 800590e:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005910:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005914:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005918:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800591c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005920:	2300      	movs	r3, #0
 8005922:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005926:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800592a:	460b      	mov	r3, r1
 800592c:	4313      	orrs	r3, r2
 800592e:	d03e      	beq.n	80059ae <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8005930:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005934:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005938:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800593c:	d022      	beq.n	8005984 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800593e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005942:	d81b      	bhi.n	800597c <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8005944:	2b00      	cmp	r3, #0
 8005946:	d003      	beq.n	8005950 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8005948:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800594c:	d00b      	beq.n	8005966 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800594e:	e015      	b.n	800597c <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005950:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005954:	3308      	adds	r3, #8
 8005956:	2100      	movs	r1, #0
 8005958:	4618      	mov	r0, r3
 800595a:	f000 fd3b 	bl	80063d4 <RCCEx_PLL2_Config>
 800595e:	4603      	mov	r3, r0
 8005960:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8005964:	e00f      	b.n	8005986 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005966:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800596a:	3328      	adds	r3, #40	@ 0x28
 800596c:	2102      	movs	r1, #2
 800596e:	4618      	mov	r0, r3
 8005970:	f000 fde2 	bl	8006538 <RCCEx_PLL3_Config>
 8005974:	4603      	mov	r3, r0
 8005976:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800597a:	e004      	b.n	8005986 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800597c:	2301      	movs	r3, #1
 800597e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005982:	e000      	b.n	8005986 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8005984:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005986:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800598a:	2b00      	cmp	r3, #0
 800598c:	d10b      	bne.n	80059a6 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800598e:	4b4b      	ldr	r3, [pc, #300]	@ (8005abc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005990:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005992:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8005996:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800599a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800599e:	4a47      	ldr	r2, [pc, #284]	@ (8005abc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80059a0:	430b      	orrs	r3, r1
 80059a2:	6593      	str	r3, [r2, #88]	@ 0x58
 80059a4:	e003      	b.n	80059ae <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059a6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80059aa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80059ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059b6:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80059ba:	67bb      	str	r3, [r7, #120]	@ 0x78
 80059bc:	2300      	movs	r3, #0
 80059be:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80059c0:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80059c4:	460b      	mov	r3, r1
 80059c6:	4313      	orrs	r3, r2
 80059c8:	d03b      	beq.n	8005a42 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80059ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80059d2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80059d6:	d01f      	beq.n	8005a18 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 80059d8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80059dc:	d818      	bhi.n	8005a10 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 80059de:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80059e2:	d003      	beq.n	80059ec <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 80059e4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80059e8:	d007      	beq.n	80059fa <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 80059ea:	e011      	b.n	8005a10 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80059ec:	4b33      	ldr	r3, [pc, #204]	@ (8005abc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80059ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059f0:	4a32      	ldr	r2, [pc, #200]	@ (8005abc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80059f2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80059f6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80059f8:	e00f      	b.n	8005a1a <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80059fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059fe:	3328      	adds	r3, #40	@ 0x28
 8005a00:	2101      	movs	r1, #1
 8005a02:	4618      	mov	r0, r3
 8005a04:	f000 fd98 	bl	8006538 <RCCEx_PLL3_Config>
 8005a08:	4603      	mov	r3, r0
 8005a0a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8005a0e:	e004      	b.n	8005a1a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005a10:	2301      	movs	r3, #1
 8005a12:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005a16:	e000      	b.n	8005a1a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8005a18:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005a1a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d10b      	bne.n	8005a3a <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005a22:	4b26      	ldr	r3, [pc, #152]	@ (8005abc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005a24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a26:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8005a2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a32:	4a22      	ldr	r2, [pc, #136]	@ (8005abc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005a34:	430b      	orrs	r3, r1
 8005a36:	6553      	str	r3, [r2, #84]	@ 0x54
 8005a38:	e003      	b.n	8005a42 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a3a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005a3e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8005a42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a4a:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8005a4e:	673b      	str	r3, [r7, #112]	@ 0x70
 8005a50:	2300      	movs	r3, #0
 8005a52:	677b      	str	r3, [r7, #116]	@ 0x74
 8005a54:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8005a58:	460b      	mov	r3, r1
 8005a5a:	4313      	orrs	r3, r2
 8005a5c:	d034      	beq.n	8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8005a5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a62:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d003      	beq.n	8005a70 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8005a68:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005a6c:	d007      	beq.n	8005a7e <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8005a6e:	e011      	b.n	8005a94 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005a70:	4b12      	ldr	r3, [pc, #72]	@ (8005abc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005a72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a74:	4a11      	ldr	r2, [pc, #68]	@ (8005abc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005a76:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005a7a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8005a7c:	e00e      	b.n	8005a9c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005a7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a82:	3308      	adds	r3, #8
 8005a84:	2102      	movs	r1, #2
 8005a86:	4618      	mov	r0, r3
 8005a88:	f000 fca4 	bl	80063d4 <RCCEx_PLL2_Config>
 8005a8c:	4603      	mov	r3, r0
 8005a8e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8005a92:	e003      	b.n	8005a9c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8005a94:	2301      	movs	r3, #1
 8005a96:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005a9a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005a9c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d10d      	bne.n	8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8005aa4:	4b05      	ldr	r3, [pc, #20]	@ (8005abc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005aa6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005aa8:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005aac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ab0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005ab2:	4a02      	ldr	r2, [pc, #8]	@ (8005abc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005ab4:	430b      	orrs	r3, r1
 8005ab6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005ab8:	e006      	b.n	8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8005aba:	bf00      	nop
 8005abc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ac0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005ac4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005ac8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005acc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ad0:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8005ad4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005ad6:	2300      	movs	r3, #0
 8005ad8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005ada:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8005ade:	460b      	mov	r3, r1
 8005ae0:	4313      	orrs	r3, r2
 8005ae2:	d00c      	beq.n	8005afe <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005ae4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ae8:	3328      	adds	r3, #40	@ 0x28
 8005aea:	2102      	movs	r1, #2
 8005aec:	4618      	mov	r0, r3
 8005aee:	f000 fd23 	bl	8006538 <RCCEx_PLL3_Config>
 8005af2:	4603      	mov	r3, r0
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d002      	beq.n	8005afe <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8005af8:	2301      	movs	r3, #1
 8005afa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005afe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b06:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8005b0a:	663b      	str	r3, [r7, #96]	@ 0x60
 8005b0c:	2300      	movs	r3, #0
 8005b0e:	667b      	str	r3, [r7, #100]	@ 0x64
 8005b10:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8005b14:	460b      	mov	r3, r1
 8005b16:	4313      	orrs	r3, r2
 8005b18:	d038      	beq.n	8005b8c <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8005b1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005b22:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005b26:	d018      	beq.n	8005b5a <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8005b28:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005b2c:	d811      	bhi.n	8005b52 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8005b2e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005b32:	d014      	beq.n	8005b5e <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8005b34:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005b38:	d80b      	bhi.n	8005b52 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d011      	beq.n	8005b62 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8005b3e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005b42:	d106      	bne.n	8005b52 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005b44:	4bc3      	ldr	r3, [pc, #780]	@ (8005e54 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005b46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b48:	4ac2      	ldr	r2, [pc, #776]	@ (8005e54 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005b4a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005b4e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8005b50:	e008      	b.n	8005b64 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005b52:	2301      	movs	r3, #1
 8005b54:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005b58:	e004      	b.n	8005b64 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8005b5a:	bf00      	nop
 8005b5c:	e002      	b.n	8005b64 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8005b5e:	bf00      	nop
 8005b60:	e000      	b.n	8005b64 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8005b62:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005b64:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d10b      	bne.n	8005b84 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005b6c:	4bb9      	ldr	r3, [pc, #740]	@ (8005e54 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005b6e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b70:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005b74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b78:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005b7c:	4ab5      	ldr	r2, [pc, #724]	@ (8005e54 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005b7e:	430b      	orrs	r3, r1
 8005b80:	6553      	str	r3, [r2, #84]	@ 0x54
 8005b82:	e003      	b.n	8005b8c <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b84:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005b88:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005b8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b94:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8005b98:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005b9a:	2300      	movs	r3, #0
 8005b9c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005b9e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8005ba2:	460b      	mov	r3, r1
 8005ba4:	4313      	orrs	r3, r2
 8005ba6:	d009      	beq.n	8005bbc <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005ba8:	4baa      	ldr	r3, [pc, #680]	@ (8005e54 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005baa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005bac:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8005bb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005bb4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005bb6:	4aa7      	ldr	r2, [pc, #668]	@ (8005e54 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005bb8:	430b      	orrs	r3, r1
 8005bba:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8005bbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005bc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bc4:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8005bc8:	653b      	str	r3, [r7, #80]	@ 0x50
 8005bca:	2300      	movs	r3, #0
 8005bcc:	657b      	str	r3, [r7, #84]	@ 0x54
 8005bce:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8005bd2:	460b      	mov	r3, r1
 8005bd4:	4313      	orrs	r3, r2
 8005bd6:	d00a      	beq.n	8005bee <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8005bd8:	4b9e      	ldr	r3, [pc, #632]	@ (8005e54 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005bda:	691b      	ldr	r3, [r3, #16]
 8005bdc:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8005be0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005be4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8005be8:	4a9a      	ldr	r2, [pc, #616]	@ (8005e54 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005bea:	430b      	orrs	r3, r1
 8005bec:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005bee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005bf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bf6:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8005bfa:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005bfc:	2300      	movs	r3, #0
 8005bfe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005c00:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8005c04:	460b      	mov	r3, r1
 8005c06:	4313      	orrs	r3, r2
 8005c08:	d009      	beq.n	8005c1e <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005c0a:	4b92      	ldr	r3, [pc, #584]	@ (8005e54 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005c0c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005c0e:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8005c12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c16:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005c18:	4a8e      	ldr	r2, [pc, #568]	@ (8005e54 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005c1a:	430b      	orrs	r3, r1
 8005c1c:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8005c1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c26:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8005c2a:	643b      	str	r3, [r7, #64]	@ 0x40
 8005c2c:	2300      	movs	r3, #0
 8005c2e:	647b      	str	r3, [r7, #68]	@ 0x44
 8005c30:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8005c34:	460b      	mov	r3, r1
 8005c36:	4313      	orrs	r3, r2
 8005c38:	d00e      	beq.n	8005c58 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005c3a:	4b86      	ldr	r3, [pc, #536]	@ (8005e54 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005c3c:	691b      	ldr	r3, [r3, #16]
 8005c3e:	4a85      	ldr	r2, [pc, #532]	@ (8005e54 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005c40:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005c44:	6113      	str	r3, [r2, #16]
 8005c46:	4b83      	ldr	r3, [pc, #524]	@ (8005e54 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005c48:	6919      	ldr	r1, [r3, #16]
 8005c4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c4e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8005c52:	4a80      	ldr	r2, [pc, #512]	@ (8005e54 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005c54:	430b      	orrs	r3, r1
 8005c56:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8005c58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c60:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8005c64:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005c66:	2300      	movs	r3, #0
 8005c68:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005c6a:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8005c6e:	460b      	mov	r3, r1
 8005c70:	4313      	orrs	r3, r2
 8005c72:	d009      	beq.n	8005c88 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8005c74:	4b77      	ldr	r3, [pc, #476]	@ (8005e54 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005c76:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005c78:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8005c7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c82:	4a74      	ldr	r2, [pc, #464]	@ (8005e54 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005c84:	430b      	orrs	r3, r1
 8005c86:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005c88:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c90:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8005c94:	633b      	str	r3, [r7, #48]	@ 0x30
 8005c96:	2300      	movs	r3, #0
 8005c98:	637b      	str	r3, [r7, #52]	@ 0x34
 8005c9a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8005c9e:	460b      	mov	r3, r1
 8005ca0:	4313      	orrs	r3, r2
 8005ca2:	d00a      	beq.n	8005cba <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005ca4:	4b6b      	ldr	r3, [pc, #428]	@ (8005e54 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005ca6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ca8:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8005cac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005cb0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005cb4:	4a67      	ldr	r2, [pc, #412]	@ (8005e54 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005cb6:	430b      	orrs	r3, r1
 8005cb8:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8005cba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005cbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cc2:	2100      	movs	r1, #0
 8005cc4:	62b9      	str	r1, [r7, #40]	@ 0x28
 8005cc6:	f003 0301 	and.w	r3, r3, #1
 8005cca:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005ccc:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8005cd0:	460b      	mov	r3, r1
 8005cd2:	4313      	orrs	r3, r2
 8005cd4:	d011      	beq.n	8005cfa <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005cd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005cda:	3308      	adds	r3, #8
 8005cdc:	2100      	movs	r1, #0
 8005cde:	4618      	mov	r0, r3
 8005ce0:	f000 fb78 	bl	80063d4 <RCCEx_PLL2_Config>
 8005ce4:	4603      	mov	r3, r0
 8005ce6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8005cea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d003      	beq.n	8005cfa <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005cf2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005cf6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8005cfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005cfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d02:	2100      	movs	r1, #0
 8005d04:	6239      	str	r1, [r7, #32]
 8005d06:	f003 0302 	and.w	r3, r3, #2
 8005d0a:	627b      	str	r3, [r7, #36]	@ 0x24
 8005d0c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8005d10:	460b      	mov	r3, r1
 8005d12:	4313      	orrs	r3, r2
 8005d14:	d011      	beq.n	8005d3a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005d16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d1a:	3308      	adds	r3, #8
 8005d1c:	2101      	movs	r1, #1
 8005d1e:	4618      	mov	r0, r3
 8005d20:	f000 fb58 	bl	80063d4 <RCCEx_PLL2_Config>
 8005d24:	4603      	mov	r3, r0
 8005d26:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8005d2a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d003      	beq.n	8005d3a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d32:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005d36:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8005d3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d42:	2100      	movs	r1, #0
 8005d44:	61b9      	str	r1, [r7, #24]
 8005d46:	f003 0304 	and.w	r3, r3, #4
 8005d4a:	61fb      	str	r3, [r7, #28]
 8005d4c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8005d50:	460b      	mov	r3, r1
 8005d52:	4313      	orrs	r3, r2
 8005d54:	d011      	beq.n	8005d7a <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005d56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d5a:	3308      	adds	r3, #8
 8005d5c:	2102      	movs	r1, #2
 8005d5e:	4618      	mov	r0, r3
 8005d60:	f000 fb38 	bl	80063d4 <RCCEx_PLL2_Config>
 8005d64:	4603      	mov	r3, r0
 8005d66:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8005d6a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d003      	beq.n	8005d7a <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d72:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005d76:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8005d7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d82:	2100      	movs	r1, #0
 8005d84:	6139      	str	r1, [r7, #16]
 8005d86:	f003 0308 	and.w	r3, r3, #8
 8005d8a:	617b      	str	r3, [r7, #20]
 8005d8c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8005d90:	460b      	mov	r3, r1
 8005d92:	4313      	orrs	r3, r2
 8005d94:	d011      	beq.n	8005dba <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005d96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d9a:	3328      	adds	r3, #40	@ 0x28
 8005d9c:	2100      	movs	r1, #0
 8005d9e:	4618      	mov	r0, r3
 8005da0:	f000 fbca 	bl	8006538 <RCCEx_PLL3_Config>
 8005da4:	4603      	mov	r3, r0
 8005da6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8005daa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d003      	beq.n	8005dba <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005db2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005db6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8005dba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005dbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dc2:	2100      	movs	r1, #0
 8005dc4:	60b9      	str	r1, [r7, #8]
 8005dc6:	f003 0310 	and.w	r3, r3, #16
 8005dca:	60fb      	str	r3, [r7, #12]
 8005dcc:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8005dd0:	460b      	mov	r3, r1
 8005dd2:	4313      	orrs	r3, r2
 8005dd4:	d011      	beq.n	8005dfa <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005dd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005dda:	3328      	adds	r3, #40	@ 0x28
 8005ddc:	2101      	movs	r1, #1
 8005dde:	4618      	mov	r0, r3
 8005de0:	f000 fbaa 	bl	8006538 <RCCEx_PLL3_Config>
 8005de4:	4603      	mov	r3, r0
 8005de6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8005dea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d003      	beq.n	8005dfa <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005df2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005df6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8005dfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005dfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e02:	2100      	movs	r1, #0
 8005e04:	6039      	str	r1, [r7, #0]
 8005e06:	f003 0320 	and.w	r3, r3, #32
 8005e0a:	607b      	str	r3, [r7, #4]
 8005e0c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8005e10:	460b      	mov	r3, r1
 8005e12:	4313      	orrs	r3, r2
 8005e14:	d011      	beq.n	8005e3a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005e16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e1a:	3328      	adds	r3, #40	@ 0x28
 8005e1c:	2102      	movs	r1, #2
 8005e1e:	4618      	mov	r0, r3
 8005e20:	f000 fb8a 	bl	8006538 <RCCEx_PLL3_Config>
 8005e24:	4603      	mov	r3, r0
 8005e26:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8005e2a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d003      	beq.n	8005e3a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e32:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005e36:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8005e3a:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d101      	bne.n	8005e46 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8005e42:	2300      	movs	r3, #0
 8005e44:	e000      	b.n	8005e48 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8005e46:	2301      	movs	r3, #1
}
 8005e48:	4618      	mov	r0, r3
 8005e4a:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8005e4e:	46bd      	mov	sp, r7
 8005e50:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005e54:	58024400 	.word	0x58024400

08005e58 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8005e58:	b580      	push	{r7, lr}
 8005e5a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8005e5c:	f7fe fd96 	bl	800498c <HAL_RCC_GetHCLKFreq>
 8005e60:	4602      	mov	r2, r0
 8005e62:	4b06      	ldr	r3, [pc, #24]	@ (8005e7c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8005e64:	6a1b      	ldr	r3, [r3, #32]
 8005e66:	091b      	lsrs	r3, r3, #4
 8005e68:	f003 0307 	and.w	r3, r3, #7
 8005e6c:	4904      	ldr	r1, [pc, #16]	@ (8005e80 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8005e6e:	5ccb      	ldrb	r3, [r1, r3]
 8005e70:	f003 031f 	and.w	r3, r3, #31
 8005e74:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8005e78:	4618      	mov	r0, r3
 8005e7a:	bd80      	pop	{r7, pc}
 8005e7c:	58024400 	.word	0x58024400
 8005e80:	08008290 	.word	0x08008290

08005e84 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8005e84:	b480      	push	{r7}
 8005e86:	b089      	sub	sp, #36	@ 0x24
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005e8c:	4ba1      	ldr	r3, [pc, #644]	@ (8006114 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005e8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e90:	f003 0303 	and.w	r3, r3, #3
 8005e94:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8005e96:	4b9f      	ldr	r3, [pc, #636]	@ (8006114 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005e98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e9a:	0b1b      	lsrs	r3, r3, #12
 8005e9c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005ea0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8005ea2:	4b9c      	ldr	r3, [pc, #624]	@ (8006114 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005ea4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ea6:	091b      	lsrs	r3, r3, #4
 8005ea8:	f003 0301 	and.w	r3, r3, #1
 8005eac:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8005eae:	4b99      	ldr	r3, [pc, #612]	@ (8006114 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005eb0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005eb2:	08db      	lsrs	r3, r3, #3
 8005eb4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005eb8:	693a      	ldr	r2, [r7, #16]
 8005eba:	fb02 f303 	mul.w	r3, r2, r3
 8005ebe:	ee07 3a90 	vmov	s15, r3
 8005ec2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ec6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8005eca:	697b      	ldr	r3, [r7, #20]
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	f000 8111 	beq.w	80060f4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8005ed2:	69bb      	ldr	r3, [r7, #24]
 8005ed4:	2b02      	cmp	r3, #2
 8005ed6:	f000 8083 	beq.w	8005fe0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8005eda:	69bb      	ldr	r3, [r7, #24]
 8005edc:	2b02      	cmp	r3, #2
 8005ede:	f200 80a1 	bhi.w	8006024 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8005ee2:	69bb      	ldr	r3, [r7, #24]
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d003      	beq.n	8005ef0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8005ee8:	69bb      	ldr	r3, [r7, #24]
 8005eea:	2b01      	cmp	r3, #1
 8005eec:	d056      	beq.n	8005f9c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8005eee:	e099      	b.n	8006024 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005ef0:	4b88      	ldr	r3, [pc, #544]	@ (8006114 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	f003 0320 	and.w	r3, r3, #32
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d02d      	beq.n	8005f58 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005efc:	4b85      	ldr	r3, [pc, #532]	@ (8006114 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	08db      	lsrs	r3, r3, #3
 8005f02:	f003 0303 	and.w	r3, r3, #3
 8005f06:	4a84      	ldr	r2, [pc, #528]	@ (8006118 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8005f08:	fa22 f303 	lsr.w	r3, r2, r3
 8005f0c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005f0e:	68bb      	ldr	r3, [r7, #8]
 8005f10:	ee07 3a90 	vmov	s15, r3
 8005f14:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f18:	697b      	ldr	r3, [r7, #20]
 8005f1a:	ee07 3a90 	vmov	s15, r3
 8005f1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f26:	4b7b      	ldr	r3, [pc, #492]	@ (8006114 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005f28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f2e:	ee07 3a90 	vmov	s15, r3
 8005f32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f36:	ed97 6a03 	vldr	s12, [r7, #12]
 8005f3a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800611c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005f3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f46:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005f4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f52:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8005f56:	e087      	b.n	8006068 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005f58:	697b      	ldr	r3, [r7, #20]
 8005f5a:	ee07 3a90 	vmov	s15, r3
 8005f5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f62:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8006120 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8005f66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f6a:	4b6a      	ldr	r3, [pc, #424]	@ (8006114 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005f6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f72:	ee07 3a90 	vmov	s15, r3
 8005f76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f7a:	ed97 6a03 	vldr	s12, [r7, #12]
 8005f7e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800611c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005f82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f8a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005f8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f96:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005f9a:	e065      	b.n	8006068 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005f9c:	697b      	ldr	r3, [r7, #20]
 8005f9e:	ee07 3a90 	vmov	s15, r3
 8005fa2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005fa6:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8006124 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005faa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005fae:	4b59      	ldr	r3, [pc, #356]	@ (8006114 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005fb0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005fb2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005fb6:	ee07 3a90 	vmov	s15, r3
 8005fba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005fbe:	ed97 6a03 	vldr	s12, [r7, #12]
 8005fc2:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800611c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005fc6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005fca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005fce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005fd2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005fd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005fda:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005fde:	e043      	b.n	8006068 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005fe0:	697b      	ldr	r3, [r7, #20]
 8005fe2:	ee07 3a90 	vmov	s15, r3
 8005fe6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005fea:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8006128 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8005fee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005ff2:	4b48      	ldr	r3, [pc, #288]	@ (8006114 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005ff4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ff6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ffa:	ee07 3a90 	vmov	s15, r3
 8005ffe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006002:	ed97 6a03 	vldr	s12, [r7, #12]
 8006006:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800611c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800600a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800600e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006012:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006016:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800601a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800601e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006022:	e021      	b.n	8006068 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006024:	697b      	ldr	r3, [r7, #20]
 8006026:	ee07 3a90 	vmov	s15, r3
 800602a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800602e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8006124 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006032:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006036:	4b37      	ldr	r3, [pc, #220]	@ (8006114 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006038:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800603a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800603e:	ee07 3a90 	vmov	s15, r3
 8006042:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006046:	ed97 6a03 	vldr	s12, [r7, #12]
 800604a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800611c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800604e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006052:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006056:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800605a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800605e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006062:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006066:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8006068:	4b2a      	ldr	r3, [pc, #168]	@ (8006114 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800606a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800606c:	0a5b      	lsrs	r3, r3, #9
 800606e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006072:	ee07 3a90 	vmov	s15, r3
 8006076:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800607a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800607e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006082:	edd7 6a07 	vldr	s13, [r7, #28]
 8006086:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800608a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800608e:	ee17 2a90 	vmov	r2, s15
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8006096:	4b1f      	ldr	r3, [pc, #124]	@ (8006114 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006098:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800609a:	0c1b      	lsrs	r3, r3, #16
 800609c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80060a0:	ee07 3a90 	vmov	s15, r3
 80060a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060a8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80060ac:	ee37 7a87 	vadd.f32	s14, s15, s14
 80060b0:	edd7 6a07 	vldr	s13, [r7, #28]
 80060b4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80060b8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80060bc:	ee17 2a90 	vmov	r2, s15
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80060c4:	4b13      	ldr	r3, [pc, #76]	@ (8006114 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80060c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060c8:	0e1b      	lsrs	r3, r3, #24
 80060ca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80060ce:	ee07 3a90 	vmov	s15, r3
 80060d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060d6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80060da:	ee37 7a87 	vadd.f32	s14, s15, s14
 80060de:	edd7 6a07 	vldr	s13, [r7, #28]
 80060e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80060e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80060ea:	ee17 2a90 	vmov	r2, s15
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80060f2:	e008      	b.n	8006106 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	2200      	movs	r2, #0
 80060f8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	2200      	movs	r2, #0
 80060fe:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	2200      	movs	r2, #0
 8006104:	609a      	str	r2, [r3, #8]
}
 8006106:	bf00      	nop
 8006108:	3724      	adds	r7, #36	@ 0x24
 800610a:	46bd      	mov	sp, r7
 800610c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006110:	4770      	bx	lr
 8006112:	bf00      	nop
 8006114:	58024400 	.word	0x58024400
 8006118:	03d09000 	.word	0x03d09000
 800611c:	46000000 	.word	0x46000000
 8006120:	4c742400 	.word	0x4c742400
 8006124:	4a742400 	.word	0x4a742400
 8006128:	4bbebc20 	.word	0x4bbebc20

0800612c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800612c:	b480      	push	{r7}
 800612e:	b089      	sub	sp, #36	@ 0x24
 8006130:	af00      	add	r7, sp, #0
 8006132:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006134:	4ba1      	ldr	r3, [pc, #644]	@ (80063bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006136:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006138:	f003 0303 	and.w	r3, r3, #3
 800613c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800613e:	4b9f      	ldr	r3, [pc, #636]	@ (80063bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006140:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006142:	0d1b      	lsrs	r3, r3, #20
 8006144:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006148:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800614a:	4b9c      	ldr	r3, [pc, #624]	@ (80063bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800614c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800614e:	0a1b      	lsrs	r3, r3, #8
 8006150:	f003 0301 	and.w	r3, r3, #1
 8006154:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8006156:	4b99      	ldr	r3, [pc, #612]	@ (80063bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006158:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800615a:	08db      	lsrs	r3, r3, #3
 800615c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006160:	693a      	ldr	r2, [r7, #16]
 8006162:	fb02 f303 	mul.w	r3, r2, r3
 8006166:	ee07 3a90 	vmov	s15, r3
 800616a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800616e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8006172:	697b      	ldr	r3, [r7, #20]
 8006174:	2b00      	cmp	r3, #0
 8006176:	f000 8111 	beq.w	800639c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800617a:	69bb      	ldr	r3, [r7, #24]
 800617c:	2b02      	cmp	r3, #2
 800617e:	f000 8083 	beq.w	8006288 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8006182:	69bb      	ldr	r3, [r7, #24]
 8006184:	2b02      	cmp	r3, #2
 8006186:	f200 80a1 	bhi.w	80062cc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800618a:	69bb      	ldr	r3, [r7, #24]
 800618c:	2b00      	cmp	r3, #0
 800618e:	d003      	beq.n	8006198 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8006190:	69bb      	ldr	r3, [r7, #24]
 8006192:	2b01      	cmp	r3, #1
 8006194:	d056      	beq.n	8006244 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8006196:	e099      	b.n	80062cc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006198:	4b88      	ldr	r3, [pc, #544]	@ (80063bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	f003 0320 	and.w	r3, r3, #32
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d02d      	beq.n	8006200 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80061a4:	4b85      	ldr	r3, [pc, #532]	@ (80063bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	08db      	lsrs	r3, r3, #3
 80061aa:	f003 0303 	and.w	r3, r3, #3
 80061ae:	4a84      	ldr	r2, [pc, #528]	@ (80063c0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80061b0:	fa22 f303 	lsr.w	r3, r2, r3
 80061b4:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80061b6:	68bb      	ldr	r3, [r7, #8]
 80061b8:	ee07 3a90 	vmov	s15, r3
 80061bc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80061c0:	697b      	ldr	r3, [r7, #20]
 80061c2:	ee07 3a90 	vmov	s15, r3
 80061c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80061ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80061ce:	4b7b      	ldr	r3, [pc, #492]	@ (80063bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80061d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80061d6:	ee07 3a90 	vmov	s15, r3
 80061da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80061de:	ed97 6a03 	vldr	s12, [r7, #12]
 80061e2:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80063c4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80061e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80061ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80061ee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80061f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80061f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80061fa:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80061fe:	e087      	b.n	8006310 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006200:	697b      	ldr	r3, [r7, #20]
 8006202:	ee07 3a90 	vmov	s15, r3
 8006206:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800620a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80063c8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800620e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006212:	4b6a      	ldr	r3, [pc, #424]	@ (80063bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006214:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006216:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800621a:	ee07 3a90 	vmov	s15, r3
 800621e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006222:	ed97 6a03 	vldr	s12, [r7, #12]
 8006226:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80063c4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800622a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800622e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006232:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006236:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800623a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800623e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006242:	e065      	b.n	8006310 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006244:	697b      	ldr	r3, [r7, #20]
 8006246:	ee07 3a90 	vmov	s15, r3
 800624a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800624e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80063cc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006252:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006256:	4b59      	ldr	r3, [pc, #356]	@ (80063bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006258:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800625a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800625e:	ee07 3a90 	vmov	s15, r3
 8006262:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006266:	ed97 6a03 	vldr	s12, [r7, #12]
 800626a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80063c4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800626e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006272:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006276:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800627a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800627e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006282:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006286:	e043      	b.n	8006310 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006288:	697b      	ldr	r3, [r7, #20]
 800628a:	ee07 3a90 	vmov	s15, r3
 800628e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006292:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80063d0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8006296:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800629a:	4b48      	ldr	r3, [pc, #288]	@ (80063bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800629c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800629e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80062a2:	ee07 3a90 	vmov	s15, r3
 80062a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80062aa:	ed97 6a03 	vldr	s12, [r7, #12]
 80062ae:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80063c4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80062b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80062b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80062ba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80062be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80062c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80062c6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80062ca:	e021      	b.n	8006310 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80062cc:	697b      	ldr	r3, [r7, #20]
 80062ce:	ee07 3a90 	vmov	s15, r3
 80062d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80062d6:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80063cc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80062da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80062de:	4b37      	ldr	r3, [pc, #220]	@ (80063bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80062e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80062e6:	ee07 3a90 	vmov	s15, r3
 80062ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80062ee:	ed97 6a03 	vldr	s12, [r7, #12]
 80062f2:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80063c4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80062f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80062fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80062fe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006302:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006306:	ee67 7a27 	vmul.f32	s15, s14, s15
 800630a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800630e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8006310:	4b2a      	ldr	r3, [pc, #168]	@ (80063bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006312:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006314:	0a5b      	lsrs	r3, r3, #9
 8006316:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800631a:	ee07 3a90 	vmov	s15, r3
 800631e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006322:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006326:	ee37 7a87 	vadd.f32	s14, s15, s14
 800632a:	edd7 6a07 	vldr	s13, [r7, #28]
 800632e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006332:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006336:	ee17 2a90 	vmov	r2, s15
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800633e:	4b1f      	ldr	r3, [pc, #124]	@ (80063bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006340:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006342:	0c1b      	lsrs	r3, r3, #16
 8006344:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006348:	ee07 3a90 	vmov	s15, r3
 800634c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006350:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006354:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006358:	edd7 6a07 	vldr	s13, [r7, #28]
 800635c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006360:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006364:	ee17 2a90 	vmov	r2, s15
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800636c:	4b13      	ldr	r3, [pc, #76]	@ (80063bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800636e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006370:	0e1b      	lsrs	r3, r3, #24
 8006372:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006376:	ee07 3a90 	vmov	s15, r3
 800637a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800637e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006382:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006386:	edd7 6a07 	vldr	s13, [r7, #28]
 800638a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800638e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006392:	ee17 2a90 	vmov	r2, s15
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800639a:	e008      	b.n	80063ae <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	2200      	movs	r2, #0
 80063a0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	2200      	movs	r2, #0
 80063a6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	2200      	movs	r2, #0
 80063ac:	609a      	str	r2, [r3, #8]
}
 80063ae:	bf00      	nop
 80063b0:	3724      	adds	r7, #36	@ 0x24
 80063b2:	46bd      	mov	sp, r7
 80063b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b8:	4770      	bx	lr
 80063ba:	bf00      	nop
 80063bc:	58024400 	.word	0x58024400
 80063c0:	03d09000 	.word	0x03d09000
 80063c4:	46000000 	.word	0x46000000
 80063c8:	4c742400 	.word	0x4c742400
 80063cc:	4a742400 	.word	0x4a742400
 80063d0:	4bbebc20 	.word	0x4bbebc20

080063d4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80063d4:	b580      	push	{r7, lr}
 80063d6:	b084      	sub	sp, #16
 80063d8:	af00      	add	r7, sp, #0
 80063da:	6078      	str	r0, [r7, #4]
 80063dc:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80063de:	2300      	movs	r3, #0
 80063e0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80063e2:	4b53      	ldr	r3, [pc, #332]	@ (8006530 <RCCEx_PLL2_Config+0x15c>)
 80063e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063e6:	f003 0303 	and.w	r3, r3, #3
 80063ea:	2b03      	cmp	r3, #3
 80063ec:	d101      	bne.n	80063f2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80063ee:	2301      	movs	r3, #1
 80063f0:	e099      	b.n	8006526 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80063f2:	4b4f      	ldr	r3, [pc, #316]	@ (8006530 <RCCEx_PLL2_Config+0x15c>)
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	4a4e      	ldr	r2, [pc, #312]	@ (8006530 <RCCEx_PLL2_Config+0x15c>)
 80063f8:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80063fc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80063fe:	f7fa fd35 	bl	8000e6c <HAL_GetTick>
 8006402:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006404:	e008      	b.n	8006418 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006406:	f7fa fd31 	bl	8000e6c <HAL_GetTick>
 800640a:	4602      	mov	r2, r0
 800640c:	68bb      	ldr	r3, [r7, #8]
 800640e:	1ad3      	subs	r3, r2, r3
 8006410:	2b02      	cmp	r3, #2
 8006412:	d901      	bls.n	8006418 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006414:	2303      	movs	r3, #3
 8006416:	e086      	b.n	8006526 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006418:	4b45      	ldr	r3, [pc, #276]	@ (8006530 <RCCEx_PLL2_Config+0x15c>)
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006420:	2b00      	cmp	r3, #0
 8006422:	d1f0      	bne.n	8006406 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8006424:	4b42      	ldr	r3, [pc, #264]	@ (8006530 <RCCEx_PLL2_Config+0x15c>)
 8006426:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006428:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	031b      	lsls	r3, r3, #12
 8006432:	493f      	ldr	r1, [pc, #252]	@ (8006530 <RCCEx_PLL2_Config+0x15c>)
 8006434:	4313      	orrs	r3, r2
 8006436:	628b      	str	r3, [r1, #40]	@ 0x28
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	685b      	ldr	r3, [r3, #4]
 800643c:	3b01      	subs	r3, #1
 800643e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	689b      	ldr	r3, [r3, #8]
 8006446:	3b01      	subs	r3, #1
 8006448:	025b      	lsls	r3, r3, #9
 800644a:	b29b      	uxth	r3, r3
 800644c:	431a      	orrs	r2, r3
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	68db      	ldr	r3, [r3, #12]
 8006452:	3b01      	subs	r3, #1
 8006454:	041b      	lsls	r3, r3, #16
 8006456:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800645a:	431a      	orrs	r2, r3
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	691b      	ldr	r3, [r3, #16]
 8006460:	3b01      	subs	r3, #1
 8006462:	061b      	lsls	r3, r3, #24
 8006464:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006468:	4931      	ldr	r1, [pc, #196]	@ (8006530 <RCCEx_PLL2_Config+0x15c>)
 800646a:	4313      	orrs	r3, r2
 800646c:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800646e:	4b30      	ldr	r3, [pc, #192]	@ (8006530 <RCCEx_PLL2_Config+0x15c>)
 8006470:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006472:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	695b      	ldr	r3, [r3, #20]
 800647a:	492d      	ldr	r1, [pc, #180]	@ (8006530 <RCCEx_PLL2_Config+0x15c>)
 800647c:	4313      	orrs	r3, r2
 800647e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8006480:	4b2b      	ldr	r3, [pc, #172]	@ (8006530 <RCCEx_PLL2_Config+0x15c>)
 8006482:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006484:	f023 0220 	bic.w	r2, r3, #32
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	699b      	ldr	r3, [r3, #24]
 800648c:	4928      	ldr	r1, [pc, #160]	@ (8006530 <RCCEx_PLL2_Config+0x15c>)
 800648e:	4313      	orrs	r3, r2
 8006490:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8006492:	4b27      	ldr	r3, [pc, #156]	@ (8006530 <RCCEx_PLL2_Config+0x15c>)
 8006494:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006496:	4a26      	ldr	r2, [pc, #152]	@ (8006530 <RCCEx_PLL2_Config+0x15c>)
 8006498:	f023 0310 	bic.w	r3, r3, #16
 800649c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800649e:	4b24      	ldr	r3, [pc, #144]	@ (8006530 <RCCEx_PLL2_Config+0x15c>)
 80064a0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80064a2:	4b24      	ldr	r3, [pc, #144]	@ (8006534 <RCCEx_PLL2_Config+0x160>)
 80064a4:	4013      	ands	r3, r2
 80064a6:	687a      	ldr	r2, [r7, #4]
 80064a8:	69d2      	ldr	r2, [r2, #28]
 80064aa:	00d2      	lsls	r2, r2, #3
 80064ac:	4920      	ldr	r1, [pc, #128]	@ (8006530 <RCCEx_PLL2_Config+0x15c>)
 80064ae:	4313      	orrs	r3, r2
 80064b0:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80064b2:	4b1f      	ldr	r3, [pc, #124]	@ (8006530 <RCCEx_PLL2_Config+0x15c>)
 80064b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064b6:	4a1e      	ldr	r2, [pc, #120]	@ (8006530 <RCCEx_PLL2_Config+0x15c>)
 80064b8:	f043 0310 	orr.w	r3, r3, #16
 80064bc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80064be:	683b      	ldr	r3, [r7, #0]
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d106      	bne.n	80064d2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80064c4:	4b1a      	ldr	r3, [pc, #104]	@ (8006530 <RCCEx_PLL2_Config+0x15c>)
 80064c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064c8:	4a19      	ldr	r2, [pc, #100]	@ (8006530 <RCCEx_PLL2_Config+0x15c>)
 80064ca:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80064ce:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80064d0:	e00f      	b.n	80064f2 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80064d2:	683b      	ldr	r3, [r7, #0]
 80064d4:	2b01      	cmp	r3, #1
 80064d6:	d106      	bne.n	80064e6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80064d8:	4b15      	ldr	r3, [pc, #84]	@ (8006530 <RCCEx_PLL2_Config+0x15c>)
 80064da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064dc:	4a14      	ldr	r2, [pc, #80]	@ (8006530 <RCCEx_PLL2_Config+0x15c>)
 80064de:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80064e2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80064e4:	e005      	b.n	80064f2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80064e6:	4b12      	ldr	r3, [pc, #72]	@ (8006530 <RCCEx_PLL2_Config+0x15c>)
 80064e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064ea:	4a11      	ldr	r2, [pc, #68]	@ (8006530 <RCCEx_PLL2_Config+0x15c>)
 80064ec:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80064f0:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80064f2:	4b0f      	ldr	r3, [pc, #60]	@ (8006530 <RCCEx_PLL2_Config+0x15c>)
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	4a0e      	ldr	r2, [pc, #56]	@ (8006530 <RCCEx_PLL2_Config+0x15c>)
 80064f8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80064fc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80064fe:	f7fa fcb5 	bl	8000e6c <HAL_GetTick>
 8006502:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006504:	e008      	b.n	8006518 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006506:	f7fa fcb1 	bl	8000e6c <HAL_GetTick>
 800650a:	4602      	mov	r2, r0
 800650c:	68bb      	ldr	r3, [r7, #8]
 800650e:	1ad3      	subs	r3, r2, r3
 8006510:	2b02      	cmp	r3, #2
 8006512:	d901      	bls.n	8006518 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006514:	2303      	movs	r3, #3
 8006516:	e006      	b.n	8006526 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006518:	4b05      	ldr	r3, [pc, #20]	@ (8006530 <RCCEx_PLL2_Config+0x15c>)
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006520:	2b00      	cmp	r3, #0
 8006522:	d0f0      	beq.n	8006506 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8006524:	7bfb      	ldrb	r3, [r7, #15]
}
 8006526:	4618      	mov	r0, r3
 8006528:	3710      	adds	r7, #16
 800652a:	46bd      	mov	sp, r7
 800652c:	bd80      	pop	{r7, pc}
 800652e:	bf00      	nop
 8006530:	58024400 	.word	0x58024400
 8006534:	ffff0007 	.word	0xffff0007

08006538 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8006538:	b580      	push	{r7, lr}
 800653a:	b084      	sub	sp, #16
 800653c:	af00      	add	r7, sp, #0
 800653e:	6078      	str	r0, [r7, #4]
 8006540:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006542:	2300      	movs	r3, #0
 8006544:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006546:	4b53      	ldr	r3, [pc, #332]	@ (8006694 <RCCEx_PLL3_Config+0x15c>)
 8006548:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800654a:	f003 0303 	and.w	r3, r3, #3
 800654e:	2b03      	cmp	r3, #3
 8006550:	d101      	bne.n	8006556 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8006552:	2301      	movs	r3, #1
 8006554:	e099      	b.n	800668a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8006556:	4b4f      	ldr	r3, [pc, #316]	@ (8006694 <RCCEx_PLL3_Config+0x15c>)
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	4a4e      	ldr	r2, [pc, #312]	@ (8006694 <RCCEx_PLL3_Config+0x15c>)
 800655c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006560:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006562:	f7fa fc83 	bl	8000e6c <HAL_GetTick>
 8006566:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006568:	e008      	b.n	800657c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800656a:	f7fa fc7f 	bl	8000e6c <HAL_GetTick>
 800656e:	4602      	mov	r2, r0
 8006570:	68bb      	ldr	r3, [r7, #8]
 8006572:	1ad3      	subs	r3, r2, r3
 8006574:	2b02      	cmp	r3, #2
 8006576:	d901      	bls.n	800657c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006578:	2303      	movs	r3, #3
 800657a:	e086      	b.n	800668a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800657c:	4b45      	ldr	r3, [pc, #276]	@ (8006694 <RCCEx_PLL3_Config+0x15c>)
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006584:	2b00      	cmp	r3, #0
 8006586:	d1f0      	bne.n	800656a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8006588:	4b42      	ldr	r3, [pc, #264]	@ (8006694 <RCCEx_PLL3_Config+0x15c>)
 800658a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800658c:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	051b      	lsls	r3, r3, #20
 8006596:	493f      	ldr	r1, [pc, #252]	@ (8006694 <RCCEx_PLL3_Config+0x15c>)
 8006598:	4313      	orrs	r3, r2
 800659a:	628b      	str	r3, [r1, #40]	@ 0x28
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	685b      	ldr	r3, [r3, #4]
 80065a0:	3b01      	subs	r3, #1
 80065a2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	689b      	ldr	r3, [r3, #8]
 80065aa:	3b01      	subs	r3, #1
 80065ac:	025b      	lsls	r3, r3, #9
 80065ae:	b29b      	uxth	r3, r3
 80065b0:	431a      	orrs	r2, r3
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	68db      	ldr	r3, [r3, #12]
 80065b6:	3b01      	subs	r3, #1
 80065b8:	041b      	lsls	r3, r3, #16
 80065ba:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80065be:	431a      	orrs	r2, r3
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	691b      	ldr	r3, [r3, #16]
 80065c4:	3b01      	subs	r3, #1
 80065c6:	061b      	lsls	r3, r3, #24
 80065c8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80065cc:	4931      	ldr	r1, [pc, #196]	@ (8006694 <RCCEx_PLL3_Config+0x15c>)
 80065ce:	4313      	orrs	r3, r2
 80065d0:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80065d2:	4b30      	ldr	r3, [pc, #192]	@ (8006694 <RCCEx_PLL3_Config+0x15c>)
 80065d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065d6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	695b      	ldr	r3, [r3, #20]
 80065de:	492d      	ldr	r1, [pc, #180]	@ (8006694 <RCCEx_PLL3_Config+0x15c>)
 80065e0:	4313      	orrs	r3, r2
 80065e2:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80065e4:	4b2b      	ldr	r3, [pc, #172]	@ (8006694 <RCCEx_PLL3_Config+0x15c>)
 80065e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065e8:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	699b      	ldr	r3, [r3, #24]
 80065f0:	4928      	ldr	r1, [pc, #160]	@ (8006694 <RCCEx_PLL3_Config+0x15c>)
 80065f2:	4313      	orrs	r3, r2
 80065f4:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80065f6:	4b27      	ldr	r3, [pc, #156]	@ (8006694 <RCCEx_PLL3_Config+0x15c>)
 80065f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065fa:	4a26      	ldr	r2, [pc, #152]	@ (8006694 <RCCEx_PLL3_Config+0x15c>)
 80065fc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006600:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8006602:	4b24      	ldr	r3, [pc, #144]	@ (8006694 <RCCEx_PLL3_Config+0x15c>)
 8006604:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006606:	4b24      	ldr	r3, [pc, #144]	@ (8006698 <RCCEx_PLL3_Config+0x160>)
 8006608:	4013      	ands	r3, r2
 800660a:	687a      	ldr	r2, [r7, #4]
 800660c:	69d2      	ldr	r2, [r2, #28]
 800660e:	00d2      	lsls	r2, r2, #3
 8006610:	4920      	ldr	r1, [pc, #128]	@ (8006694 <RCCEx_PLL3_Config+0x15c>)
 8006612:	4313      	orrs	r3, r2
 8006614:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8006616:	4b1f      	ldr	r3, [pc, #124]	@ (8006694 <RCCEx_PLL3_Config+0x15c>)
 8006618:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800661a:	4a1e      	ldr	r2, [pc, #120]	@ (8006694 <RCCEx_PLL3_Config+0x15c>)
 800661c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006620:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8006622:	683b      	ldr	r3, [r7, #0]
 8006624:	2b00      	cmp	r3, #0
 8006626:	d106      	bne.n	8006636 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8006628:	4b1a      	ldr	r3, [pc, #104]	@ (8006694 <RCCEx_PLL3_Config+0x15c>)
 800662a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800662c:	4a19      	ldr	r2, [pc, #100]	@ (8006694 <RCCEx_PLL3_Config+0x15c>)
 800662e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8006632:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006634:	e00f      	b.n	8006656 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8006636:	683b      	ldr	r3, [r7, #0]
 8006638:	2b01      	cmp	r3, #1
 800663a:	d106      	bne.n	800664a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800663c:	4b15      	ldr	r3, [pc, #84]	@ (8006694 <RCCEx_PLL3_Config+0x15c>)
 800663e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006640:	4a14      	ldr	r2, [pc, #80]	@ (8006694 <RCCEx_PLL3_Config+0x15c>)
 8006642:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8006646:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006648:	e005      	b.n	8006656 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800664a:	4b12      	ldr	r3, [pc, #72]	@ (8006694 <RCCEx_PLL3_Config+0x15c>)
 800664c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800664e:	4a11      	ldr	r2, [pc, #68]	@ (8006694 <RCCEx_PLL3_Config+0x15c>)
 8006650:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006654:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8006656:	4b0f      	ldr	r3, [pc, #60]	@ (8006694 <RCCEx_PLL3_Config+0x15c>)
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	4a0e      	ldr	r2, [pc, #56]	@ (8006694 <RCCEx_PLL3_Config+0x15c>)
 800665c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006660:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006662:	f7fa fc03 	bl	8000e6c <HAL_GetTick>
 8006666:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006668:	e008      	b.n	800667c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800666a:	f7fa fbff 	bl	8000e6c <HAL_GetTick>
 800666e:	4602      	mov	r2, r0
 8006670:	68bb      	ldr	r3, [r7, #8]
 8006672:	1ad3      	subs	r3, r2, r3
 8006674:	2b02      	cmp	r3, #2
 8006676:	d901      	bls.n	800667c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006678:	2303      	movs	r3, #3
 800667a:	e006      	b.n	800668a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800667c:	4b05      	ldr	r3, [pc, #20]	@ (8006694 <RCCEx_PLL3_Config+0x15c>)
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006684:	2b00      	cmp	r3, #0
 8006686:	d0f0      	beq.n	800666a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8006688:	7bfb      	ldrb	r3, [r7, #15]
}
 800668a:	4618      	mov	r0, r3
 800668c:	3710      	adds	r7, #16
 800668e:	46bd      	mov	sp, r7
 8006690:	bd80      	pop	{r7, pc}
 8006692:	bf00      	nop
 8006694:	58024400 	.word	0x58024400
 8006698:	ffff0007 	.word	0xffff0007

0800669c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800669c:	b580      	push	{r7, lr}
 800669e:	b082      	sub	sp, #8
 80066a0:	af00      	add	r7, sp, #0
 80066a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d101      	bne.n	80066ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80066aa:	2301      	movs	r3, #1
 80066ac:	e042      	b.n	8006734 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d106      	bne.n	80066c6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	2200      	movs	r2, #0
 80066bc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80066c0:	6878      	ldr	r0, [r7, #4]
 80066c2:	f7fa fa4b 	bl	8000b5c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	2224      	movs	r2, #36	@ 0x24
 80066ca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	681a      	ldr	r2, [r3, #0]
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	f022 0201 	bic.w	r2, r2, #1
 80066dc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d002      	beq.n	80066ec <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80066e6:	6878      	ldr	r0, [r7, #4]
 80066e8:	f001 fa14 	bl	8007b14 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80066ec:	6878      	ldr	r0, [r7, #4]
 80066ee:	f000 fca9 	bl	8007044 <UART_SetConfig>
 80066f2:	4603      	mov	r3, r0
 80066f4:	2b01      	cmp	r3, #1
 80066f6:	d101      	bne.n	80066fc <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80066f8:	2301      	movs	r3, #1
 80066fa:	e01b      	b.n	8006734 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	685a      	ldr	r2, [r3, #4]
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800670a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	689a      	ldr	r2, [r3, #8]
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800671a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	681a      	ldr	r2, [r3, #0]
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	f042 0201 	orr.w	r2, r2, #1
 800672a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800672c:	6878      	ldr	r0, [r7, #4]
 800672e:	f001 fa93 	bl	8007c58 <UART_CheckIdleState>
 8006732:	4603      	mov	r3, r0
}
 8006734:	4618      	mov	r0, r3
 8006736:	3708      	adds	r7, #8
 8006738:	46bd      	mov	sp, r7
 800673a:	bd80      	pop	{r7, pc}

0800673c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800673c:	b580      	push	{r7, lr}
 800673e:	b08a      	sub	sp, #40	@ 0x28
 8006740:	af02      	add	r7, sp, #8
 8006742:	60f8      	str	r0, [r7, #12]
 8006744:	60b9      	str	r1, [r7, #8]
 8006746:	603b      	str	r3, [r7, #0]
 8006748:	4613      	mov	r3, r2
 800674a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006752:	2b20      	cmp	r3, #32
 8006754:	d17b      	bne.n	800684e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8006756:	68bb      	ldr	r3, [r7, #8]
 8006758:	2b00      	cmp	r3, #0
 800675a:	d002      	beq.n	8006762 <HAL_UART_Transmit+0x26>
 800675c:	88fb      	ldrh	r3, [r7, #6]
 800675e:	2b00      	cmp	r3, #0
 8006760:	d101      	bne.n	8006766 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8006762:	2301      	movs	r3, #1
 8006764:	e074      	b.n	8006850 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	2200      	movs	r2, #0
 800676a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	2221      	movs	r2, #33	@ 0x21
 8006772:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006776:	f7fa fb79 	bl	8000e6c <HAL_GetTick>
 800677a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	88fa      	ldrh	r2, [r7, #6]
 8006780:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	88fa      	ldrh	r2, [r7, #6]
 8006788:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	689b      	ldr	r3, [r3, #8]
 8006790:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006794:	d108      	bne.n	80067a8 <HAL_UART_Transmit+0x6c>
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	691b      	ldr	r3, [r3, #16]
 800679a:	2b00      	cmp	r3, #0
 800679c:	d104      	bne.n	80067a8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800679e:	2300      	movs	r3, #0
 80067a0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80067a2:	68bb      	ldr	r3, [r7, #8]
 80067a4:	61bb      	str	r3, [r7, #24]
 80067a6:	e003      	b.n	80067b0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80067a8:	68bb      	ldr	r3, [r7, #8]
 80067aa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80067ac:	2300      	movs	r3, #0
 80067ae:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80067b0:	e030      	b.n	8006814 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80067b2:	683b      	ldr	r3, [r7, #0]
 80067b4:	9300      	str	r3, [sp, #0]
 80067b6:	697b      	ldr	r3, [r7, #20]
 80067b8:	2200      	movs	r2, #0
 80067ba:	2180      	movs	r1, #128	@ 0x80
 80067bc:	68f8      	ldr	r0, [r7, #12]
 80067be:	f001 faf5 	bl	8007dac <UART_WaitOnFlagUntilTimeout>
 80067c2:	4603      	mov	r3, r0
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d005      	beq.n	80067d4 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	2220      	movs	r2, #32
 80067cc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 80067d0:	2303      	movs	r3, #3
 80067d2:	e03d      	b.n	8006850 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80067d4:	69fb      	ldr	r3, [r7, #28]
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d10b      	bne.n	80067f2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80067da:	69bb      	ldr	r3, [r7, #24]
 80067dc:	881b      	ldrh	r3, [r3, #0]
 80067de:	461a      	mov	r2, r3
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80067e8:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80067ea:	69bb      	ldr	r3, [r7, #24]
 80067ec:	3302      	adds	r3, #2
 80067ee:	61bb      	str	r3, [r7, #24]
 80067f0:	e007      	b.n	8006802 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80067f2:	69fb      	ldr	r3, [r7, #28]
 80067f4:	781a      	ldrb	r2, [r3, #0]
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80067fc:	69fb      	ldr	r3, [r7, #28]
 80067fe:	3301      	adds	r3, #1
 8006800:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006808:	b29b      	uxth	r3, r3
 800680a:	3b01      	subs	r3, #1
 800680c:	b29a      	uxth	r2, r3
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800681a:	b29b      	uxth	r3, r3
 800681c:	2b00      	cmp	r3, #0
 800681e:	d1c8      	bne.n	80067b2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006820:	683b      	ldr	r3, [r7, #0]
 8006822:	9300      	str	r3, [sp, #0]
 8006824:	697b      	ldr	r3, [r7, #20]
 8006826:	2200      	movs	r2, #0
 8006828:	2140      	movs	r1, #64	@ 0x40
 800682a:	68f8      	ldr	r0, [r7, #12]
 800682c:	f001 fabe 	bl	8007dac <UART_WaitOnFlagUntilTimeout>
 8006830:	4603      	mov	r3, r0
 8006832:	2b00      	cmp	r3, #0
 8006834:	d005      	beq.n	8006842 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	2220      	movs	r2, #32
 800683a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800683e:	2303      	movs	r3, #3
 8006840:	e006      	b.n	8006850 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	2220      	movs	r2, #32
 8006846:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800684a:	2300      	movs	r3, #0
 800684c:	e000      	b.n	8006850 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800684e:	2302      	movs	r3, #2
  }
}
 8006850:	4618      	mov	r0, r3
 8006852:	3720      	adds	r7, #32
 8006854:	46bd      	mov	sp, r7
 8006856:	bd80      	pop	{r7, pc}

08006858 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006858:	b580      	push	{r7, lr}
 800685a:	b0ba      	sub	sp, #232	@ 0xe8
 800685c:	af00      	add	r7, sp, #0
 800685e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	69db      	ldr	r3, [r3, #28]
 8006866:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	689b      	ldr	r3, [r3, #8]
 800687a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800687e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8006882:	f640 030f 	movw	r3, #2063	@ 0x80f
 8006886:	4013      	ands	r3, r2
 8006888:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800688c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006890:	2b00      	cmp	r3, #0
 8006892:	d11b      	bne.n	80068cc <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006894:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006898:	f003 0320 	and.w	r3, r3, #32
 800689c:	2b00      	cmp	r3, #0
 800689e:	d015      	beq.n	80068cc <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80068a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80068a4:	f003 0320 	and.w	r3, r3, #32
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d105      	bne.n	80068b8 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80068ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80068b0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d009      	beq.n	80068cc <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80068bc:	2b00      	cmp	r3, #0
 80068be:	f000 8393 	beq.w	8006fe8 <HAL_UART_IRQHandler+0x790>
      {
        huart->RxISR(huart);
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80068c6:	6878      	ldr	r0, [r7, #4]
 80068c8:	4798      	blx	r3
      }
      return;
 80068ca:	e38d      	b.n	8006fe8 <HAL_UART_IRQHandler+0x790>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80068cc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	f000 8123 	beq.w	8006b1c <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80068d6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80068da:	4b8d      	ldr	r3, [pc, #564]	@ (8006b10 <HAL_UART_IRQHandler+0x2b8>)
 80068dc:	4013      	ands	r3, r2
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d106      	bne.n	80068f0 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80068e2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80068e6:	4b8b      	ldr	r3, [pc, #556]	@ (8006b14 <HAL_UART_IRQHandler+0x2bc>)
 80068e8:	4013      	ands	r3, r2
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	f000 8116 	beq.w	8006b1c <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80068f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80068f4:	f003 0301 	and.w	r3, r3, #1
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d011      	beq.n	8006920 <HAL_UART_IRQHandler+0xc8>
 80068fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006900:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006904:	2b00      	cmp	r3, #0
 8006906:	d00b      	beq.n	8006920 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	2201      	movs	r2, #1
 800690e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006916:	f043 0201 	orr.w	r2, r3, #1
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006920:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006924:	f003 0302 	and.w	r3, r3, #2
 8006928:	2b00      	cmp	r3, #0
 800692a:	d011      	beq.n	8006950 <HAL_UART_IRQHandler+0xf8>
 800692c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006930:	f003 0301 	and.w	r3, r3, #1
 8006934:	2b00      	cmp	r3, #0
 8006936:	d00b      	beq.n	8006950 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	2202      	movs	r2, #2
 800693e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006946:	f043 0204 	orr.w	r2, r3, #4
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006950:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006954:	f003 0304 	and.w	r3, r3, #4
 8006958:	2b00      	cmp	r3, #0
 800695a:	d011      	beq.n	8006980 <HAL_UART_IRQHandler+0x128>
 800695c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006960:	f003 0301 	and.w	r3, r3, #1
 8006964:	2b00      	cmp	r3, #0
 8006966:	d00b      	beq.n	8006980 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	2204      	movs	r2, #4
 800696e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006976:	f043 0202 	orr.w	r2, r3, #2
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006980:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006984:	f003 0308 	and.w	r3, r3, #8
 8006988:	2b00      	cmp	r3, #0
 800698a:	d017      	beq.n	80069bc <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800698c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006990:	f003 0320 	and.w	r3, r3, #32
 8006994:	2b00      	cmp	r3, #0
 8006996:	d105      	bne.n	80069a4 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8006998:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800699c:	4b5c      	ldr	r3, [pc, #368]	@ (8006b10 <HAL_UART_IRQHandler+0x2b8>)
 800699e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d00b      	beq.n	80069bc <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	2208      	movs	r2, #8
 80069aa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80069b2:	f043 0208 	orr.w	r2, r3, #8
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80069bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80069c0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d012      	beq.n	80069ee <HAL_UART_IRQHandler+0x196>
 80069c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80069cc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d00c      	beq.n	80069ee <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80069dc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80069e4:	f043 0220 	orr.w	r2, r3, #32
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	f000 82f9 	beq.w	8006fec <HAL_UART_IRQHandler+0x794>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80069fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80069fe:	f003 0320 	and.w	r3, r3, #32
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d013      	beq.n	8006a2e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006a06:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006a0a:	f003 0320 	and.w	r3, r3, #32
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d105      	bne.n	8006a1e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006a12:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006a16:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d007      	beq.n	8006a2e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d003      	beq.n	8006a2e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006a2a:	6878      	ldr	r0, [r7, #4]
 8006a2c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006a34:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	689b      	ldr	r3, [r3, #8]
 8006a3e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a42:	2b40      	cmp	r3, #64	@ 0x40
 8006a44:	d005      	beq.n	8006a52 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006a46:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006a4a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d054      	beq.n	8006afc <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006a52:	6878      	ldr	r0, [r7, #4]
 8006a54:	f001 fa18 	bl	8007e88 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	689b      	ldr	r3, [r3, #8]
 8006a5e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a62:	2b40      	cmp	r3, #64	@ 0x40
 8006a64:	d146      	bne.n	8006af4 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	3308      	adds	r3, #8
 8006a6c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a70:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006a74:	e853 3f00 	ldrex	r3, [r3]
 8006a78:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006a7c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006a80:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006a84:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	3308      	adds	r3, #8
 8006a8e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006a92:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8006a96:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a9a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8006a9e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8006aa2:	e841 2300 	strex	r3, r2, [r1]
 8006aa6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8006aaa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d1d9      	bne.n	8006a66 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d017      	beq.n	8006aec <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006ac2:	4a15      	ldr	r2, [pc, #84]	@ (8006b18 <HAL_UART_IRQHandler+0x2c0>)
 8006ac4:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006acc:	4618      	mov	r0, r3
 8006ace:	f7fb fa0b 	bl	8001ee8 <HAL_DMA_Abort_IT>
 8006ad2:	4603      	mov	r3, r0
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d019      	beq.n	8006b0c <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006ade:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006ae0:	687a      	ldr	r2, [r7, #4]
 8006ae2:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8006ae6:	4610      	mov	r0, r2
 8006ae8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006aea:	e00f      	b.n	8006b0c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006aec:	6878      	ldr	r0, [r7, #4]
 8006aee:	f000 fa93 	bl	8007018 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006af2:	e00b      	b.n	8006b0c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006af4:	6878      	ldr	r0, [r7, #4]
 8006af6:	f000 fa8f 	bl	8007018 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006afa:	e007      	b.n	8006b0c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006afc:	6878      	ldr	r0, [r7, #4]
 8006afe:	f000 fa8b 	bl	8007018 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	2200      	movs	r2, #0
 8006b06:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8006b0a:	e26f      	b.n	8006fec <HAL_UART_IRQHandler+0x794>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b0c:	bf00      	nop
    return;
 8006b0e:	e26d      	b.n	8006fec <HAL_UART_IRQHandler+0x794>
 8006b10:	10000001 	.word	0x10000001
 8006b14:	04000120 	.word	0x04000120
 8006b18:	08007f55 	.word	0x08007f55

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006b20:	2b01      	cmp	r3, #1
 8006b22:	f040 8203 	bne.w	8006f2c <HAL_UART_IRQHandler+0x6d4>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006b26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006b2a:	f003 0310 	and.w	r3, r3, #16
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	f000 81fc 	beq.w	8006f2c <HAL_UART_IRQHandler+0x6d4>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006b34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006b38:	f003 0310 	and.w	r3, r3, #16
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	f000 81f5 	beq.w	8006f2c <HAL_UART_IRQHandler+0x6d4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	2210      	movs	r2, #16
 8006b48:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	689b      	ldr	r3, [r3, #8]
 8006b50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b54:	2b40      	cmp	r3, #64	@ 0x40
 8006b56:	f040 816d 	bne.w	8006e34 <HAL_UART_IRQHandler+0x5dc>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	4aa4      	ldr	r2, [pc, #656]	@ (8006df4 <HAL_UART_IRQHandler+0x59c>)
 8006b64:	4293      	cmp	r3, r2
 8006b66:	d068      	beq.n	8006c3a <HAL_UART_IRQHandler+0x3e2>
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	4aa1      	ldr	r2, [pc, #644]	@ (8006df8 <HAL_UART_IRQHandler+0x5a0>)
 8006b72:	4293      	cmp	r3, r2
 8006b74:	d061      	beq.n	8006c3a <HAL_UART_IRQHandler+0x3e2>
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	4a9f      	ldr	r2, [pc, #636]	@ (8006dfc <HAL_UART_IRQHandler+0x5a4>)
 8006b80:	4293      	cmp	r3, r2
 8006b82:	d05a      	beq.n	8006c3a <HAL_UART_IRQHandler+0x3e2>
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	4a9c      	ldr	r2, [pc, #624]	@ (8006e00 <HAL_UART_IRQHandler+0x5a8>)
 8006b8e:	4293      	cmp	r3, r2
 8006b90:	d053      	beq.n	8006c3a <HAL_UART_IRQHandler+0x3e2>
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	4a9a      	ldr	r2, [pc, #616]	@ (8006e04 <HAL_UART_IRQHandler+0x5ac>)
 8006b9c:	4293      	cmp	r3, r2
 8006b9e:	d04c      	beq.n	8006c3a <HAL_UART_IRQHandler+0x3e2>
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	4a97      	ldr	r2, [pc, #604]	@ (8006e08 <HAL_UART_IRQHandler+0x5b0>)
 8006baa:	4293      	cmp	r3, r2
 8006bac:	d045      	beq.n	8006c3a <HAL_UART_IRQHandler+0x3e2>
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	4a95      	ldr	r2, [pc, #596]	@ (8006e0c <HAL_UART_IRQHandler+0x5b4>)
 8006bb8:	4293      	cmp	r3, r2
 8006bba:	d03e      	beq.n	8006c3a <HAL_UART_IRQHandler+0x3e2>
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	4a92      	ldr	r2, [pc, #584]	@ (8006e10 <HAL_UART_IRQHandler+0x5b8>)
 8006bc6:	4293      	cmp	r3, r2
 8006bc8:	d037      	beq.n	8006c3a <HAL_UART_IRQHandler+0x3e2>
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	4a90      	ldr	r2, [pc, #576]	@ (8006e14 <HAL_UART_IRQHandler+0x5bc>)
 8006bd4:	4293      	cmp	r3, r2
 8006bd6:	d030      	beq.n	8006c3a <HAL_UART_IRQHandler+0x3e2>
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	4a8d      	ldr	r2, [pc, #564]	@ (8006e18 <HAL_UART_IRQHandler+0x5c0>)
 8006be2:	4293      	cmp	r3, r2
 8006be4:	d029      	beq.n	8006c3a <HAL_UART_IRQHandler+0x3e2>
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	4a8b      	ldr	r2, [pc, #556]	@ (8006e1c <HAL_UART_IRQHandler+0x5c4>)
 8006bf0:	4293      	cmp	r3, r2
 8006bf2:	d022      	beq.n	8006c3a <HAL_UART_IRQHandler+0x3e2>
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	4a88      	ldr	r2, [pc, #544]	@ (8006e20 <HAL_UART_IRQHandler+0x5c8>)
 8006bfe:	4293      	cmp	r3, r2
 8006c00:	d01b      	beq.n	8006c3a <HAL_UART_IRQHandler+0x3e2>
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	4a86      	ldr	r2, [pc, #536]	@ (8006e24 <HAL_UART_IRQHandler+0x5cc>)
 8006c0c:	4293      	cmp	r3, r2
 8006c0e:	d014      	beq.n	8006c3a <HAL_UART_IRQHandler+0x3e2>
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	4a83      	ldr	r2, [pc, #524]	@ (8006e28 <HAL_UART_IRQHandler+0x5d0>)
 8006c1a:	4293      	cmp	r3, r2
 8006c1c:	d00d      	beq.n	8006c3a <HAL_UART_IRQHandler+0x3e2>
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	4a81      	ldr	r2, [pc, #516]	@ (8006e2c <HAL_UART_IRQHandler+0x5d4>)
 8006c28:	4293      	cmp	r3, r2
 8006c2a:	d006      	beq.n	8006c3a <HAL_UART_IRQHandler+0x3e2>
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	4a7e      	ldr	r2, [pc, #504]	@ (8006e30 <HAL_UART_IRQHandler+0x5d8>)
 8006c36:	4293      	cmp	r3, r2
 8006c38:	d106      	bne.n	8006c48 <HAL_UART_IRQHandler+0x3f0>
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	685b      	ldr	r3, [r3, #4]
 8006c44:	b29b      	uxth	r3, r3
 8006c46:	e005      	b.n	8006c54 <HAL_UART_IRQHandler+0x3fc>
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	685b      	ldr	r3, [r3, #4]
 8006c52:	b29b      	uxth	r3, r3
 8006c54:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006c58:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	f000 80ad 	beq.w	8006dbc <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006c68:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006c6c:	429a      	cmp	r2, r3
 8006c6e:	f080 80a5 	bcs.w	8006dbc <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006c78:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006c82:	69db      	ldr	r3, [r3, #28]
 8006c84:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006c88:	f000 8087 	beq.w	8006d9a <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c94:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006c98:	e853 3f00 	ldrex	r3, [r3]
 8006c9c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006ca0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006ca4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006ca8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	461a      	mov	r2, r3
 8006cb2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006cb6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006cba:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cbe:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006cc2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006cc6:	e841 2300 	strex	r3, r2, [r1]
 8006cca:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8006cce:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d1da      	bne.n	8006c8c <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	3308      	adds	r3, #8
 8006cdc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cde:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006ce0:	e853 3f00 	ldrex	r3, [r3]
 8006ce4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006ce6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006ce8:	f023 0301 	bic.w	r3, r3, #1
 8006cec:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	3308      	adds	r3, #8
 8006cf6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006cfa:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006cfe:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d00:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006d02:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006d06:	e841 2300 	strex	r3, r2, [r1]
 8006d0a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006d0c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d1e1      	bne.n	8006cd6 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	3308      	adds	r3, #8
 8006d18:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d1a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006d1c:	e853 3f00 	ldrex	r3, [r3]
 8006d20:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006d22:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006d24:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006d28:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	3308      	adds	r3, #8
 8006d32:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006d36:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006d38:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d3a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006d3c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006d3e:	e841 2300 	strex	r3, r2, [r1]
 8006d42:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006d44:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d1e3      	bne.n	8006d12 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	2220      	movs	r2, #32
 8006d4e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	2200      	movs	r2, #0
 8006d56:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d5e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006d60:	e853 3f00 	ldrex	r3, [r3]
 8006d64:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006d66:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006d68:	f023 0310 	bic.w	r3, r3, #16
 8006d6c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	461a      	mov	r2, r3
 8006d76:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006d7a:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006d7c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d7e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006d80:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006d82:	e841 2300 	strex	r3, r2, [r1]
 8006d86:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006d88:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d1e4      	bne.n	8006d58 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006d94:	4618      	mov	r0, r3
 8006d96:	f7fa fd89 	bl	80018ac <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	2202      	movs	r2, #2
 8006d9e:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006dac:	b29b      	uxth	r3, r3
 8006dae:	1ad3      	subs	r3, r2, r3
 8006db0:	b29b      	uxth	r3, r3
 8006db2:	4619      	mov	r1, r3
 8006db4:	6878      	ldr	r0, [r7, #4]
 8006db6:	f000 f939 	bl	800702c <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8006dba:	e119      	b.n	8006ff0 <HAL_UART_IRQHandler+0x798>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006dc2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006dc6:	429a      	cmp	r2, r3
 8006dc8:	f040 8112 	bne.w	8006ff0 <HAL_UART_IRQHandler+0x798>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006dd2:	69db      	ldr	r3, [r3, #28]
 8006dd4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006dd8:	f040 810a 	bne.w	8006ff0 <HAL_UART_IRQHandler+0x798>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	2202      	movs	r2, #2
 8006de0:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006de8:	4619      	mov	r1, r3
 8006dea:	6878      	ldr	r0, [r7, #4]
 8006dec:	f000 f91e 	bl	800702c <HAL_UARTEx_RxEventCallback>
      return;
 8006df0:	e0fe      	b.n	8006ff0 <HAL_UART_IRQHandler+0x798>
 8006df2:	bf00      	nop
 8006df4:	40020010 	.word	0x40020010
 8006df8:	40020028 	.word	0x40020028
 8006dfc:	40020040 	.word	0x40020040
 8006e00:	40020058 	.word	0x40020058
 8006e04:	40020070 	.word	0x40020070
 8006e08:	40020088 	.word	0x40020088
 8006e0c:	400200a0 	.word	0x400200a0
 8006e10:	400200b8 	.word	0x400200b8
 8006e14:	40020410 	.word	0x40020410
 8006e18:	40020428 	.word	0x40020428
 8006e1c:	40020440 	.word	0x40020440
 8006e20:	40020458 	.word	0x40020458
 8006e24:	40020470 	.word	0x40020470
 8006e28:	40020488 	.word	0x40020488
 8006e2c:	400204a0 	.word	0x400204a0
 8006e30:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006e40:	b29b      	uxth	r3, r3
 8006e42:	1ad3      	subs	r3, r2, r3
 8006e44:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006e4e:	b29b      	uxth	r3, r3
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	f000 80cf 	beq.w	8006ff4 <HAL_UART_IRQHandler+0x79c>
          && (nb_rx_data > 0U))
 8006e56:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	f000 80ca 	beq.w	8006ff4 <HAL_UART_IRQHandler+0x79c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e68:	e853 3f00 	ldrex	r3, [r3]
 8006e6c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006e6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e70:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006e74:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	461a      	mov	r2, r3
 8006e7e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006e82:	647b      	str	r3, [r7, #68]	@ 0x44
 8006e84:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e86:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006e88:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006e8a:	e841 2300 	strex	r3, r2, [r1]
 8006e8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006e90:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d1e4      	bne.n	8006e60 <HAL_UART_IRQHandler+0x608>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	3308      	adds	r3, #8
 8006e9c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ea0:	e853 3f00 	ldrex	r3, [r3]
 8006ea4:	623b      	str	r3, [r7, #32]
   return(result);
 8006ea6:	6a3a      	ldr	r2, [r7, #32]
 8006ea8:	4b55      	ldr	r3, [pc, #340]	@ (8007000 <HAL_UART_IRQHandler+0x7a8>)
 8006eaa:	4013      	ands	r3, r2
 8006eac:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	3308      	adds	r3, #8
 8006eb6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006eba:	633a      	str	r2, [r7, #48]	@ 0x30
 8006ebc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ebe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006ec0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006ec2:	e841 2300 	strex	r3, r2, [r1]
 8006ec6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006ec8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d1e3      	bne.n	8006e96 <HAL_UART_IRQHandler+0x63e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	2220      	movs	r2, #32
 8006ed2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	2200      	movs	r2, #0
 8006eda:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	2200      	movs	r2, #0
 8006ee0:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ee8:	693b      	ldr	r3, [r7, #16]
 8006eea:	e853 3f00 	ldrex	r3, [r3]
 8006eee:	60fb      	str	r3, [r7, #12]
   return(result);
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	f023 0310 	bic.w	r3, r3, #16
 8006ef6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	461a      	mov	r2, r3
 8006f00:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8006f04:	61fb      	str	r3, [r7, #28]
 8006f06:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f08:	69b9      	ldr	r1, [r7, #24]
 8006f0a:	69fa      	ldr	r2, [r7, #28]
 8006f0c:	e841 2300 	strex	r3, r2, [r1]
 8006f10:	617b      	str	r3, [r7, #20]
   return(result);
 8006f12:	697b      	ldr	r3, [r7, #20]
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d1e4      	bne.n	8006ee2 <HAL_UART_IRQHandler+0x68a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	2202      	movs	r2, #2
 8006f1c:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006f1e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006f22:	4619      	mov	r1, r3
 8006f24:	6878      	ldr	r0, [r7, #4]
 8006f26:	f000 f881 	bl	800702c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006f2a:	e063      	b.n	8006ff4 <HAL_UART_IRQHandler+0x79c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006f2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006f30:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d00e      	beq.n	8006f56 <HAL_UART_IRQHandler+0x6fe>
 8006f38:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006f3c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d008      	beq.n	8006f56 <HAL_UART_IRQHandler+0x6fe>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8006f4c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006f4e:	6878      	ldr	r0, [r7, #4]
 8006f50:	f001 f83d 	bl	8007fce <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006f54:	e051      	b.n	8006ffa <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8006f56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006f5a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d014      	beq.n	8006f8c <HAL_UART_IRQHandler+0x734>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8006f62:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006f66:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d105      	bne.n	8006f7a <HAL_UART_IRQHandler+0x722>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8006f6e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006f72:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d008      	beq.n	8006f8c <HAL_UART_IRQHandler+0x734>
  {
    if (huart->TxISR != NULL)
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d03a      	beq.n	8006ff8 <HAL_UART_IRQHandler+0x7a0>
    {
      huart->TxISR(huart);
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006f86:	6878      	ldr	r0, [r7, #4]
 8006f88:	4798      	blx	r3
    }
    return;
 8006f8a:	e035      	b.n	8006ff8 <HAL_UART_IRQHandler+0x7a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006f8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006f90:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d009      	beq.n	8006fac <HAL_UART_IRQHandler+0x754>
 8006f98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006f9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d003      	beq.n	8006fac <HAL_UART_IRQHandler+0x754>
  {
    UART_EndTransmit_IT(huart);
 8006fa4:	6878      	ldr	r0, [r7, #4]
 8006fa6:	f000 ffe7 	bl	8007f78 <UART_EndTransmit_IT>
    return;
 8006faa:	e026      	b.n	8006ffa <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8006fac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006fb0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d009      	beq.n	8006fcc <HAL_UART_IRQHandler+0x774>
 8006fb8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006fbc:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d003      	beq.n	8006fcc <HAL_UART_IRQHandler+0x774>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8006fc4:	6878      	ldr	r0, [r7, #4]
 8006fc6:	f001 f816 	bl	8007ff6 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006fca:	e016      	b.n	8006ffa <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8006fcc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006fd0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d010      	beq.n	8006ffa <HAL_UART_IRQHandler+0x7a2>
 8006fd8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	da0c      	bge.n	8006ffa <HAL_UART_IRQHandler+0x7a2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8006fe0:	6878      	ldr	r0, [r7, #4]
 8006fe2:	f000 fffe 	bl	8007fe2 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006fe6:	e008      	b.n	8006ffa <HAL_UART_IRQHandler+0x7a2>
      return;
 8006fe8:	bf00      	nop
 8006fea:	e006      	b.n	8006ffa <HAL_UART_IRQHandler+0x7a2>
    return;
 8006fec:	bf00      	nop
 8006fee:	e004      	b.n	8006ffa <HAL_UART_IRQHandler+0x7a2>
      return;
 8006ff0:	bf00      	nop
 8006ff2:	e002      	b.n	8006ffa <HAL_UART_IRQHandler+0x7a2>
      return;
 8006ff4:	bf00      	nop
 8006ff6:	e000      	b.n	8006ffa <HAL_UART_IRQHandler+0x7a2>
    return;
 8006ff8:	bf00      	nop
  }
}
 8006ffa:	37e8      	adds	r7, #232	@ 0xe8
 8006ffc:	46bd      	mov	sp, r7
 8006ffe:	bd80      	pop	{r7, pc}
 8007000:	effffffe 	.word	0xeffffffe

08007004 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007004:	b480      	push	{r7}
 8007006:	b083      	sub	sp, #12
 8007008:	af00      	add	r7, sp, #0
 800700a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800700c:	bf00      	nop
 800700e:	370c      	adds	r7, #12
 8007010:	46bd      	mov	sp, r7
 8007012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007016:	4770      	bx	lr

08007018 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007018:	b480      	push	{r7}
 800701a:	b083      	sub	sp, #12
 800701c:	af00      	add	r7, sp, #0
 800701e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007020:	bf00      	nop
 8007022:	370c      	adds	r7, #12
 8007024:	46bd      	mov	sp, r7
 8007026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800702a:	4770      	bx	lr

0800702c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800702c:	b480      	push	{r7}
 800702e:	b083      	sub	sp, #12
 8007030:	af00      	add	r7, sp, #0
 8007032:	6078      	str	r0, [r7, #4]
 8007034:	460b      	mov	r3, r1
 8007036:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007038:	bf00      	nop
 800703a:	370c      	adds	r7, #12
 800703c:	46bd      	mov	sp, r7
 800703e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007042:	4770      	bx	lr

08007044 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007044:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007048:	b092      	sub	sp, #72	@ 0x48
 800704a:	af00      	add	r7, sp, #0
 800704c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800704e:	2300      	movs	r3, #0
 8007050:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007054:	697b      	ldr	r3, [r7, #20]
 8007056:	689a      	ldr	r2, [r3, #8]
 8007058:	697b      	ldr	r3, [r7, #20]
 800705a:	691b      	ldr	r3, [r3, #16]
 800705c:	431a      	orrs	r2, r3
 800705e:	697b      	ldr	r3, [r7, #20]
 8007060:	695b      	ldr	r3, [r3, #20]
 8007062:	431a      	orrs	r2, r3
 8007064:	697b      	ldr	r3, [r7, #20]
 8007066:	69db      	ldr	r3, [r3, #28]
 8007068:	4313      	orrs	r3, r2
 800706a:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800706c:	697b      	ldr	r3, [r7, #20]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	681a      	ldr	r2, [r3, #0]
 8007072:	4bbe      	ldr	r3, [pc, #760]	@ (800736c <UART_SetConfig+0x328>)
 8007074:	4013      	ands	r3, r2
 8007076:	697a      	ldr	r2, [r7, #20]
 8007078:	6812      	ldr	r2, [r2, #0]
 800707a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800707c:	430b      	orrs	r3, r1
 800707e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007080:	697b      	ldr	r3, [r7, #20]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	685b      	ldr	r3, [r3, #4]
 8007086:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800708a:	697b      	ldr	r3, [r7, #20]
 800708c:	68da      	ldr	r2, [r3, #12]
 800708e:	697b      	ldr	r3, [r7, #20]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	430a      	orrs	r2, r1
 8007094:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007096:	697b      	ldr	r3, [r7, #20]
 8007098:	699b      	ldr	r3, [r3, #24]
 800709a:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800709c:	697b      	ldr	r3, [r7, #20]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	4ab3      	ldr	r2, [pc, #716]	@ (8007370 <UART_SetConfig+0x32c>)
 80070a2:	4293      	cmp	r3, r2
 80070a4:	d004      	beq.n	80070b0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80070a6:	697b      	ldr	r3, [r7, #20]
 80070a8:	6a1b      	ldr	r3, [r3, #32]
 80070aa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80070ac:	4313      	orrs	r3, r2
 80070ae:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80070b0:	697b      	ldr	r3, [r7, #20]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	689a      	ldr	r2, [r3, #8]
 80070b6:	4baf      	ldr	r3, [pc, #700]	@ (8007374 <UART_SetConfig+0x330>)
 80070b8:	4013      	ands	r3, r2
 80070ba:	697a      	ldr	r2, [r7, #20]
 80070bc:	6812      	ldr	r2, [r2, #0]
 80070be:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80070c0:	430b      	orrs	r3, r1
 80070c2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80070c4:	697b      	ldr	r3, [r7, #20]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070ca:	f023 010f 	bic.w	r1, r3, #15
 80070ce:	697b      	ldr	r3, [r7, #20]
 80070d0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80070d2:	697b      	ldr	r3, [r7, #20]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	430a      	orrs	r2, r1
 80070d8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80070da:	697b      	ldr	r3, [r7, #20]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	4aa6      	ldr	r2, [pc, #664]	@ (8007378 <UART_SetConfig+0x334>)
 80070e0:	4293      	cmp	r3, r2
 80070e2:	d177      	bne.n	80071d4 <UART_SetConfig+0x190>
 80070e4:	4ba5      	ldr	r3, [pc, #660]	@ (800737c <UART_SetConfig+0x338>)
 80070e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80070e8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80070ec:	2b28      	cmp	r3, #40	@ 0x28
 80070ee:	d86d      	bhi.n	80071cc <UART_SetConfig+0x188>
 80070f0:	a201      	add	r2, pc, #4	@ (adr r2, 80070f8 <UART_SetConfig+0xb4>)
 80070f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070f6:	bf00      	nop
 80070f8:	0800719d 	.word	0x0800719d
 80070fc:	080071cd 	.word	0x080071cd
 8007100:	080071cd 	.word	0x080071cd
 8007104:	080071cd 	.word	0x080071cd
 8007108:	080071cd 	.word	0x080071cd
 800710c:	080071cd 	.word	0x080071cd
 8007110:	080071cd 	.word	0x080071cd
 8007114:	080071cd 	.word	0x080071cd
 8007118:	080071a5 	.word	0x080071a5
 800711c:	080071cd 	.word	0x080071cd
 8007120:	080071cd 	.word	0x080071cd
 8007124:	080071cd 	.word	0x080071cd
 8007128:	080071cd 	.word	0x080071cd
 800712c:	080071cd 	.word	0x080071cd
 8007130:	080071cd 	.word	0x080071cd
 8007134:	080071cd 	.word	0x080071cd
 8007138:	080071ad 	.word	0x080071ad
 800713c:	080071cd 	.word	0x080071cd
 8007140:	080071cd 	.word	0x080071cd
 8007144:	080071cd 	.word	0x080071cd
 8007148:	080071cd 	.word	0x080071cd
 800714c:	080071cd 	.word	0x080071cd
 8007150:	080071cd 	.word	0x080071cd
 8007154:	080071cd 	.word	0x080071cd
 8007158:	080071b5 	.word	0x080071b5
 800715c:	080071cd 	.word	0x080071cd
 8007160:	080071cd 	.word	0x080071cd
 8007164:	080071cd 	.word	0x080071cd
 8007168:	080071cd 	.word	0x080071cd
 800716c:	080071cd 	.word	0x080071cd
 8007170:	080071cd 	.word	0x080071cd
 8007174:	080071cd 	.word	0x080071cd
 8007178:	080071bd 	.word	0x080071bd
 800717c:	080071cd 	.word	0x080071cd
 8007180:	080071cd 	.word	0x080071cd
 8007184:	080071cd 	.word	0x080071cd
 8007188:	080071cd 	.word	0x080071cd
 800718c:	080071cd 	.word	0x080071cd
 8007190:	080071cd 	.word	0x080071cd
 8007194:	080071cd 	.word	0x080071cd
 8007198:	080071c5 	.word	0x080071c5
 800719c:	2301      	movs	r3, #1
 800719e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80071a2:	e222      	b.n	80075ea <UART_SetConfig+0x5a6>
 80071a4:	2304      	movs	r3, #4
 80071a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80071aa:	e21e      	b.n	80075ea <UART_SetConfig+0x5a6>
 80071ac:	2308      	movs	r3, #8
 80071ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80071b2:	e21a      	b.n	80075ea <UART_SetConfig+0x5a6>
 80071b4:	2310      	movs	r3, #16
 80071b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80071ba:	e216      	b.n	80075ea <UART_SetConfig+0x5a6>
 80071bc:	2320      	movs	r3, #32
 80071be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80071c2:	e212      	b.n	80075ea <UART_SetConfig+0x5a6>
 80071c4:	2340      	movs	r3, #64	@ 0x40
 80071c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80071ca:	e20e      	b.n	80075ea <UART_SetConfig+0x5a6>
 80071cc:	2380      	movs	r3, #128	@ 0x80
 80071ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80071d2:	e20a      	b.n	80075ea <UART_SetConfig+0x5a6>
 80071d4:	697b      	ldr	r3, [r7, #20]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	4a69      	ldr	r2, [pc, #420]	@ (8007380 <UART_SetConfig+0x33c>)
 80071da:	4293      	cmp	r3, r2
 80071dc:	d130      	bne.n	8007240 <UART_SetConfig+0x1fc>
 80071de:	4b67      	ldr	r3, [pc, #412]	@ (800737c <UART_SetConfig+0x338>)
 80071e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80071e2:	f003 0307 	and.w	r3, r3, #7
 80071e6:	2b05      	cmp	r3, #5
 80071e8:	d826      	bhi.n	8007238 <UART_SetConfig+0x1f4>
 80071ea:	a201      	add	r2, pc, #4	@ (adr r2, 80071f0 <UART_SetConfig+0x1ac>)
 80071ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071f0:	08007209 	.word	0x08007209
 80071f4:	08007211 	.word	0x08007211
 80071f8:	08007219 	.word	0x08007219
 80071fc:	08007221 	.word	0x08007221
 8007200:	08007229 	.word	0x08007229
 8007204:	08007231 	.word	0x08007231
 8007208:	2300      	movs	r3, #0
 800720a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800720e:	e1ec      	b.n	80075ea <UART_SetConfig+0x5a6>
 8007210:	2304      	movs	r3, #4
 8007212:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007216:	e1e8      	b.n	80075ea <UART_SetConfig+0x5a6>
 8007218:	2308      	movs	r3, #8
 800721a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800721e:	e1e4      	b.n	80075ea <UART_SetConfig+0x5a6>
 8007220:	2310      	movs	r3, #16
 8007222:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007226:	e1e0      	b.n	80075ea <UART_SetConfig+0x5a6>
 8007228:	2320      	movs	r3, #32
 800722a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800722e:	e1dc      	b.n	80075ea <UART_SetConfig+0x5a6>
 8007230:	2340      	movs	r3, #64	@ 0x40
 8007232:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007236:	e1d8      	b.n	80075ea <UART_SetConfig+0x5a6>
 8007238:	2380      	movs	r3, #128	@ 0x80
 800723a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800723e:	e1d4      	b.n	80075ea <UART_SetConfig+0x5a6>
 8007240:	697b      	ldr	r3, [r7, #20]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	4a4f      	ldr	r2, [pc, #316]	@ (8007384 <UART_SetConfig+0x340>)
 8007246:	4293      	cmp	r3, r2
 8007248:	d130      	bne.n	80072ac <UART_SetConfig+0x268>
 800724a:	4b4c      	ldr	r3, [pc, #304]	@ (800737c <UART_SetConfig+0x338>)
 800724c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800724e:	f003 0307 	and.w	r3, r3, #7
 8007252:	2b05      	cmp	r3, #5
 8007254:	d826      	bhi.n	80072a4 <UART_SetConfig+0x260>
 8007256:	a201      	add	r2, pc, #4	@ (adr r2, 800725c <UART_SetConfig+0x218>)
 8007258:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800725c:	08007275 	.word	0x08007275
 8007260:	0800727d 	.word	0x0800727d
 8007264:	08007285 	.word	0x08007285
 8007268:	0800728d 	.word	0x0800728d
 800726c:	08007295 	.word	0x08007295
 8007270:	0800729d 	.word	0x0800729d
 8007274:	2300      	movs	r3, #0
 8007276:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800727a:	e1b6      	b.n	80075ea <UART_SetConfig+0x5a6>
 800727c:	2304      	movs	r3, #4
 800727e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007282:	e1b2      	b.n	80075ea <UART_SetConfig+0x5a6>
 8007284:	2308      	movs	r3, #8
 8007286:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800728a:	e1ae      	b.n	80075ea <UART_SetConfig+0x5a6>
 800728c:	2310      	movs	r3, #16
 800728e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007292:	e1aa      	b.n	80075ea <UART_SetConfig+0x5a6>
 8007294:	2320      	movs	r3, #32
 8007296:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800729a:	e1a6      	b.n	80075ea <UART_SetConfig+0x5a6>
 800729c:	2340      	movs	r3, #64	@ 0x40
 800729e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80072a2:	e1a2      	b.n	80075ea <UART_SetConfig+0x5a6>
 80072a4:	2380      	movs	r3, #128	@ 0x80
 80072a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80072aa:	e19e      	b.n	80075ea <UART_SetConfig+0x5a6>
 80072ac:	697b      	ldr	r3, [r7, #20]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	4a35      	ldr	r2, [pc, #212]	@ (8007388 <UART_SetConfig+0x344>)
 80072b2:	4293      	cmp	r3, r2
 80072b4:	d130      	bne.n	8007318 <UART_SetConfig+0x2d4>
 80072b6:	4b31      	ldr	r3, [pc, #196]	@ (800737c <UART_SetConfig+0x338>)
 80072b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80072ba:	f003 0307 	and.w	r3, r3, #7
 80072be:	2b05      	cmp	r3, #5
 80072c0:	d826      	bhi.n	8007310 <UART_SetConfig+0x2cc>
 80072c2:	a201      	add	r2, pc, #4	@ (adr r2, 80072c8 <UART_SetConfig+0x284>)
 80072c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072c8:	080072e1 	.word	0x080072e1
 80072cc:	080072e9 	.word	0x080072e9
 80072d0:	080072f1 	.word	0x080072f1
 80072d4:	080072f9 	.word	0x080072f9
 80072d8:	08007301 	.word	0x08007301
 80072dc:	08007309 	.word	0x08007309
 80072e0:	2300      	movs	r3, #0
 80072e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80072e6:	e180      	b.n	80075ea <UART_SetConfig+0x5a6>
 80072e8:	2304      	movs	r3, #4
 80072ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80072ee:	e17c      	b.n	80075ea <UART_SetConfig+0x5a6>
 80072f0:	2308      	movs	r3, #8
 80072f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80072f6:	e178      	b.n	80075ea <UART_SetConfig+0x5a6>
 80072f8:	2310      	movs	r3, #16
 80072fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80072fe:	e174      	b.n	80075ea <UART_SetConfig+0x5a6>
 8007300:	2320      	movs	r3, #32
 8007302:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007306:	e170      	b.n	80075ea <UART_SetConfig+0x5a6>
 8007308:	2340      	movs	r3, #64	@ 0x40
 800730a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800730e:	e16c      	b.n	80075ea <UART_SetConfig+0x5a6>
 8007310:	2380      	movs	r3, #128	@ 0x80
 8007312:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007316:	e168      	b.n	80075ea <UART_SetConfig+0x5a6>
 8007318:	697b      	ldr	r3, [r7, #20]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	4a1b      	ldr	r2, [pc, #108]	@ (800738c <UART_SetConfig+0x348>)
 800731e:	4293      	cmp	r3, r2
 8007320:	d142      	bne.n	80073a8 <UART_SetConfig+0x364>
 8007322:	4b16      	ldr	r3, [pc, #88]	@ (800737c <UART_SetConfig+0x338>)
 8007324:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007326:	f003 0307 	and.w	r3, r3, #7
 800732a:	2b05      	cmp	r3, #5
 800732c:	d838      	bhi.n	80073a0 <UART_SetConfig+0x35c>
 800732e:	a201      	add	r2, pc, #4	@ (adr r2, 8007334 <UART_SetConfig+0x2f0>)
 8007330:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007334:	0800734d 	.word	0x0800734d
 8007338:	08007355 	.word	0x08007355
 800733c:	0800735d 	.word	0x0800735d
 8007340:	08007365 	.word	0x08007365
 8007344:	08007391 	.word	0x08007391
 8007348:	08007399 	.word	0x08007399
 800734c:	2300      	movs	r3, #0
 800734e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007352:	e14a      	b.n	80075ea <UART_SetConfig+0x5a6>
 8007354:	2304      	movs	r3, #4
 8007356:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800735a:	e146      	b.n	80075ea <UART_SetConfig+0x5a6>
 800735c:	2308      	movs	r3, #8
 800735e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007362:	e142      	b.n	80075ea <UART_SetConfig+0x5a6>
 8007364:	2310      	movs	r3, #16
 8007366:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800736a:	e13e      	b.n	80075ea <UART_SetConfig+0x5a6>
 800736c:	cfff69f3 	.word	0xcfff69f3
 8007370:	58000c00 	.word	0x58000c00
 8007374:	11fff4ff 	.word	0x11fff4ff
 8007378:	40011000 	.word	0x40011000
 800737c:	58024400 	.word	0x58024400
 8007380:	40004400 	.word	0x40004400
 8007384:	40004800 	.word	0x40004800
 8007388:	40004c00 	.word	0x40004c00
 800738c:	40005000 	.word	0x40005000
 8007390:	2320      	movs	r3, #32
 8007392:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007396:	e128      	b.n	80075ea <UART_SetConfig+0x5a6>
 8007398:	2340      	movs	r3, #64	@ 0x40
 800739a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800739e:	e124      	b.n	80075ea <UART_SetConfig+0x5a6>
 80073a0:	2380      	movs	r3, #128	@ 0x80
 80073a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80073a6:	e120      	b.n	80075ea <UART_SetConfig+0x5a6>
 80073a8:	697b      	ldr	r3, [r7, #20]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	4acb      	ldr	r2, [pc, #812]	@ (80076dc <UART_SetConfig+0x698>)
 80073ae:	4293      	cmp	r3, r2
 80073b0:	d176      	bne.n	80074a0 <UART_SetConfig+0x45c>
 80073b2:	4bcb      	ldr	r3, [pc, #812]	@ (80076e0 <UART_SetConfig+0x69c>)
 80073b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80073b6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80073ba:	2b28      	cmp	r3, #40	@ 0x28
 80073bc:	d86c      	bhi.n	8007498 <UART_SetConfig+0x454>
 80073be:	a201      	add	r2, pc, #4	@ (adr r2, 80073c4 <UART_SetConfig+0x380>)
 80073c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073c4:	08007469 	.word	0x08007469
 80073c8:	08007499 	.word	0x08007499
 80073cc:	08007499 	.word	0x08007499
 80073d0:	08007499 	.word	0x08007499
 80073d4:	08007499 	.word	0x08007499
 80073d8:	08007499 	.word	0x08007499
 80073dc:	08007499 	.word	0x08007499
 80073e0:	08007499 	.word	0x08007499
 80073e4:	08007471 	.word	0x08007471
 80073e8:	08007499 	.word	0x08007499
 80073ec:	08007499 	.word	0x08007499
 80073f0:	08007499 	.word	0x08007499
 80073f4:	08007499 	.word	0x08007499
 80073f8:	08007499 	.word	0x08007499
 80073fc:	08007499 	.word	0x08007499
 8007400:	08007499 	.word	0x08007499
 8007404:	08007479 	.word	0x08007479
 8007408:	08007499 	.word	0x08007499
 800740c:	08007499 	.word	0x08007499
 8007410:	08007499 	.word	0x08007499
 8007414:	08007499 	.word	0x08007499
 8007418:	08007499 	.word	0x08007499
 800741c:	08007499 	.word	0x08007499
 8007420:	08007499 	.word	0x08007499
 8007424:	08007481 	.word	0x08007481
 8007428:	08007499 	.word	0x08007499
 800742c:	08007499 	.word	0x08007499
 8007430:	08007499 	.word	0x08007499
 8007434:	08007499 	.word	0x08007499
 8007438:	08007499 	.word	0x08007499
 800743c:	08007499 	.word	0x08007499
 8007440:	08007499 	.word	0x08007499
 8007444:	08007489 	.word	0x08007489
 8007448:	08007499 	.word	0x08007499
 800744c:	08007499 	.word	0x08007499
 8007450:	08007499 	.word	0x08007499
 8007454:	08007499 	.word	0x08007499
 8007458:	08007499 	.word	0x08007499
 800745c:	08007499 	.word	0x08007499
 8007460:	08007499 	.word	0x08007499
 8007464:	08007491 	.word	0x08007491
 8007468:	2301      	movs	r3, #1
 800746a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800746e:	e0bc      	b.n	80075ea <UART_SetConfig+0x5a6>
 8007470:	2304      	movs	r3, #4
 8007472:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007476:	e0b8      	b.n	80075ea <UART_SetConfig+0x5a6>
 8007478:	2308      	movs	r3, #8
 800747a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800747e:	e0b4      	b.n	80075ea <UART_SetConfig+0x5a6>
 8007480:	2310      	movs	r3, #16
 8007482:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007486:	e0b0      	b.n	80075ea <UART_SetConfig+0x5a6>
 8007488:	2320      	movs	r3, #32
 800748a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800748e:	e0ac      	b.n	80075ea <UART_SetConfig+0x5a6>
 8007490:	2340      	movs	r3, #64	@ 0x40
 8007492:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007496:	e0a8      	b.n	80075ea <UART_SetConfig+0x5a6>
 8007498:	2380      	movs	r3, #128	@ 0x80
 800749a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800749e:	e0a4      	b.n	80075ea <UART_SetConfig+0x5a6>
 80074a0:	697b      	ldr	r3, [r7, #20]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	4a8f      	ldr	r2, [pc, #572]	@ (80076e4 <UART_SetConfig+0x6a0>)
 80074a6:	4293      	cmp	r3, r2
 80074a8:	d130      	bne.n	800750c <UART_SetConfig+0x4c8>
 80074aa:	4b8d      	ldr	r3, [pc, #564]	@ (80076e0 <UART_SetConfig+0x69c>)
 80074ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80074ae:	f003 0307 	and.w	r3, r3, #7
 80074b2:	2b05      	cmp	r3, #5
 80074b4:	d826      	bhi.n	8007504 <UART_SetConfig+0x4c0>
 80074b6:	a201      	add	r2, pc, #4	@ (adr r2, 80074bc <UART_SetConfig+0x478>)
 80074b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074bc:	080074d5 	.word	0x080074d5
 80074c0:	080074dd 	.word	0x080074dd
 80074c4:	080074e5 	.word	0x080074e5
 80074c8:	080074ed 	.word	0x080074ed
 80074cc:	080074f5 	.word	0x080074f5
 80074d0:	080074fd 	.word	0x080074fd
 80074d4:	2300      	movs	r3, #0
 80074d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80074da:	e086      	b.n	80075ea <UART_SetConfig+0x5a6>
 80074dc:	2304      	movs	r3, #4
 80074de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80074e2:	e082      	b.n	80075ea <UART_SetConfig+0x5a6>
 80074e4:	2308      	movs	r3, #8
 80074e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80074ea:	e07e      	b.n	80075ea <UART_SetConfig+0x5a6>
 80074ec:	2310      	movs	r3, #16
 80074ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80074f2:	e07a      	b.n	80075ea <UART_SetConfig+0x5a6>
 80074f4:	2320      	movs	r3, #32
 80074f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80074fa:	e076      	b.n	80075ea <UART_SetConfig+0x5a6>
 80074fc:	2340      	movs	r3, #64	@ 0x40
 80074fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007502:	e072      	b.n	80075ea <UART_SetConfig+0x5a6>
 8007504:	2380      	movs	r3, #128	@ 0x80
 8007506:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800750a:	e06e      	b.n	80075ea <UART_SetConfig+0x5a6>
 800750c:	697b      	ldr	r3, [r7, #20]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	4a75      	ldr	r2, [pc, #468]	@ (80076e8 <UART_SetConfig+0x6a4>)
 8007512:	4293      	cmp	r3, r2
 8007514:	d130      	bne.n	8007578 <UART_SetConfig+0x534>
 8007516:	4b72      	ldr	r3, [pc, #456]	@ (80076e0 <UART_SetConfig+0x69c>)
 8007518:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800751a:	f003 0307 	and.w	r3, r3, #7
 800751e:	2b05      	cmp	r3, #5
 8007520:	d826      	bhi.n	8007570 <UART_SetConfig+0x52c>
 8007522:	a201      	add	r2, pc, #4	@ (adr r2, 8007528 <UART_SetConfig+0x4e4>)
 8007524:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007528:	08007541 	.word	0x08007541
 800752c:	08007549 	.word	0x08007549
 8007530:	08007551 	.word	0x08007551
 8007534:	08007559 	.word	0x08007559
 8007538:	08007561 	.word	0x08007561
 800753c:	08007569 	.word	0x08007569
 8007540:	2300      	movs	r3, #0
 8007542:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007546:	e050      	b.n	80075ea <UART_SetConfig+0x5a6>
 8007548:	2304      	movs	r3, #4
 800754a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800754e:	e04c      	b.n	80075ea <UART_SetConfig+0x5a6>
 8007550:	2308      	movs	r3, #8
 8007552:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007556:	e048      	b.n	80075ea <UART_SetConfig+0x5a6>
 8007558:	2310      	movs	r3, #16
 800755a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800755e:	e044      	b.n	80075ea <UART_SetConfig+0x5a6>
 8007560:	2320      	movs	r3, #32
 8007562:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007566:	e040      	b.n	80075ea <UART_SetConfig+0x5a6>
 8007568:	2340      	movs	r3, #64	@ 0x40
 800756a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800756e:	e03c      	b.n	80075ea <UART_SetConfig+0x5a6>
 8007570:	2380      	movs	r3, #128	@ 0x80
 8007572:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007576:	e038      	b.n	80075ea <UART_SetConfig+0x5a6>
 8007578:	697b      	ldr	r3, [r7, #20]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	4a5b      	ldr	r2, [pc, #364]	@ (80076ec <UART_SetConfig+0x6a8>)
 800757e:	4293      	cmp	r3, r2
 8007580:	d130      	bne.n	80075e4 <UART_SetConfig+0x5a0>
 8007582:	4b57      	ldr	r3, [pc, #348]	@ (80076e0 <UART_SetConfig+0x69c>)
 8007584:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007586:	f003 0307 	and.w	r3, r3, #7
 800758a:	2b05      	cmp	r3, #5
 800758c:	d826      	bhi.n	80075dc <UART_SetConfig+0x598>
 800758e:	a201      	add	r2, pc, #4	@ (adr r2, 8007594 <UART_SetConfig+0x550>)
 8007590:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007594:	080075ad 	.word	0x080075ad
 8007598:	080075b5 	.word	0x080075b5
 800759c:	080075bd 	.word	0x080075bd
 80075a0:	080075c5 	.word	0x080075c5
 80075a4:	080075cd 	.word	0x080075cd
 80075a8:	080075d5 	.word	0x080075d5
 80075ac:	2302      	movs	r3, #2
 80075ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80075b2:	e01a      	b.n	80075ea <UART_SetConfig+0x5a6>
 80075b4:	2304      	movs	r3, #4
 80075b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80075ba:	e016      	b.n	80075ea <UART_SetConfig+0x5a6>
 80075bc:	2308      	movs	r3, #8
 80075be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80075c2:	e012      	b.n	80075ea <UART_SetConfig+0x5a6>
 80075c4:	2310      	movs	r3, #16
 80075c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80075ca:	e00e      	b.n	80075ea <UART_SetConfig+0x5a6>
 80075cc:	2320      	movs	r3, #32
 80075ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80075d2:	e00a      	b.n	80075ea <UART_SetConfig+0x5a6>
 80075d4:	2340      	movs	r3, #64	@ 0x40
 80075d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80075da:	e006      	b.n	80075ea <UART_SetConfig+0x5a6>
 80075dc:	2380      	movs	r3, #128	@ 0x80
 80075de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80075e2:	e002      	b.n	80075ea <UART_SetConfig+0x5a6>
 80075e4:	2380      	movs	r3, #128	@ 0x80
 80075e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80075ea:	697b      	ldr	r3, [r7, #20]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	4a3f      	ldr	r2, [pc, #252]	@ (80076ec <UART_SetConfig+0x6a8>)
 80075f0:	4293      	cmp	r3, r2
 80075f2:	f040 80f8 	bne.w	80077e6 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80075f6:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80075fa:	2b20      	cmp	r3, #32
 80075fc:	dc46      	bgt.n	800768c <UART_SetConfig+0x648>
 80075fe:	2b02      	cmp	r3, #2
 8007600:	f2c0 8082 	blt.w	8007708 <UART_SetConfig+0x6c4>
 8007604:	3b02      	subs	r3, #2
 8007606:	2b1e      	cmp	r3, #30
 8007608:	d87e      	bhi.n	8007708 <UART_SetConfig+0x6c4>
 800760a:	a201      	add	r2, pc, #4	@ (adr r2, 8007610 <UART_SetConfig+0x5cc>)
 800760c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007610:	08007693 	.word	0x08007693
 8007614:	08007709 	.word	0x08007709
 8007618:	0800769b 	.word	0x0800769b
 800761c:	08007709 	.word	0x08007709
 8007620:	08007709 	.word	0x08007709
 8007624:	08007709 	.word	0x08007709
 8007628:	080076ab 	.word	0x080076ab
 800762c:	08007709 	.word	0x08007709
 8007630:	08007709 	.word	0x08007709
 8007634:	08007709 	.word	0x08007709
 8007638:	08007709 	.word	0x08007709
 800763c:	08007709 	.word	0x08007709
 8007640:	08007709 	.word	0x08007709
 8007644:	08007709 	.word	0x08007709
 8007648:	080076bb 	.word	0x080076bb
 800764c:	08007709 	.word	0x08007709
 8007650:	08007709 	.word	0x08007709
 8007654:	08007709 	.word	0x08007709
 8007658:	08007709 	.word	0x08007709
 800765c:	08007709 	.word	0x08007709
 8007660:	08007709 	.word	0x08007709
 8007664:	08007709 	.word	0x08007709
 8007668:	08007709 	.word	0x08007709
 800766c:	08007709 	.word	0x08007709
 8007670:	08007709 	.word	0x08007709
 8007674:	08007709 	.word	0x08007709
 8007678:	08007709 	.word	0x08007709
 800767c:	08007709 	.word	0x08007709
 8007680:	08007709 	.word	0x08007709
 8007684:	08007709 	.word	0x08007709
 8007688:	080076fb 	.word	0x080076fb
 800768c:	2b40      	cmp	r3, #64	@ 0x40
 800768e:	d037      	beq.n	8007700 <UART_SetConfig+0x6bc>
 8007690:	e03a      	b.n	8007708 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8007692:	f7fe fbe1 	bl	8005e58 <HAL_RCCEx_GetD3PCLK1Freq>
 8007696:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007698:	e03c      	b.n	8007714 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800769a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800769e:	4618      	mov	r0, r3
 80076a0:	f7fe fbf0 	bl	8005e84 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80076a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80076a8:	e034      	b.n	8007714 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80076aa:	f107 0318 	add.w	r3, r7, #24
 80076ae:	4618      	mov	r0, r3
 80076b0:	f7fe fd3c 	bl	800612c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80076b4:	69fb      	ldr	r3, [r7, #28]
 80076b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80076b8:	e02c      	b.n	8007714 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80076ba:	4b09      	ldr	r3, [pc, #36]	@ (80076e0 <UART_SetConfig+0x69c>)
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	f003 0320 	and.w	r3, r3, #32
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d016      	beq.n	80076f4 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80076c6:	4b06      	ldr	r3, [pc, #24]	@ (80076e0 <UART_SetConfig+0x69c>)
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	08db      	lsrs	r3, r3, #3
 80076cc:	f003 0303 	and.w	r3, r3, #3
 80076d0:	4a07      	ldr	r2, [pc, #28]	@ (80076f0 <UART_SetConfig+0x6ac>)
 80076d2:	fa22 f303 	lsr.w	r3, r2, r3
 80076d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80076d8:	e01c      	b.n	8007714 <UART_SetConfig+0x6d0>
 80076da:	bf00      	nop
 80076dc:	40011400 	.word	0x40011400
 80076e0:	58024400 	.word	0x58024400
 80076e4:	40007800 	.word	0x40007800
 80076e8:	40007c00 	.word	0x40007c00
 80076ec:	58000c00 	.word	0x58000c00
 80076f0:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 80076f4:	4b9d      	ldr	r3, [pc, #628]	@ (800796c <UART_SetConfig+0x928>)
 80076f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80076f8:	e00c      	b.n	8007714 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80076fa:	4b9d      	ldr	r3, [pc, #628]	@ (8007970 <UART_SetConfig+0x92c>)
 80076fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80076fe:	e009      	b.n	8007714 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007700:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007704:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007706:	e005      	b.n	8007714 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8007708:	2300      	movs	r3, #0
 800770a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800770c:	2301      	movs	r3, #1
 800770e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8007712:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007714:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007716:	2b00      	cmp	r3, #0
 8007718:	f000 81de 	beq.w	8007ad8 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800771c:	697b      	ldr	r3, [r7, #20]
 800771e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007720:	4a94      	ldr	r2, [pc, #592]	@ (8007974 <UART_SetConfig+0x930>)
 8007722:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007726:	461a      	mov	r2, r3
 8007728:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800772a:	fbb3 f3f2 	udiv	r3, r3, r2
 800772e:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007730:	697b      	ldr	r3, [r7, #20]
 8007732:	685a      	ldr	r2, [r3, #4]
 8007734:	4613      	mov	r3, r2
 8007736:	005b      	lsls	r3, r3, #1
 8007738:	4413      	add	r3, r2
 800773a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800773c:	429a      	cmp	r2, r3
 800773e:	d305      	bcc.n	800774c <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007740:	697b      	ldr	r3, [r7, #20]
 8007742:	685b      	ldr	r3, [r3, #4]
 8007744:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007746:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007748:	429a      	cmp	r2, r3
 800774a:	d903      	bls.n	8007754 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800774c:	2301      	movs	r3, #1
 800774e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8007752:	e1c1      	b.n	8007ad8 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007754:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007756:	2200      	movs	r2, #0
 8007758:	60bb      	str	r3, [r7, #8]
 800775a:	60fa      	str	r2, [r7, #12]
 800775c:	697b      	ldr	r3, [r7, #20]
 800775e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007760:	4a84      	ldr	r2, [pc, #528]	@ (8007974 <UART_SetConfig+0x930>)
 8007762:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007766:	b29b      	uxth	r3, r3
 8007768:	2200      	movs	r2, #0
 800776a:	603b      	str	r3, [r7, #0]
 800776c:	607a      	str	r2, [r7, #4]
 800776e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007772:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007776:	f7f8 fdaf 	bl	80002d8 <__aeabi_uldivmod>
 800777a:	4602      	mov	r2, r0
 800777c:	460b      	mov	r3, r1
 800777e:	4610      	mov	r0, r2
 8007780:	4619      	mov	r1, r3
 8007782:	f04f 0200 	mov.w	r2, #0
 8007786:	f04f 0300 	mov.w	r3, #0
 800778a:	020b      	lsls	r3, r1, #8
 800778c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007790:	0202      	lsls	r2, r0, #8
 8007792:	6979      	ldr	r1, [r7, #20]
 8007794:	6849      	ldr	r1, [r1, #4]
 8007796:	0849      	lsrs	r1, r1, #1
 8007798:	2000      	movs	r0, #0
 800779a:	460c      	mov	r4, r1
 800779c:	4605      	mov	r5, r0
 800779e:	eb12 0804 	adds.w	r8, r2, r4
 80077a2:	eb43 0905 	adc.w	r9, r3, r5
 80077a6:	697b      	ldr	r3, [r7, #20]
 80077a8:	685b      	ldr	r3, [r3, #4]
 80077aa:	2200      	movs	r2, #0
 80077ac:	469a      	mov	sl, r3
 80077ae:	4693      	mov	fp, r2
 80077b0:	4652      	mov	r2, sl
 80077b2:	465b      	mov	r3, fp
 80077b4:	4640      	mov	r0, r8
 80077b6:	4649      	mov	r1, r9
 80077b8:	f7f8 fd8e 	bl	80002d8 <__aeabi_uldivmod>
 80077bc:	4602      	mov	r2, r0
 80077be:	460b      	mov	r3, r1
 80077c0:	4613      	mov	r3, r2
 80077c2:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80077c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077c6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80077ca:	d308      	bcc.n	80077de <UART_SetConfig+0x79a>
 80077cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077ce:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80077d2:	d204      	bcs.n	80077de <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 80077d4:	697b      	ldr	r3, [r7, #20]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80077da:	60da      	str	r2, [r3, #12]
 80077dc:	e17c      	b.n	8007ad8 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 80077de:	2301      	movs	r3, #1
 80077e0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80077e4:	e178      	b.n	8007ad8 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80077e6:	697b      	ldr	r3, [r7, #20]
 80077e8:	69db      	ldr	r3, [r3, #28]
 80077ea:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80077ee:	f040 80c5 	bne.w	800797c <UART_SetConfig+0x938>
  {
    switch (clocksource)
 80077f2:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80077f6:	2b20      	cmp	r3, #32
 80077f8:	dc48      	bgt.n	800788c <UART_SetConfig+0x848>
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	db7b      	blt.n	80078f6 <UART_SetConfig+0x8b2>
 80077fe:	2b20      	cmp	r3, #32
 8007800:	d879      	bhi.n	80078f6 <UART_SetConfig+0x8b2>
 8007802:	a201      	add	r2, pc, #4	@ (adr r2, 8007808 <UART_SetConfig+0x7c4>)
 8007804:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007808:	08007893 	.word	0x08007893
 800780c:	0800789b 	.word	0x0800789b
 8007810:	080078f7 	.word	0x080078f7
 8007814:	080078f7 	.word	0x080078f7
 8007818:	080078a3 	.word	0x080078a3
 800781c:	080078f7 	.word	0x080078f7
 8007820:	080078f7 	.word	0x080078f7
 8007824:	080078f7 	.word	0x080078f7
 8007828:	080078b3 	.word	0x080078b3
 800782c:	080078f7 	.word	0x080078f7
 8007830:	080078f7 	.word	0x080078f7
 8007834:	080078f7 	.word	0x080078f7
 8007838:	080078f7 	.word	0x080078f7
 800783c:	080078f7 	.word	0x080078f7
 8007840:	080078f7 	.word	0x080078f7
 8007844:	080078f7 	.word	0x080078f7
 8007848:	080078c3 	.word	0x080078c3
 800784c:	080078f7 	.word	0x080078f7
 8007850:	080078f7 	.word	0x080078f7
 8007854:	080078f7 	.word	0x080078f7
 8007858:	080078f7 	.word	0x080078f7
 800785c:	080078f7 	.word	0x080078f7
 8007860:	080078f7 	.word	0x080078f7
 8007864:	080078f7 	.word	0x080078f7
 8007868:	080078f7 	.word	0x080078f7
 800786c:	080078f7 	.word	0x080078f7
 8007870:	080078f7 	.word	0x080078f7
 8007874:	080078f7 	.word	0x080078f7
 8007878:	080078f7 	.word	0x080078f7
 800787c:	080078f7 	.word	0x080078f7
 8007880:	080078f7 	.word	0x080078f7
 8007884:	080078f7 	.word	0x080078f7
 8007888:	080078e9 	.word	0x080078e9
 800788c:	2b40      	cmp	r3, #64	@ 0x40
 800788e:	d02e      	beq.n	80078ee <UART_SetConfig+0x8aa>
 8007890:	e031      	b.n	80078f6 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007892:	f7fd f8ab 	bl	80049ec <HAL_RCC_GetPCLK1Freq>
 8007896:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007898:	e033      	b.n	8007902 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800789a:	f7fd f8bd 	bl	8004a18 <HAL_RCC_GetPCLK2Freq>
 800789e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80078a0:	e02f      	b.n	8007902 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80078a2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80078a6:	4618      	mov	r0, r3
 80078a8:	f7fe faec 	bl	8005e84 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80078ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80078b0:	e027      	b.n	8007902 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80078b2:	f107 0318 	add.w	r3, r7, #24
 80078b6:	4618      	mov	r0, r3
 80078b8:	f7fe fc38 	bl	800612c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80078bc:	69fb      	ldr	r3, [r7, #28]
 80078be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80078c0:	e01f      	b.n	8007902 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80078c2:	4b2d      	ldr	r3, [pc, #180]	@ (8007978 <UART_SetConfig+0x934>)
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	f003 0320 	and.w	r3, r3, #32
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d009      	beq.n	80078e2 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80078ce:	4b2a      	ldr	r3, [pc, #168]	@ (8007978 <UART_SetConfig+0x934>)
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	08db      	lsrs	r3, r3, #3
 80078d4:	f003 0303 	and.w	r3, r3, #3
 80078d8:	4a24      	ldr	r2, [pc, #144]	@ (800796c <UART_SetConfig+0x928>)
 80078da:	fa22 f303 	lsr.w	r3, r2, r3
 80078de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80078e0:	e00f      	b.n	8007902 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80078e2:	4b22      	ldr	r3, [pc, #136]	@ (800796c <UART_SetConfig+0x928>)
 80078e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80078e6:	e00c      	b.n	8007902 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80078e8:	4b21      	ldr	r3, [pc, #132]	@ (8007970 <UART_SetConfig+0x92c>)
 80078ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80078ec:	e009      	b.n	8007902 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80078ee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80078f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80078f4:	e005      	b.n	8007902 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80078f6:	2300      	movs	r3, #0
 80078f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80078fa:	2301      	movs	r3, #1
 80078fc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8007900:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007902:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007904:	2b00      	cmp	r3, #0
 8007906:	f000 80e7 	beq.w	8007ad8 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800790a:	697b      	ldr	r3, [r7, #20]
 800790c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800790e:	4a19      	ldr	r2, [pc, #100]	@ (8007974 <UART_SetConfig+0x930>)
 8007910:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007914:	461a      	mov	r2, r3
 8007916:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007918:	fbb3 f3f2 	udiv	r3, r3, r2
 800791c:	005a      	lsls	r2, r3, #1
 800791e:	697b      	ldr	r3, [r7, #20]
 8007920:	685b      	ldr	r3, [r3, #4]
 8007922:	085b      	lsrs	r3, r3, #1
 8007924:	441a      	add	r2, r3
 8007926:	697b      	ldr	r3, [r7, #20]
 8007928:	685b      	ldr	r3, [r3, #4]
 800792a:	fbb2 f3f3 	udiv	r3, r2, r3
 800792e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007930:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007932:	2b0f      	cmp	r3, #15
 8007934:	d916      	bls.n	8007964 <UART_SetConfig+0x920>
 8007936:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007938:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800793c:	d212      	bcs.n	8007964 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800793e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007940:	b29b      	uxth	r3, r3
 8007942:	f023 030f 	bic.w	r3, r3, #15
 8007946:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007948:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800794a:	085b      	lsrs	r3, r3, #1
 800794c:	b29b      	uxth	r3, r3
 800794e:	f003 0307 	and.w	r3, r3, #7
 8007952:	b29a      	uxth	r2, r3
 8007954:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8007956:	4313      	orrs	r3, r2
 8007958:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800795a:	697b      	ldr	r3, [r7, #20]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8007960:	60da      	str	r2, [r3, #12]
 8007962:	e0b9      	b.n	8007ad8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8007964:	2301      	movs	r3, #1
 8007966:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800796a:	e0b5      	b.n	8007ad8 <UART_SetConfig+0xa94>
 800796c:	03d09000 	.word	0x03d09000
 8007970:	003d0900 	.word	0x003d0900
 8007974:	080082a8 	.word	0x080082a8
 8007978:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800797c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8007980:	2b20      	cmp	r3, #32
 8007982:	dc49      	bgt.n	8007a18 <UART_SetConfig+0x9d4>
 8007984:	2b00      	cmp	r3, #0
 8007986:	db7c      	blt.n	8007a82 <UART_SetConfig+0xa3e>
 8007988:	2b20      	cmp	r3, #32
 800798a:	d87a      	bhi.n	8007a82 <UART_SetConfig+0xa3e>
 800798c:	a201      	add	r2, pc, #4	@ (adr r2, 8007994 <UART_SetConfig+0x950>)
 800798e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007992:	bf00      	nop
 8007994:	08007a1f 	.word	0x08007a1f
 8007998:	08007a27 	.word	0x08007a27
 800799c:	08007a83 	.word	0x08007a83
 80079a0:	08007a83 	.word	0x08007a83
 80079a4:	08007a2f 	.word	0x08007a2f
 80079a8:	08007a83 	.word	0x08007a83
 80079ac:	08007a83 	.word	0x08007a83
 80079b0:	08007a83 	.word	0x08007a83
 80079b4:	08007a3f 	.word	0x08007a3f
 80079b8:	08007a83 	.word	0x08007a83
 80079bc:	08007a83 	.word	0x08007a83
 80079c0:	08007a83 	.word	0x08007a83
 80079c4:	08007a83 	.word	0x08007a83
 80079c8:	08007a83 	.word	0x08007a83
 80079cc:	08007a83 	.word	0x08007a83
 80079d0:	08007a83 	.word	0x08007a83
 80079d4:	08007a4f 	.word	0x08007a4f
 80079d8:	08007a83 	.word	0x08007a83
 80079dc:	08007a83 	.word	0x08007a83
 80079e0:	08007a83 	.word	0x08007a83
 80079e4:	08007a83 	.word	0x08007a83
 80079e8:	08007a83 	.word	0x08007a83
 80079ec:	08007a83 	.word	0x08007a83
 80079f0:	08007a83 	.word	0x08007a83
 80079f4:	08007a83 	.word	0x08007a83
 80079f8:	08007a83 	.word	0x08007a83
 80079fc:	08007a83 	.word	0x08007a83
 8007a00:	08007a83 	.word	0x08007a83
 8007a04:	08007a83 	.word	0x08007a83
 8007a08:	08007a83 	.word	0x08007a83
 8007a0c:	08007a83 	.word	0x08007a83
 8007a10:	08007a83 	.word	0x08007a83
 8007a14:	08007a75 	.word	0x08007a75
 8007a18:	2b40      	cmp	r3, #64	@ 0x40
 8007a1a:	d02e      	beq.n	8007a7a <UART_SetConfig+0xa36>
 8007a1c:	e031      	b.n	8007a82 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007a1e:	f7fc ffe5 	bl	80049ec <HAL_RCC_GetPCLK1Freq>
 8007a22:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007a24:	e033      	b.n	8007a8e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007a26:	f7fc fff7 	bl	8004a18 <HAL_RCC_GetPCLK2Freq>
 8007a2a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007a2c:	e02f      	b.n	8007a8e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007a2e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007a32:	4618      	mov	r0, r3
 8007a34:	f7fe fa26 	bl	8005e84 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007a38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007a3c:	e027      	b.n	8007a8e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007a3e:	f107 0318 	add.w	r3, r7, #24
 8007a42:	4618      	mov	r0, r3
 8007a44:	f7fe fb72 	bl	800612c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007a48:	69fb      	ldr	r3, [r7, #28]
 8007a4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007a4c:	e01f      	b.n	8007a8e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007a4e:	4b2d      	ldr	r3, [pc, #180]	@ (8007b04 <UART_SetConfig+0xac0>)
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	f003 0320 	and.w	r3, r3, #32
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d009      	beq.n	8007a6e <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007a5a:	4b2a      	ldr	r3, [pc, #168]	@ (8007b04 <UART_SetConfig+0xac0>)
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	08db      	lsrs	r3, r3, #3
 8007a60:	f003 0303 	and.w	r3, r3, #3
 8007a64:	4a28      	ldr	r2, [pc, #160]	@ (8007b08 <UART_SetConfig+0xac4>)
 8007a66:	fa22 f303 	lsr.w	r3, r2, r3
 8007a6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007a6c:	e00f      	b.n	8007a8e <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8007a6e:	4b26      	ldr	r3, [pc, #152]	@ (8007b08 <UART_SetConfig+0xac4>)
 8007a70:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007a72:	e00c      	b.n	8007a8e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007a74:	4b25      	ldr	r3, [pc, #148]	@ (8007b0c <UART_SetConfig+0xac8>)
 8007a76:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007a78:	e009      	b.n	8007a8e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007a7a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007a7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007a80:	e005      	b.n	8007a8e <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8007a82:	2300      	movs	r3, #0
 8007a84:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8007a86:	2301      	movs	r3, #1
 8007a88:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8007a8c:	bf00      	nop
    }

    if (pclk != 0U)
 8007a8e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d021      	beq.n	8007ad8 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007a94:	697b      	ldr	r3, [r7, #20]
 8007a96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a98:	4a1d      	ldr	r2, [pc, #116]	@ (8007b10 <UART_SetConfig+0xacc>)
 8007a9a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007a9e:	461a      	mov	r2, r3
 8007aa0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007aa2:	fbb3 f2f2 	udiv	r2, r3, r2
 8007aa6:	697b      	ldr	r3, [r7, #20]
 8007aa8:	685b      	ldr	r3, [r3, #4]
 8007aaa:	085b      	lsrs	r3, r3, #1
 8007aac:	441a      	add	r2, r3
 8007aae:	697b      	ldr	r3, [r7, #20]
 8007ab0:	685b      	ldr	r3, [r3, #4]
 8007ab2:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ab6:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007ab8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007aba:	2b0f      	cmp	r3, #15
 8007abc:	d909      	bls.n	8007ad2 <UART_SetConfig+0xa8e>
 8007abe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ac0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007ac4:	d205      	bcs.n	8007ad2 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007ac6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ac8:	b29a      	uxth	r2, r3
 8007aca:	697b      	ldr	r3, [r7, #20]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	60da      	str	r2, [r3, #12]
 8007ad0:	e002      	b.n	8007ad8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8007ad2:	2301      	movs	r3, #1
 8007ad4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007ad8:	697b      	ldr	r3, [r7, #20]
 8007ada:	2201      	movs	r2, #1
 8007adc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8007ae0:	697b      	ldr	r3, [r7, #20]
 8007ae2:	2201      	movs	r2, #1
 8007ae4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007ae8:	697b      	ldr	r3, [r7, #20]
 8007aea:	2200      	movs	r2, #0
 8007aec:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8007aee:	697b      	ldr	r3, [r7, #20]
 8007af0:	2200      	movs	r2, #0
 8007af2:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8007af4:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8007af8:	4618      	mov	r0, r3
 8007afa:	3748      	adds	r7, #72	@ 0x48
 8007afc:	46bd      	mov	sp, r7
 8007afe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007b02:	bf00      	nop
 8007b04:	58024400 	.word	0x58024400
 8007b08:	03d09000 	.word	0x03d09000
 8007b0c:	003d0900 	.word	0x003d0900
 8007b10:	080082a8 	.word	0x080082a8

08007b14 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007b14:	b480      	push	{r7}
 8007b16:	b083      	sub	sp, #12
 8007b18:	af00      	add	r7, sp, #0
 8007b1a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b20:	f003 0308 	and.w	r3, r3, #8
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d00a      	beq.n	8007b3e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	685b      	ldr	r3, [r3, #4]
 8007b2e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	430a      	orrs	r2, r1
 8007b3c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b42:	f003 0301 	and.w	r3, r3, #1
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d00a      	beq.n	8007b60 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	685b      	ldr	r3, [r3, #4]
 8007b50:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	430a      	orrs	r2, r1
 8007b5e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b64:	f003 0302 	and.w	r3, r3, #2
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d00a      	beq.n	8007b82 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	685b      	ldr	r3, [r3, #4]
 8007b72:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	430a      	orrs	r2, r1
 8007b80:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b86:	f003 0304 	and.w	r3, r3, #4
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d00a      	beq.n	8007ba4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	685b      	ldr	r3, [r3, #4]
 8007b94:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	430a      	orrs	r2, r1
 8007ba2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ba8:	f003 0310 	and.w	r3, r3, #16
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d00a      	beq.n	8007bc6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	689b      	ldr	r3, [r3, #8]
 8007bb6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	430a      	orrs	r2, r1
 8007bc4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007bca:	f003 0320 	and.w	r3, r3, #32
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d00a      	beq.n	8007be8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	689b      	ldr	r3, [r3, #8]
 8007bd8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	430a      	orrs	r2, r1
 8007be6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007bec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d01a      	beq.n	8007c2a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	685b      	ldr	r3, [r3, #4]
 8007bfa:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	430a      	orrs	r2, r1
 8007c08:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007c0e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007c12:	d10a      	bne.n	8007c2a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	685b      	ldr	r3, [r3, #4]
 8007c1a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	430a      	orrs	r2, r1
 8007c28:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c2e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d00a      	beq.n	8007c4c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	685b      	ldr	r3, [r3, #4]
 8007c3c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	430a      	orrs	r2, r1
 8007c4a:	605a      	str	r2, [r3, #4]
  }
}
 8007c4c:	bf00      	nop
 8007c4e:	370c      	adds	r7, #12
 8007c50:	46bd      	mov	sp, r7
 8007c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c56:	4770      	bx	lr

08007c58 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007c58:	b580      	push	{r7, lr}
 8007c5a:	b098      	sub	sp, #96	@ 0x60
 8007c5c:	af02      	add	r7, sp, #8
 8007c5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	2200      	movs	r2, #0
 8007c64:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007c68:	f7f9 f900 	bl	8000e6c <HAL_GetTick>
 8007c6c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	f003 0308 	and.w	r3, r3, #8
 8007c78:	2b08      	cmp	r3, #8
 8007c7a:	d12f      	bne.n	8007cdc <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007c7c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007c80:	9300      	str	r3, [sp, #0]
 8007c82:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007c84:	2200      	movs	r2, #0
 8007c86:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8007c8a:	6878      	ldr	r0, [r7, #4]
 8007c8c:	f000 f88e 	bl	8007dac <UART_WaitOnFlagUntilTimeout>
 8007c90:	4603      	mov	r3, r0
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d022      	beq.n	8007cdc <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c9e:	e853 3f00 	ldrex	r3, [r3]
 8007ca2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007ca4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007ca6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007caa:	653b      	str	r3, [r7, #80]	@ 0x50
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	461a      	mov	r2, r3
 8007cb2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007cb4:	647b      	str	r3, [r7, #68]	@ 0x44
 8007cb6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cb8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007cba:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007cbc:	e841 2300 	strex	r3, r2, [r1]
 8007cc0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007cc2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d1e6      	bne.n	8007c96 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	2220      	movs	r2, #32
 8007ccc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	2200      	movs	r2, #0
 8007cd4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007cd8:	2303      	movs	r3, #3
 8007cda:	e063      	b.n	8007da4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	f003 0304 	and.w	r3, r3, #4
 8007ce6:	2b04      	cmp	r3, #4
 8007ce8:	d149      	bne.n	8007d7e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007cea:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007cee:	9300      	str	r3, [sp, #0]
 8007cf0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007cf2:	2200      	movs	r2, #0
 8007cf4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007cf8:	6878      	ldr	r0, [r7, #4]
 8007cfa:	f000 f857 	bl	8007dac <UART_WaitOnFlagUntilTimeout>
 8007cfe:	4603      	mov	r3, r0
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d03c      	beq.n	8007d7e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d0c:	e853 3f00 	ldrex	r3, [r3]
 8007d10:	623b      	str	r3, [r7, #32]
   return(result);
 8007d12:	6a3b      	ldr	r3, [r7, #32]
 8007d14:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007d18:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	461a      	mov	r2, r3
 8007d20:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007d22:	633b      	str	r3, [r7, #48]	@ 0x30
 8007d24:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d26:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007d28:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007d2a:	e841 2300 	strex	r3, r2, [r1]
 8007d2e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007d30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d1e6      	bne.n	8007d04 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	3308      	adds	r3, #8
 8007d3c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d3e:	693b      	ldr	r3, [r7, #16]
 8007d40:	e853 3f00 	ldrex	r3, [r3]
 8007d44:	60fb      	str	r3, [r7, #12]
   return(result);
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	f023 0301 	bic.w	r3, r3, #1
 8007d4c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	3308      	adds	r3, #8
 8007d54:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007d56:	61fa      	str	r2, [r7, #28]
 8007d58:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d5a:	69b9      	ldr	r1, [r7, #24]
 8007d5c:	69fa      	ldr	r2, [r7, #28]
 8007d5e:	e841 2300 	strex	r3, r2, [r1]
 8007d62:	617b      	str	r3, [r7, #20]
   return(result);
 8007d64:	697b      	ldr	r3, [r7, #20]
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d1e5      	bne.n	8007d36 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	2220      	movs	r2, #32
 8007d6e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	2200      	movs	r2, #0
 8007d76:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007d7a:	2303      	movs	r3, #3
 8007d7c:	e012      	b.n	8007da4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	2220      	movs	r2, #32
 8007d82:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	2220      	movs	r2, #32
 8007d8a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	2200      	movs	r2, #0
 8007d92:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	2200      	movs	r2, #0
 8007d98:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	2200      	movs	r2, #0
 8007d9e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007da2:	2300      	movs	r3, #0
}
 8007da4:	4618      	mov	r0, r3
 8007da6:	3758      	adds	r7, #88	@ 0x58
 8007da8:	46bd      	mov	sp, r7
 8007daa:	bd80      	pop	{r7, pc}

08007dac <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007dac:	b580      	push	{r7, lr}
 8007dae:	b084      	sub	sp, #16
 8007db0:	af00      	add	r7, sp, #0
 8007db2:	60f8      	str	r0, [r7, #12]
 8007db4:	60b9      	str	r1, [r7, #8]
 8007db6:	603b      	str	r3, [r7, #0]
 8007db8:	4613      	mov	r3, r2
 8007dba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007dbc:	e04f      	b.n	8007e5e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007dbe:	69bb      	ldr	r3, [r7, #24]
 8007dc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007dc4:	d04b      	beq.n	8007e5e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007dc6:	f7f9 f851 	bl	8000e6c <HAL_GetTick>
 8007dca:	4602      	mov	r2, r0
 8007dcc:	683b      	ldr	r3, [r7, #0]
 8007dce:	1ad3      	subs	r3, r2, r3
 8007dd0:	69ba      	ldr	r2, [r7, #24]
 8007dd2:	429a      	cmp	r2, r3
 8007dd4:	d302      	bcc.n	8007ddc <UART_WaitOnFlagUntilTimeout+0x30>
 8007dd6:	69bb      	ldr	r3, [r7, #24]
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d101      	bne.n	8007de0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007ddc:	2303      	movs	r3, #3
 8007dde:	e04e      	b.n	8007e7e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	f003 0304 	and.w	r3, r3, #4
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d037      	beq.n	8007e5e <UART_WaitOnFlagUntilTimeout+0xb2>
 8007dee:	68bb      	ldr	r3, [r7, #8]
 8007df0:	2b80      	cmp	r3, #128	@ 0x80
 8007df2:	d034      	beq.n	8007e5e <UART_WaitOnFlagUntilTimeout+0xb2>
 8007df4:	68bb      	ldr	r3, [r7, #8]
 8007df6:	2b40      	cmp	r3, #64	@ 0x40
 8007df8:	d031      	beq.n	8007e5e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	69db      	ldr	r3, [r3, #28]
 8007e00:	f003 0308 	and.w	r3, r3, #8
 8007e04:	2b08      	cmp	r3, #8
 8007e06:	d110      	bne.n	8007e2a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	2208      	movs	r2, #8
 8007e0e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007e10:	68f8      	ldr	r0, [r7, #12]
 8007e12:	f000 f839 	bl	8007e88 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	2208      	movs	r2, #8
 8007e1a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	2200      	movs	r2, #0
 8007e22:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8007e26:	2301      	movs	r3, #1
 8007e28:	e029      	b.n	8007e7e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	69db      	ldr	r3, [r3, #28]
 8007e30:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007e34:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007e38:	d111      	bne.n	8007e5e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007e42:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007e44:	68f8      	ldr	r0, [r7, #12]
 8007e46:	f000 f81f 	bl	8007e88 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	2220      	movs	r2, #32
 8007e4e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	2200      	movs	r2, #0
 8007e56:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8007e5a:	2303      	movs	r3, #3
 8007e5c:	e00f      	b.n	8007e7e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	69da      	ldr	r2, [r3, #28]
 8007e64:	68bb      	ldr	r3, [r7, #8]
 8007e66:	4013      	ands	r3, r2
 8007e68:	68ba      	ldr	r2, [r7, #8]
 8007e6a:	429a      	cmp	r2, r3
 8007e6c:	bf0c      	ite	eq
 8007e6e:	2301      	moveq	r3, #1
 8007e70:	2300      	movne	r3, #0
 8007e72:	b2db      	uxtb	r3, r3
 8007e74:	461a      	mov	r2, r3
 8007e76:	79fb      	ldrb	r3, [r7, #7]
 8007e78:	429a      	cmp	r2, r3
 8007e7a:	d0a0      	beq.n	8007dbe <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007e7c:	2300      	movs	r3, #0
}
 8007e7e:	4618      	mov	r0, r3
 8007e80:	3710      	adds	r7, #16
 8007e82:	46bd      	mov	sp, r7
 8007e84:	bd80      	pop	{r7, pc}
	...

08007e88 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007e88:	b480      	push	{r7}
 8007e8a:	b095      	sub	sp, #84	@ 0x54
 8007e8c:	af00      	add	r7, sp, #0
 8007e8e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e96:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007e98:	e853 3f00 	ldrex	r3, [r3]
 8007e9c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007e9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ea0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007ea4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	461a      	mov	r2, r3
 8007eac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007eae:	643b      	str	r3, [r7, #64]	@ 0x40
 8007eb0:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007eb2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007eb4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007eb6:	e841 2300 	strex	r3, r2, [r1]
 8007eba:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007ebc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d1e6      	bne.n	8007e90 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	3308      	adds	r3, #8
 8007ec8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007eca:	6a3b      	ldr	r3, [r7, #32]
 8007ecc:	e853 3f00 	ldrex	r3, [r3]
 8007ed0:	61fb      	str	r3, [r7, #28]
   return(result);
 8007ed2:	69fa      	ldr	r2, [r7, #28]
 8007ed4:	4b1e      	ldr	r3, [pc, #120]	@ (8007f50 <UART_EndRxTransfer+0xc8>)
 8007ed6:	4013      	ands	r3, r2
 8007ed8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	3308      	adds	r3, #8
 8007ee0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007ee2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007ee4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ee6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007ee8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007eea:	e841 2300 	strex	r3, r2, [r1]
 8007eee:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007ef0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d1e5      	bne.n	8007ec2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007efa:	2b01      	cmp	r3, #1
 8007efc:	d118      	bne.n	8007f30 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	e853 3f00 	ldrex	r3, [r3]
 8007f0a:	60bb      	str	r3, [r7, #8]
   return(result);
 8007f0c:	68bb      	ldr	r3, [r7, #8]
 8007f0e:	f023 0310 	bic.w	r3, r3, #16
 8007f12:	647b      	str	r3, [r7, #68]	@ 0x44
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	461a      	mov	r2, r3
 8007f1a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007f1c:	61bb      	str	r3, [r7, #24]
 8007f1e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f20:	6979      	ldr	r1, [r7, #20]
 8007f22:	69ba      	ldr	r2, [r7, #24]
 8007f24:	e841 2300 	strex	r3, r2, [r1]
 8007f28:	613b      	str	r3, [r7, #16]
   return(result);
 8007f2a:	693b      	ldr	r3, [r7, #16]
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d1e6      	bne.n	8007efe <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	2220      	movs	r2, #32
 8007f34:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	2200      	movs	r2, #0
 8007f3c:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	2200      	movs	r2, #0
 8007f42:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8007f44:	bf00      	nop
 8007f46:	3754      	adds	r7, #84	@ 0x54
 8007f48:	46bd      	mov	sp, r7
 8007f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f4e:	4770      	bx	lr
 8007f50:	effffffe 	.word	0xeffffffe

08007f54 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007f54:	b580      	push	{r7, lr}
 8007f56:	b084      	sub	sp, #16
 8007f58:	af00      	add	r7, sp, #0
 8007f5a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f60:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	2200      	movs	r2, #0
 8007f66:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007f6a:	68f8      	ldr	r0, [r7, #12]
 8007f6c:	f7ff f854 	bl	8007018 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007f70:	bf00      	nop
 8007f72:	3710      	adds	r7, #16
 8007f74:	46bd      	mov	sp, r7
 8007f76:	bd80      	pop	{r7, pc}

08007f78 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007f78:	b580      	push	{r7, lr}
 8007f7a:	b088      	sub	sp, #32
 8007f7c:	af00      	add	r7, sp, #0
 8007f7e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	e853 3f00 	ldrex	r3, [r3]
 8007f8c:	60bb      	str	r3, [r7, #8]
   return(result);
 8007f8e:	68bb      	ldr	r3, [r7, #8]
 8007f90:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007f94:	61fb      	str	r3, [r7, #28]
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	461a      	mov	r2, r3
 8007f9c:	69fb      	ldr	r3, [r7, #28]
 8007f9e:	61bb      	str	r3, [r7, #24]
 8007fa0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fa2:	6979      	ldr	r1, [r7, #20]
 8007fa4:	69ba      	ldr	r2, [r7, #24]
 8007fa6:	e841 2300 	strex	r3, r2, [r1]
 8007faa:	613b      	str	r3, [r7, #16]
   return(result);
 8007fac:	693b      	ldr	r3, [r7, #16]
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d1e6      	bne.n	8007f80 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	2220      	movs	r2, #32
 8007fb6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	2200      	movs	r2, #0
 8007fbe:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007fc0:	6878      	ldr	r0, [r7, #4]
 8007fc2:	f7ff f81f 	bl	8007004 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007fc6:	bf00      	nop
 8007fc8:	3720      	adds	r7, #32
 8007fca:	46bd      	mov	sp, r7
 8007fcc:	bd80      	pop	{r7, pc}

08007fce <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007fce:	b480      	push	{r7}
 8007fd0:	b083      	sub	sp, #12
 8007fd2:	af00      	add	r7, sp, #0
 8007fd4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007fd6:	bf00      	nop
 8007fd8:	370c      	adds	r7, #12
 8007fda:	46bd      	mov	sp, r7
 8007fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe0:	4770      	bx	lr

08007fe2 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8007fe2:	b480      	push	{r7}
 8007fe4:	b083      	sub	sp, #12
 8007fe6:	af00      	add	r7, sp, #0
 8007fe8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8007fea:	bf00      	nop
 8007fec:	370c      	adds	r7, #12
 8007fee:	46bd      	mov	sp, r7
 8007ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff4:	4770      	bx	lr

08007ff6 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8007ff6:	b480      	push	{r7}
 8007ff8:	b083      	sub	sp, #12
 8007ffa:	af00      	add	r7, sp, #0
 8007ffc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8007ffe:	bf00      	nop
 8008000:	370c      	adds	r7, #12
 8008002:	46bd      	mov	sp, r7
 8008004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008008:	4770      	bx	lr

0800800a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800800a:	b480      	push	{r7}
 800800c:	b085      	sub	sp, #20
 800800e:	af00      	add	r7, sp, #0
 8008010:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008018:	2b01      	cmp	r3, #1
 800801a:	d101      	bne.n	8008020 <HAL_UARTEx_DisableFifoMode+0x16>
 800801c:	2302      	movs	r3, #2
 800801e:	e027      	b.n	8008070 <HAL_UARTEx_DisableFifoMode+0x66>
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	2201      	movs	r2, #1
 8008024:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	2224      	movs	r2, #36	@ 0x24
 800802c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	681a      	ldr	r2, [r3, #0]
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	f022 0201 	bic.w	r2, r2, #1
 8008046:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800804e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	2200      	movs	r2, #0
 8008054:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	68fa      	ldr	r2, [r7, #12]
 800805c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	2220      	movs	r2, #32
 8008062:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	2200      	movs	r2, #0
 800806a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800806e:	2300      	movs	r3, #0
}
 8008070:	4618      	mov	r0, r3
 8008072:	3714      	adds	r7, #20
 8008074:	46bd      	mov	sp, r7
 8008076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800807a:	4770      	bx	lr

0800807c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800807c:	b580      	push	{r7, lr}
 800807e:	b084      	sub	sp, #16
 8008080:	af00      	add	r7, sp, #0
 8008082:	6078      	str	r0, [r7, #4]
 8008084:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800808c:	2b01      	cmp	r3, #1
 800808e:	d101      	bne.n	8008094 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008090:	2302      	movs	r3, #2
 8008092:	e02d      	b.n	80080f0 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	2201      	movs	r2, #1
 8008098:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	2224      	movs	r2, #36	@ 0x24
 80080a0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	681a      	ldr	r2, [r3, #0]
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	f022 0201 	bic.w	r2, r2, #1
 80080ba:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	689b      	ldr	r3, [r3, #8]
 80080c2:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	683a      	ldr	r2, [r7, #0]
 80080cc:	430a      	orrs	r2, r1
 80080ce:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80080d0:	6878      	ldr	r0, [r7, #4]
 80080d2:	f000 f84f 	bl	8008174 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	68fa      	ldr	r2, [r7, #12]
 80080dc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	2220      	movs	r2, #32
 80080e2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	2200      	movs	r2, #0
 80080ea:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80080ee:	2300      	movs	r3, #0
}
 80080f0:	4618      	mov	r0, r3
 80080f2:	3710      	adds	r7, #16
 80080f4:	46bd      	mov	sp, r7
 80080f6:	bd80      	pop	{r7, pc}

080080f8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80080f8:	b580      	push	{r7, lr}
 80080fa:	b084      	sub	sp, #16
 80080fc:	af00      	add	r7, sp, #0
 80080fe:	6078      	str	r0, [r7, #4]
 8008100:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008108:	2b01      	cmp	r3, #1
 800810a:	d101      	bne.n	8008110 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800810c:	2302      	movs	r3, #2
 800810e:	e02d      	b.n	800816c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	2201      	movs	r2, #1
 8008114:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	2224      	movs	r2, #36	@ 0x24
 800811c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	681a      	ldr	r2, [r3, #0]
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	f022 0201 	bic.w	r2, r2, #1
 8008136:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	689b      	ldr	r3, [r3, #8]
 800813e:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	683a      	ldr	r2, [r7, #0]
 8008148:	430a      	orrs	r2, r1
 800814a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800814c:	6878      	ldr	r0, [r7, #4]
 800814e:	f000 f811 	bl	8008174 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	68fa      	ldr	r2, [r7, #12]
 8008158:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	2220      	movs	r2, #32
 800815e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	2200      	movs	r2, #0
 8008166:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800816a:	2300      	movs	r3, #0
}
 800816c:	4618      	mov	r0, r3
 800816e:	3710      	adds	r7, #16
 8008170:	46bd      	mov	sp, r7
 8008172:	bd80      	pop	{r7, pc}

08008174 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008174:	b480      	push	{r7}
 8008176:	b085      	sub	sp, #20
 8008178:	af00      	add	r7, sp, #0
 800817a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008180:	2b00      	cmp	r3, #0
 8008182:	d108      	bne.n	8008196 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	2201      	movs	r2, #1
 8008188:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	2201      	movs	r2, #1
 8008190:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008194:	e031      	b.n	80081fa <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008196:	2310      	movs	r3, #16
 8008198:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800819a:	2310      	movs	r3, #16
 800819c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	689b      	ldr	r3, [r3, #8]
 80081a4:	0e5b      	lsrs	r3, r3, #25
 80081a6:	b2db      	uxtb	r3, r3
 80081a8:	f003 0307 	and.w	r3, r3, #7
 80081ac:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	689b      	ldr	r3, [r3, #8]
 80081b4:	0f5b      	lsrs	r3, r3, #29
 80081b6:	b2db      	uxtb	r3, r3
 80081b8:	f003 0307 	and.w	r3, r3, #7
 80081bc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80081be:	7bbb      	ldrb	r3, [r7, #14]
 80081c0:	7b3a      	ldrb	r2, [r7, #12]
 80081c2:	4911      	ldr	r1, [pc, #68]	@ (8008208 <UARTEx_SetNbDataToProcess+0x94>)
 80081c4:	5c8a      	ldrb	r2, [r1, r2]
 80081c6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80081ca:	7b3a      	ldrb	r2, [r7, #12]
 80081cc:	490f      	ldr	r1, [pc, #60]	@ (800820c <UARTEx_SetNbDataToProcess+0x98>)
 80081ce:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80081d0:	fb93 f3f2 	sdiv	r3, r3, r2
 80081d4:	b29a      	uxth	r2, r3
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80081dc:	7bfb      	ldrb	r3, [r7, #15]
 80081de:	7b7a      	ldrb	r2, [r7, #13]
 80081e0:	4909      	ldr	r1, [pc, #36]	@ (8008208 <UARTEx_SetNbDataToProcess+0x94>)
 80081e2:	5c8a      	ldrb	r2, [r1, r2]
 80081e4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80081e8:	7b7a      	ldrb	r2, [r7, #13]
 80081ea:	4908      	ldr	r1, [pc, #32]	@ (800820c <UARTEx_SetNbDataToProcess+0x98>)
 80081ec:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80081ee:	fb93 f3f2 	sdiv	r3, r3, r2
 80081f2:	b29a      	uxth	r2, r3
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80081fa:	bf00      	nop
 80081fc:	3714      	adds	r7, #20
 80081fe:	46bd      	mov	sp, r7
 8008200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008204:	4770      	bx	lr
 8008206:	bf00      	nop
 8008208:	080082c0 	.word	0x080082c0
 800820c:	080082c8 	.word	0x080082c8

08008210 <memset>:
 8008210:	4402      	add	r2, r0
 8008212:	4603      	mov	r3, r0
 8008214:	4293      	cmp	r3, r2
 8008216:	d100      	bne.n	800821a <memset+0xa>
 8008218:	4770      	bx	lr
 800821a:	f803 1b01 	strb.w	r1, [r3], #1
 800821e:	e7f9      	b.n	8008214 <memset+0x4>

08008220 <__libc_init_array>:
 8008220:	b570      	push	{r4, r5, r6, lr}
 8008222:	4d0d      	ldr	r5, [pc, #52]	@ (8008258 <__libc_init_array+0x38>)
 8008224:	4c0d      	ldr	r4, [pc, #52]	@ (800825c <__libc_init_array+0x3c>)
 8008226:	1b64      	subs	r4, r4, r5
 8008228:	10a4      	asrs	r4, r4, #2
 800822a:	2600      	movs	r6, #0
 800822c:	42a6      	cmp	r6, r4
 800822e:	d109      	bne.n	8008244 <__libc_init_array+0x24>
 8008230:	4d0b      	ldr	r5, [pc, #44]	@ (8008260 <__libc_init_array+0x40>)
 8008232:	4c0c      	ldr	r4, [pc, #48]	@ (8008264 <__libc_init_array+0x44>)
 8008234:	f000 f818 	bl	8008268 <_init>
 8008238:	1b64      	subs	r4, r4, r5
 800823a:	10a4      	asrs	r4, r4, #2
 800823c:	2600      	movs	r6, #0
 800823e:	42a6      	cmp	r6, r4
 8008240:	d105      	bne.n	800824e <__libc_init_array+0x2e>
 8008242:	bd70      	pop	{r4, r5, r6, pc}
 8008244:	f855 3b04 	ldr.w	r3, [r5], #4
 8008248:	4798      	blx	r3
 800824a:	3601      	adds	r6, #1
 800824c:	e7ee      	b.n	800822c <__libc_init_array+0xc>
 800824e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008252:	4798      	blx	r3
 8008254:	3601      	adds	r6, #1
 8008256:	e7f2      	b.n	800823e <__libc_init_array+0x1e>
 8008258:	080082d8 	.word	0x080082d8
 800825c:	080082d8 	.word	0x080082d8
 8008260:	080082d8 	.word	0x080082d8
 8008264:	080082dc 	.word	0x080082dc

08008268 <_init>:
 8008268:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800826a:	bf00      	nop
 800826c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800826e:	bc08      	pop	{r3}
 8008270:	469e      	mov	lr, r3
 8008272:	4770      	bx	lr

08008274 <_fini>:
 8008274:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008276:	bf00      	nop
 8008278:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800827a:	bc08      	pop	{r3}
 800827c:	469e      	mov	lr, r3
 800827e:	4770      	bx	lr
