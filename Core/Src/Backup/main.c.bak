/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * <h2><center>&copy; Copyright (c) 2019 STMicroelectronics.
  * All rights reserved.</center></h2>
  *
  * This software component is licensed by ST under BSD 3-Clause license,
  * the "License"; You may not use this file except in compliance with the
  * License. You may obtain a copy of the License at:
  *                        opensource.org/licenses/BSD-3-Clause
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "dma.h"
#include "spi.h"
#include "usart.h"
#include "gpio.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include "delay.h"
#include "usart.h"
//#include "matrix_keyb.h"
//#include "unixEpoch.h"
//#include "lcd_1602.h"
#include <stdio.h>
#include <stdlib.h>
#include <stdarg.h>
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */
typedef enum
{ Bit_RESET = 0,
  Bit_SET
}BitAction;

typedef enum
{
  MENU_STATE 		= 0,
  READ_TIME_STATE  	= 1,
  SET_TIME_STATE	= 2,
  ADJ_ALARM_STATE   = 3,
  WRONG_STATE	= 255
}StateMachine_TypeDef;

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/

/* USER CODE BEGIN PV */
char writeValue[16];

/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MPU_Config(void);
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
//Limpa uma variável string
void clrStr(char *strToClr)
{
	uint16_t cnt = 0;
	while(strToClr[cnt] != 0)
	{
		strToClr[cnt] = 0;
		cnt++;
	}
}

uint8_t LM75a_Read(uint16_t *temp)
{
	uint8_t buffer[2];
	uint8_t reg_ptr = 0x00;

	//Escreve o endereço e o pointer byte do escravo
	if(HAL_I2C_Master_Transmit(&hi2c2, 0x90, &reg_ptr, 1, 100) != HAL_OK)
	{
		return(255);
	}
	//Recebe o valor da temperatura e armazena na variável buffer
	if(HAL_I2C_Master_Receive(&hi2c2, 0x90, buffer, 2, 100) != HAL_OK)
	{
		return(255);
	}

	*temp = (((uint16_t)buffer[0])<<8) + buffer[1];

	return(0);
}

uint8_t MCP3201_Read(uint16_t *analog)
{
	uint8_t buffer[2];

	//Coloca a saída NSS em low
	HAL_GPIO_WritePin(DOUT_CS_GPIO_Port, DOUT_CS_Pin, GPIO_PIN_RESET);

	//Executa a leitura do valor analógico entregue pelo MCP3201
	if(HAL_SPI_Receive(&hspi2, buffer, 2, 100) != HAL_OK)
	{
		return(255);
	}

	*analog = (((uint16_t)buffer[0])<<8) + buffer[1];
	*analog = *analog >> 1;
	*analog = *analog & 0b0000111111111111;

	//Coloca a saída NSS em high
	HAL_GPIO_WritePin(DOUT_CS_GPIO_Port, DOUT_CS_Pin, GPIO_PIN_SET);

	return(0);
}

/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{

  /* USER CODE BEGIN 1 */
	RTC_DateTypeDef date;
	RTC_TimeTypeDef time;
	uint16_t tempRead;
	float TemperatureConv, fracPart;
	int16_t digitTemp, fracTemp;
	char numSymbol;
	uint16_t result;
  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_DMA_Init();
  MX_USART3_UART_Init();
  MX_SPI1_Init();
  /* USER CODE BEGIN 2 */
  __HAL_UART_ENABLE_IT(&huart2,UART_IT_RXNE);
  	Delayms(100);
  //Executa a inicialização do display LCD
  LCD_init();
  //Deixa apenas o display ligado, desliga cursor
  LCD_sendCMD(LCD_ON);
  Delayms(100);

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */


		if (MCP3201_Read(&result) == 0)
		{
			//Escreve valor atual do convesor AD no display e serial
			memset(&writeValue[0],0,sizeof(writeValue));
			sprintf(writeValue, "Valor AD: %04d ", result);
			USARTlib_Puts(&huart2, &writeValue[0]);
			LCD_gotoxy(0,1);
			LCD_sendCMD(CLEAR_LCD);
			LCD_write(&writeValue);
		}
		else
		{
			USARTlib_Puts(&huart2, "Falha sensor");
			LCD_gotoxy(0,1);
			LCD_sendCMD(CLEAR_LCD);
			LCD_write("Falha sensor");
		}


		Delayms(1000);

  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 4;
  RCC_OscInitStruct.PLL.PLLN = 10;
  RCC_OscInitStruct.PLL.PLLP = 2;
  RCC_OscInitStruct.PLL.PLLQ = 2;
  RCC_OscInitStruct.PLL.PLLR = 2;
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
  {
    Error_Handler();
  }
}

/* USER CODE BEGIN 4 */
//Chamada da função de callback do systick (1ms)
void HAL_SYSTICK_Callback()
{
	//Chama função de incremento de contadores da biblioteca de delay
	DelayIncCnt();
}

void RTC_Alarm_IRQHandler(void)
{
  if (LL_RTC_IsEnabledIT_ALR(RTC) != 0)
  {
    LL_RTC_ClearFlag_ALR(RTC);
    LL_RTC_WaitForSynchro(RTC);
    USARTlib_Puts(&huart2, "		ALARME!\r\n		ALARME!\r\n		ALARME!\r\n");
	LCD_gotoxy(0,1);
	LCD_sendCMD(CLEAR_LCD);
	LCD_write("ALARME! ALARME!");
  }
  /* Clear the EXTI's Flag for RTC Alarm */
  LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_17);

}

/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
  MPU_Region_InitTypeDef MPU_InitStruct = {0};

  /* Disables the MPU */
  HAL_MPU_Disable();

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
  MPU_InitStruct.BaseAddress = 0x0;
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
  MPU_InitStruct.SubRegionDisable = 0x87;
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);

}

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
#ifdef USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     tex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
